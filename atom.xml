<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Waver&#39;s Blog</title>
  
  <subtitle>个人知识博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://waver.me/"/>
  <updated>2018-05-20T13:02:03.651Z</updated>
  <id>https://waver.me/</id>
  
  <author>
    <name>Waver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的代码点和代码单元</title>
    <link href="https://waver.me/2018/05/20/Java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E7%82%B9%E5%92%8C%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83/"/>
    <id>https://waver.me/2018/05/20/Java中的代码点和代码单元/</id>
    <published>2018-05-20T12:27:39.000Z</published>
    <updated>2018-05-20T13:02:03.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转自<a href="https://blog.csdn.net/weizhaozhe/article/details/3909079" target="_blank" rel="noopener">Java中的代码点和代码单元</a>,原出处没找到,对不起原作者了</p></blockquote><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文介绍 Java 平台支持增补字符的方式。增补字符是 Unicode 标准中代码点超出 U+FFFF 的字符,因此它们无法在 Java 编程语言中描述为单个的 16 位实体(例如char数据类型)。这些字符一般极少用,但是,有些会在诸如中文或日文人名中用到,因此,在东亚国家,政府应用程序通常会要求支持这些字符。</p><p>  Java 平台目前正在改进,以便支持对增补字符的处理,这种改进对现有的应用程序影响微乎其微。新的低层 API 在需要时能够使用单个的字符运行。不过,大多数文本处理 API 均使用字符序列,例如String类或字符数组。现在,这些均解释为 UTF-16 序列,而且,这些 API 实现已转变为正确地处理增补字符。这些改进已融入 Java 2 平台 5.0 版,标准版 (J2SE)。</p><p>  除详细解释这些改进之外,本文同时为应用程序开发人员确定和实现必要的更改提供指导,以支持整个 Unicode 字符集的使用。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p> Unicode 最初设计是作为一种固定宽度的 16 位字符编码。在 Java 编程语言中,基本数据类型char初衷是通过提供一种简单的、能够包含任何字符的数据类型来充分利用这种设计的优点。不过,现在看来,16 位编码的所有 65,536 个字符并不能完全表示全世界所有正在使用或曾经使用的字符。于是,Unicode 标准已扩展到包含多达 1,112,064 个字符。那些超出原来的 16 位限制的字符被称作增补字符。Unicode 标准 2.0 版是第一个包含启用增补字符设计的版本,但是,直到 3.1 版才收入第一批增补字符集。由于 J2SE 的 5.0 版必须支持 Unicode 标准 4.0 版,因此它必须支持增补字符。</p><p>  对增补字符的支持也可能会成为东亚市场的一个普遍商业要求。政府应用程序会需要这些增补字符,以正确表示一些包含罕见中文字符的姓名。出版应用程序可能会需要这些增补字符,以表示所有的古代字符和变体字符。中国政府要求支持 GB18030(一种对整个 Unicode 字符集进行编码的字符编码标准),因此,如果是 Unicode 3.1 版或更新版本,则将包括增补字符。台湾标准 CNS-11643 包含的许多字符在 Unicode 3.1 中列为增补字符。香港政府定义了一种针对粤语的字符集,其中的一些字符是 Unicode 中的增补字符。最后,日本的一些供应商正计划利用增补字符空间中大量的专用空间收入 50,000 多个日文汉字字符变体,以便从其专有系统迁移至基于 Java 平台的解决方案。</p><p>   因此,Java 平台不仅需要支持增补字符,而且必须使应用程序能够方便地做到这一点。由于增补字符打破了 Java 编程语言的基础设计构想,而且可能要求对编程模型进行根本性的修改,因此,Java Community Process 召集了一个专家组,以期找到一个适当的解决方案。该小组被称为 JSR-204 专家组,使用Unicode 增补字符支持的 Java 技术规范请求的编号。从技术上来说,该专家组的决定仅适用于 J2SE 平台,但是由于 Java 2 平台企业版 (J2EE) 处于 J2SE 平台的最上层,因此它可以直接受益,我们期望 Java 2 平台袖珍版 (J2ME) 的配置也采用相同的设计方法。</p><p>   不过,在了解 JSR-204 专家组确定的解决方案之前,我们需要先理解一些术语。</p><h2 id="代码点、字符编码方案、UTF-16：这些是指什么？"><a href="#代码点、字符编码方案、UTF-16：这些是指什么？" class="headerlink" title="代码点、字符编码方案、UTF-16：这些是指什么？"></a>代码点、字符编码方案、UTF-16：这些是指什么？</h2><p>  不幸的是,引入增补字符使字符模型变得更加复杂了。在过去,我们可以简单地说“字符”,在一个基于 Unicode 的环境(例如 Java 平台)中,假定字符有 16 位,而现在我们需要更多的术语。我们会尽量介绍得相对简单一些 — 如需了解所有详细的讨论信息,您可以阅读Unicode 标准第 2 章或 Unicode 技术报告 17“字符编码模型”。Unicode 专业人士可略过所有介绍直接参阅本部分中的最后定义。</p><p>  字符是抽象的最小文本单位。它没有固定的形状(可能是一个字形),而且没有值。“A”是一个字符,“€”(德国、法国和许多其他欧洲国家通用货币的标志)也是一个字符。</p><p>   字符集是字符的集合。例如,汉字字符是中国人最先发明的字符,在中文、日文、韩文和越南文的书写中使用。</p><p>   编码字符集是一个字符集,它为每一个字符分配一个唯一数字。Unicode 标准的核心是一个编码字符集,字母“A”的编码为 004116 和字符“€”的编码为20AC16.Unicode 标准始终使用十六进制数字,而且在书写时在前面加上前缀“U+”,所以“A”的编码书写为“U+0041”。</p><p>   代码点是指可用于编码字符集的数字。编码字符集定义一个有效的代码点范围,但是并不一定将字符分配给所有这些代码点。有效的 Unicode 代码点范围是 U+0000 至 U+10FFFF.Unicode 4.0 将字符分配给一百多万个代码点中的 96,382 代码点。</p><pre><code>增补字符是代码点在 U+10000 至 U+10FFFF 范围之间的字符,也就是那些使用原始的 Unicode 的 16 位设计无法表示的字符。从 U+0000 至 U+FFFF 之间的字符集有时候被称为基本多语言面 (BMP)。因此,每一个 Unicode 字符要么属于 BMP,要么属于增补字符。字符编码方案是从一个或多个编码字符集到一个或多个固定宽度代码单元序列的映射。最常用的代码单元是字节，但是 16 位或 32 位整数也可用于内部处理。UTF-32、UTF-16 和 UTF-8 是 Unicode 标准的编码字符集的字符编码方案。UTF-32 即将每一个 Unicode 代码点表示为相同值的 32 位整数。很明显，它是内部处理最方便的表达方式，但是，如果作为一般字符串表达方式，则要消耗更多的内存。UTF-16 使用一个或两个未分配的 16 位代码单元的序列对 Unicode 代码点进行编码。值 U+0000 至 U+FFFF 编码为一个相同值的 16 位单元。增补字符编码为两个代码单元，第一个单元来自于高代理范围(U+D800 至 U+DBFF)，第二个单元来自于低代理范围(U+DC00 至 U+DFFF)。这在概念上可能看起来类似于多字节编码，但是其中有一个重要区别：值 U+D800 至 U+DFFF 保留用于 UTF-16;没有这些值分配字符作为代码点。这意味着，对于一个字符串中的每个单独的代码单元，软件可以识别是否该代码单元表示某个单单元字符，或者是否该代码单元是某个双单元字符的第一个或第二单元。这相当于某些传统的多字节字符编码来说是一个显著的改进，在传统的多字节字符编码中，字节值 0x41 既可能表示字母“A”，也可能是一个双字节字符的第二个字节。UTF-8 使用一至四个字节的序列对编码 Unicode 代码点进行编码。U+0000 至 U+007F 使用一个字节编码，U+0080 至 U+07FF 使用两个字节，U+0800 至 U+FFFF 使用三个字节，而 U+10000 至 U+10FFFF 使用四个字节。UTF-8 设计原理为：字节值 0x00 至 0x7F 始终表示代码点 U+0000 至 U+007F(Basic Latin 字符子集，它对应 ASCII 字符集)。这些字节值永远不会表示其他代码点，这一特性使 UTF-8 可以很方便地在软件中将特殊的含义赋予某些 ASCII 字符。</code></pre><h3 id="下表所示为几个字符不同表达方式的比较："><a href="#下表所示为几个字符不同表达方式的比较：" class="headerlink" title="下表所示为几个字符不同表达方式的比较："></a>下表所示为几个字符不同表达方式的比较：</h3><table><thead><tr><th style="text-align:center">Unicode 代码点</th><th style="text-align:center">U+0041</th><th style="text-align:center">U+00DF</th><th style="text-align:center">U+6771</th><th style="text-align:center">U+10400</th></tr></thead><tbody><tr><td style="text-align:center">表示字形</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">UTF-32 代码单元</td><td style="text-align:center">00000041</td><td style="text-align:center">000000DF</td><td style="text-align:center">00006771</td><td style="text-align:center">00010400</td></tr><tr><td style="text-align:center">UTF-16 代码单元</td><td style="text-align:center">0041</td><td style="text-align:center">00DF</td><td style="text-align:center">6771</td><td style="text-align:center">D801 DC00</td></tr><tr><td style="text-align:center">UTF-8 代码单元</td><td style="text-align:center">41</td><td style="text-align:center">C3 9F</td><td style="text-align:center">E6 9D B1</td><td style="text-align:center">F0 90 90 80</td></tr></tbody></table><p> 另外，本文在许多地方使用术语字符序列或char序列概括 Java 2 平台识别的所有字符序列的容器：char[]， java.lang.CharSequence的实现(例如String类)，和java.text.CharacterIterator的实现。</p><p> 这么多术语。它们与在 Java 平台中支持增补字符有什么关系呢？</p><h2 id="Java-平台中增补字符的设计方法"><a href="#Java-平台中增补字符的设计方法" class="headerlink" title="Java 平台中增补字符的设计方法"></a>Java 平台中增补字符的设计方法</h2><p>JSR-204 专家组必须作出的主要决定是如何在 Java API 中表示增补字符，包括单个字符和所有形式的字符序列。专家组考虑并排除了多种方法：</p><p> 重新定义基本类型char，使其具有 32 位，这样也会使所有形式的char序列成为 UTF-32 序列。</p><p>  在现有的 16 位类型char的基础上，为字符引入一种新的 32 位基本类型(例如，char32)。所有形式的 Char 序列均基于 UTF-16.</p><p>  在现有的 16 位类型char的基础上，为字符引入一种新的 32 位基本类型(例如，char32)。String和StringBuffer接受并行 API，并将它们解释为 UTF-16 序列或 UTF-32 序列;其他char序列继续基于 UTF-16.</p><p> 使用int表示增补的代码点。String和StringBuffer接受并行 API，并将它们解释为 UTF-16 序列或 UTF-32 序列;其他char序列继续基于 UTF-16.</p><p> 使用代理char对，表示增补代码点。所有形式的char序列基于 UTF-16.</p><p> 引入一种封装字符的类。String和StringBuffer接受新的 API，并将它们解释为此类字符的序列。</p><p> 使用一个CharSequence实例和一个索引的组合表示代码点</p><p>  在这些方法中，一些在早期就被排除了。例如，重新定义基本类型char，使其具有 32 位，这对于全新的平台可能会非常有吸引力，但是，对于 J2SE 来说，它会与现有的 Java 虚拟机1、序列化和其他接口不兼容，更不用说基于 UTF-32 的字符串要使用两倍于基于 UTF-16 的字符串的内存了。添加一种新类型的char32可能会简单一些，但是仍然会出现虚拟机和序列化方面的问题。而且，语言更改通常需要比 API 更改有更长的提前期，因此，前面两种方法会对增补字符支持带来无法接受的延迟。为了在余下的方法中筛选出最优方案，实现小组使用四种不同的方法，在大量进行低层字符处理的代码(java.util.regex包)中实现了对增补字符支持，并对这四种方法的难易程度和运行表现进行了比较。</p><p>  最终，专家组确定了一种分层的方法：</p><p>使用基本类型int在低层 API 中表示代码点，例如Character类的静态方法。<br>将所有形式的char序列均解释为 UTF-16 序列，并促进其在更高层级 API 中的使用。<br>提供 API，以方便在各种char和基于代码点的表示法之间的转换。</p><p>  在需要时，此方法既能够提供一种概念简明且高效的单个字符表示法，又能够充分利用通过改进可支持增补字符的现有 API.同时，还能够促进字符序列在单个字符上的应用，这一点一般对于国际化的软件很有好处。</p><p>  在这种方法中，一个char表示一个 UTF-16 代码单元，这样对于表示代码点有时并不够用。您会注意到，J2SE 技术规范现在使用术语代码点和 UTF-16 代码单元(表示法是相关的)以及通用术语字符(表示法与该讨论没有关系)。API 通常使用名称codePoint描述表示代码点的类型int的变量，而 UTF-16 代码单元的类型当然为char.我们将在下面两部分中了解到 J2SE 平台的实质变化 — 其中一部分介绍单个代码点的低层 API，另一部分介绍采用字符序列的高层接口。</p><p>  开放的增补字符：基于代码点的 API</p><p>  新增的低层 API 分为两大类：用于各种char和基于代码点的表示法之间转换的方法和用于分析和映射代码点的方法。</p><p>  最基本的转换方法是Character.toCodePoint(char high， char low)(用于将两个 UTF-16 代码单元转换为一个代码点)和Character.toChars(int codePoint)(用于将指定的代码点转换为一个或两个 UTF-16 代码单元，然后封装到一个char[]内。不过，由于大多数情况下文本以字符序列的形式出现，因此，另外提供codePointAt和codePointBefore方法，用于将代码点从各种字符序列表示法中提取出来：Character.codePointAt(char[] a， int index)和String.codePointBefore(int index)是两种典型的例子。在将代码点插入字符序列时，大多数情况下均有一些针对StringBuffer和StringBuilder类的appendCodePoint(int codePoint)方法，以及一个用于提取表示代码点的int[]的String构建器。</p><p>  几种用于分析代码单元和代码点的方法有助于转换过程：Character 类中的isHighSurrogate和isLowSurrogate方法可以识别用于表示增补字符的char值;charCount(int codePoint)方法可以确定是否需要将某个代码点转换为一个或两个char.但是，大多数基于代码点的方法均能够对所有 Unicode 字符实现基于char的旧方法对 BMP 字符所实现的功能。以下是一些典型例子：</p><p>  Character.isLetter(int codePoint)可根据 Unicode 标准识别字母。<br>  Character.isJavaIdentifierStart(int codePoint)可根据 Java 语言规范确定代码点是否可以启动标识符。<br>  Character.UnicodeBlock.of(int codePoint)可搜索代码点所属的 Unicode 字符子集。<br>  Character.toUpperCase(int codePoint)可将给定的代码点转换为其大写等值字符。尽管此方法能够支持增补字符，但是它仍然不能解决根本的问题，即在某些情况下，逐个字符的转换无法正确完成。例如，德文字符“”？””应该转换为“SS”，这需要使用String.toUpperCase方法。</p><p>  注意大多数接受代码点的方法并不检查给定的int值是否处于有效的 Unicode 代码点范围之内(如上所述，只有 0x0 至 0x10FFFF 之间的范围是有效的)。在大多数情况下，该值是以确保其有效的方法产生的，在这些低层 API 中反复检查其有效性可能会对系统性能造成负面的影响。在无法确保有效性的情况下，应用程序必须使用Character.isValidCodePoint方法确保代码点有效。大多数方法对于无效的代码点采取的行为没有特别加以指定，不同的实现可能会有所不同。</p><p>  API 包含许多简便的方法，这些方法可使用其他低层的 API 实现，但是专家组觉得，这些方法很常用，将它们添加到 J2SE 平台上很有意义。不过，专家组也排除了一些建议的简便方法，这给我们提供了一次展示自己实现此类方法能力的机会。例如，专家组经过讨论，排除了一种针对String类的新构建器(该构建器可以创建一个保持单个代码点的String)。以下是使应用程序使用现有的 API 提供功能的一种简便方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建仅含有指定代码点的新 String.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">String <span class="title">newString</span><span class="params">(<span class="keyword">int</span> codePoint)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(Character.toChars(codePoint));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 您会注意到，在这个简单的实现中，toChars方法始终创建一个中间数列，该数列仅使用一次即立即丢弃。如果该方法在您的性能评估中出现，您可能会希望将其优化为针对最为普通的情况，即该代码点为 BMP 字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建仅含有指定代码点的新 String.</span></span><br><span class="line"><span class="comment">* 针对 BMP 字符优化的版本。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">newString</span><span class="params">(<span class="keyword">int</span> codePoint)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Character.charCount(codePoint) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf((<span class="keyword">char</span>) codePoint);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(Character.toChars(codePoint));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，如果您需要创建许多个这样的 string，则可能希望编写一个重复使用toChars方法所使用的数列的通用版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建每一个均含有一个指定</span></span><br><span class="line"><span class="comment">* 代码点的新 String.</span></span><br><span class="line"><span class="comment">* 针对 BMP 字符优化的版本。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] newStrings(<span class="keyword">int</span>[] codePoints)&#123;</span><br><span class="line">    String[] result = <span class="keyword">new</span> String[codePoints.length];</span><br><span class="line">    <span class="keyword">char</span>[] codeUnits = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; codePoints.length; i++) &#123;</span><br><span class="line">         <span class="keyword">int</span> count = Character.toChars(codePoints[i], codeUnits, <span class="number">0</span>);</span><br><span class="line">        result[i] = <span class="keyword">new</span> String(codeUnits, <span class="number">0</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  不过，最终您可能会发现，您需要的是一个完全不同的解决方案。新的构建器String(int codePoint)实际上建议作为String.valueOf(char)的一个基于代码点的备选方案。在很多情况下，此方法用于消息生成的环境，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Character "</span> + String.valueOf(<span class="keyword">char</span>) + <span class="string">" is invalid."</span>);</span><br></pre></td></tr></table></figure><p>新的格式化 API支持增补文字，提供一种更加简单的备选方案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"Character %c is invalid.%n"</span>, codePoint);</span><br></pre></td></tr></table></figure></p><p>使用此高层 API 不仅简捷，而它有很多特殊的优点：它可以避免串联(串联会使消息很难本地化)，并将需要移进资源包 (resource bundle) 的字符串数量从两个减少到一个。</p><h2 id="增补字符透视：功能增强"><a href="#增补字符透视：功能增强" class="headerlink" title="增补字符透视：功能增强"></a>增补字符透视：功能增强</h2><p>在支持使用增补字符的 Java 2 平台中的大部分更改没有反映到新的 API 内。一般预期是，处理字符序列的所有接口将以适合其功能的方式处理增补字符。本部分着重讲述为达到此预期所作一些功能增强。</p><h2 id="Java-编程语言中的标识符"><a href="#Java-编程语言中的标识符" class="headerlink" title="Java 编程语言中的标识符"></a>Java 编程语言中的标识符</h2><p>  Java 语言规范指出所有 Unicode 字母和数字均可用于标识符。许多增补字符是字母或数字，因此 Java 语言规范已经参照新的基于代码点的方法进行更新，以在标识符内定义合法字符。为使用这些新方法，需要检测标识符的 javac 编译器和其他工具都进行了修订。</p><h3 id="库内的增补字符支持"><a href="#库内的增补字符支持" class="headerlink" title="库内的增补字符支持"></a>库内的增补字符支持</h3><p>许多 J2SE 库已经过增强，可以通过现有接口支持增补字符。以下是一些例子：</p><p>  字符串大小写转换功能已更新，可以处理增补字符，也可以实现 Unicode 标准中规定的特殊大小写规则。<br>  java.util.regex包已更新，这样模式字符串和目标字符串均可以包含增补字符并将其作为完整单元处理。<br>  现在，在java.text包内进行整理处理时，会将增补字符看作完整单元。<br>  java.text.Bidi类已更新，可以处理增补字符和 Unicode 4.0 中新增的其他字符。请注意，Cypriot Syllabary 字符子集内的增补字符具有从右至左的方向性。</p><p>  Java 2D API 内的字体渲染和打印技术已经过增强，可以正确渲染和测量包含增补字符的字符串。</p><p>  Swing 文本组件实现已更新，可以处理包含增补字符的文本。</p><h3 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h3><p>  只有很少的字符编码可以表示增补字符。如果是基于 Unicode 的编码(如 UTF-8 和 UTF-16LE)，则旧版的 J2RE 内的字符转换器已经按照正确处理增补字符的方式实现转换。对于 J2RE 5.0，可以表示增补字符的其他编码的转换器已更新：GB18030、x-EUC-TW(现在实现所有 CNS 11643 层面)和 Big5-HKSCS(现在实现 HKSCS-2001)。</p><h2 id="在源文件内表示增补字符"><a href="#在源文件内表示增补字符" class="headerlink" title="在源文件内表示增补字符"></a>在源文件内表示增补字符</h2><p>  在 Java 编程语言源文件中，如果使用可以直接表示增补字符的字符编码，则使用增补字符最为方便。UTF-8 是最佳的选择。在所使用的字符编码无法直接表示字符的情况下，Java 编程语言提供一种 Unicode 转义符语法。此语法没有经过增强，无法直接表示增补字符。而是使用两个连续的 Unicode 转义符将其表示为 UTF-16 字符表示法中的两个编码单元。例如，字符 U+20000 写作“/uD840/uDC00”。您也许不愿意探究这些转义序列的含义;最好是写入支持所需增补字符的编码，然后使用一种工具(如 native2ascii)将其转换为转义序列。</p><p>  遗憾的是，由于其编码问题，属性文件仍局限于 ISO 8859-1(除非您的应用程序使用新的 XML 格式)。这意味着您始终必须对增补字符使用转义序列，而且可能要使用不同的编码进行编写，然后使用诸如 native2ascii 的工具进行转换。</p><h3 id="经修订的-UTF-8"><a href="#经修订的-UTF-8" class="headerlink" title="经修订的 UTF-8"></a>经修订的 UTF-8</h3><p>  Java 平台对经修订的 UTF-8 已经很熟悉，但是，问题是应用程序开发人员在可能包含增补字符的文本和 UTF-8 之间进行转换时需要更加留神。需要特别注意的是，某些 J2SE 接口使用的编码与 UTF-8 相似但与其并不兼容。以前，此编码有时被称为“Java modified UTF-8”(经 Java 修订的 UTF-8)或(错误地)直接称为“UTF-8”。对于 J2SE 5.0，其说明文档正在更新，此编码将统称为“modified UTF-8”(经修订的 UTF-8)。</p><p>  经修订的 UTF-8 和标准 UTF-8 之间之所以不兼容，其原因有两点。其一，经修订的 UTF-8 将字符 U+0000 表示为双字节序列 0xC0 0x80，而标准 UTF-8 使用单字节值 0x0.其二，经修订的 UTF-8 通过对其 UTF-16 表示法的两个代理代码单元单独进行编码表示增补字符。每个代理代码单元由三个字节来表示，共有六个字节。而标准 UTF-8 使用单个四字节序列表示整个字符。</p><p>  Java 虚拟机及其附带的接口(如 Java 本机接口、多种工具接口或 Java 类文件)在java.io.DataInput和DataOutput接口和类中使用经修订的 UTF-8 实现或使用这些接口和类，并进行序列化。Java 本机接口提供与经修订的 UTF-8 之间进行转换的例程。而标准 UTF-8 由String类、java.io.InputStreamReader和OutputStreamWriter类、java.nio.charset设施 (facility) 以及许多其上层的 API 提供支持。</p><p>  由于经修订的 UTF-8 与标准的 UTF-8 不兼容，因此切勿同时使用这两种版本的编码。经修订的 UTF-8 只能与上述的 Java 接口配合使用。在任何其他情况下，尤其对于可能来自非基于 Java 平台的软件的或可能通过其编译的数据流，必须使用标准的 UTF-8.需要使用标准的 UTF-8 时，则不能使用 Java 本机接口例程与经修订的 UTF-8 进行转换。</p><h3 id="在应用程序内支持增补字符"><a href="#在应用程序内支持增补字符" class="headerlink" title="在应用程序内支持增补字符"></a>在应用程序内支持增补字符</h3><p>  现在，对大多数读者来说最为重要的问题是：必须对应用程序进行哪些更改才能支持增补字符？</p><p>  答案取决于在应用程序中进行哪种类型的文本处理和使用哪些 Java 平台 API.对于仅以各种形式char序列([char[]、java.lang.CharSequence实现、java.text.CharacterIterator实现)处理文本和仅使用接受和退回序列(如char序列)的 Java API 的应用程序，可能根本不需要进行任何更改。Java 平台 API 的实现应该能够处理增补字符。</p><p>  对于本身解释单个字符、将单个字符传送给 Java 平台 API 或调用能够返回单个字符的方法的应用程序，则需要考虑这些字符的有效值。在很多情况下，往往不要求支持增补字符。例如，如果某应用程序搜索char序列中的 HTML 标记，并逐一检查每个char，它会知道这些标记仅使用 Basic Latin 字符子集中的字符。如果所搜索的文本含有增补字符，则这些字符不会与标记字符混淆，因为 UTF-16 使用代码单元表示增补字符，而代码单元的值不会用于 BMP 字符。</p><p>  只有在某应用程序本身解释单个字符、将单个字符传送给 Java 平台 API 或调用能够返回单个字符的方法且这些字符可能为增补字符时，才必须更改该应用程序。在提供使用char序列的并行 API 时，最好转而使用此类 API.在其他情况下，有必要使用新的 API 在char和基于代码点的表示法之间进行转换，并调用基于代码点的 API.当然，如果您发现在 J2SE 5.0 中有更新、更方便的 API，使您能够支持增补字符并同时简化代码(如上格式化范例中所述)，则没有必要这样做。</p><p>  您可能会犹豫，是将所有文本转换为代码点表示法(即int[])然后在该表示法中处理，还是在大多数情况下仍采用char序列，仅在需要时转换为代码点，两者之间孰优孰劣很难确定。当然，总体来说，Java 平台 API 相对于char序列肯定具有一定的优势，而且采用 Java 平台 API 可以节省内存空间。</p><p>  对于需要与 UTF-8 之间进行转换的应用程序，还需要认真考虑是需要标准的 UTF-8 还是经修订的 UTF-8，并针对每种 UTF-8 采用适当的 Java 平台。“经修订的 UTF-8”部分介绍进行正确选择所需的信息。</p><h3 id="使用增补字符测试应用程序"><a href="#使用增补字符测试应用程序" class="headerlink" title="使用增补字符测试应用程序"></a>使用增补字符测试应用程序</h3><p>  经过前面部分的介绍后，无论您是否需要修订应用程序，测试应用程序是否运行正常始终是一种正确的做法。对于不含有图形用户界面的应用程序，有关“在源文件内表示增补字符”　的信息有助于设计测试用例。以下是有关使用图形用户界面进行测试的补充信息。</p><p>  对于文本输入，Java 2 SDK提供用于接受“/Uxxxxxx”格式字符串的代码点输入方法，这里大写的“U”表示转义序列包含六个十六进制数字，因此允许使用增补字符。小写的“u”表示转义序列“/uxxxx”的原始格式。您可以在 J2SDK 目录 demo/jfc/CodePointIM 内找到此输入方法及其说明文档。</p><p>  对于字体渲染，您需要至少能够渲染一些增补字符的字体。其中一种此类字体为 James Kass 的Code2001字体，它提供手写体字形(如 Deseret 和 Old Italic)。利用 Java 2D 库中提供新功能，您只需将该字体安装到 J2RE 的 lib/fonts/fallback 目录内即可，然后它可自动添加至在 2D 和 XAWT 渲染时使用的所有逻辑字体 — 无需编辑字体配置文件。</p><p>  至此，您就可以确认，您的应用程序能够完全支持增补字符了！</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>  对增补字符的支持已经引入 Java 平台，大部分应用程序无需更改代码即可处理这些字符。解释单个字符的应用程序可以在Character类和多种CharSequence子类中使用基于代码点的新 API.</p><h3 id="以下是Unicode和UTF-8之间的转换关系表："><a href="#以下是Unicode和UTF-8之间的转换关系表：" class="headerlink" title="以下是Unicode和UTF-8之间的转换关系表："></a>以下是Unicode和UTF-8之间的转换关系表：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">U-00000000 - U-0000007F： 0xxxxxxx</span><br><span class="line">U-00000080 - U-000007FF： 110xxxxx 10xxxxxx</span><br><span class="line">U-00000800 - U-0000FFFF： 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">U-00010000 - U-001FFFFF： 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br><span class="line">U-00200000 - U-03FFFFFF： 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br><span class="line">U-04000000 - U-7FFFFFFF： 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><ul><li>Byte 数组转整数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bytes2int</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mask=<span class="number">0xff</span>;</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">             res&lt;&lt;=<span class="number">8</span>;</span><br><span class="line">             temp=b[i]&amp;mask;</span><br><span class="line">             res|=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>整数转byte数组：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">byte</span>[] int2bytes(<span class="keyword">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> mask=<span class="number">0xff</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            b[i]=(<span class="keyword">byte</span>)(num&gt;&gt;&gt;(<span class="number">24</span>-i*<span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文转自&lt;a href=&quot;https://blog.csdn.net/weizhaozhe/article/details/3909079&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java中的代码点和代码单元&lt;/a&gt;,原出处
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
      <category term="Java 基础" scheme="https://waver.me/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>CentOS搭建git</title>
    <link href="https://waver.me/2018/05/13/CentOS%E6%90%AD%E5%BB%BAgit/"/>
    <id>https://waver.me/2018/05/13/CentOS搭建git/</id>
    <published>2018-05-13T14:14:56.000Z</published>
    <updated>2018-05-13T14:14:56.533Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS实现浏览器录音并将录音文件上传</title>
    <link href="https://waver.me/2018/05/13/JS%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BD%95%E9%9F%B3%E5%B9%B6%E5%B0%86%E5%BD%95%E9%9F%B3%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://waver.me/2018/05/13/JS实现浏览器录音并将录音文件上传/</id>
    <published>2018-05-13T14:11:15.000Z</published>
    <updated>2018-05-20T13:09:35.455Z</updated>
    
    <content type="html"><![CDATA[<p>原使用recorder.js 但发现功能实现后只能通过本地 127.0.0.1 或 localhost 访问<br>无法适应web项目, 而且存在浏览器版本不兼容(目前只知道可以支持Chrome 66.0+ 版本, 其他浏览器均挂掉)和浏览器权限问题, 由于本人JS水平有限,所以先挖个坑, 以后来填(ง •_•)ง</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原使用recorder.js 但发现功能实现后只能通过本地 127.0.0.1 或 localhost 访问&lt;br&gt;无法适应web项目, 而且存在浏览器版本不兼容(目前只知道可以支持Chrome 66.0+ 版本, 其他浏览器均挂掉)和浏览器权限问题, 由于本人JS水平有限
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jackson Direct self-reference leading to cycle 异常解决</title>
    <link href="https://waver.me/2018/05/13/Jackson-Direct-self-reference-leading-to-cycle-%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3/"/>
    <id>https://waver.me/2018/05/13/Jackson-Direct-self-reference-leading-to-cycle-异常解决/</id>
    <published>2018-05-13T13:51:15.000Z</published>
    <updated>2018-05-13T14:26:38.450Z</updated>
    
    <content type="html"><![CDATA[<p>错误信息如图所示:<br><img src="https://waver.me/Album/images/post/2018/05/jackson_2.png" alt=""><br>代码如下:<br><img src="https://waver.me/Album/images/post/2018/05/jackson_1.png" alt=""><br>由错误信息可以看出保存是因为<code>PageResult</code>类中使用了<code>this</code>对象, 从而导致了自引用异常,将其改写成返回属性值后可回复正常<br><a href="https://stackoverflow.com/questions/10446891/jackson-self-reference-leading-to-cycle" target="_blank" rel="noopener">StackOverFlow 上 的</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;错误信息如图所示:&lt;br&gt;&lt;img src=&quot;https://waver.me/Album/images/post/2018/05/jackson_2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;代码如下:&lt;br&gt;&lt;img src=&quot;https://waver.me/Album/ima
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
      <category term="Exception" scheme="https://waver.me/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Java中的逆变与协变</title>
    <link href="https://waver.me/2018/04/01/Java%E4%B8%AD%E7%9A%84%E9%80%86%E5%8F%98%E4%B8%8E%E5%8D%8F%E5%8F%98/"/>
    <id>https://waver.me/2018/04/01/Java中的逆变与协变/</id>
    <published>2018-04-01T14:47:11.000Z</published>
    <updated>2018-04-01T15:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转自&gt; <a href="http://www.cnblogs.com/en-heng/" target="_blank" rel="noopener">Treant – Java中的逆变与协变</a></p><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>看下面一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Number num = <span class="keyword">new</span> Integer(<span class="number">1</span>);  </span><br><span class="line">ArrayList&lt;Number&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">//type mismatch</span></span><br><span class="line"></span><br><span class="line">List&lt;? extends Number&gt; list = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> Integer(<span class="number">1</span>)); <span class="comment">//error</span></span><br><span class="line">list.add(<span class="keyword">new</span> Float(<span class="number">1.2f</span>));  <span class="comment">//error</span></span><br></pre></td></tr></table></figure><p>有人会纳闷，为什么<code>Number</code>的对象可以由<code>Integer</code>实例化，而<code>ArrayList&lt;Number&gt;</code>的对象却不能由<code>ArrayList&lt;Integer&gt;</code>实例化？list中的<code>&lt;? extends Number&gt;</code>声明其元素是<code>Number</code>或<code>Number</code>的派生类，为什么不能add <code>Integer</code>和<code>Float</code>?为了解决这些问题，我们需要了解Java中的逆变和协变以及泛型中通配符用法。</p><h2 id="1-逆变与协变"><a href="#1-逆变与协变" class="headerlink" title="1. 逆变与协变"></a>1. 逆变与协变</h2><p>在介绍逆变与协变之前，先引入<code>Liskov替换原则</code>（Liskov Substitution Principle, LSP）。</p><h3 id="Liskov替换原则"><a href="#Liskov替换原则" class="headerlink" title="Liskov替换原则"></a>Liskov替换原则</h3><p><strong>LSP由Barbara Liskov于1987年提出，其定义如下：</strong></p><blockquote><p>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p></blockquote><p>LSP包含以下四层含义：</p><ul><li>子类完全拥有父类的方法，且具体子类必须实现父类的抽象方法。</li><li>子类中可以增加自己的方法。</li><li>当子类覆盖或实现父类的方法时，方法的形参要比父类方法的更为宽松。</li><li>当子类覆盖或实现父类的方法时，方法的返回值要比父类更严格。</li></ul><p>前面的两层含义比较好理解，后面的两层含义会在下文中详细解释。根据LSP，我们在实例化对象的时候，可以用其子类进行实例化，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number num = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>逆变与协变用来描述类型转换（type transformation）后的继承关系，其定义：如果A、B表示类型，f(⋅)表示类型转换，≤表示继承关系(比如，A≤B表示A是由B派生出来的子类);</p><ul><li>f(⋅)是逆变（contravariant）的，当A≤B时有f(B)≤f(A)成立；</li><li>f(⋅)是协变（covariant）的，当A≤B时有f(A)≤f(B)成立；</li><li>f(⋅)是不变（invariant）的，当A≤B时上述两个式子均不成立，即f(A)与f(B)相互之间没有继承关系。</li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>接下来，我们看看Java中的常见类型转换的协变性、逆变性或不变性。</p><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>令<code>f(A)=ArrayList&lt;A&gt;</code>，那么f(⋅)时逆变、协变还是不变的呢？如果是逆变，则<code>ArrayList&lt;Integer&gt;</code>是<code>ArrayList&lt;Number&gt;</code>的父类型；如果是协变，则<code>ArrayList&lt;Integer&gt;</code>是<code>ArrayList&lt;Number&gt;</code>的子类型；如果是不变，二者没有相互继承关系。开篇代码中用<code>ArrayList&lt;Integer&gt;</code>实例化<code>list</code>的对象错误，则说明泛型是不变的。</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>令<code>f(A)=[]A</code>，容易证明数组是协变的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number[] numbers = <span class="keyword">new</span> Integer[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>调用方法<code>result = method(n)</code>；根据Liskov替换原则，传入形参n的类型应为method形参的子类型，即<code>typeof(n)≤typeof(method&#39;s parameter)</code>；result应为method返回值的基类型，即<code>typeof(methods&#39;s return)≤typeof(result)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Number <span class="title">method</span><span class="params">(Number num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object result = method(<span class="keyword">new</span> Integer(<span class="number">2</span>)); <span class="comment">//correct</span></span><br><span class="line">Number result = method(<span class="keyword">new</span> Object()); <span class="comment">//error</span></span><br><span class="line">Integer result = method(<span class="keyword">new</span> Integer(<span class="number">2</span>)); <span class="comment">//error</span></span><br></pre></td></tr></table></figure><p>在Java 1.4中，子类覆盖（override）父类方法时，形参与返回值的类型必须与父类保持一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function">Number <span class="title">method</span><span class="params">(Number n)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Number <span class="title">method</span><span class="params">(Number n)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Java 1.5开始，子类覆盖父类方法时允许协变返回更为具体的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function">Number <span class="title">method</span><span class="params">(Number n)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Integer <span class="title">method</span><span class="params">(Number n)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-泛型中的通配符"><a href="#2-泛型中的通配符" class="headerlink" title="2. 泛型中的通配符"></a>2. 泛型中的通配符</h2><h3 id="实现泛型的协变与逆变"><a href="#实现泛型的协变与逆变" class="headerlink" title="实现泛型的协变与逆变"></a>实现泛型的协变与逆变</h3><p>  Java中泛型是不变的，可有时需要实现逆变与协变，怎么办呢？这时，通配符?派上了用场：</p><p><code>&lt;? extends&gt;</code>实现了泛型的协变，比如：<br><code>List&lt;? extends Number&gt; list = new ArrayList&lt;Integer&gt;();</code><br><code>&lt;? super&gt;</code>实现了泛型的逆变，比如：<br><code>List&lt;? super Number&gt; list = new ArrayList&lt;Object&gt;();</code></p><h3 id="extends与super"><a href="#extends与super" class="headerlink" title="extends与super"></a>extends与super</h3><p>为什么（开篇代码中）<code>List&lt;? extends Number&gt; list</code>在add <code>Integer</code>和<code>Float</code>会发生编译错误？首先，我们看看add的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用add方法时，泛型E自动变成了<code>&lt;? extends Number&gt;</code>，其表示list所持有的类型为在<code>Number</code>与<code>Number</code>派生子类中的某一类型，其中包含<code>Integer</code>类型却又不特指为<code>Integer</code>类型（<code>Integer</code>像个备胎一样！！！），故add <code>Integer</code>时发生编译错误。为了能调用add方法，可以用<code>super</code>关键字实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? <span class="keyword">super</span> Number&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Float(<span class="number">1.2f</span>));</span><br></pre></td></tr></table></figure><p><code>&lt;? super Number&gt;</code>表示list所持有的类型为在<code>Number</code>与<code>Number</code>的基类中的某一类型，其中<code>Integer</code>与<code>Float</code>必定为这某一类型的子类；所以add方法能被正确调用。从上面的例子可以看出，<code>extends</code>确定了泛型的上界，而<code>super</code>确定了泛型的下界。</p><h3 id="PECS"><a href="#PECS" class="headerlink" title="PECS"></a>PECS</h3><p>现在问题来了：究竟什么时候用extends什么时候用super呢？《Effective Java》给出了答案：</p><blockquote><p>PECS: producer-extends, consumer-super.</p></blockquote><p>比如，一个简单的<code>Stack API</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Stack</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span>:</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要实现<code>pushAll(Iterable&lt;E&gt; src)</code>方法，将src的元素逐一入栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushAll</span><span class="params">(Iterable&lt;E&gt; src)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(E e : src)</span><br><span class="line">        push(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有一个实例化<code>Stack&lt;Number&gt;</code>的对象stack，src有<code>Iterable&lt;Integer&gt;</code>与 <code>Iterable&lt;Float&gt;</code>；在调用pushAll方法时会发生type mismatch错误，因为Java中泛型是不可变的，<code>Iterable&lt;Integer&gt;</code>与 <code>Iterable&lt;Float&gt;</code>都不是<code>Iterable&lt;Number&gt;</code>的子类型。因此，应改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wildcard type for parameter that serves as an E producer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushAll</span><span class="params">(Iterable&lt;? extends E&gt; src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (E e : src)</span><br><span class="line">        push(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要实现<code>popAll(Collection&lt;E&gt; dst)</code>方法，将<code>Stack</code>中的元素依次取出add到dst中，如果不用通配符实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// popAll method without wildcard type - deficient!</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">popAll</span><span class="params">(Collection&lt;E&gt; dst)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!isEmpty())</span><br><span class="line">        dst.add(pop());   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，假设有一个实例化<code>Stack&lt;Number&gt;</code>的对象stack，dst为<code>Collection&lt;Object&gt;</code>；调用popAll方法是会发生type mismatch错误，因为<code>Collection&lt;Object&gt;</code>不是<code>Collection&lt;Number&gt;</code>的子类型。因而，应改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wildcard type for parameter that serves as an E consumer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">popAll</span><span class="params">(Collection&lt;? <span class="keyword">super</span> E&gt; dst)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!isEmpty())</span><br><span class="line">        dst.add(pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述例子中，在调用pushAll方法时生产了E 实例（produces E instances），在调用popAll方法时dst消费了E 实例（consumes E instances）。Naftalin与Wadler将PECS称为 <strong>Get and Put Principle</strong>。</p><p><code>java.util.Collections</code>的copy方法(JDK1.7)完美地诠释了<code>PECS</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(List&lt;? <span class="keyword">super</span> T&gt; dest, List&lt;? extends T&gt; src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> srcSize = src.size();</span><br><span class="line">    <span class="keyword">if</span> (srcSize &gt; dest.size())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Source does not fit in dest"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (srcSize &lt; COPY_THRESHOLD ||</span><br><span class="line">        (src <span class="keyword">instanceof</span> RandomAccess &amp;&amp; dest <span class="keyword">instanceof</span> RandomAccess)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;srcSize; i++)</span><br><span class="line">            dest.set(i, src.get(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ListIterator&lt;? <span class="keyword">super</span> T&gt; di=dest.listIterator();</span><br><span class="line">        ListIterator&lt;? extends T&gt; si=src.listIterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;srcSize; i++) &#123;</span><br><span class="line">            di.next();</span><br><span class="line">            di.set(si.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PECS总结："><a href="#PECS总结：" class="headerlink" title="PECS总结："></a>PECS总结：</h4><ul><li>要从泛型类取数据时，用extends；</li><li>要往泛型类写数据时，用super；</li><li>既要取又要写，就不用通配符（即extends与super都不用）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文转自&amp;gt; &lt;a href=&quot;http://www.cnblogs.com/en-heng/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Treant – Java中的逆变与协变&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; 
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
      <category term="Java源码" scheme="https://waver.me/categories/Java/Java%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>RandomAccess接口理解</title>
    <link href="https://waver.me/2018/04/01/RandomAccess%E6%8E%A5%E5%8F%A3%E7%90%86%E8%A7%A3/"/>
    <id>https://waver.me/2018/04/01/RandomAccess接口理解/</id>
    <published>2018-04-01T14:47:11.000Z</published>
    <updated>2018-04-01T15:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转自&gt; <a href="https://blog.csdn.net/stick2it/article/details/53469910" target="_blank" rel="noopener">Stick2It — RandomAccess接口理解</a></p><p>根据javadoc上面的的解释是：</p><p>RandomAccess 是一个标记接口，用于标明实现该接口的List支持快速随机访问，主要目的是使算法能够在随机和顺序访问的list中表现的更加高效。</p><p>我们可以简单的看下Collections下的binarySearch方法的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">view plain copy</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; list, T key)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)  </span><br><span class="line">            <span class="keyword">return</span> Collections.indexedBinarySearch(list, key);  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            <span class="keyword">return</span> Collections.iteratorBinarySearch(list, key);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从源码中我们可以看到，在进行二分查找的时候，list会先判断是否是RandomAccess也即是否实现了RandomAccess接口，接着在调用想用的二分查找算法来进行，（其中: BINARYSEARCH_THRESHOLD Collections的一个常量（5000），它是二分查找的阀值。）如果实现了RandomAccess接口的List，执行indexedBinarySearch方法，否则执行 iteratorBinarySearch方法。</p><p>分别看下这两个方法的实现:</p><h4 id="indexedBinarySearch-方法"><a href="#indexedBinarySearch-方法" class="headerlink" title="indexedBinarySearch 方法:"></a>indexedBinarySearch 方法:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">view plain copy</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexedBinarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; list, T key)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> high = list.size()-<span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;  </span><br><span class="line">            <span class="keyword">int</span> mid = (low + high) &gt;&gt;&gt; <span class="number">1</span>;  </span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> T&gt; midVal = list.get(mid);  </span><br><span class="line">            <span class="keyword">int</span> cmp = midVal.compareTo(key);  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)  </span><br><span class="line">                low = mid + <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)  </span><br><span class="line">                high = mid - <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">// key found  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found  </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>indexedBinarySearch 方法是直接通过get来访问元素</p><p>iteratorBinarySearch方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">view plain copy</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">iteratorBinarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; list, T key)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> high = list.size()-<span class="number">1</span>;  </span><br><span class="line">        ListIterator&lt;? extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; i = list.listIterator();  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;  </span><br><span class="line">            <span class="keyword">int</span> mid = (low + high) &gt;&gt;&gt; <span class="number">1</span>;  </span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> T&gt; midVal = get(i, mid);  </span><br><span class="line">            <span class="keyword">int</span> cmp = midVal.compareTo(key);  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)  </span><br><span class="line">                low = mid + <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)  </span><br><span class="line">                high = mid - <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">// key found  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found  </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>iteratorBinarySearch中ListIterator来查找相应的元素</p><p>javadoc中特别指出:</p><p>It is recognized that the distinction between random and sequential access is often fuzzy. For example, some List implementations provide asymptotically linear access times if they get huge, but constant access times in practice. Such a Listimplementation should generally implement this interface. As a rule of thumb, a List implementation should implement this interface if, for typical instances of the class, this loop:</p><pre><code>for (int i=0, n=list.size(); i &lt; n; i++)    list.get(i);</code></pre><p>runs faster than this loop:<br>     for (Iterator i=list.iterator(); i.hasNext(); )<br>         i.next();</p><h3 id="总结：实现RandomAccess接口的的List可以通过简单的for循环来访问数据比使用iterator访问来的高效快速。"><a href="#总结：实现RandomAccess接口的的List可以通过简单的for循环来访问数据比使用iterator访问来的高效快速。" class="headerlink" title="总结：实现RandomAccess接口的的List可以通过简单的for循环来访问数据比使用iterator访问来的高效快速。"></a>总结：实现RandomAccess接口的的List可以通过简单的for循环来访问数据比使用iterator访问来的高效快速。</h3><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档:"></a>参考文档:<a href="https://docs.oracle.com/javase/7/docs/api/java/util/RandomAccess.html" target="_blank" rel="noopener"></a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文转自&amp;gt; &lt;a href=&quot;https://blog.csdn.net/stick2it/article/details/53469910&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stick2It — RandomAccess接口理解&lt;/a&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
      <category term="Java源码" scheme="https://waver.me/categories/Java/Java%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IDEA性能调优</title>
    <link href="https://waver.me/2018/03/30/IDEA%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <id>https://waver.me/2018/03/30/IDEA性能调优/</id>
    <published>2018-03-30T14:15:53.000Z</published>
    <updated>2018-03-30T14:17:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>优化参数如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-server</span><br><span class="line">-Xms1024m</span><br><span class="line">-Xmx4096m</span><br><span class="line">-XX:NewRatio=3</span><br><span class="line">-Xss16m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:+CMSParallelRemarkEnabled</span><br><span class="line">-XX:ConcGCThreads=4</span><br><span class="line">-XX:ReservedCodeCacheSize=1024m</span><br><span class="line">-XX:+AlwaysPreTouch</span><br><span class="line">-XX:+TieredCompilation</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=50</span><br><span class="line">-Dsun.io.useCanonCaches=false</span><br><span class="line">-Djava.net.preferIPv4Stack=true</span><br><span class="line">-Djsse.enableSNIExtension=false</span><br><span class="line">-ea</span><br><span class="line">-Dide.no.platform.update=true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;优化参数如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
      <category term="优化" scheme="https://waver.me/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="优化" scheme="https://waver.me/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="工具" scheme="https://waver.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>常用 Git 命令清单</title>
    <link href="https://waver.me/2018/03/30/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>https://waver.me/2018/03/30/常用-Git-命令清单/</id>
    <published>2018-03-30T10:08:45.000Z</published>
    <updated>2018-05-28T05:45:17.819Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">阮一峰的网络日志—常用 Git 命令清单</a></p></blockquote><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>我每天使用 Git ，但是很多命令记不住。</p><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p><h3 id="下面是我整理的常用-Git-命令清单。几个专用名词的译名如下。"><a href="#下面是我整理的常用-Git-命令清单。几个专用名词的译名如下。" class="headerlink" title="下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。"></a>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</h3><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文转载自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰的网络日志—常用 Git 命令
      
    
    </summary>
    
      <category term="Git" scheme="https://waver.me/categories/Git/"/>
    
    
      <category term="Git" scheme="https://waver.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Struts2 下载文件异常解决</title>
    <link href="https://waver.me/2018/03/19/Struts2%20%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3/"/>
    <id>https://waver.me/2018/03/19/Struts2 下载文件异常解决/</id>
    <published>2018-03-19T14:16:59.000Z</published>
    <updated>2018-03-20T00:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异常描述"><a href="#异常描述" class="headerlink" title="异常描述"></a>异常描述</h3><h4 id="异常截图"><a href="#异常截图" class="headerlink" title="异常截图"></a>异常截图</h4><p><img src="https://waver.me/Album/images/post/2018/2018_03_19_Srtuts2_Exception.png" alt=""></p><h4 id="Java代码如下"><a href="#Java代码如下" class="headerlink" title="Java代码如下"></a>Java代码如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> action.upload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionContext;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Waver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2018/3/19 20:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String savePath;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收的文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSavePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> savePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSavePath</span><span class="params">(String savePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.savePath = savePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(savePath);</span><br><span class="line">        String[] list = file.list();</span><br><span class="line">        ActionContext context = ActionContext.getContext();</span><br><span class="line">        Map&lt;String, Object&gt; contextMap = context.getContextMap();</span><br><span class="line">        contextMap.put(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(savePath + name));</span><br><span class="line">            <span class="keyword">return</span> fileInputStream;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"下载异常!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">down</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"down"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xml配置信息"><a href="#xml配置信息" class="headerlink" title="xml配置信息"></a>xml配置信息</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/upload"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">class</span>=<span class="string">"action.upload.UploadAction"</span> <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileUpload.allowedTypes"</span>&gt;</span>image/jpeg,image/jpg<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"savePath"</span>&gt;</span>e:/upload/<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"down_*"</span> <span class="attr">class</span>=<span class="string">"action.upload.DownloadAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"savePath"</span>&gt;</span>e:/upload<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span>/listFile.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"stream"</span> <span class="attr">name</span>=<span class="string">"down"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--返回给浏览器的文件类型, 返回通常用二进制--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>applicantion/octet-stream<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--返回给浏览器的输入流--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"inputName"</span>&gt;</span>inputStream<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--告诉浏览器以下载的方式下载资源--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentDisposition"</span>&gt;</span>attachment=$&#123;name&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--缓存大小--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"bufferSize"</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="错误原因及解决方案"><a href="#错误原因及解决方案" class="headerlink" title="错误原因及解决方案"></a>错误原因及解决方案</h3><p><code>&lt;param name=&quot;savePath&quot;&gt;e:/upload&lt;/param&gt;</code> 项后没有加 <strong>“/“</strong> 与文件名组合后无法找到文件名应改为 <code>&lt;param name=&quot;savePath&quot;&gt;e:/upload/&lt;/param&gt;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;异常描述&quot;&gt;&lt;a href=&quot;#异常描述&quot; class=&quot;headerlink&quot; title=&quot;异常描述&quot;&gt;&lt;/a&gt;异常描述&lt;/h3&gt;&lt;h4 id=&quot;异常截图&quot;&gt;&lt;a href=&quot;#异常截图&quot; class=&quot;headerlink&quot; title=&quot;异常截图&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Struts2" scheme="https://waver.me/categories/Struts2/"/>
    
      <category term="Exception" scheme="https://waver.me/categories/Struts2/Exception/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
      <category term="Exception" scheme="https://waver.me/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Struts2 参数转换异常处理</title>
    <link href="https://waver.me/2018/03/18/Struts2-%E5%8F%82%E6%95%B0%E8%BD%AC%E6%8D%A2%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://waver.me/2018/03/18/Struts2-参数转换异常处理/</id>
    <published>2018-03-18T11:51:33.000Z</published>
    <updated>2018-03-18T12:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常描述"><a href="#异常描述" class="headerlink" title="异常描述"></a>异常描述</h2><p>无法获取参数值,但也不报错, 只是警告<br>异常描述如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18-Mar-2018 19:44:20.974 警告 [http-apr-8080-exec-1] com.opensymphony.xwork2.util.logging.jdk.JdkLogger.warn Error setting expression &apos;user.score&apos; with value &apos;[Ljava.lang.String;@6b961655&apos;</span><br></pre></td></tr></table></figure><p>User类具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> action.convert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Creeper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2018/3/18 15:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getscore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setscore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", score="</span> + score +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常原因"><a href="#异常原因" class="headerlink" title="异常原因"></a>异常原因</h3><p>因为User的score属性的set,get防范书写不规范, 所以导致获取不到值, 将方法名改为 <code>setScore</code> 和 <code>getScore</code> 即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异常描述&quot;&gt;&lt;a href=&quot;#异常描述&quot; class=&quot;headerlink&quot; title=&quot;异常描述&quot;&gt;&lt;/a&gt;异常描述&lt;/h2&gt;&lt;p&gt;无法获取参数值,但也不报错, 只是警告&lt;br&gt;异常描述如下:&lt;/p&gt;
&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
      <category term="Exception" scheme="https://waver.me/categories/Exception/"/>
    
    
      <category term="Exception" scheme="https://waver.me/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出Java转发和重定向的区别</title>
    <link href="https://waver.me/2018/03/11/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAJava%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://waver.me/2018/03/11/深入浅出Java转发和重定向的区别/</id>
    <published>2018-03-11T09:39:23.000Z</published>
    <updated>2018-03-11T13:53:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转自<a href="http://blog.csdn.net/lishehe/article/details/23133105" target="_blank" rel="noopener">深入浅出Java 重定向和请求转发的区别 李社河  </a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3></blockquote><p>下面是一个小例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.exam.model.*;  </span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.exam.manager.*;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchStudentServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>   </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">        doPost(request, response);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line"></span><br><span class="line">        String sBeginDate = request.getParameter(<span class="string">"beginDate"</span>);  </span><br><span class="line">        String sEndDate = request.getParameter(<span class="string">"endDate"</span>);  </span><br><span class="line"></span><br><span class="line">        Date beginDate = <span class="keyword">new</span> Date();  </span><br><span class="line">        Date endDate = <span class="keyword">new</span> Date();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            beginDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(sBeginDate);  </span><br><span class="line">            endDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(sEndDate);  </span><br><span class="line">         &#125;<span class="keyword">catch</span>(Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();           </span><br><span class="line">         &#125;     </span><br><span class="line"></span><br><span class="line">        StudentManager studentManager = <span class="keyword">new</span> StudentManagerImpl();  </span><br><span class="line">        List&lt;Student&gt; studentList = studentManager.findStudentList(beginDate, endDate);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//将学生列表设置到requet范围中  </span></span><br><span class="line">        <span class="comment">//request.setAttribute("student_list", studentList);  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//转发,转发是在服务器端转发的，客户端是不知道的  </span></span><br><span class="line">        <span class="comment">//request.getRequestDispatcher("/student_list.jsp").forward(request, response);  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将studentList放到session中  </span></span><br><span class="line">        HttpSession session = request.getSession();  </span><br><span class="line">        session.setAttribute(<span class="string">"student_list"</span>, studentList);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向，不会共享request  </span></span><br><span class="line">        <span class="comment">//以下写法错误,该 "/"代表了8080端口  </span></span><br><span class="line">        <span class="comment">//response.sendRedirect("/student_list.jsp");  </span></span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">"/student_list.jsp"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个里面尝试了两种调到后面的Jsp方法，在servlet中调用转发、重定向的语句如下：</p><ul><li>实现转发:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//转发,转发是在服务器端转发的，客户端是不知道的  </span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/student_list.jsp"</span>).forward(request, response);</span><br></pre></td></tr></table></figure><p>分析：请求转发是服务器内部把对一个request/response的处理权，移交给另外一个对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。 传输的信息不会丢失。</p><ul><li>实现重定向：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向，不会共享request  </span></span><br><span class="line"><span class="comment">//以下写法错误,该 "/"代表了8080端口  </span></span><br><span class="line">response.sendRedirect(<span class="string">"/student_list.jsp"</span>);  </span><br><span class="line">response.sendRedirect(request.getContextPath() + <span class="string">"/student_list.jsp"</span>);</span><br></pre></td></tr></table></figure><h3 id="深入（分析理解）"><a href="#深入（分析理解）" class="headerlink" title="深入（分析理解）"></a>深入（分析理解）</h3><h4 id="转发过程"><a href="#转发过程" class="headerlink" title="转发过程"></a>转发过程</h4><p> 客户首先发送一个请求到服务器端，服务器端发现匹配的servlet，并指定它去执行，当这个servlet执行完之后，它要调用getRequestDispacther()方法，把请求转发给指定的student_list.jsp,整个流程都是在服务器端完成的，而且是在同一个请求里面完成的，因此servlet和jsp共享的是同一个request，在servlet里面放的所有东西，在student_list中都能取出来，因此，student_list能把结果getAttribute()出来，getAttribute()出来后执行完把结果返回给客户端。整个过程是一个请求，一个响应。</p><h4 id="重定向过程"><a href="#重定向过程" class="headerlink" title="重定向过程"></a>重定向过程</h4><p>客户发送一个请求到服务器，服务器匹配servlet，这都和请求转发一样，servlet处理完之后调用了sendRedirect()这个方法，这个方法是response的方法，所以，当这个servlet处理完之后，看到response.senRedirect()方法，立即向客户端返回这个响应，响应行告诉客户端你必须要再发送一个请求，去访问student_list.jsp，紧接着客户端受到这个请求后，立刻发出一个新的请求，去请求student_list.jsp,这里两个请求互不干扰，相互独立，在前面request里面setAttribute()的任何东西，在后面的request里面都获得不了。可见，在sendRedirect()里面是两个请求，两个响应。</p><h3 id="浅出（表象）"><a href="#浅出（表象）" class="headerlink" title="浅出（表象）"></a>浅出（表象）</h3><h4 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h4><p>当用RequestDispatcher请求转发后，地址栏为<a href="http://localhost:8080/test/TestServlet" target="_blank" rel="noopener">http://localhost:8080/test/TestServlet</a><br>这真好应正了上面的分析，我们起初请求的就一个servlet，至于你服务器端怎么转，流程怎么样的，我客户端根本就不知道，我发了请求后我就等着响应，那你服务器那边愿意怎么转就怎么转，我客户端不关心也没法知道，所以当服务器端转发到jsp后，它把结果返回给客户端，客户端根本就不知道你这个结果是我真正访问的servlet产生的，还是由servlet转发后下一个组件产生的。</p><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>当用sendRedirect重定向后，地址栏为<a href="http://localhost:8080/test/student_list.jsp" target="_blank" rel="noopener">http://localhost:8080/test/student_list.jsp</a><br>因为这个时候，客户端已经知道了他第二次请求的是student_list.jsp，服务器已经告诉客户端要去访问student_list.jsp了，所以地址栏里会显示想要访问的结果。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>转发在服务器端完成的；重定向是在客户端完成的<br>转发的速度快；重定向速度慢<br>转发的是同一次请求；重定向是两次不同请求<br>转发不会执行转发后的代码；重定向会执行重定向之后的代码<br>转发地址栏没有变化；重定向地址栏有变化<br>转发必须是在同一台服务器下完成；重定向可以在不同的服务器下完成</p><p> <strong>Forward是在服务器端的跳转，就是客户端一个请求发给服务器，服务器直接将请求相关的参数的信息原封不动的传递到该服务器的其他jsp或servlet去处理，而sendredirect是在客户端的跳转，服务器会返回给客户端一个响应报头和新的URL地址，原来的参数什么的信息如果服务器端没有特别处理就不存在了，浏览器会访问新的URL所指向的servlet或jsp，这可能不是原先服务器上的webservce了。</strong></p><blockquote><p>本文转自<a href="http://blog.csdn.net/lishehe/article/details/23133105" target="_blank" rel="noopener">深入浅出Java 重定向和请求转发的区别 李社河  </a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文转自&lt;a href=&quot;http://blog.csdn.net/lishehe/article/details/23133105&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入浅出Java 重定向和请求转发的区别 李社河 
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 异常: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already</title>
    <link href="https://waver.me/2018/03/10/Mybatis-%E5%BC%82%E5%B8%B8-Error-parsing-Mapper-XML-Cause-java-lang-IllegalArgumentException-Result-Maps-collection-already/"/>
    <id>https://waver.me/2018/03/10/Mybatis-异常-Error-parsing-Mapper-XML-Cause-java-lang-IllegalArgumentException-Result-Maps-collection-already/</id>
    <published>2018-03-10T09:31:39.000Z</published>
    <updated>2018-03-10T10:03:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前几天遇到一个非常神奇的错误,Error parsing Mapper XML. Cause:<br>java.lang.IllegalArgumentException: Result Maps collection already, 搞了半天,也没搞明白, 而且时有时无,很是神奇,最终发现最终原因是因为…….懒!</p></blockquote><h3 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains</span><br><span class="line">value for org.hc.jiankunking.system.member.dao.OrderLogMapper.BaseResultMap;</span><br><span class="line">nestedexception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;sqlSessionFactory&apos; defined in file [E:\16年文</span><br><span class="line">件\JAVAdemo\jiankunking\jiankunking-web\target\jiankunking-web-1.0-SNAPSHOT\WEB-INF\classes\spring\spring-mybatis.xml]: Invocation of init method</span><br><span class="line">failed; nested exception is org.springframework.core.NestedIOException:</span><br><span class="line">Failed to parse mapping resource: &apos;URL [jar:file:/E:/16年文件/JAVAdemo/jiankunking/jiankunking-web/target/jiankunking-web-1.0-SNAPSHOT/</span><br><span class="line">WEB-INF/lib/jiankunking-system-1.0-SNAPSHOT.jar!/mapper/OrderLogMapper.xml]&apos;; nested exception is org.apache.ibatis.builder.BuilderException: Error</span><br><span class="line">parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for</span><br><span class="line">org.hc.jiankunking.system.member.dao.OrderLogMapper.BaseResultMap</span><br></pre></td></tr></table></figure><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>  因为Mybatis官方提供了逆向工程的模块, 所以平时开发几乎都用这个,可以省不少事, 但是<br>  问题来了, 在开发过程中有可能遇到数据库变动的情况, 所以这时就不得不重新生成mapper<br>  和pojo文件, 但是! 如果原先的文件不删除的话, 新生成的文件不会覆盖旧文件, 而是在旧<br>  文件的结尾继续添加, 所以这也就是 <code>Result Maps collection already</code> 的原因了.</p><pre><code>所以....这个懒还是不要偷的好, 重新生成文件前一定要把旧文件清理干净.在这里给自己踩踩坑-_-!</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前几天遇到一个非常神奇的错误,Error parsing Mapper XML. Cause:&lt;br&gt;java.lang.IllegalArgumentException: Result Maps collection already, 搞了半天,
      
    
    </summary>
    
      <category term="Exception" scheme="https://waver.me/categories/Exception/"/>
    
    
      <category term="Exception" scheme="https://waver.me/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>加油! 专科生!!</title>
    <link href="https://waver.me/2018/02/26/%E5%8A%A0%E6%B2%B9-%E4%B8%93%E7%A7%91%E7%94%9F/"/>
    <id>https://waver.me/2018/02/26/加油-专科生/</id>
    <published>2018-02-26T10:34:32.000Z</published>
    <updated>2018-03-04T12:43:56.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>&gt;前几天比较忙, 现在安定下来了, 来填一下前几天给自己挖的坑</code></pre><p>  以前以为, IT行业不同于其他传统行业, 只要有技术就行, 学历什么的并不重要, 但是来北京之后, 我发现我错了, 而且是大错特错, 当初在家用58找工作, 感觉自己是大爷, 好工作一个一个找上门来, 感觉自己很骄傲, 但到北京才发现, 原来这些主动找我的, 招聘启事中都有一条, 岗前培训, 说的好听是培养人才, 难听了就是骗你钱, 仔细一想, 有哪家正规企业放着大把的本科生, 研究生不要, 偏偏要你这专科生, 因为你长得帅? 那可能是活在梦里吧.</p><p>  刚发现自己被骗的时候挺沮丧的, 感觉自己一无是处, 还大老远跑来北京, 真是自不量力, 刚找工作的那几天, 除了那几家”有名”的培训机构天天催我去面试, 关心我啥时候去他们公司之外, 没有人会理我, 也没人愿意理我, 当时已经打算放弃了, 感觉北京容不下我这个专科生.</p><p>  但是天无绝人之路, 就在我打算回家的前一天晚上, 一直毫无动静的拉钩上收到了一条买时邀请, 当时还觉得难以置信, 在我经过再三确认之后, 心中终于重新有了希望, 带着这微弱的希望, 心想, 我一定要拿下这场面试, 如果过不了, 那就只能打道回府了, 毕竟北京的物价对我来说并不低.</p><p>  可能上帝终究是眷顾我的吧, 我顺利的拿下了面试, 虽然工资不高, 但也是有了工作, 毕竟学历和经验都不够, 好歹有人要了, 也没理由要多高的工资, 总不能一口吃个胖子吧.</p><p>  经过几天的相处, 体会到公司的人都很好, 虽然公司没有那种大公司的工作环境, 但是每个人都在努力做自己的事情, 而且每个人都感觉很随和, 很友好, 这不正是我想要的环境么, 有这些我就已经很满足了.</p><p>  经过这几天的忙活, 终于找到房子了, 也算是有个家了, 这还多亏了同事的帮忙, 帮我找到一个物美价廉的房子, 经过一番折腾之后,还蛮有个家的样子.</p><p>  这就是我这个专科生这几天的北京生活, 也没啥好说的, 并不值得炫耀, 只是想告诫自己, 我并没有那么差.</p><p>  如果恰好你也是一个专科生, 又恰好看到了这篇博客, 希望你也像我一样, 不要放弃, 努力的孩子总会被上天眷顾, 但是, 学历真的很重要, 很重要, 很重要, 如果可以, 还是劝你考完本, 读个研什么的, 这样会少奋斗很多.</p><p>  好了, 说的有点多了, 就这样, 文笔不佳, 见谅.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;&amp;gt;前几天比较忙, 现在安定下来了, 来填一下前几天给自己挖的坑
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  以前以为, IT行业不同于其他传统行业, 只要有技术就行, 学历什么的并不重要, 但是来北京之后, 我发现我错了, 而且是大错特错, 当初在家用58找工
      
    
    </summary>
    
      <category term="程序人生" scheme="https://waver.me/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="程序人生" scheme="https://waver.me/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>深入分析Java的序列化与反序列化</title>
    <link href="https://waver.me/2018/02/08/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://waver.me/2018/02/08/深入分析Java的序列化与反序列化/</id>
    <published>2018-02-08T13:33:22.000Z</published>
    <updated>2018-02-08T15:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaAPI中的定义"><a href="#JavaAPI中的定义" class="headerlink" title="JavaAPI中的定义:"></a>JavaAPI中的定义:</h2><p><code>public interface Serializable</code><br>类通过实现 <code>java.io.Serializable</code> 接口以启用其序列化功能。未实现此接口的类将无法使其任何状态序列化或反序列化。可序列化类的所有子类型本身都是可序列化的。序列化接口没有方法或字段，仅用于标识可序列化的语义。</p><p>要允许不可序列化类的子类型序列化，可以假定该子类型负责保存和恢复超类型的公用 <code>(public)</code>. 受保护的 <code>(protected)</code> 和（如果可访问）包 <code>(package)</code> 字段的状态。仅在子类型扩展的类有一个可访问的无参数构造方法来初始化该类的状态时，才可以假定子类型有此职责。如果不是这种情况，则声明一个类为可序列化类是错误的。该错误将在运行时检测到。</p><p>在反序列化过程中，将使用该类的公用或受保护的无参数构造方法初始化不可序列化类的字段。可序列化的子类必须能够访问无参数构造方法。可序列化子类的字段将从该流中恢复。</p><p>当遍历一个图形时，可能会遇到不支持 Serializable 接口的对象。在此情况下，将抛出 <code>NotSerializableException</code>，并将标识不可序列化对象的类。</p><p>在序列化和反序列化过程中需要特殊处理的类必须使用下列准确签名来实现特殊方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream out)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObjectNoData</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ObjectStreamException</span>;</span><br></pre></td></tr></table></figure></p><p><code>writeObject</code> 方法负责写入特定类的对象的状态，以便相应的 readObject 方法可以恢复它。通过调用 <code>out.defaultWriteObject</code> 可以调用保存 <code>Object</code> 的字段的默认机制。该方法本身不需要涉及属于其超类或子类的状态。通过使用 <code>writeObject</code> 方法或使用 <code>DataOutput</code> 支持的用于基本数据类型的方法将各个字段写入 <code>ObjectOutputStream</code>，状态可以被保存。</p><p><code>readObject</code> 方法负责从流中读取并恢复类字段。它可以调用 <code>in.defaultReadObject</code> 来调用默认机制，以恢复对象的非静态和非瞬态字段。<code>defaultReadObject</code>方法使用流中的信息来分配流中通过当前对象中相应指定字段保存的对象的字段。这用于处理类演化后需要添加新字段的情形。该方法本身不需要涉及属于其超类或子类的状态。通过使用 writeObject 方法或使用 <code>DataOutput</code> 支持的用于基本数据类型的方法将各个字段写入 <code>ObjectOutputStream</code>，状态可以被保存。</p><p>在序列化流不列出给定类作为将被反序列化对象的超类的情况下，<code>readObjectNoData</code> 方法负责初始化特定类的对象状态。这在接收方使用的反序列化实例类的版本不同于发送方，并且接收者版本扩展的类不是发送者版本扩展的类时发生。在序列化流已经被篡改时也将发生；因此，不管源流是“敌意的”还是不完整的，<code>readObjectNoData</code> 方法都可以用来正确地初始化反序列化的对象。</p><p>将对象写入流时需要指定要使用的替代对象的可序列化类，应使用准确的签名来实现此特殊方法：</p><p> <code>ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;</code></p><p>此 <code>writeReplace</code> 方法将由序列化调用，前提是如果此方法存在，而且它可以通过被序列化对象的类中定义的一个方法访问。因此，该方法可以拥有私有 <code>(private)</code>. 受保护的 (protected) 和包私有 <code>(package-private)</code> 访问。子类对此方法的访问遵循 java 访问规则。</p><p>在从流中读取类的一个实例时需要指定替代的类应使用的准确签名来实现此特殊方法。</p><p> <code>ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;</code></p><p>此 <code>readResolve</code> 方法遵循与 <code>writeReplace</code> 相同的调用规则和访问规则。</p><p>序列化运行时使用一个称为 <code>serialVersionUID</code> 的版本号与每个可序列化类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类。如果接收者加载的该对象的类的 <code>serialVersionUID</code> 与对应的发送者的类的版本号不同，则反序列化将会导致 <code>InvalidClassException</code>。可序列化类可以通过声明名为 “<code>serialVersionUID</code>“ 的字段（该字段必须是静态 <code>(static)</code>. 最终 <code>(final)</code> 的 long 型字段）显式声明其自己的 <code>serialVersionUID</code>：</p><p> <code>ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;</code></p><p>如果可序列化类未显式声明 <code>serialVersionUID</code>，则序列化运行时将基于该类的各个方面计算该类的默认 <code>serialVersionUID</code>值，如“Java(TM) 对象序列化规范”中所述。不过，强烈建议 所有可序列化类都显式声明 <code>serialVersionUID</code> 值，原因是计算默认的 <code>serialVersionUID</code> 对类的详细信息具有较高的敏感性，根据编译器实现的不同可能千差万别，这样在反序列化过程中可能会导致意外的 <code>InvalidClassException</code>。因此，为保证 <code>serialVersionUID</code> 值跨不同 java 编译器实现的一致性，序列化类必须声明一个明确的 <code>serialVersionUID</code> 值。还强烈建议使用 <code>private</code> 修饰符显示声明 <code>serialVersionUID</code>（如果可能），原因是这种声明仅应用于直接声明类 – <code>serialVersionUID</code> 字段作为继承成员没有用处。数组类不能声明一个明确的 <code>serialVersionUID</code>，因此它们总是具有默认的计算值，但是数组类没有匹配 <code>serialVersionUID</code> 值的要求。<br>从以下版本开始：<br><code>JDK1.1</code></p><h1 id="深入分析Java的序列化与反序列化"><a href="#深入分析Java的序列化与反序列化" class="headerlink" title="深入分析Java的序列化与反序列化"></a>深入分析Java的序列化与反序列化</h1><p>序列化是一种对象持久化的手段。普遍应用在网络传输. RMI等场景中。本文通过分析ArrayList的序列化来介绍Java序列化的相关内容。主要涉及到以下几个问题：</p><ul><li><p>怎么实现Java的序列化</p></li><li><p>为什么实现了java.io.Serializable接口才能被序列化</p></li><li><p>transient的作用是什么</p></li><li><p>怎么自定义序列化策略</p></li><li><p>自定义的序列化策略是如何被调用的</p></li><li><p>ArrayList对序列化的实现有什么好处</p></li></ul><h2 id="Java对象的序列化"><a href="#Java对象的序列化" class="headerlink" title="Java对象的序列化"></a>Java对象的序列化</h2><p>Java平台允许我们在内存中创建可复用的Java对象，但一般情况下，只有当JVM处于运行时，这些对象才可能存在，即，这些对象的生命周期不会比JVM的生命周期更长。但在现实应用中，就可能要求在JVM停止运行之后能够保存(持久化)指定的对象，并在将来重新读取被保存的对象。Java对象序列化就能够帮助我们实现该功能。</p><p>使用Java对象序列化，在保存对象时，会把其状态保存为一组字节，在未来，再将这些字节组装成对象。必须注意地是，对象序列化保存的是对象的”状态”，即它的成员变量。由此可知，对象序列化不会关注类中的静态变量。</p><p>除了在持久化对象时会用到对象序列化之外，当使用RMI(远程方法调用)，或在网络中传递对象时，都会用到对象序列化。Java序列化API为处理对象序列化提供了一个标准机制，该API简单易用。</p><h2 id="如何对Java对象进行序列化与反序列化"><a href="#如何对Java对象进行序列化与反序列化" class="headerlink" title="如何对Java对象进行序列化与反序列化"></a>如何对Java对象进行序列化与反序列化</h2><p>在Java中，只要一个类实现了java.io.Serializable接口，那么它就可以被序列化。这里先来一段代码：</p><p>code 1 创建一个User类，用于序列化及反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hollis;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by hollis on 16/2/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender="</span> + gender +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>code 2 对User进行序列化及反序列化的Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hollis;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by hollis on 16/2/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Initializes The Object</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"hollis"</span>);</span><br><span class="line">        user.setGender(<span class="string">"male"</span>);</span><br><span class="line">        user.setAge(<span class="number">23</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Write Obj to File</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"tempFile"</span>));</span><br><span class="line">            oos.writeObject(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(oos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Read Obj from File</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"tempFile"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            User newUser = (User) ois.readObject();</span><br><span class="line">            System.out.println(newUser);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(ois);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FileUtils.forceDelete(file);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name=<span class="string">'hollis'</span>, age=<span class="number">23</span>, gender=male, birthday=Tue Feb <span class="number">02</span> <span class="number">17</span>:<span class="number">37</span>:<span class="number">38</span> CST <span class="number">2016</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">'hollis'</span>, age=<span class="number">23</span>, gender=<span class="keyword">null</span>, birthday=Tue Feb <span class="number">02</span> <span class="number">17</span>:<span class="number">37</span>:<span class="number">38</span> CST <span class="number">2016</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="序列化及反序列化相关知识"><a href="#序列化及反序列化相关知识" class="headerlink" title="序列化及反序列化相关知识"></a>序列化及反序列化相关知识</h2><ol><li><p>在Java中，只要一个类实现了java.io.Serializable接口，那么它就可以被序列化。</p></li><li><p>通过ObjectOutputStream和ObjectInputStream对对象进行序列化及反序列化</p></li><li><p>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致（就是 private static final long serialVersionUID）</p></li><li><p>序列化并不保存静态变量。</p></li><li><p>要想将父类对象也序列化，就需要让父类也实现Serializable 接口。</p></li><li><p>Transient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</p></li><li><p>服务器端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时，进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时，才可以对密码进行读取，这样可以一定程度保证序列化对象的数据安全。</p></li></ol><h2 id="ArrayList的序列化"><a href="#ArrayList的序列化" class="headerlink" title="ArrayList的序列化"></a>ArrayList的序列化</h2><p>在介绍ArrayList序列化之前，先来考虑一个问题：</p><p>如何自定义的序列化和反序列化策略</p><p>带着这个问题，我们来看java.util.ArrayList的源码</p><p>code 3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者省略了其他成员变量，从上面的代码中可以知道<code>ArrayList</code>实现了<code>java.io.Serializable</code>接口，那么我们就可以对它进行序列化及反序列化。因为<code>elementData</code>是<code>transient</code>的，所以我们认为这个成员变量不会被序列化而保留下来。我们写一个Demo，验证一下我们的想法：</p><p>code 4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        stringList.add(<span class="string">"hello"</span>);</span><br><span class="line">        stringList.add(<span class="string">"world"</span>);</span><br><span class="line">        stringList.add(<span class="string">"hollis"</span>);</span><br><span class="line">        stringList.add(<span class="string">"chuang"</span>);</span><br><span class="line">        System.out.println(<span class="string">"init StringList"</span> + stringList);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"stringlist"</span>));</span><br><span class="line">        objectOutputStream.writeObject(stringList);</span><br><span class="line"></span><br><span class="line">        IOUtils.close(objectOutputStream);</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"stringlist"</span>);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        List&lt;String&gt; newStringList = (List&lt;String&gt;)objectInputStream.readObject();</span><br><span class="line">        IOUtils.close(objectInputStream);</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"new StringList"</span> + newStringList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init StringList[hello, world, hollis, chuang]</span><br><span class="line">new StringList[hello, world, hollis, chuang]</span><br></pre></td></tr></table></figure></p><p>了解<code>ArrayList</code>的人都知道，<code>ArrayList</code>底层是通过数组实现的。那么数组<code>elementData</code>其实就是用来保存列表中的元素的。通过该属性的声明方式我们知道，他是无法通过序列化持久化下来的。那么为什么 <strong>code 4</strong> 的结果却通过序列化和反序列化把List中的元素保留下来了呢？</p><h3 id="writeObject和readObject方法"><a href="#writeObject和readObject方法" class="headerlink" title="writeObject和readObject方法"></a>writeObject和readObject方法</h3><p>在ArrayList中定义了来个方法： writeObject和readObject。</p><p>这里先给出结论:</p><p>在序列化过程中，如果被序列化的类中定义了writeObject 和 readObject 方法，虚拟机会试图调用对象类里的 writeObject 和 readObject 方法，进行用户自定义的序列化和反序列化。</p><p>如果没有这样的方法，则默认调用是 ObjectOutputStream 的 defaultWriteObject 方法以及 ObjectInputStream 的 defaultReadObject 方法。</p><p>用户自定义的 writeObject 和 readObject 方法可以允许用户控制序列化的过程，比如可以在序列化的过程中动态改变序列化的数值。</p><p>来看一下这两个方法的具体实现：</p><p>code 5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in capacity</span></span><br><span class="line">        s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">            ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>code 6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么为什么ArrayList要用这种方式来实现序列化呢？</p><h3 id="why-transient"><a href="#why-transient" class="headerlink" title="why transient"></a>why transient</h3><p>ArrayList实际上是动态数组，每次在放满以后自动增长设定的长度值，如果数组自动增长长度设为100，而实际只放了一个元素，那就会序列化99个null元素。为了保证在序列化的时候不会将这么多null同时进行序列化，ArrayList把元素数组设置为transient。</p><h3 id="why-writeObject-and-readObject"><a href="#why-writeObject-and-readObject" class="headerlink" title="why writeObject and readObject"></a>why writeObject and readObject</h3><p>前面说过，为了防止一个包含大量空对象的数组被序列化，为了优化存储，所以，ArrayList使用transient来声明elementData。 但是，作为一个集合，在序列化过程中还必须保证其中的元素可以被持久化下来，所以，通过重写writeObject 和 readObject方法的方式把其中的元素保留下来。</p><p>writeObject方法把elementData数组中的元素遍历的保存到输出流（ObjectOutputStream）中。</p><p>readObject方法从输入流（ObjectInputStream）中读出对象并保存赋值到elementData数组中。</p><p>至此，我们先试着来回答刚刚提出的问题：</p><p>如何自定义的序列化和反序列化策略</p><p>答：可以通过在被序列化的类中增加writeObject 和 readObject方法。那么问题又来了：</p><p>虽然ArrayList中写了writeObject 和 readObject 方法，但是这两个方法并没有显示的被调用啊。</p><p>那么如果一个类中包含writeObject 和 readObject 方法，那么这两个方法是怎么被调用的呢?</p><h2 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h2><p>从code 4中，我们可以看出，对象的序列化过程通过ObjectOutputStream和ObjectInputputStream来实现的，那么带着刚刚的问题，我们来分析一下ArrayList中的writeObject 和 readObject 方法到底是如何被调用的呢？</p><p>为了节省篇幅，这里给出ObjectOutputStream的writeObject的调用栈：</p><p>writeObject —&gt; writeObject0 —&gt;writeOrdinaryObject—&gt;writeSerialData—&gt;invokeWriteObject</p><p>这里看一下invokeWriteObject：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invokeWriteObject</span><span class="params">(Object obj, ObjectOutputStream out)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, UnsupportedOperationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (writeObjectMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writeObjectMethod.invoke(obj, <span class="keyword">new</span> Object[]&#123; out &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">                Throwable th = ex.getTargetException();</span><br><span class="line">                <span class="keyword">if</span> (th <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (IOException) th;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    throwMiscException(th);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">                <span class="comment">// should not occur, as access checks have been suppressed</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中writeObjectMethod.invoke(obj, new Object[]{ out });是关键，通过反射的方式调用writeObjectMethod方法。官方是这么解释这个writeObjectMethod的：</p><p>class-defined writeObject method, or null if none</p><p>在我们的例子中，这个方法就是我们在ArrayList中定义的writeObject方法。通过反射的方式被调用了。</p><p>至此，我们先试着来回答刚刚提出的问题：</p><p>如果一个类中包含writeObject 和 readObject 方法，那么这两个方法是怎么被调用的?</p><p>答：在使用ObjectOutputStream的writeObject方法和ObjectInputStream的readObject方法时，会通过反射的方式调用。</p><p>至此，我们已经介绍完了ArrayList的序列化方式。那么，不知道有没有人提出这样的疑问：</p><p>Serializable明明就是一个空的接口，它是怎么保证只有实现了该接口的方法才能进行序列化与反序列化的呢？</p><h3 id="Serializable接口的定义："><a href="#Serializable接口的定义：" class="headerlink" title="Serializable接口的定义："></a>Serializable接口的定义：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读者可以尝试把 <strong>code 1</strong> 中的继承<code>Serializable</code>的代码去掉，再执行 <strong>code 2</strong> ，会抛出<code>java.io.NotSerializableException</code>。</p><p>其实这个问题也很好回答，我们再回到刚刚ObjectOutputStream的writeObject的调用栈：</p><p><font color="red"><br>writeObject —&gt; writeObject0 —&gt;writeOrdinaryObject—&gt;writeSerialData—&gt;invokeWriteObject<br></font><br><code>writeObject0</code>方法中有这么一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        writeString((String) obj, unshared);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">        writeArray(obj, desc, unshared);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">        writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">        writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">                cl.getName() + <span class="string">"\n"</span> + debugInfoStack.toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在进行序列化操作时，会判断要被序列化的类是否是Enum. Array和Serializable类型，如果不是则直接抛出<code>NotSerializableException</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>如果一个类想被序列化，需要实现<code>Serializable</code>接口。否则将抛出<code>NotSerializableException</code>异常，这是因为，在序列化操作过程中会对类型进行检查，要求被序列化的类必须属于Enum. Array和Serializable类型其中的任何一种。</p></li><li><p>在变量声明前加上该关键字，可以阻止该变量被序列化到文件中。</p></li><li><p>在类中增加<code>writeObject</code> 和 <code>readObject</code> 方法可以实现自定义序列化策略</p></li></ol><blockquote><p>本文转载自<a href="http://www.hollischuang.com/archives/1140" target="_blank" rel="noopener">深入分析Java的序列化与反序列化</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaAPI中的定义&quot;&gt;&lt;a href=&quot;#JavaAPI中的定义&quot; class=&quot;headerlink&quot; title=&quot;JavaAPI中的定义:&quot;&gt;&lt;/a&gt;JavaAPI中的定义:&lt;/h2&gt;&lt;p&gt;&lt;code&gt;public interface Serializa
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
      <category term="Java高级" scheme="https://waver.me/categories/Java/Java%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
      <category term="Java高级" scheme="https://waver.me/tags/Java%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java 找不到或无法加载主类XXX终极解决方案</title>
    <link href="https://waver.me/2018/02/01/Java-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BBXXX%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://waver.me/2018/02/01/Java-找不到或无法加载主类XXX终极解决方案/</id>
    <published>2018-02-01T15:47:43.000Z</published>
    <updated>2018-02-01T16:18:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因-作者的悲惨经历-可略过"><a href="#起因-作者的悲惨经历-可略过" class="headerlink" title="起因(作者的悲惨经历,可略过)"></a>起因(作者的悲惨经历,可略过)</h2><p>今天突发奇想用命令行运行Java文件, 但惊喜的发现出现了找不到或无法加载主类这个错误,  这个错误以前也遇到过, 便轻车熟路的改了, 发现在确认完文件名, 类名, CLASSPATH,  临时环境变量等所有可能的因素后,依然报这个错, 好歹也是搞过好几年Java的人了,不能在这跌跟头, 经过一方折腾后, 但是结果又让人欲哭无泪…</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><h3 id="配置错误"><a href="#配置错误" class="headerlink" title="配置错误"></a>配置错误</h3><p>入门就遇到这样的问题，环境变量按网上说的配好了，直接java 和 javac都有提示出来，说明没问题了，</p><p>​    主要是以下两点要注意：</p><ol><li>在classpath的最前面要加一个本目录路径，用.表示，由于后面还有java的dt和tools两个路径，所以.后要加;进行分隔表示。   </li><li>更为重要的是，在cmd下运行javac 和java的时候，必须在该java文件的目录下运行，这样生成的class也在该目录下，java的时候也会第一个就在本目录下找class文件，就不 会提示找不到了。这个cmd运行路径由于一般不太注意，输入cmd就会直接到c:\个人文件夹下，而一般的java文件会用其它软件编写，放在选定的路径 下，这两个路径很少能主动重合，一运行当然找不到了，但是javac能认到，不知为什么java就提示找不到？这点有点奇怪。网上各种解决方法里很少注意 到其实就是这个小问题造成的找不到类，都想当然的以为是在java源文件路径下运行java，那当然就找不到基本问题所在了。</li></ol><p>​    如果1、2都做了还是没变化，那就是该计算机改了环境变量后需要重新启动下让新的设置生效，重启下即可</p><blockquote><p>以上解决方案转自 <a href="http://blog.csdn.net/wangjiaweiwei/article/details/42212525" target="_blank" rel="noopener">javac编译成功，用java运行class文件出现“找不到或无法加载主类” 的问题</a></p></blockquote><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误分两种:</p><ol><li><p>文件名与主类名不相同</p></li><li><p>package 包不存在</p><p><strong>第二种错误很容易忽视.在这踩个坑</strong> (笔者就是因为将IDEA中的文件直接考出来才…….,一切尽在不言中, 你们可能很难想象在半夜12点数次装Java配环境变量的紧张与刺激!)​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起因-作者的悲惨经历-可略过&quot;&gt;&lt;a href=&quot;#起因-作者的悲惨经历-可略过&quot; class=&quot;headerlink&quot; title=&quot;起因(作者的悲惨经历,可略过)&quot;&gt;&lt;/a&gt;起因(作者的悲惨经历,可略过)&lt;/h2&gt;&lt;p&gt;今天突发奇想用命令行运行Java文件, 
      
    
    </summary>
    
      <category term="Exception" scheme="https://waver.me/categories/Exception/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>工具推荐-第一期-AutoHotKey</title>
    <link href="https://waver.me/2018/01/28/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90-%E7%AC%AC%E4%B8%80%E6%9C%9F-AutoHotKey/"/>
    <id>https://waver.me/2018/01/28/工具推荐-第一期-AutoHotKey/</id>
    <published>2018-01-28T09:32:04.000Z</published>
    <updated>2018-02-04T07:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现一款高(neng)大(zhuang)上(bi)的神器——-AutoHotKey, 可以自定义Windows的快捷键, 可以使你彻底脱离鼠标, 这酸爽, 谁用谁知道.</p><p>下载地址: <a href="https://www.autohotkey.com/" target="_blank" rel="noopener">www.autohotkey.com</a><br>中文帮助文档下载: <a href="https://waver.me/Resource/Files/AutoHotkey.chm">帮助文档</a><br>最后附上ChinaUnix博主xiaogangzgg写的教程: <a href="http://blog.chinaunix.net/uid-26811377-id-3166486.html" target="_blank" rel="noopener">AutoHotkey的几个入门级应用</a></p><h2 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h2><h3 id="创建第一个AHK脚本"><a href="#创建第一个AHK脚本" class="headerlink" title="创建第一个AHK脚本"></a>创建第一个AHK脚本</h3><ol><li>在桌面或您选择的文件夹中右键点击空白处.</li><li>在菜单中, 选择 新建-&gt; 文本文档.</li><li>输入文件名, 将<code>.txt</code>后缀修改成<code>.ahk</code>. 例如：Test.ahk。<br> 若没有后缀,请参见<a href="https://jingyan.baidu.com/article/ff42efa920b7f3c19e220283.html" target="_blank" rel="noopener">win10文件后缀名怎么显示</a></li><li>右键点击此文件并选择 Edit Script.</li><li>在新的空行中，输入下列内容：#space::Run www.google.com。</li></ol><p>在上面的语句行中, 首个字符 “#” 表示 Windows 键; 所以 #space 表示按住 Windows 键然后按下空格键来激活热键. 双冒号 :: 表示每次按下此热键时会执行其后续命令, 这里是转到 Google 网站. 要试用此脚本, 请继续下列操作:</p><ol><li>保存并关闭此文件.</li><li>双击此文件来运行. 在任务栏通知区域会出现新的图标.</li><li>按住 Windows 键并按下空格键. 在默认浏览器中会打开网页.</li><li>要退出或编辑此脚本, 则在任务栏通知区域的绿色 “H” 图标上点击右键.</li></ol><p>注意:</p><ul><li>多个脚本可以同时运行, 其中的每个脚本在任务栏通知区域使用自己的图标.</li><li>每个脚本可以包含多个[热键]和[热字串].</li><li>要让您的脚本在启动计算机时自动运行, 请在开始菜单的启动文件夹中给您的脚本创建快捷方式.</li></ul><font color="red"><strong>[热键]和[热字串]对照表请参见文档</strong></font><h2 id="以下是本人常用的一些脚本-不定期更新"><a href="#以下是本人常用的一些脚本-不定期更新" class="headerlink" title="以下是本人常用的一些脚本(不定期更新)"></a>以下是本人常用的一些脚本(不定期更新)</h2><h3 id="1-调节音量"><a href="#1-调节音量" class="headerlink" title="1.调节音量"></a>1.调节音量</h3><p>虽然Windows已经有默认的音量调节按钮, 但是总觉得不爽, 特别是光线比较暗的时候,几乎找不到好吗(没有背光键盘的平民程序员), 下面附上脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;调节音量</span><br><span class="line">!Right::SoundSet, +1,, mute ;Alt + 右方向键 开关声音</span><br><span class="line">!Up::                       ;Alt + 上方向键 增加音量 SoundSet +1 中的 `+1`代表每次按键的精度</span><br><span class="line">SoundSet +1, MASTER</span><br><span class="line">SoundSet, +1, WAVE</span><br><span class="line">Return</span><br><span class="line">!Down::                     ;Alt + 下方向键 降低音量</span><br><span class="line">SoundSet -1, MASTER</span><br><span class="line">SoundSet, -1,WAVE</span><br><span class="line">Return</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近发现一款高(neng)大(zhuang)上(bi)的神器——-AutoHotKey, 可以自定义Windows的快捷键, 可以使你彻底脱离鼠标, 这酸爽, 谁用谁知道.&lt;/p&gt;
&lt;p&gt;下载地址: &lt;a href=&quot;https://www.autohotkey.com/&quot;
      
    
    </summary>
    
      <category term="程序人生" scheme="https://waver.me/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="工具推荐" scheme="https://waver.me/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    
      <category term="工作效率" scheme="https://waver.me/tags/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day14-集合框架[1]</title>
    <link href="https://waver.me/2018/01/22/JavaReview-day14-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%5B1%5D/"/>
    <id>https://waver.me/2018/01/22/JavaReview-day14-集合框架[1]/</id>
    <published>2018-01-22T09:39:21.000Z</published>
    <updated>2018-01-28T09:44:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><h2 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a>集合框架图</h2><p><img src="/images/post_images/20180122-Collection.jpg" alt=""><br><img src="/images/post_images/20180122-Collection-simple.jpg" alt=""></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Collection定义了集合框架的共性功能。</p><ol><li><p>添加<br> add(e);<br> addAll(collection);</p></li><li><p>删除<br> remove(e);<br> removeAll(collection);<br> clear();</p></li><li><p>判断。<br> contains(e);<br> isEmpty();</p></li><li><p>获取<br> iterator();<br> size();</p></li><li><p>获取交集。<br> retainAll();</p></li><li><p>集合变数组。<br> toArray();</p></li></ol><ul><li><p>add方法的参数类型是Object。以便于接收任意类型对象。</p></li><li><p>集合中存储的都是对象的引用(地址)</p></li></ul><p><strong>什么是迭代器呢？</strong><br>其实就是集合的取出元素的方式。<br>如同抓娃娃游戏机中的夹子。</p><p>迭代器是取出方式，会直接访问集合中的元素。<br>所以将迭代器通过内部类的形式来进行描述。<br>通过容器的iterator()方法获取该内部类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">CollectionDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">method_get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//1，添加元素。</span></span><br><span class="line">al.add(<span class="string">"java01"</span>);<span class="comment">//add(Object obj);</span></span><br><span class="line">al.add(<span class="string">"java02"</span>);</span><br><span class="line">al.add(<span class="string">"java03"</span>);</span><br><span class="line">al.add(<span class="string">"java04"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Iterator it = al.iterator();//获取迭代器，用于取出集合中的元素。</span></span><br><span class="line"><span class="comment">while(it.hasNext())</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">sop(it.next());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(Iterator it = al.iterator(); it.hasNext() ; )</span><br><span class="line">&#123;</span><br><span class="line">sop(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ArrayList al1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">al1.add(<span class="string">"java01"</span>);</span><br><span class="line">al1.add(<span class="string">"java02"</span>);</span><br><span class="line">al1.add(<span class="string">"java03"</span>);</span><br><span class="line">al1.add(<span class="string">"java04"</span>);</span><br><span class="line">ArrayList al2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">al2.add(<span class="string">"java03"</span>);</span><br><span class="line">al2.add(<span class="string">"java04"</span>);</span><br><span class="line">al2.add(<span class="string">"java05"</span>);</span><br><span class="line">al2.add(<span class="string">"java06"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//al1.retainAll(al2);//去交集，al1中只会保留和al2中相同的元素。</span></span><br><span class="line">al1.removeAll(al2);</span><br><span class="line">sop(<span class="string">"al1:"</span>+al1);</span><br><span class="line">sop(<span class="string">"al2:"</span>+al2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">base_method</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个集合容器。使用Collection接口的子类。ArrayList</span></span><br><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1，添加元素。</span></span><br><span class="line">al.add(<span class="string">"java01"</span>);<span class="comment">//add(Object obj);</span></span><br><span class="line">al.add(<span class="string">"java02"</span>);</span><br><span class="line">al.add(<span class="string">"java03"</span>);</span><br><span class="line">al.add(<span class="string">"java04"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印原集合。</span></span><br><span class="line">sop(<span class="string">"原集合:"</span>+al);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3，删除元素。</span></span><br><span class="line"><span class="comment">//al.remove("java02");</span></span><br><span class="line"><span class="comment">//al.clear();//清空集合。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4，判断元素。</span></span><br><span class="line">sop(<span class="string">"java03是否存在:"</span>+al.contains(<span class="string">"java03"</span>));</span><br><span class="line">sop(<span class="string">"集合是否为空？"</span>+al.isEmpty());</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，获取个数。集合长度。</span></span><br><span class="line">sop(<span class="string">"size:"</span>+al.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印改变后的集合。</span></span><br><span class="line">sop(al);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>枚举就是Vector特有的取出方式。<br>发现枚举和迭代器很像。<br>其实枚举和迭代是一样的。</p><p>因为枚举的名称以及方法的名称都过长。<br>所以被迭代器取代了。<br>枚举郁郁而终了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VectorDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Vector v = <span class="keyword">new</span> Vector();</span><br><span class="line"></span><br><span class="line">v.add(<span class="string">"java01"</span>);</span><br><span class="line">v.add(<span class="string">"java02"</span>);</span><br><span class="line">v.add(<span class="string">"java03"</span>);</span><br><span class="line">v.add(<span class="string">"java04"</span>);</span><br><span class="line"></span><br><span class="line">Enumeration en = v.elements();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(en.hasMoreElements())</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(en.nextElement());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>使用LinkedList模拟一个堆栈或者队列数据结构。</p><p>堆栈：先进后出  如同一个杯子。<br>队列：先进先出 First in First out  FIFO 如同一个水管。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuiLie</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> LinkedList link;</span><br><span class="line"></span><br><span class="line">DuiLie()</span><br><span class="line">&#123;</span><br><span class="line">link = <span class="keyword">new</span> LinkedList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">link.addFirst(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">myGet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> link.removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> link.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">LinkedListTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DuiLie dl = <span class="keyword">new</span> DuiLie();</span><br><span class="line">dl.myAdd(<span class="string">"java01"</span>);</span><br><span class="line">dl.myAdd(<span class="string">"java02"</span>);</span><br><span class="line">dl.myAdd(<span class="string">"java03"</span>);</span><br><span class="line">dl.myAdd(<span class="string">"java04"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!dl.isNull())</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(dl.myGet());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">去除ArrayList集合中的重复元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">al.add(<span class="string">"java01"</span>);</span><br><span class="line">al.add(<span class="string">"java02"</span>);</span><br><span class="line">al.add(<span class="string">"java01"</span>);</span><br><span class="line">al.add(<span class="string">"java02"</span>);</span><br><span class="line">al.add(<span class="string">"java01"</span>);</span><br><span class="line">    <span class="comment">//al.add("java03");</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在迭代时循环中next调用一次，就要hasNext判断一次。</span></span><br><span class="line"><span class="comment">Iterator it = al.iterator();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while(it.hasNext())</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">sop(it.next()+"...."+it.next());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">sop(al);</span><br><span class="line">al = singleElement(al);</span><br><span class="line">sop(al);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">singleElement</span><span class="params">(ArrayList al)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个临时容器。</span></span><br><span class="line">ArrayList newAl = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">Iterator it = al.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">Object obj = it.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!newAl.contains(obj))</span><br><span class="line">newAl.add(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newAl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList练习"><a href="#ArrayList练习" class="headerlink" title="ArrayList练习:"></a>ArrayList练习:</h3><p>将自定义对象作为元素存到ArrayList集合中，并去除重复元素。<br>比如：存人对象。同姓名同年龄，视为同一个人。为重复元素。</p><p>思路:</p><ol><li>对人描述，将数据封装进人对象。</li><li>定义容器，将人存入。</li><li>取出。</li></ol><p>List集合判断元素是否相同，依据是元素的equals方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">Person(String name,<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Person))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">Person p = (Person)obj;</span><br><span class="line"><span class="comment">//System.out.println(this.name+"....."+p.name);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="keyword">this</span>.age == p.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">al.add(<span class="keyword">new</span> Demo());</span><br><span class="line"></span><br><span class="line">al.add(<span class="keyword">new</span> Person(<span class="string">"lisi01"</span>,<span class="number">30</span>));<span class="comment">//al.add(Object obj);//Object obj = new Person("lisi01",30);</span></span><br><span class="line"><span class="comment">//al.add(new Person("lisi02",32));</span></span><br><span class="line">al.add(<span class="keyword">new</span> Person(<span class="string">"lisi02"</span>,<span class="number">32</span>));</span><br><span class="line">al.add(<span class="keyword">new</span> Person(<span class="string">"lisi04"</span>,<span class="number">35</span>));</span><br><span class="line">al.add(<span class="keyword">new</span> Person(<span class="string">"lisi03"</span>,<span class="number">33</span>));</span><br><span class="line"><span class="comment">//al.add(new Person("lisi04",35));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//al = singleElement(al);</span></span><br><span class="line"></span><br><span class="line">sop(<span class="string">"remove 03 :"</span>+al.remove(<span class="keyword">new</span> Person(<span class="string">"lisi03"</span>,<span class="number">33</span>)));<span class="comment">//remove方法底层也是依赖于元素的equals方法。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Iterator it = al.iterator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">Person p = (Person)it.next();</span><br><span class="line">sop(p.getName()+<span class="string">"::"</span>+p.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">singleElement</span><span class="params">(ArrayList al)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个临时容器。</span></span><br><span class="line">ArrayList newAl = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">Iterator it = al.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">Object obj = it.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!newAl.contains(obj))</span><br><span class="line">newAl.add(obj);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newAl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><p>对字符串排序。<br>“zxcvbasdfg”<br>思路：</p><ol><li>字符串变数组。</li><li>数组排序。</li><li>数组变字符串。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"zxcvbasdfg"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char[] arr = str.toCharArray();</span></span><br><span class="line"><span class="comment">//Arrays.sort(arr);</span></span><br><span class="line"><span class="comment">//System.out.println(new String(arr));</span></span><br><span class="line"><span class="comment">//str = sortString(str);</span></span><br><span class="line"><span class="comment">//System.out.println(str);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sortString</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] arr = stringToArray(str);</span><br><span class="line"></span><br><span class="line">sort(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arrayToString(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] stringToArray(String str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str.toCharArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length-<span class="number">1</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=x+<span class="number">1</span>; y&lt;arr.length; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[x]&gt;arr[y])</span><br><span class="line">&#123;</span><br><span class="line">swap(arr,x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] arr,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp = arr[x];</span><br><span class="line">arr[x] = arr[y];</span><br><span class="line">arr[y] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">char</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集合框架&quot;&gt;&lt;a href=&quot;#集合框架&quot; class=&quot;headerlink&quot; title=&quot;集合框架&quot;&gt;&lt;/a&gt;集合框架&lt;/h1&gt;&lt;h2 id=&quot;集合框架图&quot;&gt;&lt;a href=&quot;#集合框架图&quot; class=&quot;headerlink&quot; title=&quot;集合框架图&quot;&gt;
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day13-String</title>
    <link href="https://waver.me/2018/01/21/JavaReview-day13-String/"/>
    <id>https://waver.me/2018/01/21/JavaReview-day13-String/</id>
    <published>2018-01-21T07:06:53.000Z</published>
    <updated>2018-01-27T06:27:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String及其他"><a href="#String及其他" class="headerlink" title="String及其他"></a>String及其他</h2><blockquote><p>本篇主要介绍介绍String和其他基本数据类型的包装类型及其常用方法;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String s1 = "abc";//s1是一个类类型变量， "abc"是一个对象。</span></span><br><span class="line"><span class="comment">//字符串最大特点：一旦被初始化就不可以被改变。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String s2 = new String("abc");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//s1和s2有什么区别？</span></span><br><span class="line"><span class="comment">//s1在内存中有一个对象。</span></span><br><span class="line"><span class="comment">//s2在内存中有两个对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">System.out.println(s1==s2);</span></span><br><span class="line"><span class="comment">System.out.println(s1.equals(s2));//String类复写了Object类中equals方法，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//该方法用于判断字符串是否相同。</span></span><br><span class="line"></span><br><span class="line">String s = <span class="string">"abcde"</span>;</span><br><span class="line">method_1(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String类是对字符串事物的描述。</span></span><br><span class="line"><span class="comment">该类定义了专门用于操作字符串的方法。</span></span><br><span class="line"><span class="comment">"abc":</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_1</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch = s.charAt(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"ch="</span>+ch);</span><br><span class="line"><span class="keyword">int</span> num = s.codePointAt(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"num="</span>+num);</span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">"qq"</span>;</span><br><span class="line">s1 = s1.concat(<span class="string">"mm"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"s1="</span>+s1);</span><br><span class="line">System.out.println(<span class="string">"qq"</span>+<span class="string">"mm"</span>);</span><br><span class="line"></span><br><span class="line">String a = <span class="string">"opq"</span>;</span><br><span class="line">String b = <span class="string">"opq"</span>;</span><br><span class="line">System.out.println(<span class="string">"a==b:"</span>+(a==b));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String类适用于描述字符串事物。<br>那么它就提供了多个方法对字符串进行操作。</p><p>常见的操作有哪些？<br>“abcd”</p><h4 id="1-获取。"><a href="#1-获取。" class="headerlink" title="1.获取。"></a>1.获取。</h4><pre><code>1. 字符串中的包含的字符数，也就是字符串的长度。    int length():获取长度。1. 根据位置获取位置上某个字符。    char charAt(int index):1. 根据字符获取该字符在字符串中位置。    int indexOf(int ch):返回的是ch在字符串中第一次出现的位置。    int indexOf(int ch, int fromIndex) :从fromIndex指定位置开始，获取ch在字符串中出现的位置。    int indexOf(String str):返回的是str在字符串中第一次出现的位置。    int indexOf(String str, int fromIndex) :从fromIndex指定位置开始，获取str在字符串中出现的位置。    int lastIndexOf(int ch) ：</code></pre><h4 id="2-判断。"><a href="#2-判断。" class="headerlink" title="2.判断。"></a>2.判断。</h4><pre><code>1. 字符串中是否包含某一个子串。    boolean contains(str):    特殊之处：indexOf(str):可以索引str第一次出现位置，如果返回-1.表示该str不在字符串中存在。            所以，也可以用于对指定判断是否包含。            if(str.indexOf(&quot;aa&quot;)!=-1)            而且该方法即可以判断，有可以获取出现的位置。2. 字符中是否有内容。    boolean isEmpty(): 原理就是判断长度是否为0.3. 字符串是否是以指定内容开头。    boolean startsWith(str);4. 字符串是否是以指定内容结尾。    boolean endsWith(str);5. 判断字符串内容是否相同。复写了Object类中的equals方法。    boolean equals(str);6. 判断内容是否相同，并忽略大小写。    boolean equalsIgnoreCase();</code></pre><h4 id="3-转换。"><a href="#3-转换。" class="headerlink" title="3.转换。"></a>3.转换。</h4><pre><code>1. 将字符数组转成字符串。    构造函数：String(char[])              String(char[],offset,count):将字符数组中的一部分转成字符串。    静态方法：            static String copyValueOf(char[]);            static String copyValueOf(char[] data, int offset, int count)            static String valueOf(char[]):2. 将字符串转成字符数组。**    char[] toCharArray():3. 将字节数组转成字符串。        String(byte[])        String(byte[],offset,count):将字节数组中的一部分转成字符串。4. 将字符串转成字节数组。        byte[]  getBytes():5. 将基本数据类型转成字符串。    static String valueOf(int)    static String valueOf(double)    //3+&quot;&quot;;//String.valueOf(3);    特殊：字符串和字节数组在转换过程中，是可以指定编码表的。</code></pre><h4 id="4-替换"><a href="#4-替换" class="headerlink" title="4.替换"></a>4.替换</h4><pre><code>String replace(oldchar,newchar);</code></pre><h4 id="5-切割"><a href="#5-切割" class="headerlink" title="5.切割"></a>5.切割</h4><pre><code>String[] split(regex);</code></pre><h4 id="6-子串。获取字符串中的一部分。"><a href="#6-子串。获取字符串中的一部分。" class="headerlink" title="6.子串。获取字符串中的一部分。"></a>6.子串。获取字符串中的一部分。</h4><pre><code>String substring(begin);String substring(begin,end);</code></pre><h4 id="7-转换，去除空格，比较。"><a href="#7-转换，去除空格，比较。" class="headerlink" title="7.转换，去除空格，比较。"></a>7.转换，去除空格，比较。</h4><pre><code>1. 将字符串转成大写或则小写。     String toUpperCase();     String toLowerCase();2. 将字符串两端的多个空格去除。    String trim();3. 对两个字符串进行自然顺序的比较。    int compareTo(string);</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StringMethodDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"    Hello Java     "</span>;</span><br><span class="line">sop(s.toLowerCase());</span><br><span class="line">sop(s.toUpperCase());</span><br><span class="line">sop(s.trim());</span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">"a1c"</span>;</span><br><span class="line">String s2 = <span class="string">"aaa"</span>;</span><br><span class="line"></span><br><span class="line">sop(s1.compareTo(s2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"abcdef"</span>;</span><br><span class="line"></span><br><span class="line">sop(s.substring(<span class="number">2</span>));<span class="comment">//从指定位置开始到结尾。如果角标不存在，会出现字符串角标越界异常。</span></span><br><span class="line">sop(s.substring(<span class="number">2</span>,<span class="number">4</span>));<span class="comment">//包含头，不包含尾。s.substring(0,s.length());</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">method_split</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"zhagnsa,lisi,wangwu"</span>;</span><br><span class="line"></span><br><span class="line">String[] arr  = s.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;arr.length; x++)</span><br><span class="line">&#123;</span><br><span class="line">sop(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_replace</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"hello java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//String s1 = s.replace('q','n');//如果要替换的字符不存在，返回的还是原串。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String s1 = s.replace(<span class="string">"java"</span>,<span class="string">"world"</span>);</span><br><span class="line">sop(<span class="string">"s="</span>+s);</span><br><span class="line">sop(<span class="string">"s1="</span>+s1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_trans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] arr = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;;</span><br><span class="line"></span><br><span class="line">String s= <span class="keyword">new</span> String(arr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"s="</span>+s);</span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">"zxcvbnm"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] chs = s1.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;chs.length; x++)</span><br><span class="line">&#123;</span><br><span class="line">sop(<span class="string">"ch="</span>+chs[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_is</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"ArrayDemo.java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断文件名称是否是Array单词开头。</span></span><br><span class="line">sop(str.startsWith(<span class="string">"Array"</span>));</span><br><span class="line"><span class="comment">//判断文件名称是否是.java的文件。</span></span><br><span class="line">sop(str.endsWith(<span class="string">".java"</span>));</span><br><span class="line"><span class="comment">//判断文件中是否包含Demo</span></span><br><span class="line">sop(str.contains(<span class="string">".java"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"abcdeakpf"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line">sop(str.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据索引获取字符。</span></span><br><span class="line">sop(str.charAt(<span class="number">4</span>));<span class="comment">//当访问到字符串中不存在的角标时会发生StringIndexOutOfBoundsException。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据字符获取索引</span></span><br><span class="line">sop(str.indexOf(<span class="string">'m'</span>,<span class="number">3</span>));<span class="comment">//如果没有找到，返回-1.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反向索引一个字符出现位置。</span></span><br><span class="line">sop(str.lastIndexOf(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">method_7();</span><br><span class="line"><span class="comment">//method_trans();</span></span><br><span class="line"><span class="comment">//method_is();</span></span><br><span class="line"><span class="comment">//method_get();</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String s1 = "abc";</span></span><br><span class="line"><span class="comment">String s2 = new String("abc");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String s3 = "abc";</span></span><br><span class="line"><span class="comment">System.out.println(s1==s2);</span></span><br><span class="line"><span class="comment">System.out.println(s1==s3);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String实战"><a href="#String实战" class="headerlink" title="String实战"></a>String实战</h2><h3 id="实战一"><a href="#实战一" class="headerlink" title="实战一"></a>实战一</h3><ul><li>模拟一个trim方法，去除字符串两端的空格。<br>  思路：<ol><li>判断字符串第一个位置是否是空格，如果是继续向下判断，直到不是空格为止。<br> 结尾处判断空格也是如此。</li><li>当开始和结尾都判断到不是空格时，就是要获取的字符串。</li></ol></li></ul><ul><li>将一个字符串进行反转。将字符串中指定部分进行反转，”abcdefg”;abfedcg<br>  思路：<ol><li>曾经学习过对数组的元素进行反转。</li><li>将字符串变成数组，对数组反转。</li><li>将反转后的数组变成字符串。</li><li>只要将或反转的部分的开始和结束位置作为参数传递即可。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"      ab cd      "</span>;</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"("</span>+s+<span class="string">")"</span>);</span><br><span class="line"><span class="comment">//s = myTrim(s);</span></span><br><span class="line"><span class="comment">//sop("("+s+")");</span></span><br><span class="line"></span><br><span class="line">sop(<span class="string">"("</span>+reverseString(s)+<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习二：将字符串反转。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">1，将字符串变成数组。</span></span><br><span class="line"><span class="comment">2，对数组反转。</span></span><br><span class="line"><span class="comment">3，将数组变成字符串。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseString</span><span class="params">(String s,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//字符串变数组。</span></span><br><span class="line"><span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转数组。</span></span><br><span class="line">reverse(chs,start,end);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组变成字符串。</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(chs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseString</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> reverseString(s,<span class="number">0</span>,s.length());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] arr,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> start=x,end=y-<span class="number">1</span>; start&lt;end ; start++,end--)</span><br><span class="line">&#123;</span><br><span class="line">swap(arr,start,end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] arr,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp = arr[x];</span><br><span class="line">arr[x] = arr[y];</span><br><span class="line">arr[y] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习一，去除字符串两端空格。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">myTrim</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>,end = str.length()-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(start&lt;=end &amp;&amp; str.charAt(start)==<span class="string">' '</span>)</span><br><span class="line">start++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(start&lt;=end &amp;&amp; str.charAt(end)==<span class="string">' '</span>)</span><br><span class="line">end--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str.substring(start,end+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战二"><a href="#实战二" class="headerlink" title="实战二"></a>实战二</h3><ul><li>获取一个字符串在另一个字符串中出现的次数。<br>  “abkkcdkkefkkskk”</li></ul><pre><code>- 思路：1. 定义个计数器。2. 获取kk第一次出现的位置。3. 从第一次出现位置后剩余的字符串中继续获取kk出现的位置。    每获取一次就计数一次。4. 当获取不到时，计数完成。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StringTest2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习三。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSubCount</span><span class="params">(String str,String key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((index=str.indexOf(key))!=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sop(<span class="string">"str="</span>+str);</span><br><span class="line">str = str.substring(index+key.length());</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习三，方式二。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSubCount_2</span><span class="params">(String str,String key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((index= str.indexOf(key,index))!=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sop(<span class="string">"index="</span>+index);</span><br><span class="line">index = index + key.length();</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"kkabkkcdkkefkks"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///sop("count====="+str.split("kk").length);不建议使用。</span></span><br><span class="line"></span><br><span class="line">sop(<span class="string">"count="</span>+getSubCount_2(str,<span class="string">"kk"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战三"><a href="#实战三" class="headerlink" title="实战三"></a>实战三</h3><ul><li>获取两个字符串中最大相同子串。第一个动作：将短的那个串进行长度一次递减的子串打印。<br>  “abcwerthelloyuiodef”<br>  “cvhellobnm”<br>  思路：<pre><code>1. 将短的那个子串按照长度递减的方式获取到。2. 将每获取到的子串去长串中判断是否包含，    如果包含，已经找到。</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StringTest3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习四。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMaxSubString</span><span class="params">(String s1,String s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">String max = <span class="string">""</span>,min = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">max = (s1.length()&gt;s2.length())?s1: s2;</span><br><span class="line"></span><br><span class="line">min = (max==s1)?s2: s1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sop("max="+max+"...min="+min);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;min.length(); x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>,z=min.length()-x; z!=min.length()+<span class="number">1</span>; y++,z++)</span><br><span class="line">&#123;</span><br><span class="line">String temp = min.substring(y,z);</span><br><span class="line"></span><br><span class="line">sop(temp);</span><br><span class="line"><span class="keyword">if</span>(max.contains(temp))<span class="comment">//if(s1.indexOf(temp)!=-1)</span></span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s1 = <span class="string">"ab"</span>;</span><br><span class="line">String s2 = <span class="string">"cvhellobnm"</span>;</span><br><span class="line">sop(getMaxSubString(s2,s1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战四"><a href="#实战四" class="headerlink" title="实战四"></a>实战四</h3><p>/*<br>对字符串中字符进行自然顺序排序。</p><p>思路：<br>1，字符串变成字符数组。<br>2，对数组排序，选择，冒泡，Arrays.sort();<br>3，将排序后的数组变成字符串。<br>“vcz1bdAa+cs”–&gt;abccdsvz</p><p><em>作业：<br>“12 0 99 -7 30 4 100 13”<br>要求对字符串中的数值进行排序。生成一个数值从小到大新字符串。<br>“-7 0 4 12 13 30 99 100”</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"12 0 99 -7 30 4 100 13"</span>;</span><br><span class="line">        System.out.println(sortString(str));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String  <span class="title">sortString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] string = str.split(<span class="string">" "</span>);</span><br><span class="line">        List&lt;Integer&gt; integer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; string.length; i ++) &#123;</span><br><span class="line">            integer.add(Integer.parseInt(string[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        sort(integer);</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer1 : integer) &#123;</span><br><span class="line">            result += integer1.toString() + <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>StringBuffer是字符串缓冲区。</p><p>是一个容器。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li>长度是可变化的。</li><li>可以字节操作多个数据类型。</li><li>最终会通过toString方法变成字符串。</li></ol><p>C create U update R read D delete</p><ol><li>存储。<br> StringBuffer append():将指定数据作为参数添加到已有数据结尾处。<br> StringBuffer insert(index,数据):可以将数据插入到指定index位置。</li></ol><ol><li><p>删除。<br> StringBuffer delete(start,end):删除缓冲区中的数据，包含start，不包含end。<br> StringBuffer deleteCharAt(index):删除指定位置的字符。</p></li><li><p>获取。<br> char charAt(int index)<br> int indexOf(String str)<br> int lastIndexOf(String str)<br> int length()<br> String substring(int start, int end)</p></li><li><p>修改。<br> StringBuffer replace(start,end,string);<br> void setCharAt(int index, char ch) ;</p></li></ol><ol><li><p>反转。<br> StringBuffer reverse();</p></li><li><p>将缓冲区中指定数据存储到指定字符数组中。<br> void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</p></li></ol><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><h3 id="API"><a href="#API" class="headerlink" title="API:"></a>API:</h3><p>`一个可变的字符序列。这个类提供了一个API兼容 StringBuffer，但无法保证同步。本课程是专为使用作为一个下降的替代 StringBuffer在地方的字符串缓冲区被一个线程使用（一般情况下）。在可能的情况下，建议优先使用这类 StringBuffer它将在大多数实现更快。<br>在StringBuilder的主营业务是append和insert方法的重载，以便接受任何数据类型。每个有效地将一个给定的数据到一个字符串，然后追加或插入字符串的字符的字符串生成器。的append方法总是说这些人物在生成器的结束；的insert方法添加字符在指定点。</p><p>例如，如果z指字符串生成器对象的当前内容是“start”，然后调用方法z.append(“le”)会导致字符串生成器包含“startle”，而z.insert(4, “le”)会改变字符串生成器包含“starlet”。</p><p>一般来说，如果某人是一个StringBuilder实例，然后sb.append(x)具有相同的效果sb.insert(sb.length(), x)。</p><p>每一个字符串生成器都有一个容量。只要字符串生成器中包含的字符序列的长度不超过容量，就没有必要分配一个新的内部缓冲区。如果内部缓冲区溢出，则自动作出较大的。</p><p>StringBuilder不安全的实例用于多个线程。如果需要同步然后建议StringBuffer可用。</p><p>除非另有说明，通过null争论这类构造函数或方法会导致一个NullPointerException被。`</p><p>JDK1.5 版本之后出现了StringBuilder.</p><p><strong>StringBuffer是线程同步。<br>  StringBuilder是线程不同步。</strong></p><font color="red"><strong>以后开发，建议使用StringBuilder</strong></font><p>Java升级的三个因素：</p><ol><li>提高效率。</li><li>简化书写。</li><li>提高安全性。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBufferDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//method_update();</span></span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"abcdef"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sb.getChars(<span class="number">1</span>,<span class="number">4</span>,chs,<span class="number">1</span>);<span class="comment">//将</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;chs.length; x++)</span><br><span class="line">&#123;</span><br><span class="line">sop(<span class="string">"chs["</span>+x+<span class="string">"]="</span>+chs[x]+<span class="string">";"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">draw(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">draw(<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//StringBuilder sb1 = new StringBuilder();</span></span><br><span class="line"><span class="comment">//sb1.append(new Demo()).append(new Demo());</span></span><br><span class="line"><span class="comment">//sop("sb1="+sb1);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuffer sb  = <span class="keyword">new</span> StringBuffer(<span class="string">"abcde"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sb.replace(1,4,"java");</span></span><br><span class="line">sb.setCharAt(<span class="number">2</span>,<span class="string">'k'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sop(sb.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuffer sb  = <span class="keyword">new</span> StringBuffer(<span class="string">"abcde"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sb.delete(1,3);</span></span><br><span class="line"><span class="comment">//清空缓冲区。</span></span><br><span class="line"><span class="comment">//sb.delete(0,sb.length());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sb.delete(2,3);</span></span><br><span class="line">sb.deleteCharAt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">sop(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//sb.append("abc").append(true).append(34);</span></span><br><span class="line"><span class="comment">//StringBuffer sb1 = sb.append(34);</span></span><br><span class="line"><span class="comment">//sop("sb==sb1:"+(sb==sb1));</span></span><br><span class="line"></span><br><span class="line">sb.insert(<span class="number">1</span>,<span class="string">"qq"</span>);</span><br><span class="line">sop(sb.toString());<span class="comment">//abctrue34</span></span><br><span class="line"><span class="comment">//sop(sb1.toString());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;row; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;col; y++)</span><br><span class="line">&#123;</span><br><span class="line">sb.append(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sop(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>/*<br>基本数据类型对象包装类。<br>| 引用类型 | 包装类型 |<br>|:—–:|:—–:|<br>| byte    | Byte  |<br>| short    | Short |<br>| int        | Integer |<br>| long    | Long |<br>| boolean | Boolean |<br>| float     | Float |<br>| double | Double |<br>| char     | Character |</p><h3 id="基本数据类型对象包装类的最常见作用，"><a href="#基本数据类型对象包装类的最常见作用，" class="headerlink" title="基本数据类型对象包装类的最常见作用，"></a>基本数据类型对象包装类的最常见作用，</h3><p>  就是用于基本数据类型和字符串类型之间做转换</p><ol><li><p>基本数据类型转成字符串。</p><p> 基本数据类型+””</p><p> 基本数据类型.toString(基本数据类型值);</p><p> 如： <code>Integer.toString(34);</code>//将34整数变成”34”;</p></li><li><p>字符串转成基本数据类型。</p><p> `xxx a = Xxx.parseXxx(String);</p><p> int a = Integer.parseInt(“123”);</p><p> double b = Double.parseDouble(“12.23”);</p><p> boolean b = Boolean.parseBoolean(“true”);</p><p> Integer i = new Integer(“123”);</p><p> int num = i.intValue();`</p></li><li><p>进制转换</p><ul><li>十进制转成其他进制。<br><code>toBinaryString();toHexString();toOctalString();</code></li></ul></li></ol><ul><li>其他进制转成十进制。<br>  <code>parseInt(string,radix);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//整数类型的最大值。</span></span><br><span class="line"><span class="comment">//sop("int max :"+Integer.MAX_VALUE);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个字符串转成整数。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(<span class="string">"123"</span>);<span class="comment">//必须传入数字格式的字符串。</span></span><br><span class="line"><span class="comment">//long x = Long.parseLong("123");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sop("num="+(num+4));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sop(Integer.toBinaryString(-6));</span></span><br><span class="line"><span class="comment">//sop(Integer.toHexString(60));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = Integer.parseInt(<span class="string">"3c"</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"x="</span>+x);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Integer常用方法"><a href="#Integer常用方法" class="headerlink" title="Integer常用方法"></a>Integer常用方法</h3><p>/*<br>JDK1.5版本以后出现的新特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Integer x = new Integer(4);</span></span><br><span class="line"></span><br><span class="line">Integer x = <span class="number">4</span>;<span class="comment">//自动装箱。//new Integer(4)</span></span><br><span class="line">x = x<span class="comment">/* x.intValue() */</span> + <span class="number">2</span>;<span class="comment">//x+2:x 进行自动拆箱。变成成了int类型。和2进行加法运算。</span></span><br><span class="line"><span class="comment">//再将和进行装箱赋给x。</span></span><br><span class="line"></span><br><span class="line">Integer m = <span class="number">128</span>;</span><br><span class="line">Integer n = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"m==n:"</span>+(m==n));</span><br><span class="line"></span><br><span class="line">Integer a = <span class="number">127</span>;</span><br><span class="line">Integer b = <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"a==b:"</span>+(a==b));<span class="comment">//结果为true。因为a和b指向了同一个Integer对象。</span></span><br><span class="line">   <span class="comment">//因为当数值在byte范围内容，对于新特性，如果该数值已经存在，则不会在开辟新的空间。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"x==y:"</span>+(x==y));</span><br><span class="line">sop(<span class="string">"x.equals(y):"</span>+x.equals(y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object str)</span><span class="comment">//Object str = new Integer(4);</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">sop(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//int[] arr = &#123;3,1,5,8,23,9&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//System.out.println(toString(arr));</span></span><br><span class="line"><span class="comment">//System.out.println(toString_2(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString_2</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"["</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=arr.length-<span class="number">1</span>)</span><br><span class="line">sb.append(arr[x]+<span class="string">", "</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sb.append(arr[x]+<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"["</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=arr.length-<span class="number">1</span>)</span><br><span class="line">str += arr[x]+<span class="string">", "</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">str += arr[x]+<span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;String及其他&quot;&gt;&lt;a href=&quot;#String及其他&quot; class=&quot;headerlink&quot; title=&quot;String及其他&quot;&gt;&lt;/a&gt;String及其他&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本篇主要介绍介绍String和其他基本数据类型的包装类型及
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day12-线程通信</title>
    <link href="https://waver.me/2018/01/20/JavaReview-day12-%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
    <id>https://waver.me/2018/01/20/JavaReview-day12-线程通信/</id>
    <published>2018-01-20T07:20:31.000Z</published>
    <updated>2018-01-22T11:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><font color="red">线程间通讯：<br>其实就是多个线程在操作同一个资源，<br>但是操作的动作不同。</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Resource r = <span class="keyword">new</span> Resource();</span><br><span class="line"></span><br><span class="line">Producer pro = <span class="keyword">new</span> Producer(r);</span><br><span class="line">Consumer con = <span class="keyword">new</span> Consumer(r);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(con);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于多个生产者和消费者。<br>为什么要定义while判断标记。<br>原因：让被唤醒的线程再一次判断标记。</p><p>为什么定义<code>notifyAll</code>，<br>因为需要唤醒对方线程。<br>因为只用notify，容易出现只唤醒本方线程的情况。导致程序中的所有线程都等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//  t1    t2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;<span class="comment">//t1(放弃资格)  t2(获取资格)</span></span><br><span class="line"><span class="keyword">this</span>.name = name+<span class="string">"--"</span>+count++;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...生产者.."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  t3   t4  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!flag)</span><br><span class="line"><span class="keyword">try</span>&#123;wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;<span class="comment">//t3(放弃资格) t4(放弃资格)</span></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...消费者........."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">Producer(Resource res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">res.set(<span class="string">"+商品+"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">Consumer(Resource res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">res.out();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进程同步优化解决方案"><a href="#进程同步优化解决方案" class="headerlink" title="进程同步优化解决方案"></a>进程同步优化解决方案</h3><p>JDK1.5 中提供了多线程升级解决方案。<br>将同步Synchronized替换成显式的Lock操作。<br>将Object中的wait，notify notifyAll，替换了Condition对象。<br>该对象可以Lock锁 进行获取。<br>该示例中，实现了本方只唤醒对方操作。</p><ul><li><p>Lock:替代了Synchronized</p><pre><code>lockunlocknewCondition()</code></pre></li><li><p>Condition：替代了Object wait notify notifyAll</p><pre><code>await();signal();signalAll();</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerDemo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Resource r = <span class="keyword">new</span> Resource();</span><br><span class="line"></span><br><span class="line">Producer pro = <span class="keyword">new</span> Producer(r);</span><br><span class="line">Consumer con = <span class="keyword">new</span> Consumer(r);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(con);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//  t1    t2</span></span><br><span class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Condition condition_pro = lock.newCondition();</span><br><span class="line"><span class="keyword">private</span> Condition condition_con = lock.newCondition();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span><span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line">condition_pro.await();<span class="comment">//t1,t2</span></span><br><span class="line"><span class="keyword">this</span>.name = name+<span class="string">"--"</span>+count++;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...生产者.."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">condition_con.signal();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">lock.unlock();<span class="comment">//释放锁的动作一定要执行。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  t3   t4  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span><span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!flag)</span><br><span class="line">condition_con.await();</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...消费者........."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">condition_pro.signal();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">Producer(Resource res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">res.set(<span class="string">"+商品+"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">Consumer(Resource res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">res.out();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Res</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name,String sex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">this</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(name+<span class="string">"........"</span>+sex);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">this</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Res r ;</span><br><span class="line">Input(Res r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.r = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>)</span><br><span class="line">r.set(<span class="string">"mike"</span>,<span class="string">"man"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r.set(<span class="string">"丽丽"</span>,<span class="string">"女女女女女"</span>);</span><br><span class="line">x = (x+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Res r ;</span><br><span class="line"></span><br><span class="line">Output(Res r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.r = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">r.out();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">InputOutputDemo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Res r = <span class="keyword">new</span> Res();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Input(r)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Output(r)).start();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input in = new Input(r);</span></span><br><span class="line"><span class="comment">Output out = new Output(r);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Thread t1 = new Thread(in);</span></span><br><span class="line"><span class="comment">Thread t2 = new Thread(out);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t2.start();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>等待的线程存放在线程池中</strong><br><strong>最先唤醒的是最先被冻结的线程</strong></p><h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><p><strong>stop方法已经过时。</strong></p><p>如何停止线程？<br>只有一种，run方法结束。<br>开启多线程运行，运行代码通常是循环结构。<br>只要控制住循环，就可以让run方法结束，也就是线程结束。</p><p>特殊情况：<br>当线程处于了冻结状态。<br>就不会读取到标记。那么线程就不会结束。</p><p>当没有指定的方式让冻结的线程恢复到运行状态是，这时需要对冻结进行清除。<br>强制让线程恢复到运行状态中来。这样就可以操作标记让线程结束。</p><p>Thread类提供该方法 <code>interrupt()</code>;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag =<span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeFlag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StopThreadDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StopThread st = <span class="keyword">new</span> StopThread();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(st);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(st);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t2.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num++ == <span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//st.changeFlag();</span></span><br><span class="line"><span class="comment">//t1.interrupt();</span></span><br><span class="line"><span class="comment">//t2.interrupt();</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"......."</span>+num);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"over"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>join:<br>当A线程执行到了B线程的.join()方法时，A就会等待。等B线程都执行完，A才会执行。</p><p>join可以用来临时加入线程执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">70</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().toString()+<span class="string">"....."</span>+x);</span><br><span class="line">Thread.yield();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">JoinDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(d);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(d);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//t1.setPriority(Thread.MAX_PRIORITY);</span></span><br><span class="line"></span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//t1.join();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">80</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//System.out.println("main....."+x);</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"over"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.currentThread().sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"MyThread running"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">t.run();</span><br><span class="line">t.start();</span><br><span class="line">System.out.println(<span class="string">"Thread Test"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码分析过程："><a href="#代码分析过程：" class="headerlink" title="代码分析过程："></a>代码分析过程：</h4><p><code>MyThread t = new MyThread();</code><br>创建了一个线程。<br><code>t.run();</code><br>调用<code>MyThread</code>对象的<code>run()</code>方法。<br>这是只有一个线程在运行就是主线程。<br>当主线程执行到了<code>run()</code>方法中的<code>sleep(3000);</code>时。<br>这是主线程处于冻结状态。程序并没有任何执行。<br>当3秒过后，主线程打印了  <code>MyThread running</code>。 <code>run()</code>方法执行结束。</p><p><code>t.start();</code><br>开启了t线程。<br><strong>有两种可能情况。</strong></p><ol><li><p>第一种情况:<br>主线程在只执行了<code>t.start()</code>后，还具有执行权，继续往下执行，<br>打印了<code>Thread Test</code>。主线程结束。<br>t线程获取执行权，调用自己的run方法。然后执行的<code>sleep(3000);</code>冻结3秒。<br>3秒后，打印MyThread running t线程结束，整个程序结束。</p></li><li><p>第二种情况：<br>主线程执行到<code>t.start();</code>开启了t线程，t线程就直接获取到了执行权。<br>就调用自己的<code>run()</code>方法。<br>指定到<code>sleep(3000)</code>.t线程冻结3秒，这是t线程就是释放了执行权。<br>那么主线程开始执行打印了<code>Thread Test</code>，主线程结束。<br>等到3秒后，t线程打印<code>MyThread running</code> ，然后t线程结束。<br>程序结束。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="线程间通信。"><a href="#线程间通信。" class="headerlink" title="线程间通信。"></a>线程间通信。</h4><pre><code>等待/唤醒机制。也就是常见的生产者消费者问题。1. 当多个生产者消费者出现时，需要让获取执行权的线程判断标记。通过while完成。2. 需要将对方的线程唤醒。仅仅用notify，是不可以的。因为有可能出现只唤醒本方。有可能会导致，所有线程都等待。所以可以通过notifyAll的形式来完成 。</code></pre><p><em>这个程序有一个bug。就是每次notifyAll。都会唤醒本方。<br>可不可以只唤醒对方呢？</em></p><p><strong>JDK1.5版本提供了一些新的对象，优化了等待唤醒机制。</strong></p><ol><li>将synchronized 替换成了Lock接口。<br> 将隐式锁，升级成了显示锁。<br> <strong>Lock</strong><pre><code>- 获取锁：lock();- 释放锁：unlock();注意：释放的动作一定要执行，所以通常定义在finally中。- 获取Condition对象：newCondition();</code></pre></li><li>将Object中的wait，notify，notifyAll方法都替换成了Condition的await，signal，signalAll。<br> 和以前不同是：一个同步代码块具备一个锁，该所以具备自己的独立wait和notify方法。<br> 现在是将wait，notify等方法，封装进一个特有的对象Condition，而一个Lock锁上可以有多个Condition对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">Condition conA = lock.newCondition();</span><br><span class="line">Condition conB = lock.newCondition();</span><br><span class="line"></span><br><span class="line">con.await();<span class="comment">//生产，，消费</span></span><br><span class="line">con.signal();生产</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">conA.await();<span class="comment">//生产者，</span></span><br><span class="line">code......;</span><br><span class="line"></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">conB.signal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">conB.await();<span class="comment">//消费者</span></span><br><span class="line"></span><br><span class="line">code....;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">conA.signal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>wait和sleep的区别：<br>wait:释放cpu执行权，释放同步中锁。<br>sleep:释放cpu执行权，不释放同步中锁。</li></ul><p><code>synchronized(锁){wait();}</code></p><h4 id="停止线程："><a href="#停止线程：" class="headerlink" title="停止线程："></a>停止线程：</h4><pre><code>**stop过时。**原理：run方法结束。run方法中通常定义循环，指定控制住循环线程即可结束。1. 定义结束标记。2. 当线程处于了冻结状态，没有执行标记，程序一样无法结束。    这时可以循环，正常退出冻结状态，或者强制结束冻结状态。    强制结束冻结状态：interrupt();目的是线程强制从冻结状态恢复到运行状态。    但是会发生InterruptedException异常。</code></pre><ul><li><p>线程中一些常见方法：<br>  setDaemon(boolean):将线程标记为后台线程，后台线程和前台线程一样，开启，一样抢执行权运行，<br>  只有在结束时，有区别，当前台线程都运行结束后，后台线程会自动结束。</p><p>  join():什么意思？等待该线程结束。当A线程执行到了B的.join方法时，A就会处于冻结状态。</p><pre><code>A什么时候运行呢？当B运行结束后，A就会具备运行资格，继续运行。</code></pre><p>  加入线程，可以完成对某个线程的临时加入执行。</p></li></ul><p><strong>多线程重点:</strong></p><ol><li><p>多线程的创建的两种方式，以及区别。</p></li><li><p>同步的特点。<br>   同步的好处：<br>   同步的弊端：<br>   同步的前提：<br>   同步的表现形式以及区别。<br>   特例：static同步函数锁是哪一个。</p><p> <strong>死锁代码要求写的出来。</strong></p></li><li><p>线程间通信，看以上总结。</p></li></ol><ol><li>wait和sleep，  <code>yield()</code>: 临时暂停，可以让线程是释放执行权。<br><code>yield()</code>方法API:<br>`给调度程序的一个提示，当前线程愿意得到它当前的处理器的使用。调度程序可以自由地忽略这个提示。<br>产量是一个启发式的尝试，以改善线程之间的相对进展，否则将过度使用一个中央处理器。它的使用应结合详细的分析和基准，以确保它实际上有所需的效果。</li></ol><p>使用这种方法是不恰当的。它可能是有用的调试或测试的目的，它可能有助于重现由于种族条件的错误。这也可能是有用的在设计并发控制结构如在java.util.concurrent.locks包的。<br>`</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线程通信&quot;&gt;&lt;a href=&quot;#线程通信&quot; class=&quot;headerlink&quot; title=&quot;线程通信&quot;&gt;&lt;/a&gt;线程通信&lt;/h2&gt;&lt;font color=&quot;red&quot;&gt;线程间通讯：&lt;br&gt;其实就是多个线程在操作同一个资源，&lt;br&gt;但是操作的动作不同。&lt;/font
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day11-线程</title>
    <link href="https://waver.me/2018/01/19/JavaReview-day11-%E7%BA%BF%E7%A8%8B/"/>
    <id>https://waver.me/2018/01/19/JavaReview-day11-线程/</id>
    <published>2018-01-19T04:01:06.000Z</published>
    <updated>2018-01-22T11:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h3><ul><li><p>进程:<br>是一个正在执行中的程序。<br>  每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制元。</p></li><li><p>线程：就是进程中的一个独立的控制单元。</p><pre><code>线程在控制着进程的执行。</code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>一个进程中至少有一个线程。</p></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h3><ul><li><p>Java VM  启动的时候会有一个进程java.exe.<br>该进程中至少一有个线程负责java程序的执行。而且这个线程运行的代码存在于main方法中。该线程称之为主线程。</p></li><li><p>扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程。</p></li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>如何在自定义的代码中，自定义一个线程呢？</li></ol><p>通过对api的查找，java已经提供了对线程这类事物的描述。就Thread类。</p><p>创建线程的第一种方式：继承Thread类。</p><ul><li>步骤：<ol><li>定义类继承Thread。</li><li>复写Thread类中的run方法。<br>目的: 将自定义代码存储在run方法。让线程运行。</li></ol></li></ul><ol><li>调用线程的start方法，<br> 该方法两个作用：启动线程，调用run方法。</li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>发现运行结果每一次都不同。<br>因为多个线程都获取 <strong>cpu的执行权</strong>。cpu执行到谁，谁就运行。<br>明确一点，在某一个时刻，只能有一个程序在运行。(多核除外)<br>cpu在做着快速的切换，以达到看上去是同时运行的效果。<br>我们可以形象把多线程的运行行为在互相抢夺cpu的执行权。</p><ul><li>这就是多线程的一个特性：随机性。谁抢到谁执行，至于执行多长，cpu说的算。</li></ul><h3 id="为什么要覆盖run方法呢？"><a href="#为什么要覆盖run方法呢？" class="headerlink" title="为什么要覆盖run方法呢？"></a>为什么要覆盖run方法呢？</h3><p>Thread类用于描述线程。</p><p>该类就定义了一个功能，用于存储线程要运行的代码。该存储功能就是run方法。</p><p>也就是说Thread类中的run方法，用于存储线程要运行的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">60</span>; x++)</span><br><span class="line">System.out.println(<span class="string">"demo run----"</span>+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//for(int x=0; x&lt;4000; x++)</span></span><br><span class="line"><span class="comment">//System.out.println("Hello World!");</span></span><br><span class="line"></span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();<span class="comment">//创建好一个线程。</span></span><br><span class="line"><span class="comment">//d.start();//开启线程并执行该线程的run方法。</span></span><br><span class="line">d.run();<span class="comment">//仅仅是对象调用方法。而线程创建了，并没有运行。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">60</span>; x++)</span><br><span class="line">System.out.println(<span class="string">"Hello World!--"</span>+x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习：</span></span><br><span class="line"><span class="comment">创建两个线程，和主线程交替运行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">原来线程都有自己默认的名称。</span></span><br><span class="line"><span class="comment">Thread-编号 该编号从0开始。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">static Thread currentThread():获取当前线程对象。</span></span><br><span class="line"><span class="comment">getName(): 获取线程名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">设置线程名称：setName或者构造函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//private String name;</span></span><br><span class="line">Test(String name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//this.name = name;</span></span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">60</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println((Thread.currentThread()==<span class="keyword">this</span>)+<span class="string">"..."</span>+<span class="keyword">this</span>.getName()+<span class="string">" run..."</span>+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1 = <span class="keyword">new</span> Test(<span class="string">"one---"</span>);</span><br><span class="line">Test t2 = <span class="keyword">new</span> Test(<span class="string">"two+++"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line"><span class="comment">//t1.run();</span></span><br><span class="line"><span class="comment">//t2.run();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">60</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"main....."</span>+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的状态图"><a href="#线程的状态图" class="headerlink" title="线程的状态图"></a>线程的状态图</h3><p><img src="/images/post_images/javaReview_day11_img_01" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：</span></span><br><span class="line"><span class="comment">银行有一个金库。</span></span><br><span class="line"><span class="comment">有两个储户分别存300元，每次存100，存3次。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">目的：该程序是否有安全问题，如果有，如何解决？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何找问题：</span></span><br><span class="line"><span class="comment">1，明确哪些代码是多线程运行代码。</span></span><br><span class="line"><span class="comment">2，明确共享数据。</span></span><br><span class="line"><span class="comment">3，明确多线程运行代码中哪些语句是操作共享数据的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sum;</span><br><span class="line"><span class="comment">//Object obj = new Object();</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//synchronized(obj)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line">sum = sum + n;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cus</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Bank b = <span class="keyword">new</span> Bank();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">3</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line">b.add(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">BankDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cus c = <span class="keyword">new</span> Cus();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(c);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(c);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果同步函数被静态修饰后-使用的锁是什么呢？"><a href="#如果同步函数被静态修饰后-使用的锁是什么呢？" class="headerlink" title="如果同步函数被静态修饰后, 使用的锁是什么呢？"></a>如果同步函数被静态修饰后, 使用的锁是什么呢？</h3><p>通过验证，发现不在是this。因为静态方法中也不可以定义this。</p><p>静态进内存是，内存中没有本类对象，但是一定有该类对应的字节码文件对象。<br>类名.class  该对象的类型是Class</p><p>静态的同步方法，使用的锁是该方法所在类的字节码文件对象。 类名.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">int</span> tick = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//Object obj = new Object();</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(Ticket.class)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....code : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....show.... : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StaticMethodDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">t1.start();</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">t.flag = <span class="keyword">false</span>;</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="买票小程序"><a href="#买票小程序" class="headerlink" title="买票小程序"></a>买票小程序</h3><p>需求：简单的卖票程序。<br>多个窗口同时买票。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span>//<span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">int</span> tick = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....sale : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">TicketDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(t);<span class="comment">//创建了一个线程；</span></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t);<span class="comment">//创建了一个线程；</span></span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(t);<span class="comment">//创建了一个线程；</span></span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(t);<span class="comment">//创建了一个线程；</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Ticket t1 = new Ticket();</span></span><br><span class="line"><span class="comment">//Ticket t2 = new Ticket();</span></span><br><span class="line"><span class="comment">//Ticket t3 = new Ticket();</span></span><br><span class="line"><span class="comment">//Ticket t4 = new Ticket();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建线程的第二种方式：实现Runable接口"><a href="#创建线程的第二种方式：实现Runable接口" class="headerlink" title="创建线程的第二种方式：实现Runable接口"></a>创建线程的第二种方式：实现Runable接口</h3><p>步骤：</p><ol><li>定义类实现Runnable接口</li><li><p>覆盖Runnable接口中的run方法。<br> 将线程要运行的代码存放在该run方法中。</p></li><li><p>通过Thread类建立线程对象。</p></li><li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。<br> 为什么要将Runnable接口的子类对象传递给Thread的构造函数。<br> 因为，自定义的run方法所属的对象是Runnable接口的子类对象。<br> 所以要让线程去执行指定对象的run方法。就必须明确该run方法所属对象。</li></ol><ol><li>调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。</li></ol><h4 id="实现方式和继承方式有什么区别呢？"><a href="#实现方式和继承方式有什么区别呢？" class="headerlink" title="实现方式和继承方式有什么区别呢？"></a>实现方式和继承方式有什么区别呢？</h4><ul><li><p>实现方式好处：避免了单继承的局限性。<br>在定义线程时，建意使用实现方式。</p></li><li><p>两种方式区别：<br>继承Thread:线程代码存放Thread子类run方法中。<br>实现Runnable，线程代码存在接口的子类的run方法。</p></li></ul><h2 id="线程同步-线程安全"><a href="#线程同步-线程安全" class="headerlink" title="线程同步(线程安全)"></a>线程同步(线程安全)</h2><h3 id="问题-同步函数用的是哪一个锁呢？"><a href="#问题-同步函数用的是哪一个锁呢？" class="headerlink" title="问题: 同步函数用的是哪一个锁呢？"></a>问题: 同步函数用的是哪一个锁呢？</h3><p>函数需要被对象调用。那么函数都有一个所属对象引用。就是this。<br>所以同步函数使用的锁是this。</p><p>通过该程序进行验证。</p><p>使用两个线程来买票。<br>一个线程在同步代码块中。<br>一个线程在同步函数中。<br>都在执行买票动作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">int</span> tick = <span class="number">100</span>;</span><br><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....code : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="comment">//this</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....show.... : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ThisLockDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">t1.start();</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">t.flag = <span class="keyword">false</span>;</span><br><span class="line">t2.start();</span><br><span class="line"><span class="comment">//Thread t3 = new Thread(t);</span></span><br><span class="line"><span class="comment">//Thread t4 = new Thread(t);</span></span><br><span class="line"><span class="comment">//t3.start();</span></span><br><span class="line"><span class="comment">//t4.start();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程安全在单例设计模式中的应用"><a href="#线程安全在单例设计模式中的应用" class="headerlink" title="线程安全在单例设计模式中的应用"></a>线程安全在单例设计模式中的应用</h3><ul><li><p>饿汉式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Single s = <span class="keyword">new</span> Single();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>懒汉式</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Single <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(Single.class)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="keyword">null</span>)</span><br><span class="line"><span class="comment">//---&gt;A;</span></span><br><span class="line">s = <span class="keyword">new</span> Single();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁。<br>同步中嵌套同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">int</span> tick = <span class="number">1000</span>;</span><br><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj)</span><br><span class="line">&#123;</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="comment">//this</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....code : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DeadLockDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">t1.start();</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">t.flag = <span class="keyword">false</span>;</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="死锁练习"><a href="#死锁练习" class="headerlink" title="死锁练习"></a>死锁练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line">Test(<span class="keyword">boolean</span> flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.flag = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(MyLock.locka)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...if locka "</span>);</span><br><span class="line"><span class="keyword">synchronized</span>(MyLock.lockb)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"..if lockb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(MyLock.lockb)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"..else lockb"</span>);</span><br><span class="line"><span class="keyword">synchronized</span>(MyLock.locka)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">".....else locka"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLock</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> Object locka = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">static</span> Object lockb = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DeadLockTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Test(<span class="keyword">true</span>));</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Test(<span class="keyword">false</span>));</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>进程：正在执行的程序。</p></li><li><p>线程：是进程中用于控制程序执行的控制单元(执行路径，执行情景)<br>进程中至少有一个线程。</p></li><li><p>对于JVM，启动时，只好有两个线程：jvm的主线程。jvm的垃圾回收线程。</p></li></ul><p><strong>如何在程序中自定义线程呢？</strong></p><p>Java给我们提供了对象线程这类事物的描述。该类是Thread</p><p>该类中定义了，<br>创建线程对象的方法(构造函数).<br>提供了要被线程执行的代码存储的位置(run())</p><p>还定义了开启线程运行的方法(start()).<br>同时还有一些其他的方法用于操作线程：<br>    static Thread currentThead():<br>    String getName():<br>    static void sleep(time)throws InterruptedException:</p><p>要运行的代码都是后期定义的。<br>所以创建线程的第一种方式是：继承Thread类。原因：要覆盖run方法，定义线程要运行的代码。</p><p>步骤：</p><ol><li>继承Thread类。</li><li>覆盖run方法。将线程要运行的代码定义其中。</li><li>建Thread类的子类对象，其实就是在创建线程，调用start方法。</li></ol><p>如果自定义的类中有多线程要运行的代码。但是该类有自己的父类。<br>那么就不可以在继承Thread。怎么办呢？</p><p>Java给我们提供了一个规则。Runnable接口。<br>如果自定义类不继承Thread，也可以实现Runnable接口。并将多线程要运行的代码存放在Runnable的run方法中。<br>这样多线程也可以帮助该类运行。<br>这样的操作有一个好处：避免了单继承的局限性。</p><p>创建线程的第二种方式：实现Runnable接口。</p><p>步骤：</p><ol><li>定义了实现Runnable接口。</li><li>覆盖接口的run方法。将多线程要运行的代码存入其中。</li><li>创建Thread类的对象(创建线程),并将Runnable接口的子类对象作为参数传递给Thread的构造函数。<br> 为什么要传递？因为线程要运行的代码都在Runnable子类的run方法中存储。所以要将该run方法所属的对象<br> 传递给Thread。让Thread线程去使用该对象调用其run方法。</li><li>调用Thread对象的start方法。开启线程。</li></ol><p>动手写代码。</p><p>两种方式的特点：<br>实现方式，因为避免了单继承的局限性，所以创建线程建议使用第二种方式。</p><h3 id="第一重点：创建线程的两种方式"><a href="#第一重点：创建线程的两种方式" class="headerlink" title="第一重点：创建线程的两种方式"></a>第一重点：创建线程的两种方式</h3><p>作为了解：<br>线程的状态。</p><ol><li>被创建。</li><li>运行。</li><li>冻结。</li><li>消亡。</li></ol><p>其实还有一种特殊的状态：临时状态。</p><p>该临时状态的特点：<br>具备了执行资格，但不具备执行权。</p><p><strong>冻结状态的特点</strong>：</p><ul><li>放弃了执行资格。<br>多线程具备随机性。因为是由cpu不断的快速切换造成的。<br>就有可能会产生多线程的安全问题;</li></ul><h4 id="问题的产生的原因："><a href="#问题的产生的原因：" class="headerlink" title="问题的产生的原因："></a>问题的产生的原因：</h4><p>几个关键点：</p><ol><li>多线程代码中有操作共享数据。</li><li>多条语句操作该共享数据。</li></ol><p>当具备两个关键点时，<br>有一个线程对多条操作共享数据的代码执行的一部分。还没有执行完，另一个线程开始参与执行。就会发生数据错误。</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>当一个线程在执行多条操作共享数据代码时，其他线程即使获取了执行权，也不可以参与操作。</p><p>Java就对这种解决方式提供了专业的代码。</p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>同步的原理：就是将部分操作功能数据的代码进行加锁。</p><p>示例：火车上的卫生间。</p><p>同步的表现形式：</p><ol><li>同步代码块。</li><li>同步函数。<br>两者有什么不同：<br>同步代码块使用的锁是任意对象。<br>同步函数使用的锁是this。</li></ol><p>注意：对于static的同步函数，使用的锁不是this。是 类名.class 是该类的字节码文件对象。<br>    涉及到了单例设计模式的懒汉式。</p><h4 id="同步的好处：解决了线程的安全问题。"><a href="#同步的好处：解决了线程的安全问题。" class="headerlink" title="同步的好处：解决了线程的安全问题。"></a>同步的好处：解决了线程的安全问题。</h4><ul><li>弊端：<br>  较为消耗资源。<br>  同步嵌套后，容易死锁。</li></ul><p><strong>要记住</strong>：同步使用的前提：</p><pre><code>1. 必须是两个或者两个以上的线程。2. 必须是多个线程使用同一个锁。这是才可以称为这些线程被同步了。</code></pre><p><strong>死锁代码一定会写。但开发时一定注意避免。</strong></p><h3 id="第二重点：同步的所有特性"><a href="#第二重点：同步的所有特性" class="headerlink" title="第二重点：同步的所有特性"></a>第二重点：同步的所有特性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Runnable target;</span><br><span class="line"></span><br><span class="line">Thread()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">Thread(Runnable target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(target!=<span class="keyword">null</span>)</span><br><span class="line">target.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">Test q = <span class="keyword">new</span> Test();</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h2&gt;&lt;h3 id=&quot;进程和线程的区别&quot;&gt;&lt;a href=&quot;#进程和线程的区别&quot; class=&quot;headerlink&quot; title=&quot;进程和线程的区别&quot;
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
</feed>
