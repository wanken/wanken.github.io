<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Waver&#39;s Blog</title>
  
  <subtitle>个人知识博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wavejoker.github.io/"/>
  <updated>2017-12-17T06:12:43.365Z</updated>
  <id>http://wavejoker.github.io/</id>
  
  <author>
    <name>Waver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub Pages绑定域名</title>
    <link href="http://wavejoker.github.io/2017/12/17/GitHub%20Pages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    <id>http://wavejoker.github.io/2017/12/17/GitHub Pages绑定域名/</id>
    <published>2017-12-17T05:11:03.000Z</published>
    <updated>2017-12-17T06:12:43.365Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述</p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名:"></a>购买域名:</h2><p>如果嫌麻烦可以在<a href="https://www.godaddy.com/" target="_blank" rel="noopener">Godaddy</a> 购买<br>也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程</p><h3 id="选购域名"><a href="#选购域名" class="headerlink" title="选购域名"></a>选购域名</h3><p>  可以在<a href="https://sg.godaddy.com/zh/domains/domain-name-search" target="_blank" rel="noopener">此页面</a>搜索你喜欢的<br>域名是否被占用, 如果未被占用, 至于域名后缀选择, 可参考<a href="https://www.zhihu.com/question/19610337" target="_blank" rel="noopener">知乎答案</a> 推荐使用<code>.me</code></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><h4 id="更换域名服务器"><a href="#更换域名服务器" class="headerlink" title="更换域名服务器"></a>更换域名服务器</h4><p>  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPot</a><br>解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到<br>Godaddy 的域名服务器<br><img src="/images/post_images/20171217_DNSPot.jpg" alt="图1"><br><img src="/images/post_images/20171217_GoDaddy_DNS.jpg" alt="图2"><br>注意: 在GoDaddy中配置的为”f1g1ns1.dnspod.net”, 为没有”f1g1ns1.dnspod.net.”要去掉最<br>后的 <code>.</code></p><h4 id="GitHub中的域名支持"><a href="#GitHub中的域名支持" class="headerlink" title="GitHub中的域名支持"></a>GitHub中的域名支持</h4><p>  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地<br>址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示</p><p>现在github的服务器地址为：</p><ul><li>192.30.252.153</li><li>192.30.252.154</li></ul><h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><p>在你的博客仓库中下的 <code>/source</code> 目录中添加名为 <code>CNAME</code>的文件, 在文件中写入你在GoDaddy<br>注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述&lt;/p&gt;
&lt;h2 id=&quot;购买域名&quot;&gt;&lt;a href=&quot;#购买域名&quot; class=&quot;headerlink&quot; title=&quot;购买域名:&quot;&gt;&lt;/a&gt;购买域名:&lt;/h2&gt;&lt;p&gt;如果嫌麻烦可以在&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="Blog" scheme="http://wavejoker.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>FTP storFile返回false 解决方法</title>
    <link href="http://wavejoker.github.io/2017/12/04/FTPClient.storFile%E8%BF%94%E5%9B%9Efalse-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://wavejoker.github.io/2017/12/04/FTPClient.storFile返回false-解决方法/</id>
    <published>2017-12-04T11:59:29.000Z</published>
    <updated>2017-12-11T06:01:57.223Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined" target="_blank" rel="noopener">本文参考地址</a></p><h2 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h2><ul><li>自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>添加以下代码即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftpClient.setControlEncoding(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本文参考地址&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="Exception" scheme="http://wavejoker.github.io/categories/Exception/"/>
    
    
      <category term="Java" scheme="http://wavejoker.github.io/tags/Java/"/>
    
      <category term="FTP" scheme="http://wavejoker.github.io/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>记一次Redis连接用尽异常解决</title>
    <link href="http://wavejoker.github.io/2017/12/01/%E8%AE%B0%E4%B8%80%E6%AC%A1Redis%E8%BF%9E%E6%8E%A5%E7%94%A8%E5%B0%BD%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3/"/>
    <id>http://wavejoker.github.io/2017/12/01/记一次Redis连接用尽异常解决/</id>
    <published>2017-12-01T03:04:30.000Z</published>
    <updated>2017-12-16T15:29:40.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不知怎么突然jedis出现 “Could not get a resource from the pool” 错误,错误原因是连接池中的链接用尽</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  </span><br><span class="line">    at redis.clients.util.Pool.getResource(Pool.java:22)  </span><br><span class="line">    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  </span><br><span class="line">    at java.lang.Thread.run(Thread.java:662)  </span><br><span class="line">Caused by: java.util.NoSuchElementException: Timeout waiting for idle object  </span><br><span class="line">    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  </span><br><span class="line">    at redis.clients.util.Pool.getResource(Pool.java:20)  </span><br><span class="line">    ... 2 more</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="增加-Jedis-的活动连接数"><a href="#增加-Jedis-的活动连接数" class="headerlink" title="增加 Jedis 的活动连接数:"></a>增加 Jedis 的活动连接数:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;jedisPoolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class="line">&lt;!-- 最大连接数 --&gt;</span><br><span class="line">&lt;property name=&quot;maxTotal&quot; value=&quot;300&quot; /&gt;</span><br><span class="line">&lt;!-- 最大空闲连接数 --&gt;</span><br><span class="line">&lt;property name=&quot;maxIdle&quot; value=&quot;50&quot; /&gt;</span><br><span class="line">&lt;!-- 每次释放连接的最大数目 --&gt;</span><br><span class="line">&lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;1024&quot; /&gt;</span><br><span class="line">&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span><br><span class="line">&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;30000&quot; /&gt;</span><br><span class="line">&lt;!-- 连接最小空闲时间 --&gt;</span><br><span class="line">&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;1800000&quot; /&gt;</span><br><span class="line">&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span><br><span class="line">&lt;property name=&quot;softMinEvictableIdleTimeMillis&quot; value=&quot;10000&quot; /&gt;</span><br><span class="line">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span><br><span class="line">&lt;property name=&quot;maxWaitMillis&quot; value=&quot;1500&quot; /&gt;</span><br><span class="line">&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span><br><span class="line">&lt;property name=&quot;testOnBorrow&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span><br><span class="line">&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span><br><span class="line">&lt;property name=&quot;blockWhenExhausted&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放"><a href="#将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放" class="headerlink" title="将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放."></a>将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.</h3><ul><li>使用 <strong>jedis.close();</strong> 释放资源后问题解决, 修改前的代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public String get(String key) &#123;</span><br><span class="line">     Jedis jedis = jedisPool.getResource();</span><br><span class="line">     String get = jedis.get(key);</span><br><span class="line">     return get;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>修改后的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public String get(String key) &#123;</span><br><span class="line">     Jedis jedis = jedisPool.getResource();</span><br><span class="line">     String get = jedis.get(key);</span><br><span class="line">     jedis.close();</span><br><span class="line">     return get;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不知怎么突然jedis出现 “Could not get a resource from the pool” 错误,错误原因是连接池中的链接用尽&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法:&quot;&gt;&lt;/a&gt;解决方法:&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at redis.clients.util.Pool.getResource(Pool.java:22)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at java.lang.Thread.run(Thread.java:662)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Caused by: java.util.NoSuchElementException: Timeout waiting for idle object  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at redis.clients.util.Pool.getResource(Pool.java:20)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... 2 more&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Exception" scheme="http://wavejoker.github.io/categories/Exception/"/>
    
    
      <category term="Java" scheme="http://wavejoker.github.io/tags/Java/"/>
    
      <category term="Redis" scheme="http://wavejoker.github.io/tags/Redis/"/>
    
      <category term="Jedis" scheme="http://wavejoker.github.io/tags/Jedis/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day06</title>
    <link href="http://wavejoker.github.io/2017/11/30/JavaReview-day06/"/>
    <id>http://wavejoker.github.io/2017/11/30/JavaReview-day06/</id>
    <published>2017-11-30T11:49:08.000Z</published>
    <updated>2017-12-16T15:27:45.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java复习第6天"><a href="#Java复习第6天" class="headerlink" title="Java复习第6天"></a>Java复习第6天</h1><h2 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h2><h3 id="static-的特点"><a href="#static-的特点" class="headerlink" title="static 的特点:"></a>static 的特点:</h3><ol><li><p>内存特点</p><ul><li>存储位置: data segment(数据区 [也叫 共享区/方法区]);</li><li>可以通过 “类名.静态成员” 的方式调用;</li><li>随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长);</li><li>优先于对象存在(加载);</li><li>被所有对象所共享</li><li>只有数据被多个对象共享是才适合定义静态</li><li>可以直接被类名调用</li></ul></li></ol><h3 id="静态变量和非静态变量的举例"><a href="#静态变量和非静态变量的举例" class="headerlink" title="静态变量和非静态变量的举例"></a>静态变量和非静态变量的举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">     String name;<span class="comment">//成员变量，实例变量</span></span><br><span class="line">   <span class="keyword">static</span> String country = <span class="string">"CN"</span>;<span class="comment">//静态变量。类变量</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(Person.country+<span class="string">":"</span>+<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量</p></li><li><p>静态变量和非静态变量的访问权限的不同</p><ul><li>static方法只能访问static的变量，没有权限访问非static变量。</li><li>static方法中声明的变量可以与非static变量并且是类的属性重名</li><li>方法中声明的变量可以与非static变量并且是类的属性重名</li><li>非static方法中可以方访问static变量。</li><li>static方法可以访问static属性</li></ul></li></ul><h3 id="实例变量-静态变量-和类变量-非静态变量-的区别"><a href="#实例变量-静态变量-和类变量-非静态变量-的区别" class="headerlink" title="实例变量(静态变量)和类变量(非静态变量)的区别"></a>实例变量(静态变量)和类变量(非静态变量)的区别</h3><ol><li><p>存放位置:</p><ul><li>类变量随着类的加载而存在于方法区中;</li><li>实例变量随着对象的建立而存在于堆内存中;</li></ul></li><li><p>生命周期:</p><ul><li>类变量的生命周期最长,随着类的消失而消失;</li><li>实例变量随着对象的消失而消失;</li></ul></li></ol><h3 id="静态使用注意事项"><a href="#静态使用注意事项" class="headerlink" title="静态使用注意事项"></a>静态使用注意事项</h3><ul><li>静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员;</li><li>静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this;</li><li>主函数(main) 也是静态的;</li></ul><h2 id="main-函数"><a href="#main-函数" class="headerlink" title="main()函数"></a>main()函数</h2><ol><li>主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用;</li><li><p>主函数的定义:</p><ul><li>public: 代表着该函数访问权限是最大的;</li><li>static: 代表主函数随着类的加载就已经存在了;</li><li>void: 主函数没有具体的返回值;</li><li>main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别;</li><li>(String[] args): 函数的参数,参数类型是一个字符串类型的数组;</li></ul></li><li><p>主函数的格式是固定的: JVM 可以识别的;</p></li><li><p>JVM 在调用主函数时, 传入的参数是 new String[0];</p></li><li><p>可以在通过命令行运行时使用以下方式向 main 函数中传入参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$java</span> MainDemo hehe enen oo</span><br></pre></td></tr></table></figure><p>PS: 向 main 函数中传入 “hehe” “enen” “oo” 三个参数</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      String[] arr = &#123;<span class="string">"hehe"</span>, <span class="string">"haha"</span>, <span class="string">"oo"</span>, <span class="string">"enen"</span>&#125;</span><br><span class="line">      TestMain.main(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMain</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;args.length; x++)&#123;</span><br><span class="line">        System.out.println(args[x]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态的使用条件"><a href="#静态的使用条件" class="headerlink" title="静态的使用条件"></a>静态的使用条件</h3><h4 id="可以分为两部分-因为静态修饰的内容有成员变量和函数"><a href="#可以分为两部分-因为静态修饰的内容有成员变量和函数" class="headerlink" title="可以分为两部分(因为静态修饰的内容有成员变量和函数):"></a>可以分为两部分(因为静态修饰的内容有成员变量和函数):</h4><ol><li><p>什么时候定义静态变量:</p><ul><li>当对象中出现共享的数据时, 该数据被静态所修饰;</li><li>对象中的特有数据要定义成非静态, 存在于堆内存中;</li></ul></li><li><p>什么时候定义静态方法:</p><ul><li>当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的;</li></ul></li></ol><h3 id="JVM的编译特点"><a href="#JVM的编译特点" class="headerlink" title="JVM的编译特点"></a>JVM的编译特点</h3><ul><li>JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 <strong>class文件</strong>,如果没有, 再查找与其同名的 <strong>java文件</strong>,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错;</li></ul><h3 id="类加载的特点"><a href="#类加载的特点" class="headerlink" title="类加载的特点"></a>类加载的特点</h3><ul><li>只有用到类中的内容是, 类才被加载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"a"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Demo demo = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码执行后没有运行结果, 因为 <code>TestDemo</code> 中并没有实际用到 <code>Demo</code> 中的内容</p><h2 id="Java-帮助文档"><a href="#Java-帮助文档" class="headerlink" title="Java 帮助文档"></a>Java 帮助文档</h2><h3 id="Java注释常用标签实例"><a href="#Java注释常用标签实例" class="headerlink" title="Java注释常用标签实例"></a>Java注释常用标签实例</h3><ul><li>@see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。</li><li>@link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用”label”作为超链接文本而不用”See Also”</li><li>@docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接</li><li>@inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中</li><li>@version 该标签格式如下： @version version-information 其中，”version-information”可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了”-version”标记，那么久可以从生成的HTML文档中提取出版本信息</li><li>@author 该标签的格式如下： @author author-information 其中，”author-information”,望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息</li><li>@since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本</li><li>@param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符</li><li>@throws 异常</li><li>@deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。</li></ul><h3 id="Java注释的使用顺序"><a href="#Java注释的使用顺序" class="headerlink" title="Java注释的使用顺序"></a>Java注释的使用顺序</h3><ol><li>@author (classes and interfaces only, required)</li><li>@version (classes and interfaces only, required. See footnote 1)</li><li>@param (methods and constructors only)</li><li>@return (methods only)</li><li>@exception (@throws is a synonym added in Javadoc 1.2)</li><li>@see</li><li>@since</li><li>@serial (or @serialField or @serialData)</li><li>@deprecated (see How and When To Deprecate APIs)</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致;</li><li>默认构造函数的权限是随着类的权限变化而变化的;</li></ul><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><ul><li><p>格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span>&#123;</span><br><span class="line">      <span class="comment">//静态代码块中的执行语句</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>特点: 随着类的加载而执行, <strong>且只执行一次</strong>;</p></li><li>作用: 用于给类初始化</li></ul><h3 id="应用-类中各个代码块之间的执行顺序"><a href="#应用-类中各个代码块之间的执行顺序" class="headerlink" title="应用: 类中各个代码块之间的执行顺序"></a>应用: 类中各个代码块之间的执行顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">StaticCode</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    StaticCode()&#123;</span><br><span class="line">      System.out.print(<span class="string">"b "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">      System.out.print(<span class="string">"a "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      System.out.print(<span class="string">"c "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticCode(<span class="keyword">int</span> x)&#123;</span><br><span class="line">      System.out.print(<span class="string">"d "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticCodeDemo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> StaticCode(<span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上代码的输出结果是: <code>a c d</code><h4 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h4><ul><li>静态代码块的作用是给<font color="red"><strong>类</strong></font>初始化的, 随着类的加载而执行, <strong>且只执行一次</strong>;</li><li>构造代码块的作用是给<font color="red"><strong>对象(所有对象)</strong></font>初始化的,对象一建立就运行, 而且优先于构造函数执行;</li><li>构造函数的作用是给<font color="red"><strong>对应对象</strong></font>初始化</li></ul></li></ul><p>参考链接: <a href="https://www.cnblogs.com/sophine/p/3531282.html" target="_blank" rel="noopener">Java中普通代码块，构造代码块，静态代码块区别及代码示例</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化</li><li>只有在调用new方法时才会创建类的实例</li><li>类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法</li><li>类实例销毁时候，首先销毁子类部分，再销毁父类部分</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java复习第6天&quot;&gt;&lt;a href=&quot;#Java复习第6天&quot; class=&quot;headerlink&quot; title=&quot;Java复习第6天&quot;&gt;&lt;/a&gt;Java复习第6天&lt;/h1&gt;&lt;h2 id=&quot;static-关键字&quot;&gt;&lt;a href=&quot;#static-关键字&quot; cla
      
    
    </summary>
    
      <category term="JavaReview" scheme="http://wavejoker.github.io/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="http://wavejoker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Javareview-day05</title>
    <link href="http://wavejoker.github.io/2017/11/29/Javareview-day05/"/>
    <id>http://wavejoker.github.io/2017/11/29/Javareview-day05/</id>
    <published>2017-11-29T10:55:32.000Z</published>
    <updated>2017-12-12T08:59:02.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-复习第五天"><a href="#Java-复习第五天" class="headerlink" title="Java 复习第五天"></a>Java 复习第五天</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>私有只是封装的一种表现形式</li><li>封装可以增加代码的健壮性</li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ol><li>对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作);</li><li>当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法;</li><li>当在类中定义了构造函数后,默认的构造函数就会消失;</li><li>构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能;</li></ol><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><h3 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h3><ol><li>成员变量作用于整个类中, 局部变量作用于函数中或者语句中;</li><li><p>在内存中的位置:</p><ul><li>成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在;</li><li>局部变量: 存在栈内存中<h4 id="其他区别"><a href="#其他区别" class="headerlink" title="其他区别"></a>其他区别</h4>成员变量都有默认值, 在不赋值的情况下也可以参与运算.</li></ul></li></ol><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><ul><li>匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化</li><li>如果对一个对象进行多个成员调用, 必须给这个对象起个名字</li><li>匿名对象可以作为实际参数进行传递</li></ul><h3 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h4><ul><li>给对象进行初始化</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><ul><li>对象一建立就运行, 而且优先于构造函数执行;</li></ul><h4 id="和构造函数的区别"><a href="#和构造函数的区别" class="headerlink" title="和构造函数的区别:"></a>和构造函数的区别:</h4><ul><li>构造代码块是给所有对象进行统一初始化</li><li>构造函数是给对应的对象进行初始化</li><li>构造代码块中定义的事不同对象共性的初始化内容</li></ul><h4 id="构造代码块示例"><a href="#构造代码块示例" class="headerlink" title="构造代码块示例:"></a>构造代码块示例:</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="comment">//以下'&#123;&#125;'和其中的内容为构造代码块</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字:"></a>this 关键字:</h3><ol><li>this 代表的是本类对象, 即 this 所在函数所属对象的引用</li><li><p>this语句:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>(xxx);</span><br></pre></td></tr></table></figure><p>作用: this()用于构造函数之间的调用<br>特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。</p></li><li><p><strong>注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  String name;</span><br><span class="line">  Persion()&#123;</span><br><span class="line">    <span class="keyword">this</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  Persion(String name)&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  Persion p = <span class="keyword">new</span> Persion();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="this-和-super-关键字的特点"><a href="#this-和-super-关键字的特点" class="headerlink" title="this 和 super 关键字的特点:"></a>this 和 super 关键字的特点:</h3><ol><li><p>this 和 super 关键字不能再 static 类型的方法或 static 的代码块中</p><ul><li>原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用</li><li>原因2: 无法再静态代码中加载非静态的关键字</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-复习第五天&quot;&gt;&lt;a href=&quot;#Java-复习第五天&quot; class=&quot;headerlink&quot; title=&quot;Java 复习第五天&quot;&gt;&lt;/a&gt;Java 复习第五天&lt;/h1&gt;&lt;h2 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="JavaReview" scheme="http://wavejoker.github.io/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="http://wavejoker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day04</title>
    <link href="http://wavejoker.github.io/2017/11/28/JavaReview-day04/"/>
    <id>http://wavejoker.github.io/2017/11/28/JavaReview-day04/</id>
    <published>2017-11-28T08:14:34.000Z</published>
    <updated>2017-12-11T11:11:28.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><pre><code>  1. 数据类型分类: 基本数据类型, 引用数据类型  2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器- 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放;- 堆内存:  1. 数组和对象,通过 new 建立的实例都存放在堆内存中;  2. 每一个实体都有内存地址值;  3. 实体中的变量都有默认的初始化值  4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收</code></pre><h3 id="数组的定义方式"><a href="#数组的定义方式" class="headerlink" title="数组的定义方式"></a>数组的定义方式</h3><pre><code>1. int[] arr = new int[5]; (推荐写法)2. int arr[] = new int[5]; (与第一种意义相同)3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)</code></pre><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length-<span class="number">1</span>; x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = x + <span class="number">1</span>; y &lt; arr.length; y++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[x] &gt; arr[y])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[x];</span><br><span class="line">                arr[x] = arr[y];</span><br><span class="line">                arr[y] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置</p></blockquote><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; arr.length - x - <span class="number">1</span>; y ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[y] &gt; arr[y + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[y];</span><br><span class="line">                arr[y] = arr[y + <span class="number">1</span>];</span><br><span class="line">                arr[y + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置"><a href="#说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置" class="headerlink" title="说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置"></a>说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置</h5><h5 id="使用-java-util包中的-Array-sort-arr-可以进行排序数组"><a href="#使用-java-util包中的-Array-sort-arr-可以进行排序数组" class="headerlink" title="使用 java.util包中的 Array.sort(arr); 可以进行排序数组"></a>使用 java.util包中的 Array.sort(arr); 可以进行排序数组</h5><ul><li>将数组交换的方法进行封装<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[a];</span><br><span class="line">    arr[b] = arr[a];</span><br><span class="line">    arr[b] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="使用异或方式实现"><a href="#使用异或方式实现" class="headerlink" title="使用异或方式实现"></a>使用异或方式实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    arr[b] = arr[b] ^ arr[a];</span><br><span class="line">    arr[a] = arr[b] ^ arr[a];</span><br><span class="line">    arr[b] = arr[b] ^ arr[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h4><h5 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">halfSearch</span> <span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> max = arr.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> mid = (min + max)/<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span>(arr[mid] != key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key &lt; arr[mid])&#123;</span><br><span class="line">      max = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &gt; arr[mid])&#123;</span><br><span class="line">      min = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mid = (min + max)/<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">halfSearch2</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> max = arr.length;</span><br><span class="line">  <span class="keyword">while</span>(min &lt;= max)&#123;</span><br><span class="line">     mid = (min + max) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(key &gt; arr[mid])&#123;</span><br><span class="line">       min = mid + <span class="number">1</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; arr[mid])&#123;</span><br><span class="line">       max = mid -<span class="number">1</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> mid;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;</p></blockquote><ul><li>思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入</li></ul><h5 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h5>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decimalToBinary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">8</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(num % <span class="number">2</span>);</span><br><span class="line">            num = num / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.reverse());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h5><ul><li>第一种方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decimalToHexadecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> num = <span class="number">60</span>;</span><br><span class="line">      StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">8</span>; x++) &#123;</span><br><span class="line">          <span class="keyword">int</span> temp = num &amp; <span class="number">15</span>;</span><br><span class="line">          <span class="keyword">if</span> (temp &gt; <span class="number">9</span>) &#123;</span><br><span class="line">              stringBuffer.append((<span class="keyword">char</span>) (temp - <span class="number">10</span> + <span class="string">'A'</span>));</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              stringBuffer.append(temp);</span><br><span class="line">          &#125;</span><br><span class="line">          num = num &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(stringBuffer.reverse());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>二维数组的定义方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">34</span>,<span class="number">5</span>,<span class="number">7</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;,&#123;<span class="number">40</span>,<span class="number">50</span>&#125;,&#123;<span class="number">60</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">short</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">short</span>[<span class="number">5</span>][<span class="number">8</span>];</span><br><span class="line"><span class="keyword">float</span>[][] array4;</span><br><span class="line">array4 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;  1. 数据类型分类: 基本数据类型, 引用数据类型
  2. Java 程序在运行时,需要在内存中分配空间, 为了提高运
      
    
    </summary>
    
      <category term="JavaReview" scheme="http://wavejoker.github.io/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="http://wavejoker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day03</title>
    <link href="http://wavejoker.github.io/2017/11/28/JavaReview-day03/"/>
    <id>http://wavejoker.github.io/2017/11/28/JavaReview-day03/</id>
    <published>2017-11-28T07:04:34.000Z</published>
    <updated>2017-12-09T12:24:53.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java</p></blockquote><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符:"></a>位运算符:</h3><p>1.”&lt;&lt;”: 左位移 2.”&gt;&gt;”: 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 &lt;&lt; 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.”&lt;&lt;&lt;”:无符号左移 4.”&gt;&gt;&gt;”:无符号右移</p><p>异或(^)可以用于加密 ‘&amp;’, ‘|’, ‘^’的运算</p><p>使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换</p><p>三元运算符 三元运算符会改变所运算元素的数据类型</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>if…else:</p><p>三元运算符 对比 if…else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if…else 简单, 可以简化 if…else</p><p>二. switch 语句:</p><p>1) switch可以中可以接收 byte, short, int char 类型的数据;</p><p>2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;</p><p>3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;</p><h4 id="结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束"><a href="#结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束" class="headerlink" title="结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;"></a>结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;</h4><h4 id="如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句"><a href="#如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句" class="headerlink" title="如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,"></a>如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,</h4><p>  直到遇到 break 或程序结束;</p><p>4) if … else 和 switch 语句的对比:</p><h4 id="switch-性能比-if…else-更高-if-…-else-只能顺序执行"><a href="#switch-性能比-if…else-更高-if-…-else-只能顺序执行" class="headerlink" title="switch 性能比 if…else 更高(if … else 只能顺序执行)"></a>switch 性能比 if…else 更高(if … else 只能顺序执行)</h4><h4 id="对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广"><a href="#对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广" class="headerlink" title="对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广"></a>对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广</h4><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><h3 id="do-while-和-while-的区别"><a href="#do-while-和-while-的区别" class="headerlink" title="do..while 和 while 的区别"></a>do..while 和 while 的区别</h3><h4 id="do…while-先执行循环体-再判断条件-循环体至少执行一次"><a href="#do…while-先执行循环体-再判断条件-循环体至少执行一次" class="headerlink" title="do…while 先执行循环体, 再判断条件(循环体至少执行一次);"></a>do…while 先执行循环体, 再判断条件(循环体至少执行一次);</h4><h4 id="while-先判断再执行"><a href="#while-先判断再执行" class="headerlink" title="while 先判断再执行"></a>while 先判断再执行</h4><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }</p><p>for 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);</p><h3 id="for-循环中的变量初始化语句只执行一次"><a href="#for-循环中的变量初始化语句只执行一次" class="headerlink" title="for 循环中的变量初始化语句只执行一次"></a>for 循环中的变量初始化语句只执行一次</h3><h3 id="for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下"><a href="#for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下" class="headerlink" title="for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:"></a>for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int x = 0, y = 0, z = 0; x &lt; 4; x ++, y ++,z ++)&#123;</span><br><span class="line">  System.out.println(x+y+z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-和-while-的无限循环的表达形式"><a href="#for-和-while-的无限循环的表达形式" class="headerlink" title="for 和 while 的无限循环的表达形式"></a>for 和 while 的无限循环的表达形式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for:</span><br><span class="line"> for(;;)&#123;</span><br><span class="line">   System.out.println(&quot;for无限循环&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="如果-for-循环的条件不声明-默认为-true"><a href="#如果-for-循环的条件不声明-默认为-true" class="headerlink" title="如果 for 循环的条件不声明, 默认为 true;"></a>如果 for 循环的条件不声明, 默认为 true;</h3><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(true)&#123;</span><br><span class="line">  System.out.println(&quot; while 无限循环&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下"><a href="#break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下" class="headerlink" title="break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下"></a>break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void testBreak() &#123;</span><br><span class="line">  w:</span><br><span class="line">  for (int x = 1; x &lt; 4; x++) &#123;</span><br><span class="line">      System.out.println(&quot;out\t&quot;);</span><br><span class="line">      q:</span><br><span class="line">      for (int m = 0; m &lt; 3; m++)&#123;</span><br><span class="line">          if (m == 2)&#123;</span><br><span class="line">              break w;</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.print(&quot;in\t&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  输出结果为: out    in    in</p><p>  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in</p><p>  2). continue<br>    作用:结束本次循环,继续下一次循环</p><pre><code># 如下代码可以打印 0~10 以内的 2 的倍数:</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void testContinue()&#123;</span><br><span class="line">    for (int i = 0; i &lt; 11; i ++)&#123;</span><br><span class="line">        if (i%2 == 1)&#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下"><a href="#1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下" class="headerlink" title="1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下"></a>1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void testContinue() &#123;</span><br><span class="line">  w:</span><br><span class="line">  for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    q:</span><br><span class="line">    for (int k = 0; k &lt; 4; k++) &#123;</span><br><span class="line">      System.out.println(&quot;i = &quot; + i);</span><br><span class="line">      continue w;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = 0</span><br><span class="line">i = 1</span><br><span class="line">i = 2</span><br></pre></td></tr></table></figure></p><h3 id="break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错"><a href="#break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错" class="headerlink" title="break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);"></a>break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);</h3><h3 id="break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内"><a href="#break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内" class="headerlink" title="break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内"></a>break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内</h3><h3 id="输出等腰三角形"><a href="#输出等腰三角形" class="headerlink" title="输出等腰三角形"></a>输出等腰三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void testTriangle() &#123;</span><br><span class="line">for (int x = 1; x &lt;= 5; x++) &#123;</span><br><span class="line">    for (int y = x; y &lt; 5; y++) &#123;</span><br><span class="line">      System.out.print(&quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    for (int z = 0; z &lt; x; z ++ )&#123;</span><br><span class="line">      System.out.print(&quot;* &quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    *</span><br><span class="line">   * *</span><br><span class="line">  * * *</span><br><span class="line"> * * * *</span><br><span class="line">* * * * *</span><br></pre></td></tr></table></figure><h2 id="重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中"><a href="#重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中" class="headerlink" title="重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;"></a>重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;h3 id=&quot;位运算符&quot;&gt;&lt;a href=&quot;#位运算符&quot; 
      
    
    </summary>
    
      <category term="JavaReview" scheme="http://wavejoker.github.io/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="http://wavejoker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wavejoker.github.io/2017/11/28/hello-world/"/>
    <id>http://wavejoker.github.io/2017/11/28/hello-world/</id>
    <published>2017-11-28T05:36:15.086Z</published>
    <updated>2017-11-28T08:25:43.185Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Welcome" scheme="http://wavejoker.github.io/tags/Welcome/"/>
    
  </entry>
  
</feed>
