<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Waver&#39;s Blog</title>
  
  <subtitle>个人知识博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://waver.me/"/>
  <updated>2018-02-06T06:58:39.115Z</updated>
  <id>https://waver.me/</id>
  
  <author>
    <name>Waver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Diary-2018-02-05(Locked)</title>
    <link href="https://waver.me/2018/02/05/Diary-2018-02-05(Locked)/"/>
    <id>https://waver.me/2018/02/05/Diary-2018-02-05(Locked)/</id>
    <published>2018-02-05T14:53:37.000Z</published>
    <updated>2018-02-06T06:58:39.115Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt(pwd, onError) {console.log("in doDecrypt");var txt = document.getElementById("enc_content").innerHTML;var plantext;try {  var bytes = CryptoJS.AES.decrypt(txt, pwd);plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById("enc_content").innerHTML = plaintext;document.getElementById("enc_content").style.display = "block";   document.getElementById("enc_passwd").style.display = "none";}</script><div id="enc_content" style="display:none">U2FsdGVkX1+7ZG7UYt37jI/BQXelAWcuuu/7CGlkU8eWYPJH/5u6UNwhR4rtlLAH6W6oGoBnK+ok4Q0WmuGEw3gsBl0ODwJMz0ZqQH5+Hdx2wY2EDJvjU9AVKXvNgoIXQYAxE8jm91PP94lZxR3GJRG9Cpz5uv7QkP9HjwxBmd9vgipm+DJTsUAmC+DDePi90Qu0ZBTX8qd9Vb/hAwj9KT+qBQdhdl9YpexqHqGtfoKGvxDd2CrAPnjW+M6qpVH7H2TiODere0w5aFzssjxegR8xOfrzLbNagyiFv0Rzb6ocudj3T7RzPjaQmnB4wsi5JeSEbXO+eu+hagEFC/PWK8oHcRr/jVFkEYG6mgRG0tHLRupRWyEG12tZ1+o56jJVsGP2h6bMKWO5IZA4QgdnvkQDuNXB1uIWvsbNgPFlMDQWHTAeNqvpb7DHiVKDmJZCtK7NZQUNF6ZpV8u/g0cpkzp1PaQHOk0ufRmTrIK35cfMEHl5cK9ybwCOBWdbqCReAxnMsz6mJolxej3fGO22zZeTkeTXukZWc70XehaggxcPxSvYUjl/xurrkZVXAirDFbVO6k1DyZWZ+VdkbPSxA1ukJmrn1+SWQkmSOGhJCjoxNC0YGmR1vd5we2g7zw2oH6706LkWakwKGSTAW2jtw1IOoo6+oafR36oAwp4/lpi1ruYtoS/Eoc7KdMa9f1WTD8R0S6ga1hRm1VeywZ9rxofp34VRtxZDIjXptyG9UjFS91Fz5ikwblgnudFkRW4mXEZy3c+4TiCBp/w//c/JBVKgRDwCADmpjBox0FRHD677pOB5KNnV5TiCv2CQQBxWxL1WVuEjld4vGWJuZYs6mNyjPBPDRBdULZB8PJquV544Q1iryHhnk3/sAeo72cO5hJZiF8Pzx/ZxjgUmtyNF71C+NM5Q+N9LBU3SYLV02R2YgpYUtAR78n1HA+bGE6xb/afQ50yW0sfeiJj1q0G6VzOAXxHQycmmiunS+CjbyBxF96/Y96ml8pXAl/uY649jF7LM2pHLqJwceMMM95diUIWIMi4QvaoHoSZUk4IeMHFwq2UZONQAWnxtQFXHDZsYxBgDe5+ZqFpEkuK9sZR7KAshsGjEmSsAnUEO6HScAjxiB8qNlUIqCAtZHSkmXF9+7hNCyyd4W8XYCfvcOnzHtmgwv3AgWrKG7s2LraSrKeXwXqzmXN9tVPrsBRxc7CHWA/IMoM0FfCRemFwaGVQCDMJuShPG5PEJSVi9Ki0KAoIE/HVrkBl2KV5rVuOXvjRiEkYHD/+NFJpv0R6J2baogPcdiaHUllS3//5DIOje4uBN4fjlLH/q06LYnRAjRC1e8R/BG3dwARll6HYY4UqaPaWmuhnmRlsiEChTRc9C6X1bPDCKS/iiKMYA8mqhSmjwlVSK1nPi7mLSVcsBUmYL7/yNcBg4Zv4UpYW0nXavnSeE8tBJdogdcmMLo6/U2G8/iKkhlzhLrW5t0b/9z8eiqYid311EeQhhwxRTy3cJn2gbprFEYoSzeoUIUcycEQV5bz1NAc+BqLhH2DCN2/Xx9dBcPCc9XNdGJe+ryt7S/YpEROZehOWFfIM91n3orIv5V+4t0PX/LQQAMJ3efkOSLix7l/HoUSjEtKONU0Q8NDhfHxWM+6JgfL6/0hhPrpQryA9bfARfyNIPxyboSVqUeiyaDELEXBjt22oUjRuxgpgYDtKDYEOMxY0Wl1G5uMix+OiE51s9WrVgdNe/kD8VzACNAZzg2VyIIo+F+miDs/COOy/mQH1Kvb55/l5K/+l7Dd3kZndxeYV997p24vfQbyXShMSgseJB16Eg6PlJVrNDhhkpBHt9zn5nFZaaTBiKPkk8tTjInI/DGnr5ZmECKfWyx2uFiMkHmI1Z55vqaCVOLAQiW384HRY2noNo5gd4AVwDDxCqH5NP+/Wevzya7rVSi8va6ikEdD30K2DysaBC6pR1wEVNQkio3/XgLylpv3sQFr+XPmuLgEQqO9NL/h0yE/x75gK+VDkvpzO+JgSawhbwoiyJKYQwkx+Kz8fgp858ynLPhIuTT3wCoCL1fdDasDzs+zkz5pCP3ngWPANak4O0Jzn2nlUtC/uXI4SO0dpEDU+g8GU03xxxBN9yHI+TAtOTdRYtcenpG7aOBfFynD8lUip4hKYcPvsylJEefWNQ+RH0AyBUcL0YxAZbbH0T+F6VV1l+04tvJKBR0995q79LDzrdn0ZFZFIr2bOxWHMsMDtGuoBahxXBpru+dFcEyD0SDaMX++w1pK6THSe4gZFsfCZ/LECwIpP+nEVDKtWheu8jiEc20GoSAAWPWVchUmsmEKlqOcgb3HW5cpHrIdfM5/XgcM6U8GwjcoY2sukEc9uzn2NTf2wAXHR+5Xsp5EUduExD2fipO9zvM5rME1CEBQdemxJNLJgi/1SuHlzJZUeLqRzcwcUBhTmbxIbH0d1NCklOw9MtzmCPmBtG9NgzMwoQJWF8iWDM1GC5TbOpt3qboHwlUqr/SinFrQatumneZbI1LFuprzmBJqlxbHxgXEtH31U/SIHN1Zja1K6Q2UwDwSex/3lSc1LJLl3U+MstODi4VA2Tjh4llg3+xYIWgIm3VcfgQ5KYiig704fgFQa4qoEHQfXZICXYEX6WH0N5XcBc2YpNKauuAqTtKpuRGdlybwEHzC59V+Phcpv1+Gy2qLU8zmvCFJY34hy0bmSd7Xg/ppBdazvsPcYGPneCvFQQPgMcTSlHpP4sOTnRp8eE6/Bez1aGZg93EEvNT9qQOqduObVtjGYFgl61lW0Jbnmoy8oXGGsKvVC7h8V7quJ3SgT+tTj6UyI+ezmaqm+yfIz19DC83DcTjsuguncci1GD40F2mvNvqA70WDj0Qmom/Jr4N2oO/iazHQ==</div><div id="enc_passwd"> <input id="enc_pwd_input" type="text" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;&lt;script&gt;
function doDecrypt(pwd, onError) {
	console.log(&quot;in doDecrypt&quot;);
	var txt = document.getEleme
      
    
    </summary>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 找不到或无法加载主类XXX终极解决方案</title>
    <link href="https://waver.me/2018/02/01/Java-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BBXXX%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://waver.me/2018/02/01/Java-找不到或无法加载主类XXX终极解决方案/</id>
    <published>2018-02-01T15:47:43.000Z</published>
    <updated>2018-02-01T16:18:51.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因-作者的悲惨经历-可略过"><a href="#起因-作者的悲惨经历-可略过" class="headerlink" title="起因(作者的悲惨经历,可略过)"></a>起因(作者的悲惨经历,可略过)</h2><p>今天突发奇想用命令行运行Java文件, 但惊喜的发现出现了找不到或无法加载主类这个错误,  这个错误以前也遇到过, 便轻车熟路的改了, 发现在确认完文件名, 类名, CLASSPATH,  临时环境变量等所有可能的因素后,依然报这个错, 好歹也是搞过好几年Java的人了,不能在这跌跟头, 经过一方折腾后, 但是结果又让人欲哭无泪…</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><h3 id="配置错误"><a href="#配置错误" class="headerlink" title="配置错误"></a>配置错误</h3><p>入门就遇到这样的问题，环境变量按网上说的配好了，直接java 和 javac都有提示出来，说明没问题了，</p><p>​    主要是以下两点要注意：</p><ol><li>在classpath的最前面要加一个本目录路径，用.表示，由于后面还有java的dt和tools两个路径，所以.后要加;进行分隔表示。   </li><li>更为重要的是，在cmd下运行javac 和java的时候，必须在该java文件的目录下运行，这样生成的class也在该目录下，java的时候也会第一个就在本目录下找class文件，就不 会提示找不到了。这个cmd运行路径由于一般不太注意，输入cmd就会直接到c:\个人文件夹下，而一般的java文件会用其它软件编写，放在选定的路径 下，这两个路径很少能主动重合，一运行当然找不到了，但是javac能认到，不知为什么java就提示找不到？这点有点奇怪。网上各种解决方法里很少注意 到其实就是这个小问题造成的找不到类，都想当然的以为是在java源文件路径下运行java，那当然就找不到基本问题所在了。</li></ol><p>​    如果1、2都做了还是没变化，那就是该计算机改了环境变量后需要重新启动下让新的设置生效，重启下即可</p><blockquote><p>以上解决方案转自 <a href="http://blog.csdn.net/wangjiaweiwei/article/details/42212525" target="_blank" rel="noopener">javac编译成功，用java运行class文件出现“找不到或无法加载主类” 的问题</a></p></blockquote><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误分两种:</p><ol><li><p>文件名与主类名不相同</p></li><li><p>package 包不存在</p><p><strong>第二种错误很容易忽视.在这踩个坑</strong> (笔者就是因为将IDEA中的文件直接考出来才…….,一切尽在不言中, 你们可能很难想象在半夜12点数次装Java配环境变量的紧张与刺激!)​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起因-作者的悲惨经历-可略过&quot;&gt;&lt;a href=&quot;#起因-作者的悲惨经历-可略过&quot; class=&quot;headerlink&quot; title=&quot;起因(作者的悲惨经历,可略过)&quot;&gt;&lt;/a&gt;起因(作者的悲惨经历,可略过)&lt;/h2&gt;&lt;p&gt;今天突发奇想用命令行运行Java文件, 
      
    
    </summary>
    
      <category term="Exception" scheme="https://waver.me/categories/Exception/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>工具推荐-第一期-AutoHotKey</title>
    <link href="https://waver.me/2018/01/28/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90-%E7%AC%AC%E4%B8%80%E6%9C%9F-AutoHotKey/"/>
    <id>https://waver.me/2018/01/28/工具推荐-第一期-AutoHotKey/</id>
    <published>2018-01-28T09:32:04.000Z</published>
    <updated>2018-02-04T07:16:26.574Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现一款高(neng)大(zhuang)上(bi)的神器——-AutoHotKey, 可以自定义Windows的快捷键, 可以使你彻底脱离鼠标, 这酸爽, 谁用谁知道.</p><p>下载地址: <a href="https://www.autohotkey.com/" target="_blank" rel="noopener">www.autohotkey.com</a><br>中文帮助文档下载: <a href="https://waver.me/Resource/Files/AutoHotkey.chm">帮助文档</a><br>最后附上ChinaUnix博主xiaogangzgg写的教程: <a href="http://blog.chinaunix.net/uid-26811377-id-3166486.html" target="_blank" rel="noopener">AutoHotkey的几个入门级应用</a></p><h2 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h2><h3 id="创建第一个AHK脚本"><a href="#创建第一个AHK脚本" class="headerlink" title="创建第一个AHK脚本"></a>创建第一个AHK脚本</h3><ol><li>在桌面或您选择的文件夹中右键点击空白处.</li><li>在菜单中, 选择 新建-&gt; 文本文档.</li><li>输入文件名, 将<code>.txt</code>后缀修改成<code>.ahk</code>. 例如：Test.ahk。<br> 若没有后缀,请参见<a href="https://jingyan.baidu.com/article/ff42efa920b7f3c19e220283.html" target="_blank" rel="noopener">win10文件后缀名怎么显示</a></li><li>右键点击此文件并选择 Edit Script.</li><li>在新的空行中，输入下列内容：#space::Run www.google.com。</li></ol><p>在上面的语句行中, 首个字符 “#” 表示 Windows 键; 所以 #space 表示按住 Windows 键然后按下空格键来激活热键. 双冒号 :: 表示每次按下此热键时会执行其后续命令, 这里是转到 Google 网站. 要试用此脚本, 请继续下列操作:</p><ol><li>保存并关闭此文件.</li><li>双击此文件来运行. 在任务栏通知区域会出现新的图标.</li><li>按住 Windows 键并按下空格键. 在默认浏览器中会打开网页.</li><li>要退出或编辑此脚本, 则在任务栏通知区域的绿色 “H” 图标上点击右键.</li></ol><p>注意:</p><ul><li>多个脚本可以同时运行, 其中的每个脚本在任务栏通知区域使用自己的图标.</li><li>每个脚本可以包含多个[热键]和[热字串].</li><li>要让您的脚本在启动计算机时自动运行, 请在开始菜单的启动文件夹中给您的脚本创建快捷方式.</li></ul><font color="red"><strong>[热键]和[热字串]对照表请参见文档</strong></font><h2 id="以下是本人常用的一些脚本-不定期更新"><a href="#以下是本人常用的一些脚本-不定期更新" class="headerlink" title="以下是本人常用的一些脚本(不定期更新)"></a>以下是本人常用的一些脚本(不定期更新)</h2><h3 id="1-调节音量"><a href="#1-调节音量" class="headerlink" title="1.调节音量"></a>1.调节音量</h3><p>虽然Windows已经有默认的音量调节按钮, 但是总觉得不爽, 特别是光线比较暗的时候,几乎找不到好吗(没有背光键盘的平民程序员), 下面附上脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;调节音量</span><br><span class="line">!Right::SoundSet, +1,, mute ;Alt + 右方向键 开关声音</span><br><span class="line">!Up::                       ;Alt + 上方向键 增加音量 SoundSet +1 中的 `+1`代表每次按键的精度</span><br><span class="line">SoundSet +1, MASTER</span><br><span class="line">SoundSet, +1, WAVE</span><br><span class="line">Return</span><br><span class="line">!Down::                     ;Alt + 下方向键 降低音量</span><br><span class="line">SoundSet -1, MASTER</span><br><span class="line">SoundSet, -1,WAVE</span><br><span class="line">Return</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近发现一款高(neng)大(zhuang)上(bi)的神器——-AutoHotKey, 可以自定义Windows的快捷键, 可以使你彻底脱离鼠标, 这酸爽, 谁用谁知道.&lt;/p&gt;
&lt;p&gt;下载地址: &lt;a href=&quot;https://www.autohotkey.com/&quot;
      
    
    </summary>
    
      <category term="程序人生" scheme="https://waver.me/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="工具推荐" scheme="https://waver.me/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    
      <category term="工作效率" scheme="https://waver.me/tags/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day14-集合框架[1]</title>
    <link href="https://waver.me/2018/01/22/JavaReview-day14-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%5B1%5D/"/>
    <id>https://waver.me/2018/01/22/JavaReview-day14-集合框架[1]/</id>
    <published>2018-01-22T09:39:21.000Z</published>
    <updated>2018-01-28T09:44:57.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><h2 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a>集合框架图</h2><p><img src="/images/post_images/20180122-Collection.jpg" alt=""><br><img src="/images/post_images/20180122-Collection-simple.jpg" alt=""></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Collection定义了集合框架的共性功能。</p><ol><li><p>添加<br> add(e);<br> addAll(collection);</p></li><li><p>删除<br> remove(e);<br> removeAll(collection);<br> clear();</p></li><li><p>判断。<br> contains(e);<br> isEmpty();</p></li><li><p>获取<br> iterator();<br> size();</p></li><li><p>获取交集。<br> retainAll();</p></li><li><p>集合变数组。<br> toArray();</p></li></ol><ul><li><p>add方法的参数类型是Object。以便于接收任意类型对象。</p></li><li><p>集合中存储的都是对象的引用(地址)</p></li></ul><p><strong>什么是迭代器呢？</strong><br>其实就是集合的取出元素的方式。<br>如同抓娃娃游戏机中的夹子。</p><p>迭代器是取出方式，会直接访问集合中的元素。<br>所以将迭代器通过内部类的形式来进行描述。<br>通过容器的iterator()方法获取该内部类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">CollectionDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">method_get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//1，添加元素。</span></span><br><span class="line">al.add(<span class="string">"java01"</span>);<span class="comment">//add(Object obj);</span></span><br><span class="line">al.add(<span class="string">"java02"</span>);</span><br><span class="line">al.add(<span class="string">"java03"</span>);</span><br><span class="line">al.add(<span class="string">"java04"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Iterator it = al.iterator();//获取迭代器，用于取出集合中的元素。</span></span><br><span class="line"><span class="comment">while(it.hasNext())</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">sop(it.next());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(Iterator it = al.iterator(); it.hasNext() ; )</span><br><span class="line">&#123;</span><br><span class="line">sop(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ArrayList al1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">al1.add(<span class="string">"java01"</span>);</span><br><span class="line">al1.add(<span class="string">"java02"</span>);</span><br><span class="line">al1.add(<span class="string">"java03"</span>);</span><br><span class="line">al1.add(<span class="string">"java04"</span>);</span><br><span class="line">ArrayList al2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">al2.add(<span class="string">"java03"</span>);</span><br><span class="line">al2.add(<span class="string">"java04"</span>);</span><br><span class="line">al2.add(<span class="string">"java05"</span>);</span><br><span class="line">al2.add(<span class="string">"java06"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//al1.retainAll(al2);//去交集，al1中只会保留和al2中相同的元素。</span></span><br><span class="line">al1.removeAll(al2);</span><br><span class="line">sop(<span class="string">"al1:"</span>+al1);</span><br><span class="line">sop(<span class="string">"al2:"</span>+al2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">base_method</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个集合容器。使用Collection接口的子类。ArrayList</span></span><br><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1，添加元素。</span></span><br><span class="line">al.add(<span class="string">"java01"</span>);<span class="comment">//add(Object obj);</span></span><br><span class="line">al.add(<span class="string">"java02"</span>);</span><br><span class="line">al.add(<span class="string">"java03"</span>);</span><br><span class="line">al.add(<span class="string">"java04"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印原集合。</span></span><br><span class="line">sop(<span class="string">"原集合:"</span>+al);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3，删除元素。</span></span><br><span class="line"><span class="comment">//al.remove("java02");</span></span><br><span class="line"><span class="comment">//al.clear();//清空集合。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4，判断元素。</span></span><br><span class="line">sop(<span class="string">"java03是否存在:"</span>+al.contains(<span class="string">"java03"</span>));</span><br><span class="line">sop(<span class="string">"集合是否为空？"</span>+al.isEmpty());</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，获取个数。集合长度。</span></span><br><span class="line">sop(<span class="string">"size:"</span>+al.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印改变后的集合。</span></span><br><span class="line">sop(al);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>枚举就是Vector特有的取出方式。<br>发现枚举和迭代器很像。<br>其实枚举和迭代是一样的。</p><p>因为枚举的名称以及方法的名称都过长。<br>所以被迭代器取代了。<br>枚举郁郁而终了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VectorDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Vector v = <span class="keyword">new</span> Vector();</span><br><span class="line"></span><br><span class="line">v.add(<span class="string">"java01"</span>);</span><br><span class="line">v.add(<span class="string">"java02"</span>);</span><br><span class="line">v.add(<span class="string">"java03"</span>);</span><br><span class="line">v.add(<span class="string">"java04"</span>);</span><br><span class="line"></span><br><span class="line">Enumeration en = v.elements();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(en.hasMoreElements())</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(en.nextElement());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>使用LinkedList模拟一个堆栈或者队列数据结构。</p><p>堆栈：先进后出  如同一个杯子。<br>队列：先进先出 First in First out  FIFO 如同一个水管。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuiLie</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> LinkedList link;</span><br><span class="line"></span><br><span class="line">DuiLie()</span><br><span class="line">&#123;</span><br><span class="line">link = <span class="keyword">new</span> LinkedList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">link.addFirst(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">myGet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> link.removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> link.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">LinkedListTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DuiLie dl = <span class="keyword">new</span> DuiLie();</span><br><span class="line">dl.myAdd(<span class="string">"java01"</span>);</span><br><span class="line">dl.myAdd(<span class="string">"java02"</span>);</span><br><span class="line">dl.myAdd(<span class="string">"java03"</span>);</span><br><span class="line">dl.myAdd(<span class="string">"java04"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!dl.isNull())</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(dl.myGet());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">去除ArrayList集合中的重复元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">al.add(<span class="string">"java01"</span>);</span><br><span class="line">al.add(<span class="string">"java02"</span>);</span><br><span class="line">al.add(<span class="string">"java01"</span>);</span><br><span class="line">al.add(<span class="string">"java02"</span>);</span><br><span class="line">al.add(<span class="string">"java01"</span>);</span><br><span class="line">    <span class="comment">//al.add("java03");</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在迭代时循环中next调用一次，就要hasNext判断一次。</span></span><br><span class="line"><span class="comment">Iterator it = al.iterator();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while(it.hasNext())</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">sop(it.next()+"...."+it.next());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">sop(al);</span><br><span class="line">al = singleElement(al);</span><br><span class="line">sop(al);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">singleElement</span><span class="params">(ArrayList al)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个临时容器。</span></span><br><span class="line">ArrayList newAl = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">Iterator it = al.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">Object obj = it.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!newAl.contains(obj))</span><br><span class="line">newAl.add(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newAl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList练习"><a href="#ArrayList练习" class="headerlink" title="ArrayList练习:"></a>ArrayList练习:</h3><p>将自定义对象作为元素存到ArrayList集合中，并去除重复元素。<br>比如：存人对象。同姓名同年龄，视为同一个人。为重复元素。</p><p>思路:</p><ol><li>对人描述，将数据封装进人对象。</li><li>定义容器，将人存入。</li><li>取出。</li></ol><p>List集合判断元素是否相同，依据是元素的equals方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">Person(String name,<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Person))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">Person p = (Person)obj;</span><br><span class="line"><span class="comment">//System.out.println(this.name+"....."+p.name);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="keyword">this</span>.age == p.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">al.add(<span class="keyword">new</span> Demo());</span><br><span class="line"></span><br><span class="line">al.add(<span class="keyword">new</span> Person(<span class="string">"lisi01"</span>,<span class="number">30</span>));<span class="comment">//al.add(Object obj);//Object obj = new Person("lisi01",30);</span></span><br><span class="line"><span class="comment">//al.add(new Person("lisi02",32));</span></span><br><span class="line">al.add(<span class="keyword">new</span> Person(<span class="string">"lisi02"</span>,<span class="number">32</span>));</span><br><span class="line">al.add(<span class="keyword">new</span> Person(<span class="string">"lisi04"</span>,<span class="number">35</span>));</span><br><span class="line">al.add(<span class="keyword">new</span> Person(<span class="string">"lisi03"</span>,<span class="number">33</span>));</span><br><span class="line"><span class="comment">//al.add(new Person("lisi04",35));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//al = singleElement(al);</span></span><br><span class="line"></span><br><span class="line">sop(<span class="string">"remove 03 :"</span>+al.remove(<span class="keyword">new</span> Person(<span class="string">"lisi03"</span>,<span class="number">33</span>)));<span class="comment">//remove方法底层也是依赖于元素的equals方法。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Iterator it = al.iterator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">Person p = (Person)it.next();</span><br><span class="line">sop(p.getName()+<span class="string">"::"</span>+p.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">singleElement</span><span class="params">(ArrayList al)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个临时容器。</span></span><br><span class="line">ArrayList newAl = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">Iterator it = al.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">Object obj = it.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!newAl.contains(obj))</span><br><span class="line">newAl.add(obj);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newAl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><p>对字符串排序。<br>“zxcvbasdfg”<br>思路：</p><ol><li>字符串变数组。</li><li>数组排序。</li><li>数组变字符串。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"zxcvbasdfg"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char[] arr = str.toCharArray();</span></span><br><span class="line"><span class="comment">//Arrays.sort(arr);</span></span><br><span class="line"><span class="comment">//System.out.println(new String(arr));</span></span><br><span class="line"><span class="comment">//str = sortString(str);</span></span><br><span class="line"><span class="comment">//System.out.println(str);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sortString</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] arr = stringToArray(str);</span><br><span class="line"></span><br><span class="line">sort(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arrayToString(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] stringToArray(String str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str.toCharArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length-<span class="number">1</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=x+<span class="number">1</span>; y&lt;arr.length; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[x]&gt;arr[y])</span><br><span class="line">&#123;</span><br><span class="line">swap(arr,x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] arr,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp = arr[x];</span><br><span class="line">arr[x] = arr[y];</span><br><span class="line">arr[y] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">char</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集合框架&quot;&gt;&lt;a href=&quot;#集合框架&quot; class=&quot;headerlink&quot; title=&quot;集合框架&quot;&gt;&lt;/a&gt;集合框架&lt;/h1&gt;&lt;h2 id=&quot;集合框架图&quot;&gt;&lt;a href=&quot;#集合框架图&quot; class=&quot;headerlink&quot; title=&quot;集合框架图&quot;&gt;
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day13-String</title>
    <link href="https://waver.me/2018/01/21/JavaReview-day13-String/"/>
    <id>https://waver.me/2018/01/21/JavaReview-day13-String/</id>
    <published>2018-01-21T07:06:53.000Z</published>
    <updated>2018-01-27T06:27:06.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String及其他"><a href="#String及其他" class="headerlink" title="String及其他"></a>String及其他</h2><blockquote><p>本篇主要介绍介绍String和其他基本数据类型的包装类型及其常用方法;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String s1 = "abc";//s1是一个类类型变量， "abc"是一个对象。</span></span><br><span class="line"><span class="comment">//字符串最大特点：一旦被初始化就不可以被改变。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String s2 = new String("abc");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//s1和s2有什么区别？</span></span><br><span class="line"><span class="comment">//s1在内存中有一个对象。</span></span><br><span class="line"><span class="comment">//s2在内存中有两个对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">System.out.println(s1==s2);</span></span><br><span class="line"><span class="comment">System.out.println(s1.equals(s2));//String类复写了Object类中equals方法，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//该方法用于判断字符串是否相同。</span></span><br><span class="line"></span><br><span class="line">String s = <span class="string">"abcde"</span>;</span><br><span class="line">method_1(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String类是对字符串事物的描述。</span></span><br><span class="line"><span class="comment">该类定义了专门用于操作字符串的方法。</span></span><br><span class="line"><span class="comment">"abc":</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_1</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch = s.charAt(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"ch="</span>+ch);</span><br><span class="line"><span class="keyword">int</span> num = s.codePointAt(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"num="</span>+num);</span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">"qq"</span>;</span><br><span class="line">s1 = s1.concat(<span class="string">"mm"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"s1="</span>+s1);</span><br><span class="line">System.out.println(<span class="string">"qq"</span>+<span class="string">"mm"</span>);</span><br><span class="line"></span><br><span class="line">String a = <span class="string">"opq"</span>;</span><br><span class="line">String b = <span class="string">"opq"</span>;</span><br><span class="line">System.out.println(<span class="string">"a==b:"</span>+(a==b));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String类适用于描述字符串事物。<br>那么它就提供了多个方法对字符串进行操作。</p><p>常见的操作有哪些？<br>“abcd”</p><h4 id="1-获取。"><a href="#1-获取。" class="headerlink" title="1.获取。"></a>1.获取。</h4><pre><code>1. 字符串中的包含的字符数，也就是字符串的长度。    int length():获取长度。1. 根据位置获取位置上某个字符。    char charAt(int index):1. 根据字符获取该字符在字符串中位置。    int indexOf(int ch):返回的是ch在字符串中第一次出现的位置。    int indexOf(int ch, int fromIndex) :从fromIndex指定位置开始，获取ch在字符串中出现的位置。    int indexOf(String str):返回的是str在字符串中第一次出现的位置。    int indexOf(String str, int fromIndex) :从fromIndex指定位置开始，获取str在字符串中出现的位置。    int lastIndexOf(int ch) ：</code></pre><h4 id="2-判断。"><a href="#2-判断。" class="headerlink" title="2.判断。"></a>2.判断。</h4><pre><code>1. 字符串中是否包含某一个子串。    boolean contains(str):    特殊之处：indexOf(str):可以索引str第一次出现位置，如果返回-1.表示该str不在字符串中存在。            所以，也可以用于对指定判断是否包含。            if(str.indexOf(&quot;aa&quot;)!=-1)            而且该方法即可以判断，有可以获取出现的位置。2. 字符中是否有内容。    boolean isEmpty(): 原理就是判断长度是否为0.3. 字符串是否是以指定内容开头。    boolean startsWith(str);4. 字符串是否是以指定内容结尾。    boolean endsWith(str);5. 判断字符串内容是否相同。复写了Object类中的equals方法。    boolean equals(str);6. 判断内容是否相同，并忽略大小写。    boolean equalsIgnoreCase();</code></pre><h4 id="3-转换。"><a href="#3-转换。" class="headerlink" title="3.转换。"></a>3.转换。</h4><pre><code>1. 将字符数组转成字符串。    构造函数：String(char[])              String(char[],offset,count):将字符数组中的一部分转成字符串。    静态方法：            static String copyValueOf(char[]);            static String copyValueOf(char[] data, int offset, int count)            static String valueOf(char[]):2. 将字符串转成字符数组。**    char[] toCharArray():3. 将字节数组转成字符串。        String(byte[])        String(byte[],offset,count):将字节数组中的一部分转成字符串。4. 将字符串转成字节数组。        byte[]  getBytes():5. 将基本数据类型转成字符串。    static String valueOf(int)    static String valueOf(double)    //3+&quot;&quot;;//String.valueOf(3);    特殊：字符串和字节数组在转换过程中，是可以指定编码表的。</code></pre><h4 id="4-替换"><a href="#4-替换" class="headerlink" title="4.替换"></a>4.替换</h4><pre><code>String replace(oldchar,newchar);</code></pre><h4 id="5-切割"><a href="#5-切割" class="headerlink" title="5.切割"></a>5.切割</h4><pre><code>String[] split(regex);</code></pre><h4 id="6-子串。获取字符串中的一部分。"><a href="#6-子串。获取字符串中的一部分。" class="headerlink" title="6.子串。获取字符串中的一部分。"></a>6.子串。获取字符串中的一部分。</h4><pre><code>String substring(begin);String substring(begin,end);</code></pre><h4 id="7-转换，去除空格，比较。"><a href="#7-转换，去除空格，比较。" class="headerlink" title="7.转换，去除空格，比较。"></a>7.转换，去除空格，比较。</h4><pre><code>1. 将字符串转成大写或则小写。     String toUpperCase();     String toLowerCase();2. 将字符串两端的多个空格去除。    String trim();3. 对两个字符串进行自然顺序的比较。    int compareTo(string);</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StringMethodDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"    Hello Java     "</span>;</span><br><span class="line">sop(s.toLowerCase());</span><br><span class="line">sop(s.toUpperCase());</span><br><span class="line">sop(s.trim());</span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">"a1c"</span>;</span><br><span class="line">String s2 = <span class="string">"aaa"</span>;</span><br><span class="line"></span><br><span class="line">sop(s1.compareTo(s2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"abcdef"</span>;</span><br><span class="line"></span><br><span class="line">sop(s.substring(<span class="number">2</span>));<span class="comment">//从指定位置开始到结尾。如果角标不存在，会出现字符串角标越界异常。</span></span><br><span class="line">sop(s.substring(<span class="number">2</span>,<span class="number">4</span>));<span class="comment">//包含头，不包含尾。s.substring(0,s.length());</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">method_split</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"zhagnsa,lisi,wangwu"</span>;</span><br><span class="line"></span><br><span class="line">String[] arr  = s.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;arr.length; x++)</span><br><span class="line">&#123;</span><br><span class="line">sop(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_replace</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"hello java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//String s1 = s.replace('q','n');//如果要替换的字符不存在，返回的还是原串。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String s1 = s.replace(<span class="string">"java"</span>,<span class="string">"world"</span>);</span><br><span class="line">sop(<span class="string">"s="</span>+s);</span><br><span class="line">sop(<span class="string">"s1="</span>+s1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_trans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] arr = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;;</span><br><span class="line"></span><br><span class="line">String s= <span class="keyword">new</span> String(arr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"s="</span>+s);</span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">"zxcvbnm"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] chs = s1.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;chs.length; x++)</span><br><span class="line">&#123;</span><br><span class="line">sop(<span class="string">"ch="</span>+chs[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_is</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"ArrayDemo.java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断文件名称是否是Array单词开头。</span></span><br><span class="line">sop(str.startsWith(<span class="string">"Array"</span>));</span><br><span class="line"><span class="comment">//判断文件名称是否是.java的文件。</span></span><br><span class="line">sop(str.endsWith(<span class="string">".java"</span>));</span><br><span class="line"><span class="comment">//判断文件中是否包含Demo</span></span><br><span class="line">sop(str.contains(<span class="string">".java"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"abcdeakpf"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line">sop(str.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据索引获取字符。</span></span><br><span class="line">sop(str.charAt(<span class="number">4</span>));<span class="comment">//当访问到字符串中不存在的角标时会发生StringIndexOutOfBoundsException。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据字符获取索引</span></span><br><span class="line">sop(str.indexOf(<span class="string">'m'</span>,<span class="number">3</span>));<span class="comment">//如果没有找到，返回-1.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反向索引一个字符出现位置。</span></span><br><span class="line">sop(str.lastIndexOf(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">method_7();</span><br><span class="line"><span class="comment">//method_trans();</span></span><br><span class="line"><span class="comment">//method_is();</span></span><br><span class="line"><span class="comment">//method_get();</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String s1 = "abc";</span></span><br><span class="line"><span class="comment">String s2 = new String("abc");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String s3 = "abc";</span></span><br><span class="line"><span class="comment">System.out.println(s1==s2);</span></span><br><span class="line"><span class="comment">System.out.println(s1==s3);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String实战"><a href="#String实战" class="headerlink" title="String实战"></a>String实战</h2><h3 id="实战一"><a href="#实战一" class="headerlink" title="实战一"></a>实战一</h3><ul><li>模拟一个trim方法，去除字符串两端的空格。<br>  思路：<ol><li>判断字符串第一个位置是否是空格，如果是继续向下判断，直到不是空格为止。<br> 结尾处判断空格也是如此。</li><li>当开始和结尾都判断到不是空格时，就是要获取的字符串。</li></ol></li></ul><ul><li>将一个字符串进行反转。将字符串中指定部分进行反转，”abcdefg”;abfedcg<br>  思路：<ol><li>曾经学习过对数组的元素进行反转。</li><li>将字符串变成数组，对数组反转。</li><li>将反转后的数组变成字符串。</li><li>只要将或反转的部分的开始和结束位置作为参数传递即可。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s = <span class="string">"      ab cd      "</span>;</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"("</span>+s+<span class="string">")"</span>);</span><br><span class="line"><span class="comment">//s = myTrim(s);</span></span><br><span class="line"><span class="comment">//sop("("+s+")");</span></span><br><span class="line"></span><br><span class="line">sop(<span class="string">"("</span>+reverseString(s)+<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习二：将字符串反转。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">1，将字符串变成数组。</span></span><br><span class="line"><span class="comment">2，对数组反转。</span></span><br><span class="line"><span class="comment">3，将数组变成字符串。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseString</span><span class="params">(String s,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//字符串变数组。</span></span><br><span class="line"><span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转数组。</span></span><br><span class="line">reverse(chs,start,end);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组变成字符串。</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(chs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseString</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> reverseString(s,<span class="number">0</span>,s.length());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] arr,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> start=x,end=y-<span class="number">1</span>; start&lt;end ; start++,end--)</span><br><span class="line">&#123;</span><br><span class="line">swap(arr,start,end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] arr,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp = arr[x];</span><br><span class="line">arr[x] = arr[y];</span><br><span class="line">arr[y] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习一，去除字符串两端空格。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">myTrim</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>,end = str.length()-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(start&lt;=end &amp;&amp; str.charAt(start)==<span class="string">' '</span>)</span><br><span class="line">start++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(start&lt;=end &amp;&amp; str.charAt(end)==<span class="string">' '</span>)</span><br><span class="line">end--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str.substring(start,end+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战二"><a href="#实战二" class="headerlink" title="实战二"></a>实战二</h3><ul><li>获取一个字符串在另一个字符串中出现的次数。<br>  “abkkcdkkefkkskk”</li></ul><pre><code>- 思路：1. 定义个计数器。2. 获取kk第一次出现的位置。3. 从第一次出现位置后剩余的字符串中继续获取kk出现的位置。    每获取一次就计数一次。4. 当获取不到时，计数完成。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StringTest2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习三。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSubCount</span><span class="params">(String str,String key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((index=str.indexOf(key))!=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sop(<span class="string">"str="</span>+str);</span><br><span class="line">str = str.substring(index+key.length());</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习三，方式二。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSubCount_2</span><span class="params">(String str,String key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((index= str.indexOf(key,index))!=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sop(<span class="string">"index="</span>+index);</span><br><span class="line">index = index + key.length();</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"kkabkkcdkkefkks"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///sop("count====="+str.split("kk").length);不建议使用。</span></span><br><span class="line"></span><br><span class="line">sop(<span class="string">"count="</span>+getSubCount_2(str,<span class="string">"kk"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战三"><a href="#实战三" class="headerlink" title="实战三"></a>实战三</h3><ul><li>获取两个字符串中最大相同子串。第一个动作：将短的那个串进行长度一次递减的子串打印。<br>  “abcwerthelloyuiodef”<br>  “cvhellobnm”<br>  思路：<pre><code>1. 将短的那个子串按照长度递减的方式获取到。2. 将每获取到的子串去长串中判断是否包含，    如果包含，已经找到。</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StringTest3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习四。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMaxSubString</span><span class="params">(String s1,String s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">String max = <span class="string">""</span>,min = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">max = (s1.length()&gt;s2.length())?s1: s2;</span><br><span class="line"></span><br><span class="line">min = (max==s1)?s2: s1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sop("max="+max+"...min="+min);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;min.length(); x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>,z=min.length()-x; z!=min.length()+<span class="number">1</span>; y++,z++)</span><br><span class="line">&#123;</span><br><span class="line">String temp = min.substring(y,z);</span><br><span class="line"></span><br><span class="line">sop(temp);</span><br><span class="line"><span class="keyword">if</span>(max.contains(temp))<span class="comment">//if(s1.indexOf(temp)!=-1)</span></span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String s1 = <span class="string">"ab"</span>;</span><br><span class="line">String s2 = <span class="string">"cvhellobnm"</span>;</span><br><span class="line">sop(getMaxSubString(s2,s1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战四"><a href="#实战四" class="headerlink" title="实战四"></a>实战四</h3><p>/*<br>对字符串中字符进行自然顺序排序。</p><p>思路：<br>1，字符串变成字符数组。<br>2，对数组排序，选择，冒泡，Arrays.sort();<br>3，将排序后的数组变成字符串。<br>“vcz1bdAa+cs”–&gt;abccdsvz</p><p><em>作业：<br>“12 0 99 -7 30 4 100 13”<br>要求对字符串中的数值进行排序。生成一个数值从小到大新字符串。<br>“-7 0 4 12 13 30 99 100”</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"12 0 99 -7 30 4 100 13"</span>;</span><br><span class="line">        System.out.println(sortString(str));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String  <span class="title">sortString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] string = str.split(<span class="string">" "</span>);</span><br><span class="line">        List&lt;Integer&gt; integer = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; string.length; i ++) &#123;</span><br><span class="line">            integer.add(Integer.parseInt(string[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        sort(integer);</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer1 : integer) &#123;</span><br><span class="line">            result += integer1.toString() + <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>StringBuffer是字符串缓冲区。</p><p>是一个容器。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li>长度是可变化的。</li><li>可以字节操作多个数据类型。</li><li>最终会通过toString方法变成字符串。</li></ol><p>C create U update R read D delete</p><ol><li>存储。<br> StringBuffer append():将指定数据作为参数添加到已有数据结尾处。<br> StringBuffer insert(index,数据):可以将数据插入到指定index位置。</li></ol><ol><li><p>删除。<br> StringBuffer delete(start,end):删除缓冲区中的数据，包含start，不包含end。<br> StringBuffer deleteCharAt(index):删除指定位置的字符。</p></li><li><p>获取。<br> char charAt(int index)<br> int indexOf(String str)<br> int lastIndexOf(String str)<br> int length()<br> String substring(int start, int end)</p></li><li><p>修改。<br> StringBuffer replace(start,end,string);<br> void setCharAt(int index, char ch) ;</p></li></ol><ol><li><p>反转。<br> StringBuffer reverse();</p></li><li><p>将缓冲区中指定数据存储到指定字符数组中。<br> void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</p></li></ol><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><h3 id="API"><a href="#API" class="headerlink" title="API:"></a>API:</h3><p>`一个可变的字符序列。这个类提供了一个API兼容 StringBuffer，但无法保证同步。本课程是专为使用作为一个下降的替代 StringBuffer在地方的字符串缓冲区被一个线程使用（一般情况下）。在可能的情况下，建议优先使用这类 StringBuffer它将在大多数实现更快。<br>在StringBuilder的主营业务是append和insert方法的重载，以便接受任何数据类型。每个有效地将一个给定的数据到一个字符串，然后追加或插入字符串的字符的字符串生成器。的append方法总是说这些人物在生成器的结束；的insert方法添加字符在指定点。</p><p>例如，如果z指字符串生成器对象的当前内容是“start”，然后调用方法z.append(“le”)会导致字符串生成器包含“startle”，而z.insert(4, “le”)会改变字符串生成器包含“starlet”。</p><p>一般来说，如果某人是一个StringBuilder实例，然后sb.append(x)具有相同的效果sb.insert(sb.length(), x)。</p><p>每一个字符串生成器都有一个容量。只要字符串生成器中包含的字符序列的长度不超过容量，就没有必要分配一个新的内部缓冲区。如果内部缓冲区溢出，则自动作出较大的。</p><p>StringBuilder不安全的实例用于多个线程。如果需要同步然后建议StringBuffer可用。</p><p>除非另有说明，通过null争论这类构造函数或方法会导致一个NullPointerException被。`</p><p>JDK1.5 版本之后出现了StringBuilder.</p><p><strong>StringBuffer是线程同步。<br>  StringBuilder是线程不同步。</strong></p><font color="red"><strong>以后开发，建议使用StringBuilder</strong></font><p>Java升级的三个因素：</p><ol><li>提高效率。</li><li>简化书写。</li><li>提高安全性。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBufferDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//method_update();</span></span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"abcdef"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sb.getChars(<span class="number">1</span>,<span class="number">4</span>,chs,<span class="number">1</span>);<span class="comment">//将</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;chs.length; x++)</span><br><span class="line">&#123;</span><br><span class="line">sop(<span class="string">"chs["</span>+x+<span class="string">"]="</span>+chs[x]+<span class="string">";"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">draw(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">draw(<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//StringBuilder sb1 = new StringBuilder();</span></span><br><span class="line"><span class="comment">//sb1.append(new Demo()).append(new Demo());</span></span><br><span class="line"><span class="comment">//sop("sb1="+sb1);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuffer sb  = <span class="keyword">new</span> StringBuffer(<span class="string">"abcde"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sb.replace(1,4,"java");</span></span><br><span class="line">sb.setCharAt(<span class="number">2</span>,<span class="string">'k'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sop(sb.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuffer sb  = <span class="keyword">new</span> StringBuffer(<span class="string">"abcde"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sb.delete(1,3);</span></span><br><span class="line"><span class="comment">//清空缓冲区。</span></span><br><span class="line"><span class="comment">//sb.delete(0,sb.length());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sb.delete(2,3);</span></span><br><span class="line">sb.deleteCharAt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">sop(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//sb.append("abc").append(true).append(34);</span></span><br><span class="line"><span class="comment">//StringBuffer sb1 = sb.append(34);</span></span><br><span class="line"><span class="comment">//sop("sb==sb1:"+(sb==sb1));</span></span><br><span class="line"></span><br><span class="line">sb.insert(<span class="number">1</span>,<span class="string">"qq"</span>);</span><br><span class="line">sop(sb.toString());<span class="comment">//abctrue34</span></span><br><span class="line"><span class="comment">//sop(sb1.toString());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;row; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;col; y++)</span><br><span class="line">&#123;</span><br><span class="line">sb.append(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sop(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>/*<br>基本数据类型对象包装类。<br>| 引用类型 | 包装类型 |<br>|:—–:|:—–:|<br>| byte    | Byte  |<br>| short    | Short |<br>| int        | Integer |<br>| long    | Long |<br>| boolean | Boolean |<br>| float     | Float |<br>| double | Double |<br>| char     | Character |</p><h3 id="基本数据类型对象包装类的最常见作用，"><a href="#基本数据类型对象包装类的最常见作用，" class="headerlink" title="基本数据类型对象包装类的最常见作用，"></a>基本数据类型对象包装类的最常见作用，</h3><p>  就是用于基本数据类型和字符串类型之间做转换</p><ol><li><p>基本数据类型转成字符串。</p><p> 基本数据类型+””</p><p> 基本数据类型.toString(基本数据类型值);</p><p> 如： <code>Integer.toString(34);</code>//将34整数变成”34”;</p></li><li><p>字符串转成基本数据类型。</p><p> `xxx a = Xxx.parseXxx(String);</p><p> int a = Integer.parseInt(“123”);</p><p> double b = Double.parseDouble(“12.23”);</p><p> boolean b = Boolean.parseBoolean(“true”);</p><p> Integer i = new Integer(“123”);</p><p> int num = i.intValue();`</p></li><li><p>进制转换</p><ul><li>十进制转成其他进制。<br><code>toBinaryString();toHexString();toOctalString();</code></li></ul></li></ol><ul><li>其他进制转成十进制。<br>  <code>parseInt(string,radix);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//整数类型的最大值。</span></span><br><span class="line"><span class="comment">//sop("int max :"+Integer.MAX_VALUE);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个字符串转成整数。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(<span class="string">"123"</span>);<span class="comment">//必须传入数字格式的字符串。</span></span><br><span class="line"><span class="comment">//long x = Long.parseLong("123");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sop("num="+(num+4));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sop(Integer.toBinaryString(-6));</span></span><br><span class="line"><span class="comment">//sop(Integer.toHexString(60));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = Integer.parseInt(<span class="string">"3c"</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"x="</span>+x);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Integer常用方法"><a href="#Integer常用方法" class="headerlink" title="Integer常用方法"></a>Integer常用方法</h3><p>/*<br>JDK1.5版本以后出现的新特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Integer x = new Integer(4);</span></span><br><span class="line"></span><br><span class="line">Integer x = <span class="number">4</span>;<span class="comment">//自动装箱。//new Integer(4)</span></span><br><span class="line">x = x<span class="comment">/* x.intValue() */</span> + <span class="number">2</span>;<span class="comment">//x+2:x 进行自动拆箱。变成成了int类型。和2进行加法运算。</span></span><br><span class="line"><span class="comment">//再将和进行装箱赋给x。</span></span><br><span class="line"></span><br><span class="line">Integer m = <span class="number">128</span>;</span><br><span class="line">Integer n = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"m==n:"</span>+(m==n));</span><br><span class="line"></span><br><span class="line">Integer a = <span class="number">127</span>;</span><br><span class="line">Integer b = <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"a==b:"</span>+(a==b));<span class="comment">//结果为true。因为a和b指向了同一个Integer对象。</span></span><br><span class="line">   <span class="comment">//因为当数值在byte范围内容，对于新特性，如果该数值已经存在，则不会在开辟新的空间。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">sop(<span class="string">"x==y:"</span>+(x==y));</span><br><span class="line">sop(<span class="string">"x.equals(y):"</span>+x.equals(y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object str)</span><span class="comment">//Object str = new Integer(4);</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">sop(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//int[] arr = &#123;3,1,5,8,23,9&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//System.out.println(toString(arr));</span></span><br><span class="line"><span class="comment">//System.out.println(toString_2(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString_2</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"["</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=arr.length-<span class="number">1</span>)</span><br><span class="line">sb.append(arr[x]+<span class="string">", "</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sb.append(arr[x]+<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"["</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=arr.length-<span class="number">1</span>)</span><br><span class="line">str += arr[x]+<span class="string">", "</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">str += arr[x]+<span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;String及其他&quot;&gt;&lt;a href=&quot;#String及其他&quot; class=&quot;headerlink&quot; title=&quot;String及其他&quot;&gt;&lt;/a&gt;String及其他&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本篇主要介绍介绍String和其他基本数据类型的包装类型及
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day12-线程通信</title>
    <link href="https://waver.me/2018/01/20/JavaReview-day12-%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
    <id>https://waver.me/2018/01/20/JavaReview-day12-线程通信/</id>
    <published>2018-01-20T07:20:31.000Z</published>
    <updated>2018-01-22T11:23:17.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><font color="red">线程间通讯：<br>其实就是多个线程在操作同一个资源，<br>但是操作的动作不同。</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Resource r = <span class="keyword">new</span> Resource();</span><br><span class="line"></span><br><span class="line">Producer pro = <span class="keyword">new</span> Producer(r);</span><br><span class="line">Consumer con = <span class="keyword">new</span> Consumer(r);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(con);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于多个生产者和消费者。<br>为什么要定义while判断标记。<br>原因：让被唤醒的线程再一次判断标记。</p><p>为什么定义<code>notifyAll</code>，<br>因为需要唤醒对方线程。<br>因为只用notify，容易出现只唤醒本方线程的情况。导致程序中的所有线程都等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//  t1    t2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;<span class="comment">//t1(放弃资格)  t2(获取资格)</span></span><br><span class="line"><span class="keyword">this</span>.name = name+<span class="string">"--"</span>+count++;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...生产者.."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  t3   t4  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!flag)</span><br><span class="line"><span class="keyword">try</span>&#123;wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;<span class="comment">//t3(放弃资格) t4(放弃资格)</span></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...消费者........."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">Producer(Resource res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">res.set(<span class="string">"+商品+"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">Consumer(Resource res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">res.out();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进程同步优化解决方案"><a href="#进程同步优化解决方案" class="headerlink" title="进程同步优化解决方案"></a>进程同步优化解决方案</h3><p>JDK1.5 中提供了多线程升级解决方案。<br>将同步Synchronized替换成显式的Lock操作。<br>将Object中的wait，notify notifyAll，替换了Condition对象。<br>该对象可以Lock锁 进行获取。<br>该示例中，实现了本方只唤醒对方操作。</p><ul><li><p>Lock:替代了Synchronized</p><pre><code>lockunlocknewCondition()</code></pre></li><li><p>Condition：替代了Object wait notify notifyAll</p><pre><code>await();signal();signalAll();</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerDemo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Resource r = <span class="keyword">new</span> Resource();</span><br><span class="line"></span><br><span class="line">Producer pro = <span class="keyword">new</span> Producer(r);</span><br><span class="line">Consumer con = <span class="keyword">new</span> Consumer(r);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(con);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//  t1    t2</span></span><br><span class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Condition condition_pro = lock.newCondition();</span><br><span class="line"><span class="keyword">private</span> Condition condition_con = lock.newCondition();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span><span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line">condition_pro.await();<span class="comment">//t1,t2</span></span><br><span class="line"><span class="keyword">this</span>.name = name+<span class="string">"--"</span>+count++;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...生产者.."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">condition_con.signal();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">lock.unlock();<span class="comment">//释放锁的动作一定要执行。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  t3   t4  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span><span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!flag)</span><br><span class="line">condition_con.await();</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...消费者........."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">condition_pro.signal();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">Producer(Resource res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">res.set(<span class="string">"+商品+"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">Consumer(Resource res)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.res = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">res.out();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Res</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name,String sex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">this</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(name+<span class="string">"........"</span>+sex);</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">this</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Res r ;</span><br><span class="line">Input(Res r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.r = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>)</span><br><span class="line">r.set(<span class="string">"mike"</span>,<span class="string">"man"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r.set(<span class="string">"丽丽"</span>,<span class="string">"女女女女女"</span>);</span><br><span class="line">x = (x+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Res r ;</span><br><span class="line"></span><br><span class="line">Output(Res r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.r = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">r.out();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">InputOutputDemo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Res r = <span class="keyword">new</span> Res();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Input(r)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Output(r)).start();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input in = new Input(r);</span></span><br><span class="line"><span class="comment">Output out = new Output(r);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Thread t1 = new Thread(in);</span></span><br><span class="line"><span class="comment">Thread t2 = new Thread(out);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t2.start();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>等待的线程存放在线程池中</strong><br><strong>最先唤醒的是最先被冻结的线程</strong></p><h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><p><strong>stop方法已经过时。</strong></p><p>如何停止线程？<br>只有一种，run方法结束。<br>开启多线程运行，运行代码通常是循环结构。<br>只要控制住循环，就可以让run方法结束，也就是线程结束。</p><p>特殊情况：<br>当线程处于了冻结状态。<br>就不会读取到标记。那么线程就不会结束。</p><p>当没有指定的方式让冻结的线程恢复到运行状态是，这时需要对冻结进行清除。<br>强制让线程恢复到运行状态中来。这样就可以操作标记让线程结束。</p><p>Thread类提供该方法 <code>interrupt()</code>;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag =<span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeFlag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StopThreadDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StopThread st = <span class="keyword">new</span> StopThread();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(st);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(st);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t2.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num++ == <span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//st.changeFlag();</span></span><br><span class="line"><span class="comment">//t1.interrupt();</span></span><br><span class="line"><span class="comment">//t2.interrupt();</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"......."</span>+num);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"over"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>join:<br>当A线程执行到了B线程的.join()方法时，A就会等待。等B线程都执行完，A才会执行。</p><p>join可以用来临时加入线程执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">70</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().toString()+<span class="string">"....."</span>+x);</span><br><span class="line">Thread.yield();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">JoinDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(d);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(d);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//t1.setPriority(Thread.MAX_PRIORITY);</span></span><br><span class="line"></span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//t1.join();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">80</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//System.out.println("main....."+x);</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"over"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.currentThread().sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"MyThread running"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">t.run();</span><br><span class="line">t.start();</span><br><span class="line">System.out.println(<span class="string">"Thread Test"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码分析过程："><a href="#代码分析过程：" class="headerlink" title="代码分析过程："></a>代码分析过程：</h4><p><code>MyThread t = new MyThread();</code><br>创建了一个线程。<br><code>t.run();</code><br>调用<code>MyThread</code>对象的<code>run()</code>方法。<br>这是只有一个线程在运行就是主线程。<br>当主线程执行到了<code>run()</code>方法中的<code>sleep(3000);</code>时。<br>这是主线程处于冻结状态。程序并没有任何执行。<br>当3秒过后，主线程打印了  <code>MyThread running</code>。 <code>run()</code>方法执行结束。</p><p><code>t.start();</code><br>开启了t线程。<br><strong>有两种可能情况。</strong></p><ol><li><p>第一种情况:<br>主线程在只执行了<code>t.start()</code>后，还具有执行权，继续往下执行，<br>打印了<code>Thread Test</code>。主线程结束。<br>t线程获取执行权，调用自己的run方法。然后执行的<code>sleep(3000);</code>冻结3秒。<br>3秒后，打印MyThread running t线程结束，整个程序结束。</p></li><li><p>第二种情况：<br>主线程执行到<code>t.start();</code>开启了t线程，t线程就直接获取到了执行权。<br>就调用自己的<code>run()</code>方法。<br>指定到<code>sleep(3000)</code>.t线程冻结3秒，这是t线程就是释放了执行权。<br>那么主线程开始执行打印了<code>Thread Test</code>，主线程结束。<br>等到3秒后，t线程打印<code>MyThread running</code> ，然后t线程结束。<br>程序结束。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="线程间通信。"><a href="#线程间通信。" class="headerlink" title="线程间通信。"></a>线程间通信。</h4><pre><code>等待/唤醒机制。也就是常见的生产者消费者问题。1. 当多个生产者消费者出现时，需要让获取执行权的线程判断标记。通过while完成。2. 需要将对方的线程唤醒。仅仅用notify，是不可以的。因为有可能出现只唤醒本方。有可能会导致，所有线程都等待。所以可以通过notifyAll的形式来完成 。</code></pre><p><em>这个程序有一个bug。就是每次notifyAll。都会唤醒本方。<br>可不可以只唤醒对方呢？</em></p><p><strong>JDK1.5版本提供了一些新的对象，优化了等待唤醒机制。</strong></p><ol><li>将synchronized 替换成了Lock接口。<br> 将隐式锁，升级成了显示锁。<br> <strong>Lock</strong><pre><code>- 获取锁：lock();- 释放锁：unlock();注意：释放的动作一定要执行，所以通常定义在finally中。- 获取Condition对象：newCondition();</code></pre></li><li>将Object中的wait，notify，notifyAll方法都替换成了Condition的await，signal，signalAll。<br> 和以前不同是：一个同步代码块具备一个锁，该所以具备自己的独立wait和notify方法。<br> 现在是将wait，notify等方法，封装进一个特有的对象Condition，而一个Lock锁上可以有多个Condition对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">Condition conA = lock.newCondition();</span><br><span class="line">Condition conB = lock.newCondition();</span><br><span class="line"></span><br><span class="line">con.await();<span class="comment">//生产，，消费</span></span><br><span class="line">con.signal();生产</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">conA.await();<span class="comment">//生产者，</span></span><br><span class="line">code......;</span><br><span class="line"></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">conB.signal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">conB.await();<span class="comment">//消费者</span></span><br><span class="line"></span><br><span class="line">code....;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">conA.signal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>wait和sleep的区别：<br>wait:释放cpu执行权，释放同步中锁。<br>sleep:释放cpu执行权，不释放同步中锁。</li></ul><p><code>synchronized(锁){wait();}</code></p><h4 id="停止线程："><a href="#停止线程：" class="headerlink" title="停止线程："></a>停止线程：</h4><pre><code>**stop过时。**原理：run方法结束。run方法中通常定义循环，指定控制住循环线程即可结束。1. 定义结束标记。2. 当线程处于了冻结状态，没有执行标记，程序一样无法结束。    这时可以循环，正常退出冻结状态，或者强制结束冻结状态。    强制结束冻结状态：interrupt();目的是线程强制从冻结状态恢复到运行状态。    但是会发生InterruptedException异常。</code></pre><ul><li><p>线程中一些常见方法：<br>  setDaemon(boolean):将线程标记为后台线程，后台线程和前台线程一样，开启，一样抢执行权运行，<br>  只有在结束时，有区别，当前台线程都运行结束后，后台线程会自动结束。</p><p>  join():什么意思？等待该线程结束。当A线程执行到了B的.join方法时，A就会处于冻结状态。</p><pre><code>A什么时候运行呢？当B运行结束后，A就会具备运行资格，继续运行。</code></pre><p>  加入线程，可以完成对某个线程的临时加入执行。</p></li></ul><p><strong>多线程重点:</strong></p><ol><li><p>多线程的创建的两种方式，以及区别。</p></li><li><p>同步的特点。<br>   同步的好处：<br>   同步的弊端：<br>   同步的前提：<br>   同步的表现形式以及区别。<br>   特例：static同步函数锁是哪一个。</p><p> <strong>死锁代码要求写的出来。</strong></p></li><li><p>线程间通信，看以上总结。</p></li></ol><ol><li>wait和sleep，  <code>yield()</code>: 临时暂停，可以让线程是释放执行权。<br><code>yield()</code>方法API:<br>`给调度程序的一个提示，当前线程愿意得到它当前的处理器的使用。调度程序可以自由地忽略这个提示。<br>产量是一个启发式的尝试，以改善线程之间的相对进展，否则将过度使用一个中央处理器。它的使用应结合详细的分析和基准，以确保它实际上有所需的效果。</li></ol><p>使用这种方法是不恰当的。它可能是有用的调试或测试的目的，它可能有助于重现由于种族条件的错误。这也可能是有用的在设计并发控制结构如在java.util.concurrent.locks包的。<br>`</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线程通信&quot;&gt;&lt;a href=&quot;#线程通信&quot; class=&quot;headerlink&quot; title=&quot;线程通信&quot;&gt;&lt;/a&gt;线程通信&lt;/h2&gt;&lt;font color=&quot;red&quot;&gt;线程间通讯：&lt;br&gt;其实就是多个线程在操作同一个资源，&lt;br&gt;但是操作的动作不同。&lt;/font
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day11-线程</title>
    <link href="https://waver.me/2018/01/19/JavaReview-day11-%E7%BA%BF%E7%A8%8B/"/>
    <id>https://waver.me/2018/01/19/JavaReview-day11-线程/</id>
    <published>2018-01-19T04:01:06.000Z</published>
    <updated>2018-01-22T11:34:02.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h3><ul><li><p>进程:<br>是一个正在执行中的程序。<br>  每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制元。</p></li><li><p>线程：就是进程中的一个独立的控制单元。</p><pre><code>线程在控制着进程的执行。</code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>一个进程中至少有一个线程。</p></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h3><ul><li><p>Java VM  启动的时候会有一个进程java.exe.<br>该进程中至少一有个线程负责java程序的执行。而且这个线程运行的代码存在于main方法中。该线程称之为主线程。</p></li><li><p>扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程。</p></li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>如何在自定义的代码中，自定义一个线程呢？</li></ol><p>通过对api的查找，java已经提供了对线程这类事物的描述。就Thread类。</p><p>创建线程的第一种方式：继承Thread类。</p><ul><li>步骤：<ol><li>定义类继承Thread。</li><li>复写Thread类中的run方法。<br>目的: 将自定义代码存储在run方法。让线程运行。</li></ol></li></ul><ol><li>调用线程的start方法，<br> 该方法两个作用：启动线程，调用run方法。</li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>发现运行结果每一次都不同。<br>因为多个线程都获取 <strong>cpu的执行权</strong>。cpu执行到谁，谁就运行。<br>明确一点，在某一个时刻，只能有一个程序在运行。(多核除外)<br>cpu在做着快速的切换，以达到看上去是同时运行的效果。<br>我们可以形象把多线程的运行行为在互相抢夺cpu的执行权。</p><ul><li>这就是多线程的一个特性：随机性。谁抢到谁执行，至于执行多长，cpu说的算。</li></ul><h3 id="为什么要覆盖run方法呢？"><a href="#为什么要覆盖run方法呢？" class="headerlink" title="为什么要覆盖run方法呢？"></a>为什么要覆盖run方法呢？</h3><p>Thread类用于描述线程。</p><p>该类就定义了一个功能，用于存储线程要运行的代码。该存储功能就是run方法。</p><p>也就是说Thread类中的run方法，用于存储线程要运行的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">60</span>; x++)</span><br><span class="line">System.out.println(<span class="string">"demo run----"</span>+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//for(int x=0; x&lt;4000; x++)</span></span><br><span class="line"><span class="comment">//System.out.println("Hello World!");</span></span><br><span class="line"></span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();<span class="comment">//创建好一个线程。</span></span><br><span class="line"><span class="comment">//d.start();//开启线程并执行该线程的run方法。</span></span><br><span class="line">d.run();<span class="comment">//仅仅是对象调用方法。而线程创建了，并没有运行。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">60</span>; x++)</span><br><span class="line">System.out.println(<span class="string">"Hello World!--"</span>+x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习：</span></span><br><span class="line"><span class="comment">创建两个线程，和主线程交替运行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">原来线程都有自己默认的名称。</span></span><br><span class="line"><span class="comment">Thread-编号 该编号从0开始。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">static Thread currentThread():获取当前线程对象。</span></span><br><span class="line"><span class="comment">getName(): 获取线程名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">设置线程名称：setName或者构造函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//private String name;</span></span><br><span class="line">Test(String name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//this.name = name;</span></span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">60</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println((Thread.currentThread()==<span class="keyword">this</span>)+<span class="string">"..."</span>+<span class="keyword">this</span>.getName()+<span class="string">" run..."</span>+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1 = <span class="keyword">new</span> Test(<span class="string">"one---"</span>);</span><br><span class="line">Test t2 = <span class="keyword">new</span> Test(<span class="string">"two+++"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line"><span class="comment">//t1.run();</span></span><br><span class="line"><span class="comment">//t2.run();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">60</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"main....."</span>+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的状态图"><a href="#线程的状态图" class="headerlink" title="线程的状态图"></a>线程的状态图</h3><p><img src="/images/post_images/javaReview_day11_img_01" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：</span></span><br><span class="line"><span class="comment">银行有一个金库。</span></span><br><span class="line"><span class="comment">有两个储户分别存300元，每次存100，存3次。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">目的：该程序是否有安全问题，如果有，如何解决？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何找问题：</span></span><br><span class="line"><span class="comment">1，明确哪些代码是多线程运行代码。</span></span><br><span class="line"><span class="comment">2，明确共享数据。</span></span><br><span class="line"><span class="comment">3，明确多线程运行代码中哪些语句是操作共享数据的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sum;</span><br><span class="line"><span class="comment">//Object obj = new Object();</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//synchronized(obj)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line">sum = sum + n;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cus</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Bank b = <span class="keyword">new</span> Bank();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">3</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line">b.add(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">BankDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cus c = <span class="keyword">new</span> Cus();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(c);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(c);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果同步函数被静态修饰后-使用的锁是什么呢？"><a href="#如果同步函数被静态修饰后-使用的锁是什么呢？" class="headerlink" title="如果同步函数被静态修饰后, 使用的锁是什么呢？"></a>如果同步函数被静态修饰后, 使用的锁是什么呢？</h3><p>通过验证，发现不在是this。因为静态方法中也不可以定义this。</p><p>静态进内存是，内存中没有本类对象，但是一定有该类对应的字节码文件对象。<br>类名.class  该对象的类型是Class</p><p>静态的同步方法，使用的锁是该方法所在类的字节码文件对象。 类名.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">int</span> tick = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//Object obj = new Object();</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(Ticket.class)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....code : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....show.... : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">StaticMethodDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">t1.start();</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">t.flag = <span class="keyword">false</span>;</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="买票小程序"><a href="#买票小程序" class="headerlink" title="买票小程序"></a>买票小程序</h3><p>需求：简单的卖票程序。<br>多个窗口同时买票。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span>//<span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">int</span> tick = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....sale : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">TicketDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(t);<span class="comment">//创建了一个线程；</span></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t);<span class="comment">//创建了一个线程；</span></span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(t);<span class="comment">//创建了一个线程；</span></span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(t);<span class="comment">//创建了一个线程；</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Ticket t1 = new Ticket();</span></span><br><span class="line"><span class="comment">//Ticket t2 = new Ticket();</span></span><br><span class="line"><span class="comment">//Ticket t3 = new Ticket();</span></span><br><span class="line"><span class="comment">//Ticket t4 = new Ticket();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">t1.start();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建线程的第二种方式：实现Runable接口"><a href="#创建线程的第二种方式：实现Runable接口" class="headerlink" title="创建线程的第二种方式：实现Runable接口"></a>创建线程的第二种方式：实现Runable接口</h3><p>步骤：</p><ol><li>定义类实现Runnable接口</li><li><p>覆盖Runnable接口中的run方法。<br> 将线程要运行的代码存放在该run方法中。</p></li><li><p>通过Thread类建立线程对象。</p></li><li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。<br> 为什么要将Runnable接口的子类对象传递给Thread的构造函数。<br> 因为，自定义的run方法所属的对象是Runnable接口的子类对象。<br> 所以要让线程去执行指定对象的run方法。就必须明确该run方法所属对象。</li></ol><ol><li>调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。</li></ol><h4 id="实现方式和继承方式有什么区别呢？"><a href="#实现方式和继承方式有什么区别呢？" class="headerlink" title="实现方式和继承方式有什么区别呢？"></a>实现方式和继承方式有什么区别呢？</h4><ul><li><p>实现方式好处：避免了单继承的局限性。<br>在定义线程时，建意使用实现方式。</p></li><li><p>两种方式区别：<br>继承Thread:线程代码存放Thread子类run方法中。<br>实现Runnable，线程代码存在接口的子类的run方法。</p></li></ul><h2 id="线程同步-线程安全"><a href="#线程同步-线程安全" class="headerlink" title="线程同步(线程安全)"></a>线程同步(线程安全)</h2><h3 id="问题-同步函数用的是哪一个锁呢？"><a href="#问题-同步函数用的是哪一个锁呢？" class="headerlink" title="问题: 同步函数用的是哪一个锁呢？"></a>问题: 同步函数用的是哪一个锁呢？</h3><p>函数需要被对象调用。那么函数都有一个所属对象引用。就是this。<br>所以同步函数使用的锁是this。</p><p>通过该程序进行验证。</p><p>使用两个线程来买票。<br>一个线程在同步代码块中。<br>一个线程在同步函数中。<br>都在执行买票动作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">int</span> tick = <span class="number">100</span>;</span><br><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....code : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="comment">//this</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....show.... : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ThisLockDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">t1.start();</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">t.flag = <span class="keyword">false</span>;</span><br><span class="line">t2.start();</span><br><span class="line"><span class="comment">//Thread t3 = new Thread(t);</span></span><br><span class="line"><span class="comment">//Thread t4 = new Thread(t);</span></span><br><span class="line"><span class="comment">//t3.start();</span></span><br><span class="line"><span class="comment">//t4.start();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程安全在单例设计模式中的应用"><a href="#线程安全在单例设计模式中的应用" class="headerlink" title="线程安全在单例设计模式中的应用"></a>线程安全在单例设计模式中的应用</h3><ul><li><p>饿汉式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Single s = <span class="keyword">new</span> Single();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>懒汉式</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Single <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(Single.class)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="keyword">null</span>)</span><br><span class="line"><span class="comment">//---&gt;A;</span></span><br><span class="line">s = <span class="keyword">new</span> Single();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁。<br>同步中嵌套同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">int</span> tick = <span class="number">1000</span>;</span><br><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj)</span><br><span class="line">&#123;</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="comment">//this</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tick&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"....code : "</span>+ tick--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DeadLockDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">t1.start();</span><br><span class="line"><span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">t.flag = <span class="keyword">false</span>;</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="死锁练习"><a href="#死锁练习" class="headerlink" title="死锁练习"></a>死锁练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line">Test(<span class="keyword">boolean</span> flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.flag = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(MyLock.locka)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"...if locka "</span>);</span><br><span class="line"><span class="keyword">synchronized</span>(MyLock.lockb)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"..if lockb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(MyLock.lockb)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"..else lockb"</span>);</span><br><span class="line"><span class="keyword">synchronized</span>(MyLock.locka)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">".....else locka"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLock</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> Object locka = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">static</span> Object lockb = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DeadLockTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Test(<span class="keyword">true</span>));</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Test(<span class="keyword">false</span>));</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>进程：正在执行的程序。</p></li><li><p>线程：是进程中用于控制程序执行的控制单元(执行路径，执行情景)<br>进程中至少有一个线程。</p></li><li><p>对于JVM，启动时，只好有两个线程：jvm的主线程。jvm的垃圾回收线程。</p></li></ul><p><strong>如何在程序中自定义线程呢？</strong></p><p>Java给我们提供了对象线程这类事物的描述。该类是Thread</p><p>该类中定义了，<br>创建线程对象的方法(构造函数).<br>提供了要被线程执行的代码存储的位置(run())</p><p>还定义了开启线程运行的方法(start()).<br>同时还有一些其他的方法用于操作线程：<br>    static Thread currentThead():<br>    String getName():<br>    static void sleep(time)throws InterruptedException:</p><p>要运行的代码都是后期定义的。<br>所以创建线程的第一种方式是：继承Thread类。原因：要覆盖run方法，定义线程要运行的代码。</p><p>步骤：</p><ol><li>继承Thread类。</li><li>覆盖run方法。将线程要运行的代码定义其中。</li><li>建Thread类的子类对象，其实就是在创建线程，调用start方法。</li></ol><p>如果自定义的类中有多线程要运行的代码。但是该类有自己的父类。<br>那么就不可以在继承Thread。怎么办呢？</p><p>Java给我们提供了一个规则。Runnable接口。<br>如果自定义类不继承Thread，也可以实现Runnable接口。并将多线程要运行的代码存放在Runnable的run方法中。<br>这样多线程也可以帮助该类运行。<br>这样的操作有一个好处：避免了单继承的局限性。</p><p>创建线程的第二种方式：实现Runnable接口。</p><p>步骤：</p><ol><li>定义了实现Runnable接口。</li><li>覆盖接口的run方法。将多线程要运行的代码存入其中。</li><li>创建Thread类的对象(创建线程),并将Runnable接口的子类对象作为参数传递给Thread的构造函数。<br> 为什么要传递？因为线程要运行的代码都在Runnable子类的run方法中存储。所以要将该run方法所属的对象<br> 传递给Thread。让Thread线程去使用该对象调用其run方法。</li><li>调用Thread对象的start方法。开启线程。</li></ol><p>动手写代码。</p><p>两种方式的特点：<br>实现方式，因为避免了单继承的局限性，所以创建线程建议使用第二种方式。</p><h3 id="第一重点：创建线程的两种方式"><a href="#第一重点：创建线程的两种方式" class="headerlink" title="第一重点：创建线程的两种方式"></a>第一重点：创建线程的两种方式</h3><p>作为了解：<br>线程的状态。</p><ol><li>被创建。</li><li>运行。</li><li>冻结。</li><li>消亡。</li></ol><p>其实还有一种特殊的状态：临时状态。</p><p>该临时状态的特点：<br>具备了执行资格，但不具备执行权。</p><p><strong>冻结状态的特点</strong>：</p><ul><li>放弃了执行资格。<br>多线程具备随机性。因为是由cpu不断的快速切换造成的。<br>就有可能会产生多线程的安全问题;</li></ul><h4 id="问题的产生的原因："><a href="#问题的产生的原因：" class="headerlink" title="问题的产生的原因："></a>问题的产生的原因：</h4><p>几个关键点：</p><ol><li>多线程代码中有操作共享数据。</li><li>多条语句操作该共享数据。</li></ol><p>当具备两个关键点时，<br>有一个线程对多条操作共享数据的代码执行的一部分。还没有执行完，另一个线程开始参与执行。就会发生数据错误。</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>当一个线程在执行多条操作共享数据代码时，其他线程即使获取了执行权，也不可以参与操作。</p><p>Java就对这种解决方式提供了专业的代码。</p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>同步的原理：就是将部分操作功能数据的代码进行加锁。</p><p>示例：火车上的卫生间。</p><p>同步的表现形式：</p><ol><li>同步代码块。</li><li>同步函数。<br>两者有什么不同：<br>同步代码块使用的锁是任意对象。<br>同步函数使用的锁是this。</li></ol><p>注意：对于static的同步函数，使用的锁不是this。是 类名.class 是该类的字节码文件对象。<br>    涉及到了单例设计模式的懒汉式。</p><h4 id="同步的好处：解决了线程的安全问题。"><a href="#同步的好处：解决了线程的安全问题。" class="headerlink" title="同步的好处：解决了线程的安全问题。"></a>同步的好处：解决了线程的安全问题。</h4><ul><li>弊端：<br>  较为消耗资源。<br>  同步嵌套后，容易死锁。</li></ul><p><strong>要记住</strong>：同步使用的前提：</p><pre><code>1. 必须是两个或者两个以上的线程。2. 必须是多个线程使用同一个锁。这是才可以称为这些线程被同步了。</code></pre><p><strong>死锁代码一定会写。但开发时一定注意避免。</strong></p><h3 id="第二重点：同步的所有特性"><a href="#第二重点：同步的所有特性" class="headerlink" title="第二重点：同步的所有特性"></a>第二重点：同步的所有特性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Runnable target;</span><br><span class="line"></span><br><span class="line">Thread()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">Thread(Runnable target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(target!=<span class="keyword">null</span>)</span><br><span class="line">target.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">Test q = <span class="keyword">new</span> Test();</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h2&gt;&lt;h3 id=&quot;进程和线程的区别&quot;&gt;&lt;a href=&quot;#进程和线程的区别&quot; class=&quot;headerlink&quot; title=&quot;进程和线程的区别&quot;
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day10-异常</title>
    <link href="https://waver.me/2018/01/17/JavaReview-day10-%E5%BC%82%E5%B8%B8/"/>
    <id>https://waver.me/2018/01/17/JavaReview-day10-异常/</id>
    <published>2018-01-17T03:54:27.000Z</published>
    <updated>2018-01-22T11:34:28.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常的格式"><a href="#异常的格式" class="headerlink" title="异常的格式"></a>异常的格式</h2><ol><li>第一种:</li></ol><p>经典格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第二种:</li></ol><p>带有 finally的格式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>第三种:</li></ol><p>特殊格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三种格式的特点及作用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码会编译失败<br>但添加<code>finally</code>语句后即可编译成功, 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();  </span><br><span class="line">  &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常在子父类覆盖中的体现"><a href="#异常在子父类覆盖中的体现" class="headerlink" title="异常在子父类覆盖中的体现"></a>异常在子父类覆盖中的体现</h3><ol><li>子类在覆盖父类时,如果父类的方法抛出异常, 那么子类的覆盖方法只能抛出父类的异常, 或该异常的子类;</li><li>如果父类方法抛出多个异常, 那么子类方法在覆盖该方法时, 只能抛出父类异常的子集;</li><li>如果父类或接口的方法中没有抛出异常, 那么子类在覆盖该方法时, 也不能抛出异常, 如果子类方法发生类异常, 就必须进行<code>try</code>处理, 绝对不能抛出;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Inter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Inter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span><span class="comment">//throws Exception</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Exception</span></span><br><span class="line"><span class="comment">// |--A</span></span><br><span class="line"><span class="comment">// |--B</span></span><br><span class="line"><span class="comment">// |--C</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="keyword">throws</span> A</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(Fu f)</span><span class="comment">//Fu f  = new Zi();</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">f.show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (A  a)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="keyword">throws</span> C</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t = <span class="keyword">new</span> Test();</span><br><span class="line">t.show(<span class="keyword">new</span> Zi());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>异常：</p><h2 id="是什么？是对问题的描述。将问题进行对象的封装。"><a href="#是什么？是对问题的描述。将问题进行对象的封装。" class="headerlink" title="是什么？是对问题的描述。将问题进行对象的封装。"></a>是什么？是对问题的描述。将问题进行对象的封装。</h2><p>异常体系：<br>    Throwable<br>        |–Error<br>        |–Exception<br>            |–RuntimeException</p><p>异常体系的特点：异常体系中的所有类以及建立的对象都具备可抛性。<br>                也就是说可以被throw和throws关键字所操作。<br>                只有异常体系具备这个特点。</p><hr><p>throw和throws的用法：</p><p>throw定义在函数内，用于抛出异常对象。<br>throws定义在函数上，用于抛出异常类，可以抛出多个用逗号隔开。</p><p>当函数内容有throw抛出异常对象，并未进行try处理。必须要在函数上声明，都在编译失败。</p><h2 id="注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。"><a href="#注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。" class="headerlink" title="注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。"></a>注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。</h2><p>如果函数声明了异常，调用者需要进行处理。处理方法可以throws可以try。</p><p>异常有两种：<br>    编译时被检测异常<br>        该异常在编译时，如果没有处理(没有抛也没有try)，编译失败。<br>        该异常被标识，代表这可以被处理。<br>    运行时异常(编译时不检测)<br>        在编译时，不需要处理，编译器不检查。<br>        该异常的发生，建议不处理，让程序停止。需要对代码进行修正。</p><hr><p>异常处理语句：<br>try<br>{<br>    需要被检测的代码；<br>}<br>catch ()<br>{<br>    处理异常的代码；<br>}<br>finally<br>{<br>    一定会执行的代码；<br>}</p><p>有三个结合格式：</p><ol><li><p>第一种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> ()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> ()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><ol><li>finally中定义的通常是 关闭资源代码。因为资源必须释放。</li><li>finally只有一种情况不会执行。当执行到System.exit(0);fianlly不会执行。</li></ol><hr><h3 id="自定义异常："><a href="#自定义异常：" class="headerlink" title="自定义异常："></a>自定义异常：</h3><pre><code>定义类继承Exception或者RuntimeException1. 为了让该自定义类具备可抛性。2. 让该类具备操作异常的共性方法。当要定义自定义异常的信息时，可以使用父类已经定义好的功能。异常异常信息传递给父类的构造函数。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">MyException(String message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常:"></a>自定义异常:</h2><h2 id="按照java的面向对象思想，将程序中出现的特有问题进行封装。"><a href="#按照java的面向对象思想，将程序中出现的特有问题进行封装。" class="headerlink" title="  按照java的面向对象思想，将程序中出现的特有问题进行封装。"></a>  按照java的面向对象思想，将程序中出现的特有问题进行封装。</h2><h2 id="异常的好处："><a href="#异常的好处：" class="headerlink" title="异常的好处："></a>异常的好处：</h2><pre><code>1. 将问题进行封装。2. 将正常流程代码和问题处理代码相分离，方便于阅读。</code></pre><h2 id="异常的处理原则："><a href="#异常的处理原则：" class="headerlink" title="异常的处理原则："></a>异常的处理原则：</h2><pre><code>1. 处理方式有两种：try 或者 throws。2. 调用到抛出异常的功能时，抛出几个，就处理几个。    一个try对应多个catch。3. 多个catch，父类的catch放到最下面。4. catch内，需要定义针对性的处理方式。不要简单的定义printStackTrace，输出语句。    也不要不写。    当捕获到的异常，本功能处理不了时，可以继续在catch中抛出。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AException e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果该异常处理不了，但并不属于该功能出现的异常。<br>可以将异常转换后，在抛出和该功能相关的异常。</p><p>或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，<br>当调用者知道。并处理。也可以将捕获异常处理后，转换新的异常。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AException e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 对AException处理。</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>比如，汇款的例子。</code></pre><p>异常的注意事项：<br>    在子父类覆盖时：<br>    1，子类抛出的异常必须是父类的异常的子类或者子集。<br>    2，如果父类或者接口没有异常抛出时，子类覆盖出现异常，只能try不能抛。</p><p>参阅<br>ExceptionTest.java 老师用电脑上课<br>ExceptionTest1.java 图形面积。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> ()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"x="</span>+x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异常的格式&quot;&gt;&lt;a href=&quot;#异常的格式&quot; class=&quot;headerlink&quot; title=&quot;异常的格式&quot;&gt;&lt;/a&gt;异常的格式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;第一种:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经典格式&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day09-内部类</title>
    <link href="https://waver.me/2018/01/08/JavaReview-day09-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://waver.me/2018/01/08/JavaReview-day09-内部类/</id>
    <published>2018-01-08T13:43:07.000Z</published>
    <updated>2018-01-22T11:34:49.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>内部类简介:<br>内部类是指在一个外部类的内部再定义一个类。类名不需要和文件夹相同。<br><em>内部类可以是静态static的，也可用public，default，protected和private修饰。（而外部顶级类即类名和文件名相同的只能使用public和default）。</em></p><p><strong>注意</strong>：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。所以内部类的成员变量/方法名可以和外部类的相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mun = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span>//内部类。</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"show run..."</span> + mun);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//static void function()//如果内部类中定义了静态成员，该内部类也必须是静态的。</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    System.out.println("function run ...."+num);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerClassDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Outer out = new Outer();</span></span><br><span class="line">    <span class="comment">//out.method();</span></span><br><span class="line">    <span class="comment">//直接访问外部类中的内部类中的成员。</span></span><br><span class="line">    <span class="comment">//Outer.Inner in = new Outer().new Inner();</span></span><br><span class="line">    <span class="comment">//in.show();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果内部类是静态的。 相当于一个外部类</span></span><br><span class="line">    <span class="comment">//Outer.Inner in = new Outer.Inner();</span></span><br><span class="line">    <span class="comment">//in.show();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果内部类是静态的，成员是静态的。</span></span><br><span class="line">    <span class="comment">//Outer.Inner.function();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类的访问规则"><a href="#内部类的访问规则" class="headerlink" title="内部类的访问规则"></a>内部类的访问规则</h2><ol><li>内部类可以直接访问外部类中的成员, 包括私有, 这是因为内部类中持有一个外部类的引用, 格式 <code>外部类名.this</code></li><li>外部类要访问内部类, 必须建立内部类的对象</li></ol><h2 id="访问格式"><a href="#访问格式" class="headerlink" title="访问格式:"></a>访问格式:</h2><ol><li><p>当内部类定义在外部类的成员位置上, 而且非私有, 可以在 <strong>外部其他类</strong> 中, 可以直接建立内部类对象</p><ul><li>格式: <code>外部类名.内部类名 变量名 = 外部类对象.内部类对象;</code></li><li>代码: <code>Outer.Inner inner = new Outer(). new Inner();</code><br>2.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">day09</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Outer.Inner inner = <span class="keyword">new</span> Outer(). <span class="keyword">new</span> Inner();</span><br><span class="line">      inner.function();</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">3</span>; <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">4</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x = <span class="number">6</span>;</span><br><span class="line">      System.out.println(<span class="string">"X value:"</span> + x);</span><br><span class="line">      System.out.println(<span class="string">"X value:"</span> + <span class="keyword">this</span>.x);</span><br><span class="line">      System.out.println(<span class="string">"X value:"</span> + Outer.<span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>输出结果为:<br><code>634</code></p><h2 id="局部中的内部类"><a href="#局部中的内部类" class="headerlink" title="局部中的内部类"></a>局部中的内部类</h2><p>内部类定义在局部时:</p><ul><li>不可以被成员修饰符修饰;</li><li>可以直接访问外部类中的成员, 因为还持有外部类中的引用<br>但是不可以访问它所在的局部中的变量. 只能访问被 <code>final</code> 修饰的局部变量;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(y);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">new</span> Inner.function();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerClassDemo3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Outer out = <span class="keyword">new</span> Outer().method();</span><br><span class="line">      out.method(<span class="number">7</span>);</span><br><span class="line">      out.method(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><ol><li>匿名内部类就是内部类的简写格式</li><li>定义匿名内部类的前提:<ul><li>内部类必须是继承一个类或实现接口</li></ul></li><li>匿名内部类的格式: new 父类对象或接口(){定义子类的内容}</li><li>其实匿名内部类就是一个匿名子类对象. 而且这个对象有点胖. 可以理解为带内容的对象;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsDemo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">  AbsDemo d = <span class="keyword">new</span> AbsDemo()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"x=="</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">abc</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"haha"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">d.show();</span><br><span class="line"><span class="comment">//d.abc();//编译失败 因为只能使用父类的引用,无法调用</span></span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ol><li>异常:就是程序在运行时出现不正常情况.<br>异常的由来: 问题也是现实生活中一个具体的事物, 也可以通过java的类的形式进行描述. 并封装成对象.</li><li>对于问题的划分为两种:<br>一种是严重的问题, 一种非严重的问题;</li></ol><ul><li>对于严重的, java 通过<code>Error</code>类进行描述:<br>  对于<code>Error</code>一般不编写针对性的代码对其进行处理;</li><li>对于非严重的, java 通过<code>Exception</code>类进行描述.<br>对于<code>Exception</code>可以使用针对性的处理方式进行处理;</li></ul><p>异常：是在运行时期发生的不正常情况<br>在java中用类的形式对不正常情况进行了描述和封装对象。<br>描述不正常的情况的类，就称为异常类。<br>以前正常流程代码和问题处理代码相结合，<br>现在将正常流程代码和问题处理代码分离。提高阅读性.<br>其实异常就是java通过面向对象的思想将问题封装成了对象.<br>用异常类对其进行描述。<br>不同的问题用不同的类进行具体的描述。 比如角标越界。空指针等等。<br>问题很多，意味着描述的类也很多，<br>将其共性进行向上抽取，形成了异常体系。<br>最终问题（不正常情况）就分成了两大类。<br>Throwable:无论是error，还是异常，问题，问题发生就应该可以抛出，让调用者知道并处理。<br>    //该体系的特点就在于Throwable及其所有的子类都具有可抛性。<br>    可抛性到底指的是什么呢？怎么体现可抛性呢？<br>    其实是通过两个关键字来体现的。<br>    throws throw ,凡是可以被这两个关键字所操作的类和对象都具备可抛性.</p><pre><code>- 一般不可处理的。Error        特点：是由jvm抛出的严重性的问题。             这种问题发生一般不针对性处理。直接修改程序- 可以处理的。Exception</code></pre><ul><li>该体系的特点：<br> 子类的后缀名都是用其父类名作为后缀，阅读性很想。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">800</span>];<span class="comment">//java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment">//arr = null;</span></span><br><span class="line"><span class="comment">//System.out.println(arr[3]);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//sleep(-5);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep2</span><span class="params">(<span class="keyword">int</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(time&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">      <span class="comment">//处理办法。</span></span><br><span class="line">      <span class="comment">//处理办法。</span></span><br><span class="line">      <span class="comment">//处理办法。</span></span><br><span class="line">      <span class="comment">//处理办法。</span></span><br><span class="line">      <span class="comment">//处理办法。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(time&gt;<span class="number">100000</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//处理办法。</span></span><br><span class="line">    <span class="comment">//处理办法。</span></span><br><span class="line">    <span class="comment">//处理办法。</span></span><br><span class="line">    <span class="comment">//处理办法。</span></span><br><span class="line">    <span class="comment">//处理办法。</span></span><br><span class="line">    <span class="comment">//处理办法。</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"我睡。。。"</span>+time);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sleep(-5);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(time&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//抛出 new FuTime();//就代码着时间为负的情况，这个对象中会包含着问题的名称，信息，位置等信息。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(time&gt;<span class="number">100000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//抛出 new BigTime();</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"我睡。。。"</span>+time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class FuTime</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">class BigTime</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>对于角标是整数不存在，可以用角标越界表示，<br>对于负数为角标的情况，准备用负数角标异常来表示。</p><p>负数角标这种异常在java中并没有定义过。<br>那就按照java异常的创建思想，面向对象，将负数角标进行自定义描述。并封装成对象。</p><p>这种自定义的问题描述成为自定义异常。</p><p>注意：如果让一个类称为异常类，必须要继承异常体系，因为只有称为异常体系的子类才有资格具备可抛性。<br>才可以被两个关键字所操作，throws throw</p><h3 id="异常的分类："><a href="#异常的分类：" class="headerlink" title="异常的分类："></a>异常的分类：</h3><ol><li>编译时被检测异常:只要是Exception和其子类都是，除了特殊子类RuntimeException体系。<br>这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式。<br>这样的问题都可以针对性的处理。</li></ol><ol><li>编译时不检测异常(运行时异常):就是Exception中的RuntimeException和其子类。<br>这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的而或者引发了内部状态的改变导致的。<br>那么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止,让调用者对代码进行修正。</li></ol><p>所以自定义异常时，要么继承Exception。要么继承RuntimeException。</p><h3 id="throws-和-throw-的区别。"><a href="#throws-和-throw-的区别。" class="headerlink" title="throws 和 throw 的区别。"></a>throws 和 throw 的区别。</h3><ol><li>throws使用在函数上。<br>throw使用在函数内。</li><li>throws抛出的是异常类，可以抛出多个，用逗号隔开。<br>throw抛出的是异常对象。</li></ol><p>   异常处理的捕捉形式：<br>   这是可以对异常进行针对性处理的方式。</p><p>   具体格式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//需要被检测异常的代码。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(异常类 变量)<span class="comment">//该变量用于接收发生的异常对象</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//处理异常的代码。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一定会被执行的代码。</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理的原则："><a href="#异常处理的原则：" class="headerlink" title="异常处理的原则："></a>异常处理的原则：</h3><ol><li><p>函数内容如果抛出需要检测的异常，那么函数上必须要声明。<br>否则必须在函数内用trycatch捕捉，否则编译失败。</p></li><li><p>如果调用到了声明异常的函数，要么trycatch要么throws，否则编译失败。</p></li><li><p>什么时候catch，什么时候throws 呢？<br>功能内容可以解决，用catch。<br>解决不了，用throws告诉调用者，由调用者解决 。</p></li><li><p>一个功能如果抛出了多个异常，那么调用时，必须有对应多个catch进行针对性的处理。<br>内部又几个需要检测的异常，就抛几个异常，抛出几个，就catch几个。</p></li></ol><h3 id="异常的注意事项"><a href="#异常的注意事项" class="headerlink" title="异常的注意事项"></a>异常的注意事项</h3><ol><li><p>子类在覆盖父类方法时，父类的方法如果抛出了异常，<br>那么子类的方法只能抛出父类的异常或者该异常的子类。</p></li><li><p>如果父类抛出多个异常，那么子类只能抛出父类异常的子集。<br>简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集。</p></li></ol><p>注意：如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛，就只能try .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Inter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Inter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span><span class="comment">//throws Exception</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="keyword">throws</span> A</span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(Fu f)</span><span class="comment">//Fu f  = new Zi();</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">f.show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (A  a)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span><span class="keyword">throws</span> C</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;内部类&lt;/h1&gt;&lt;p&gt;内部类简介:&lt;br&gt;内部类是指在一个外部类的内部再定义一个类。类名不需要和文件夹相同。&lt;br&gt;&lt;em&gt;内部类可以是静态static的
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Struts2 - 1</title>
    <link href="https://waver.me/2018/01/06/Struts2-1/"/>
    <id>https://waver.me/2018/01/06/Struts2-1/</id>
    <published>2018-01-06T06:59:00.000Z</published>
    <updated>2018-01-06T06:59:00.118Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信跳一跳高分攻(外)略(挂)</title>
    <link href="https://waver.me/2018/01/02/%E5%BE%AE%E4%BF%A1%E8%B7%B3%E4%B8%80%E8%B7%B3%E9%AB%98%E5%88%86%E6%94%BB-%E5%A4%96-%E7%95%A5-%E6%8C%82/"/>
    <id>https://waver.me/2018/01/02/微信跳一跳高分攻-外-略-挂/</id>
    <published>2018-01-02T05:39:35.000Z</published>
    <updated>2018-01-02T05:58:26.790Z</updated>
    
    <content type="html"><![CDATA[<p>最近看微信的跳一跳特别火, 作为一名程序员, 感觉有必要运用一下自己的专(找)业(挂)知(能)识(力), 搞一个高分外挂.<br>具体流程请参考<a href="https://github.com/wavejoker/wechat_jump_game" target="_blank" rel="noopener">传送门</a>, 本文只介绍环境搭建过程;</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>笔者只用过 3.6 其他版本, 推荐使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看微信的跳一跳特别火, 作为一名程序员, 感觉有必要运用一下自己的专(找)业(挂)知(能)识(力), 搞一个高分外挂.&lt;br&gt;具体流程请参考&lt;a href=&quot;https://github.com/wavejoker/wechat_jump_game&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Python" scheme="https://waver.me/categories/Python/"/>
    
      <category term="外挂" scheme="https://waver.me/categories/Python/%E5%A4%96%E6%8C%82/"/>
    
    
      <category term="Android" scheme="https://waver.me/tags/Android/"/>
    
      <category term="Python" scheme="https://waver.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Result Maps collection already contains value for xxx.xxx.Mapper.BaseResultMap异常解决</title>
    <link href="https://waver.me/2017/12/29/Result%20Maps%20collection%20already%20contains%20value%20for%20xxx.xxx.Mapper.BaseResultMap/"/>
    <id>https://waver.me/2017/12/29/Result Maps collection already contains value for xxx.xxx.Mapper.BaseResultMap/</id>
    <published>2017-12-29T12:02:29.000Z</published>
    <updated>2018-01-03T03:54:40.061Z</updated>
    
    <content type="html"><![CDATA[<p>突然项目启动时报出以下错误:<br>百度上的所有答案没能解决, 最终索性重新把mapper文件重新生成了一遍, 结果令人感到意外, 竟然不报错了, 至于原因好像是运行过一个mybatis-gen<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener</span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userServiceImpl&apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.bobo.mapper.UserMapper com.bobo.service.impl.UserServiceImpl.userMapper; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.bobo.mapper.UserMapper] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Autowired(required=true)&#125;</span><br><span class="line">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class="line">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class="line">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class="line">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class="line">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;avisMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap</span><br><span class="line">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;avisMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap</span><br><span class="line">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class="line">Related cause: org.springframework.beans.factory.BeanCreationException: Error</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然项目启动时报出以下错误:&lt;br&gt;百度上的所有答案没能解决, 最终索性重新把mapper文件重新生成了一遍, 结果令人感到意外, 竟然不报错了, 至于原因好像是运行过一个mybatis-gen&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="Exception" scheme="https://waver.me/categories/Exception/"/>
    
    
      <category term="Exception" scheme="https://waver.me/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>maven管理SSM时xml和properties文件丢失异常</title>
    <link href="https://waver.me/2017/12/28/maven%E7%AE%A1%E7%90%86SSM%E6%97%B6xml%E5%92%8Cproperties%E6%96%87%E4%BB%B6%E4%B8%A2%E5%A4%B1%E5%BC%82%E5%B8%B8/"/>
    <id>https://waver.me/2017/12/28/maven管理SSM时xml和properties文件丢失异常/</id>
    <published>2017-12-28T10:52:23.000Z</published>
    <updated>2017-12-28T11:11:42.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="classpath-resource-com-qinkangdeid-mapping-cannot-be-resolved-to-URL-because-it-does-not-exist-和-org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found-异常解决"><a href="#classpath-resource-com-qinkangdeid-mapping-cannot-be-resolved-to-URL-because-it-does-not-exist-和-org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found-异常解决" class="headerlink" title="classpath resource [com/qinkangdeid/mapping/] cannot be resolved to URL because it does not exist 和 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常解决"></a>classpath resource [com/qinkangdeid/mapping/] cannot be resolved to URL because it does not exist 和 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常解决</h1><p>项目结构如图所示: <img src="/images/post_images/20171228ResourceException.jpg" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上图所示, 将com.bobo.mapper和resource目录配置到pom文件的bulid中即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;classpath-resource-com-qinkangdeid-mapping-cannot-be-resolved-to-URL-because-it-does-not-exist-和-org-apache-ibatis-binding-BindingEx
      
    
    </summary>
    
      <category term="Exception" scheme="https://waver.me/categories/Exception/"/>
    
    
      <category term="Exception" scheme="https://waver.me/tags/Exception/"/>
    
      <category term="Spring" scheme="https://waver.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day08-多态</title>
    <link href="https://waver.me/2017/12/26/JavaReview-day08-%E5%A4%9A%E6%80%81/"/>
    <id>https://waver.me/2017/12/26/JavaReview-day08-多态/</id>
    <published>2017-12-26T05:30:58.000Z</published>
    <updated>2018-01-22T11:35:18.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="多态的特点"><a href="#多态的特点" class="headerlink" title="多态的特点"></a>多态的特点</h3><ol><li><p>在多态中, 成员函数的特点:</p><ul><li>在编译时期: 参阅引用型变量所属的类中是否有调用的方法. 如果有, 编译通过; 如果没有, 编译失败</li><li>在运行时期: 参阅对象所属类的中是否有调用的方法</li><li><strong>简单总结就是:</strong> <font color="red">成员函数在多态调用时, 编译看左边, 运行看右边;</font> 因为成员函数存在覆盖特性。</li></ul></li><li><p>在多态中, 成员变量的特点:</p><ul><li>无论编译和运行, 都参考左边(引用型变量所属的类);</li></ul></li><li><p>在多态中, 静态成员函数的特点:</p><ul><li>无论编译和运行, 都参考左边(引用型变量所属的类);</li><li>其实对于静态方法，是不需要对象的。直接用类名调用即可。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//int num = 3;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"fu show"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"fu static method"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//int num = 4;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"zi show"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"zi static method"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DuoTaiDemo3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Fu.method();</span><br><span class="line">Zi.method();</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();<span class="comment">//</span></span><br><span class="line"><span class="comment">//f.method();</span></span><br><span class="line"><span class="comment">//f.show();</span></span><br><span class="line"><span class="comment">//System.out.println(f.num);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Zi z = new Zi();</span></span><br><span class="line"><span class="comment">//System.out.println(z.num);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h2&gt;&lt;h3 id=&quot;多态的特点&quot;&gt;&lt;a href=&quot;#多态的特点&quot; class=&quot;headerlink&quot; title=&quot;多态的特点&quot;&gt;&lt;/a&gt;多态的特
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的23中设计模式-四</title>
    <link href="https://waver.me/2017/12/25/Java%E4%B8%AD%E7%9A%8423%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%9B%9B/"/>
    <id>https://waver.me/2017/12/25/Java中的23中设计模式-四/</id>
    <published>2017-12-25T10:41:56.000Z</published>
    <updated>2018-01-22T11:23:17.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转自:<a href="http://blog.csdn.net/zhangerqing" target="_blank" rel="noopener">http://blog.csdn.net/zhangerqing</a>;</p></blockquote><p>其实每个设计模式都是很重要的一种思想,看上去很熟,其实是因为我们在学到的东西中都有涉及,尽管有时我们并不知道,其实在Java本身的设计之中处处都有体现,像AWT、JDBC、集合类、IO管道或者是Web框架,里面设计模式无处不在。因为我们篇幅有限,很难讲每一个设计模式都讲的很详细,不过我会尽我所能,尽量在有限的空间和篇幅内,把意思写清楚了,更好让大家明白。本章不出意外的话,应该是设计模式最后一讲了,首先还是上一下上篇开头的那个图:<br><img src="/images/post_images/20171225_13.png" alt=""></p><p>本章讲讲第三类和第四类。</p><h2 id="19-备忘录模式（Memento）"><a href="#19-备忘录模式（Memento）" class="headerlink" title="19. 备忘录模式（Memento）"></a>19. 备忘录模式（Memento）</h2><p>主要目的是保存一个对象的某个状态,以便在适当的时候恢复对象,个人觉得叫备份模式更形象些,通俗的讲下：假设有原始类A,A中有各种属性,A可以决定需要备份的属性,备忘录类B是用来存储A的一些内部状态,类C呢,就是一个用来存储备忘录的,且只能存储,不能修改等操作。<br>做个图来分析一下:<br> <img src="/images/post_images/20171225_20.png" alt=""><br>Original类是原始类,里面有需要保存的属性value及创建一个备忘录类,用来保存value值。Memento类是备忘录类,Storage类是存储备忘录的类,持有Memento类的实例,该模式很好理解。</p><p>直接看源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Original</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Original</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(value);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = memento.getValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Memento memento;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Storage</span><span class="params">(Memento memento)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.memento = memento;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> memento;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.memento = memento;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建原始类  </span></span><br><span class="line">        Original origi = <span class="keyword">new</span> Original(<span class="string">"egg"</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建备忘录  </span></span><br><span class="line">        Storage storage = <span class="keyword">new</span> Storage(origi.createMemento());  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改原始类的状态  </span></span><br><span class="line">        System.out.println(<span class="string">"初始化状态为:"</span> + origi.getValue());  </span><br><span class="line">        origi.setValue(<span class="string">"niu"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"修改后的状态为:"</span> + origi.getValue());  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回复原始类的状态  </span></span><br><span class="line">        origi.restoreMemento(storage.getMemento());  </span><br><span class="line">        System.out.println(<span class="string">"恢复后的状态为:"</span> + origi.getValue());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><code>初始化状态为:egg修改后的状态为:niu恢复后的状态为:egg</code></p><h2 id="20-状态模式-State"><a href="#20-状态模式-State" class="headerlink" title="20. 状态模式(State)"></a>20. 状态模式(State)</h2><p>核心思想就是：当对象的状态改变时,同时改变其行为,很好理解！就拿QQ来说,有几种状态,在线、隐身、忙碌等,每个状态对应不同的操作,而且你的好友也能看到你的状态<br>所以,状态模式就两点:</p><ol><li>可以通过改变状态来获得不同的行为。</li><li>你的好友能同时看到你的变化。看图:<br><img src="/images/post_images/20171225_21.png" alt=""></li></ol><p>State类是个状态类,Context类可以实现切换,我们来看看代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xtfggef.dp.state;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态类的核心类</span></span><br><span class="line"><span class="comment"> * 2012-12-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> erqing</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"execute the first opt!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"execute the second opt!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xtfggef.dp.state;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态模式的切换类   2012-12-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> erqing</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(State state)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.state = state;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> state;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.state = state;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (state.getValue().equals(<span class="string">"state1"</span>)) &#123;  </span><br><span class="line">            state.method1();  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.getValue().equals(<span class="string">"state2"</span>)) &#123;  </span><br><span class="line">            state.method2();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">        State state = <span class="keyword">new</span> State();  </span><br><span class="line">        Context context = <span class="keyword">new</span> Context(state);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置第一种状态  </span></span><br><span class="line">        state.setValue(<span class="string">"state1"</span>);  </span><br><span class="line">        context.method();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置第二种状态  </span></span><br><span class="line">        state.setValue(<span class="string">"state2"</span>);  </span><br><span class="line">        context.method();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><code>execute the first opt!execute the second opt!</code></p><p>根据这个特性,状态模式在日常开发中用的挺多的,尤其是做网站的时候,我们有时希望根据对象<br>的某一属性,区别开他们的一些功能,比如说简单的权限控制等。</p><h2 id="21-访问者模式（Visitor）"><a href="#21-访问者模式（Visitor）" class="headerlink" title="21. 访问者模式（Visitor）"></a>21. 访问者模式（Visitor）</h2><p>访问者模式把数据结构和作用于结构上的操作解耦合,使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化,经常有新的数据对象增加进来,则不适合使用访问者模式。访问者模式的优点是增加操作很容易,因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中,其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From百科</p><p>简单来说,访问者模式就是一种分离对象数据结构与行为的方法,通过这种分离,可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：<br><img src="/images/post_images/20171225_22.png" alt=""><br>来看看原码:<br>一个Visitor类,存放要访问的对象,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Subject sub)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Subject sub)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"visit the subject:"</span>+sub.getSubject());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Subject类,accept方法,接受将要访问它的对象,getSubject()获取将要被访问的属性,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;  </span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"love"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">        Visitor visitor = <span class="keyword">new</span> MyVisitor();  </span><br><span class="line">        Subject sub = <span class="keyword">new</span> MySubject();  </span><br><span class="line">        sub.accept(visitor);      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出: <code>visit the subject:love</code><br>该模式适用场景：如果我们想为一个现有的类增加新功能,不得不考虑几个事情：<br>1、新功能会不会与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对这些问题,最好的解决方法就是使用访问者模式,访问者模式适用于数据结构相对稳定的系统,把数据结构和算法解耦;</p><h2 id="22-中介者模式-Mediator"><a href="#22-中介者模式-Mediator" class="headerlink" title="22. 中介者模式(Mediator)"></a>22. 中介者模式(Mediator)</h2><p>中介者模式也是用来降低类类之间的耦合的,因为如果类类之间有依赖关系的话,不利于功能的拓展和维护,因为只要修改一个对象,其它关联的对象都得进行修改。如果使用中介者模式,只需关心和Mediator类的关系,具体类类之间的关系及调度交给Mediator就行,这有点像spring容器的作用。先看看图:<img src="/images/post_images/20171225_23.png" alt="">User类统一接口,User1和User2分别是不同的对象,二者之间有关联,如果不采用中介者模式,则需要二者相互持有引用,这样二者的耦合度很高,为了解耦,引入了Mediator类,提供统一接口,MyMediator为其实现类,里面持有User1和User2的实例,用来实现对User1和User2的控制。这样User1和User2两个对象相互独立,他们只需要保持好和Mediator之间的关系就行,剩下的全由MyMediator类来维护！基本实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMediator</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">workAll</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user1;  </span><br><span class="line">    <span class="keyword">private</span> User user2;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser1</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> user1;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> user2;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMediator</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        user1 = <span class="keyword">new</span> User1(<span class="keyword">this</span>);  </span><br><span class="line">        user2 = <span class="keyword">new</span> User2(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">workAll</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        user1.work();  </span><br><span class="line">        user2.work();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mediator <span class="title">getMediator</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> mediator;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Mediator mediator)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User1</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User1</span><span class="params">(Mediator mediator)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(mediator);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"user1 exe!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User2</span><span class="params">(Mediator mediator)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(mediator);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"user2 exe!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> MyMediator();  </span><br><span class="line">        mediator.createMediator();  </span><br><span class="line">        mediator.workAll();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><code>user1 exe!user2 exe!</code></p><h2 id="23-解释器模式-Interpreter"><a href="#23-解释器模式-Interpreter" class="headerlink" title="23. 解释器模式(Interpreter)"></a>23. 解释器模式(Interpreter)</h2><p>解释器模式是我们暂时的最后一讲,一般主要应用在OOP开发中的编译器的开发中,所以适用面比较窄。<br> <img src="/images/post_images/20171225_24.png" alt=""><br>Context类是一个上下文环境类,Plus和Minus分别是用来计算的实现,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> context.getNum1()+context.getNum2();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> context.getNum1()-context.getNum2();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num1;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num2;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.num1 = num1;  </span><br><span class="line">        <span class="keyword">this</span>.num2 = num2;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum1</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> num1;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum1</span><span class="params">(<span class="keyword">int</span> num1)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.num1 = num1;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> num2;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum2</span><span class="params">(<span class="keyword">int</span> num2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.num2 = num2;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算9+2-8的值  </span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">new</span> Minus().interpret((<span class="keyword">new</span> Context(<span class="keyword">new</span> Plus()  </span><br><span class="line">                .interpret(<span class="keyword">new</span> Context(<span class="number">9</span>, <span class="number">2</span>)), <span class="number">8</span>)));  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后输出正确的结果:<code>3</code>。</p><p>基本就这样,解释器模式用来做各种各样的解释器,如正则表达式等的解释器等等！</p><p>设计模式基本就这么大概讲完了,总体感觉有点简略,的确,这么点儿篇幅,不足以对整个23种设计模式做全面的阐述,此处读者可将它作为一个理论基础去学习,通过这四篇博文,先基本有个概念,虽然我讲的有些简单,但基本都能说明问题及他们的特点,如果对哪一个感兴趣,可以继续深入研究！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文转自:&lt;a href=&quot;http://blog.csdn.net/zhangerqing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/zhangerqing&lt;/a&gt;;&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
      <category term="设计模式" scheme="https://waver.me/categories/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
      <category term="设计模式" scheme="https://waver.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java中的23中设计模式-三</title>
    <link href="https://waver.me/2017/12/25/Java%E4%B8%AD%E7%9A%8423%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%89/"/>
    <id>https://waver.me/2017/12/25/Java中的23中设计模式-三/</id>
    <published>2017-12-25T10:04:02.000Z</published>
    <updated>2018-01-22T09:45:54.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转自:<a href="http://blog.csdn.net/zhangerqing" target="_blank" rel="noopener">http://blog.csdn.net/zhangerqing</a></p></blockquote><p>本章是关于设计模式的最后一讲,会讲到第三种设计模式——行为型模式,共11种：策略模式、模板方<br>法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、<br>中介者模式、解释器模式。这段时间一直在写关于设计模式的东西,终于写到一半了,写博文是个很<br>费时间的东西,因为我得为读者负责,不论是图还是代码还是表述,都希望能尽量写清楚,以便读者<br>理解,我想不论是我还是读者,都希望看到高质量的博文出来,从我本人出发,我会一直坚持下去,<br>不断更新,源源动力来自于读者朋友们的不断支持,我会尽自己的努力,写好每一篇文章！希望大家<br>能不断给出意见和建议,共同打造完美的博文！</p><p>先来张图,看看这11中模式的关系：</p><ol><li>通过父类与子类的关系进行实现。</li><li>两个类之间。</li><li>类的状态。</li><li>通过中间类<br><img src="/images/post_images/20171225_13.png" alt=""></li></ol><h2 id="13-策略模式-strategy"><a href="#13-策略模式-strategy" class="headerlink" title="13. 策略模式(strategy)"></a>13. 策略模式(strategy)</h2><p>策略模式定义了一系列算法,并将每个算法封装起来,使他们可以相互替换,且算法的变化不会影<br>响到使用算法的客户。需要设计一个接口,为一系列实现类提供统一的方法,多个实现类实现该接<br>口,设计一个抽象类（可有可无,属于辅助类）,提供辅助函数,关系图如下:<br><img src="/images/post_images/20171225_14.png" alt=""></p><p>图中ICalculator提供同意的方法,<br>AbstractCalculator是辅助类,提供辅助方法,接下来,依次实现下每个类：<br>首先统一接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICalculator</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>辅助类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] split(String exp,String opt)&#123;  </span><br><span class="line">        String array[] = exp.split(opt);  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  </span><br><span class="line">        arrayInt[<span class="number">0</span>] = Integer.parseInt(array[<span class="number">0</span>]);  </span><br><span class="line">        arrayInt[<span class="number">1</span>] = Integer.parseInt(array[<span class="number">1</span>]);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三个实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = split(exp,<span class="string">"\\+"</span>);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]+arrayInt[<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = split(exp,<span class="string">"-"</span>);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]-arrayInt[<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = split(exp,<span class="string">"\\*"</span>);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]*arrayInt[<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        String exp = <span class="string">"2+8"</span>;  </span><br><span class="line">        ICalculator cal = <span class="keyword">new</span> Plus();  </span><br><span class="line">        <span class="keyword">int</span> result = cal.calculate(exp);  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出: <code>10</code></p><p>策略模式的决定权在用户,系统本身提供不同算法的实现,新增或者删除算法,对各种算法做封装<br>。因此,策略模式多用在算法决策系统中,外部用户只需要决定用哪个算法即可。</p><h2 id="14-模板方法模式-Template-Method"><a href="#14-模板方法模式-Template-Method" class="headerlink" title="14. 模板方法模式(Template Method)"></a>14. 模板方法模式(Template Method)</h2><p>解释一下模板方法模式,就是指：一个抽象类中,有一个主方法,再定义1…n个方法,可以是抽象<br>的,也可以是实际的方法,定义一个类,继承该抽象类,重写抽象方法,通过调用抽象类,实现对<br>子类的调用,先看个关系图:<br><img src="/images/post_images/20171225_15.png" alt=""><br>就是在AbstractCalculator类中定义一个主方法calculate,calculate()调用spilt()等,Plus<br>和Minus分别继承AbstractCalculator类,通过对AbstractCalculator的调用实现对子类的调用<br>,看下面的例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*主方法,实现对本类其它方法的调用*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp,String opt)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> array[] = split(exp,opt);  </span><br><span class="line">        <span class="keyword">return</span> calculate(array[<span class="number">0</span>],array[<span class="number">1</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*被子类重写的方法*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] split(String exp,String opt)&#123;  </span><br><span class="line">        String array[] = exp.split(opt);  </span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  </span><br><span class="line">        arrayInt[<span class="number">0</span>] = Integer.parseInt(array[<span class="number">0</span>]);  </span><br><span class="line">        arrayInt[<span class="number">1</span>] = Integer.parseInt(array[<span class="number">1</span>]);  </span><br><span class="line">        <span class="keyword">return</span> arrayInt;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        String exp = <span class="string">"8+8"</span>;  </span><br><span class="line">        AbstractCalculator cal = <span class="keyword">new</span> Plus();  </span><br><span class="line">        <span class="keyword">int</span> result = cal.calculate(exp, <span class="string">"\\+"</span>);  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我跟踪下这个小程序的执行过程：首先将<code>exp和&quot;\\+&quot;</code>做参数,调用AbstractCalculator类里<br>的<code>calculate(String,String)</code>方法,在<code>calculate(String,String)</code>里调用同类<br>的<code>split()</code>,之后再调用<code>calculate(int ,int)</code>方法,从这个方法进入到子类中,执行<br>完<code>return num1 + num2</code>后,将值返回到<code>AbstractCalculator</code>类,赋给<code>result</code>,打印出来<br>。正好验证了我们开头的思路。</p><h2 id="15-观察者模式（Observer）"><a href="#15-观察者模式（Observer）" class="headerlink" title="15. 观察者模式（Observer）"></a>15. 观察者模式（Observer）</h2><p>包括这个模式在内的接下来的四个模式,都是类和类之间的关系,不涉及到继承,学的时候应该 记<br>得归纳,记得本文最开始的那个图。观察者模式很好理解,类似于邮件订阅和RSS订阅,当我们浏览<br>一些博客或wiki时,经常会看到RSS图标,就这的意思是,当你订阅了该文章,如果后续有更新,会<br>及时通知你。其实,简单来讲就一句话：当一个对象变化时,其它依赖该对象的对象都会收到通知<br>,并且随着变化！对象之间是一种一对多的关系。先来看看关系图：<br><img src="/images/post_images/20171225_16.png" alt=""><br>我解释下这些类的作用：MySubject类就是我们的主对象,Observer1和Observer2是依赖<br>于MySubject的对象,当MySubject变化时,Observer1和Observer2必然变化<br>。AbstractSubject类中定义着需要监控的对象列表,可以对其进行修改：增加或删除被监控对象<br>,且当MySubject变化时,负责通知在列表内存在的对象。<br>我们看实现代码：</p><p>一个Observer接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两个实现类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"observer1 has received!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer2</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"observer2 has received!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Subject接口及实现类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*增加观察者*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除观察者*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Observer observer)</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通知所有的观察者*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*自身的操作*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; vector = <span class="keyword">new</span> Vector&lt;Observer&gt;();  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span> </span>&#123;  </span><br><span class="line">        vector.add(observer);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Observer observer)</span> </span>&#123;  </span><br><span class="line">        vector.remove(observer);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        Enumeration&lt;Observer&gt; enumo = vector.elements();  </span><br><span class="line">        <span class="keyword">while</span>(enumo.hasMoreElements())&#123;  </span><br><span class="line">            enumo.nextElement().update();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">extends</span> <span class="title">AbstractSubject</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"update self!"</span>);  </span><br><span class="line">        notifyObservers();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Subject sub = <span class="keyword">new</span> MySubject();  </span><br><span class="line">        sub.add(<span class="keyword">new</span> Observer1());  </span><br><span class="line">        sub.add(<span class="keyword">new</span> Observer2());  </span><br><span class="line"></span><br><span class="line">        sub.operation();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><code>update self!observer1 has received!observer2 has received!</code></p><p> 这些东西,其实不难,只是有些抽象,不太容易整体理解,建议读者：根据关系图,新建项目,自<br> 己写代码(或者参考我的代码),按照总体思路走一遍,这样才能体会它的思想,理解起来容易！</p><h2 id="16-迭代子模式（Iterator）"><a href="#16-迭代子模式（Iterator）" class="headerlink" title="16. 迭代子模式（Iterator）"></a>16. 迭代子模式（Iterator）</h2><p> 顾名思义,迭代器模式就是顺序访问聚集中的对象,一般来说,集合中非常常见,如果对集合类比<br> 较熟悉的话,理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象,即聚集对象,<br> 二是迭代器对象,用于对聚集对象进行遍历访问。我们看下关系图:<br><img src="/images/post_images/20171225_16.png" alt=""><br>这个思路和我们常用的一模一样,MyCollection中定义了集合的一些操作,MyIterator中定义了<br>一系列迭代操作,且持有Collection实例,我们来看看实现代码：</p><p>两个接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*取得集合元素*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*取得集合大小*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//前移  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">previous</span><span class="params">()</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//后移  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得第一个元素  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCollection</span> <span class="keyword">implements</span> <span class="title">Collection</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String string[] = &#123;<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>&#125;;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyIterator(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> string[i];  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> string.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Collection collection;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pos = -<span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIterator</span><span class="params">(Collection collection)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.collection = collection;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">previous</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(pos &gt; <span class="number">0</span>)&#123;  </span><br><span class="line">            pos--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> collection.get(pos);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(pos&lt;collection.size()-<span class="number">1</span>)&#123;  </span><br><span class="line">            pos++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> collection.get(pos);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(pos&lt;collection.size()-<span class="number">1</span>)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        pos = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">return</span> collection.get(pos);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Collection collection = <span class="keyword">new</span> MyCollection();  </span><br><span class="line">        Iterator it = collection.iterator();  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;  </span><br><span class="line">            System.out.println(it.next());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出: <code>A B C D E</code></p><p>此处我们貌似模拟了一个集合类的过程,感觉是不是很爽？其实JDK中各个类也都是这些基本的东西<br>,加一些设计模式,再加一些优化放到一起的,只要我们把这些东西学会了,掌握好了,我们也可<br>以写出自己的集合类,甚至框架！</p><h2 id="17-责任链模式-Chain-of-Responsibility"><a href="#17-责任链模式-Chain-of-Responsibility" class="headerlink" title="17. 责任链模式(Chain of Responsibility)"></a>17. 责任链模式(Chain of Responsibility)</h2><p>接下来我们将要谈谈责任链模式,有多个对象,每个对象持有对下一个对象的引用,这样就会形成<br>一条链,请求在这条链上传递,直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个<br>对象会处理该请求,所以,责任链模式可以实现,在隐瞒客户端的情况下,对系统进行动态的调整<br>。先看看关系图:</p><p><img src="/images/post_images/20171225_18.png" alt=""></p><p>Abstracthandler类提供了get和set方法,方便MyHandle类设置和修改引用对象,MyHandle类是<br>核心,实例化后生成一系列相互持有的对象,构成一条链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Handler</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandler</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler handler;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> handler;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandler</span><span class="params">(Handler handler)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.handler = handler;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> <span class="keyword">implements</span> <span class="title">Handler</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(name+<span class="string">"deal!"</span>);  </span><br><span class="line">        <span class="keyword">if</span>(getHandler()!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">            getHandler().operator();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        MyHandler h1 = <span class="keyword">new</span> MyHandler(<span class="string">"h1"</span>);  </span><br><span class="line">        MyHandler h2 = <span class="keyword">new</span> MyHandler(<span class="string">"h2"</span>);  </span><br><span class="line">        MyHandler h3 = <span class="keyword">new</span> MyHandler(<span class="string">"h3"</span>);  </span><br><span class="line"></span><br><span class="line">        h1.setHandler(h2);  </span><br><span class="line">        h2.setHandler(h3);  </span><br><span class="line"></span><br><span class="line">        h1.operator();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><code>h1deal!h2deal!h3deal!</code></p><p>此处强调一点就是,链接上的请求可以是一条链,可以是一个树,还可以是一个环,模式本身不约<br>束这个,需要我们自己去实现,同时,在一个时刻,命令只允许由一个对象传给另一个对象,而不<br>允许传给多个对象。</p><h2 id="18-命令模式（Command）"><a href="#18-命令模式（Command）" class="headerlink" title="18. 命令模式（Command）"></a>18. 命令模式（Command）</h2><p>命令模式很好理解,举个例子,司令员下令让士兵去干件事情,从整个事情的角度来考虑,司令员<br>的作用是,发出口令,口令经过传递,传到了士兵耳朵里,士兵去执行。这个过程好在,三者相互<br>解耦,任何一方都不用去依赖其他人,只需要做好自己的事儿就行,司令员要的是结果,不会去关<br>注到底士兵是怎么实现的。我们看看关系图:</p><p><img src="/images/post_images/20171225_19.png" alt=""></p><p><strong>Invoker</strong> 是调用者（司令员）,<strong>Receiver</strong> 是被调用者（士兵）,<strong>MyCommand</strong> 是命<br>令,实现了 <strong>Command</strong> 接口,持有接收对象,看实现代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        receiver.action();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"command received!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Command command;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.command = command;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        command.exe();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();  </span><br><span class="line">        Command cmd = <span class="keyword">new</span> MyCommand(receiver);  </span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker(cmd);  </span><br><span class="line">        invoker.action();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出: <code>command received!</code><br>这个很好理解,命令模式的目的就是达到命令的发出者和执行者之间解耦,实现请求和执行分开,<br>熟悉Struts的同学应该知道,Struts其实就是一种将请求和呈现分离的技术,其中必然涉及命令模<br>式的思想！<br>本篇暂时就到这里,因为考虑到将来博文会不断的更新,不断的增加新内容,所以当前篇幅不易过<br>长,以便大家阅读,所以接下来的放到另一篇里。敬请关注！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文转自:&lt;a href=&quot;http://blog.csdn.net/zhangerqing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/zhangerqing&lt;/a&gt;&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
      <category term="设计模式" scheme="https://waver.me/categories/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
      <category term="设计模式" scheme="https://waver.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java中的23中设计模式(二)</title>
    <link href="https://waver.me/2017/12/25/Java%E4%B8%AD%E7%9A%8423%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%8C/"/>
    <id>https://waver.me/2017/12/25/Java中的23中设计模式-二/</id>
    <published>2017-12-25T00:27:27.000Z</published>
    <updated>2018-02-05T05:14:26.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自<a href="http://blog.csdn.net/zhangerqing" target="_blank" rel="noopener">http://blog.csdn.net/zhangerqing</a></p></blockquote><p>我们接着讨论设计模式,上篇文章我讲完了5种创建型模式,这章开始,我将讲下7种结构型模式：适<br>配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模<br>式是各种模式的起源,我们看下面的图：</p><p><img src="/images/post_images/20171225_01.png" alt=""></p><h2 id="6-适配器模式-Adapter"><a href="#6-适配器模式-Adapter" class="headerlink" title="6. 适配器模式(Adapter)"></a>6. 适配器模式(Adapter)</h2><pre><code>适配器模式将某个类的接口转换成客户端期望的另一个接口表示,目的是消除由于接口不匹配所</code></pre><p>造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式<br>。</p><p>首先,我们来看看类的适配器模式,先看类图：<br><img src="/images/post_images/20171225_02.png" alt=""></p><p>核心思想就是：有一个Source类,拥有一个方法,待适配,目标接口时Targetable,通过<br>Adapter类,将Source的功能扩展到Targetable里,看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"this is original method!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Targetable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 与原类中的方法相同 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 新类的方法 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"this is the targetable method!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Adapter类继承Source类,实现Targetable接口,下面是测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Targetable target = <span class="keyword">new</span> Adapter();  </span><br><span class="line">        target.method1();  </span><br><span class="line">        target.method2();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><code>this is original method!this is the targetable method!</code><br>这样Targetable接口的实现类就具有了Source类的功能。</p><font color="#B83B5E"><strong>对象的适配器模式</strong></font><p>基本思路和类的适配器模式相同,只是将Adapter类作修改,这次不继承Source类,而是持有Source类的实例,以达到解决兼容性的问题。看图:<br><img src="/images/post_images/20171225_03.png" alt=""></p><p>只需要修改Adapter类的源码即可:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Source source;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(Source source)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>();  </span><br><span class="line">        <span class="keyword">this</span>.source = source;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"this is the targetable method!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        source.method1();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Source source = <span class="keyword">new</span> Source();  </span><br><span class="line">        Targetable target = <span class="keyword">new</span> Wrapper(source);  </span><br><span class="line">        target.method1();  </span><br><span class="line">        target.method2();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出与第一种一样,只是适配的方法不同而已。</p><p>第三种适配器模式是<font color="#B83B5E"><strong>接口的适配器模式</strong></font>,接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法,当我们写该接口的实现类时,必须实现该接口的所有方法,这明显有时比较浪费,因为并不是所有的方法都是我们需要的,有时只需要某一些,此处为了解决这个问题,我们引入了接口的适配器模式,借助于一个抽象类,该抽象类实现了该接口,实现了所有的方法,而我们不和原始的接口打交道,只和该抽象类取得联系,所以我们写一个类,继承该抽象类,重写我们需要的方法就行。看一下类图:<br><img src="/images/post_images/20171225_04.png" alt=""></p><p>这个很好理解,在实际开发中,我们也常会遇到这种接口中定义了太多的方法,以致于有时我们在<br>一些实现类中并不是都需要。看代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抽象类Wrapper2:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper2</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub1</span> <span class="keyword">extends</span> <span class="title">Wrapper2</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"the sourceable interface's first Sub1!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub2</span> <span class="keyword">extends</span> <span class="title">Wrapper2</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"the sourceable interface's second Sub2!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Sourceable source1 = <span class="keyword">new</span> SourceSub1();  </span><br><span class="line">        Sourceable source2 = <span class="keyword">new</span> SourceSub2();  </span><br><span class="line"></span><br><span class="line">        source1.method1();  </span><br><span class="line">        source1.method2();  </span><br><span class="line">        source2.method1();  </span><br><span class="line">        source2.method2();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输出：<br><code>the sourceable interface&#39;s first Sub1!the sourceable interface&#39;s second Sub2!</code><br>达到了我们的效果！<br>讲了这么多,总结一下三种适配器模式的应用场景：<br>类的适配器模式：当希望将<font color="#F08A5D">一个类</font>转换成满足<font color="#F08A5D">另一个新接口</font>的类时,可以使用类的适配器模式,创建一个新类,继承原有的类,实现新的接口即可。对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时,可以创建一个Wrapper类,持有原类的一个实例,在Wrapper类的方法中,调用实例的方法就行。接口的适配器模式：当不希望实现一个接口中所有的方法时,可以创建一个抽象类Wrapper,实现所有方法,我们写别的类的时候,继承抽象类即可。</p><h2 id="7-装饰模式（Decorator）"><a href="#7-装饰模式（Decorator）" class="headerlink" title="7. 装饰模式（Decorator）"></a>7. 装饰模式（Decorator）</h2><p>顾名思义,装饰模式就是给一个对象增加一些新的功能,而且是动态的,要求装饰对象和被装饰对<br>象实现同一个接口,装饰对象持有被装饰对象的实例,关系图如下:<br><img src="/images/post_images/20171225_05.png" alt=""></p><p>Source类是被装饰类,Decorator类是一个装饰类,可以为Source类动态的添加一些功能,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"the original method!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sourceable source;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Sourceable source)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>();  </span><br><span class="line">        <span class="keyword">this</span>.source = source;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"before decorator!"</span>);  </span><br><span class="line">        source.method();  </span><br><span class="line">        System.out.println(<span class="string">"after decorator!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Sourceable source = <span class="keyword">new</span> Source();  </span><br><span class="line">        Sourceable obj = <span class="keyword">new</span> Decorator(source);  </span><br><span class="line">        obj.method();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><code>before decorator!the original method!after decorator!</code></p><ul><li>装饰器模式的应用场景：</li></ul><ol><li>需要扩展一个类的功能。</li><li>动态的为一个对象增加功能,而且还能动态撤销。(继承不能做到这一点,继承的功能是静态的,不能动态增删。)</li></ol><ul><li>缺点：产生过多相似的对象,不易排错！</li></ul><h2 id="8-代理模式-Proxy"><a href="#8-代理模式-Proxy" class="headerlink" title="8. 代理模式(Proxy)"></a>8. 代理模式(Proxy)</h2><p>其实每个模式名称就表明了该模式的作用,代理模式就是多一个代理类出来,替原对象进行一些操作,比如我们在租房子的时候回去找中介,为什么呢？因为你对该地区房屋的信息掌握的不够全面,希望找一个更熟悉的人去帮你做,此处的代理就是这个意思。再如我们有的时候打官司,我们需要请律师,因为律师在法律方面有专长,可以替我们进行操作,表达我们的想法。<br>先来看看关系图:<br><img src="/images/post_images/20171225_06.png" alt="">根据上文的阐述,代理模式就比较容易的理解了,<br>我们看下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"the original method!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Source source;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>();  </span><br><span class="line">        <span class="keyword">this</span>.source = <span class="keyword">new</span> Source();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        before();  </span><br><span class="line">        source.method();  </span><br><span class="line">        atfer();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">atfer</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"after proxy!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"before proxy!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Sourceable source = <span class="keyword">new</span> Proxy();  </span><br><span class="line">        source.method();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><code>before proxy!the original method!after proxy!</code></p><ul><li><strong>代理模式的应用场景:</strong><br>如果已有的方法在使用的时候需要对原有的方法进行改进,此时有两种办法：</li></ul><ol><li>修改原有的方法来适应。这样违反了“对扩展开放,对修改关闭”的原则。</li><li>就是采用一个代理类调用原有的方法,且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式,可以将功能划分的更加清晰,有助于后期维护！</li></ol><h2 id="9-外观模式-Facade"><a href="#9-外观模式-Facade" class="headerlink" title="9. 外观模式(Facade)"></a>9. 外观模式(Facade)</h2><p>外观模式是为了解决类与类之家的依赖关系的,像spring一样,可以将类和类之间的关系配置到配置文件中,而外观模式就是将他们的关系放在一个Facade类中,降低了类类之间的耦合度,该模式中没有涉及到接口,看下类图:(我们以一个计算机的启动过程为例)<br><img src="/images/post_images/20171225_07.png" alt=""></p><p>我们先看下实现类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CPU</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"cpu startup!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"cpu shutdown!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CPU</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"cpu startup!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"cpu shutdown!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Disk</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"disk startup!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"disk shutdown!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> CPU cpu;  </span><br><span class="line">    <span class="keyword">private</span> Memory memory;  </span><br><span class="line">    <span class="keyword">private</span> Disk disk;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        cpu = <span class="keyword">new</span> CPU();  </span><br><span class="line">        memory = <span class="keyword">new</span> Memory();  </span><br><span class="line">        disk = <span class="keyword">new</span> Disk();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"start the computer!"</span>);  </span><br><span class="line">        cpu.startup();  </span><br><span class="line">        memory.startup();  </span><br><span class="line">        disk.startup();  </span><br><span class="line">        System.out.println(<span class="string">"start computer finished!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"begin to close the computer!"</span>);  </span><br><span class="line">        cpu.shutdown();  </span><br><span class="line">        memory.shutdown();  </span><br><span class="line">        disk.shutdown();  </span><br><span class="line">        System.out.println(<span class="string">"computer closed!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User类如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();  </span><br><span class="line">        computer.startup();  </span><br><span class="line">        computer.shutdown();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><code>start the computer!    cpu startup!    memory startup!    disk startup!    start computer finished!    begin to close the computer!    cpu shutdown!    memory shutdown!    disk shutdown!    computer closed!</code></p><p>如果我们没有Computer类,那么,CPU、Memory、Disk他们之间将会相互持有实例,产生关系,这样会造成严重的依赖,修改一个类,可能会带来其他类的修改,这不是我们想要看到的,有了Computer类,他们之间的关系被放在了Computer类里,这样就起到了解耦的作用,这,就是外观模式！</p><h2 id="10-桥接模式-Bridge"><a href="#10-桥接模式-Bridge" class="headerlink" title="10.桥接模式(Bridge)"></a>10.桥接模式(Bridge)</h2><p>桥接模式就是把事物和其具体实现分开,使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦,使得二者可以独立变化,像我们常用的JDBC桥DriverManager一样,JDBC进行连接数据库的时候,在各个数据库之间进行切换,基本不需要动太多的代码,甚至丝毫不用动,原因就是JDBC提供统一接口,每个数据库提供各自的实现,用一个叫做数据库驱动的程序来桥接就行了。<br>我们来看看关系图:<br><img src="/images/post_images/20171225_08.png" alt=""><br>实现代码:<br>先定义接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分别定义两个实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub1</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"this is the first sub!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub2</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"this is the second sub!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个桥,持有Sourceable的一个实例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bridge</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Sourceable source;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        source.method();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sourceable <span class="title">getSource</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> source;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSource</span><span class="params">(Sourceable source)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.source = source;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBridge</span> <span class="keyword">extends</span> <span class="title">Bridge</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        getSource().method();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">        Bridge bridge = <span class="keyword">new</span> MyBridge();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/*调用第一个对象*/</span>  </span><br><span class="line">        Sourceable source1 = <span class="keyword">new</span> SourceSub1();  </span><br><span class="line">        bridge.setSource(source1);  </span><br><span class="line">        bridge.method();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/*调用第二个对象*/</span>  </span><br><span class="line">        Sourceable source2 = <span class="keyword">new</span> SourceSub2();  </span><br><span class="line">        bridge.setSource(source2);  </span><br><span class="line">        bridge.method();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>output：<br><code>this is the first sub! this is the second sub!</code><br>这样,就通过对Bridge类的调用,实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。接下来我再画个图,大家就应该明白了,因为这个图是我们JDBC连接的原理,有数据库学习基础的,一结合就都懂了。<br><img src="/images/post_images/20171225_09.png" alt=""></p><h2 id="11-组合模式（Composite）"><a href="#11-组合模式（Composite）" class="headerlink" title="11. 组合模式（Composite）"></a>11. 组合模式（Composite）</h2><pre><code>组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便,看看关系图：</code></pre><p>直接来看代码:<br><img src="/images/post_images/20171225_10.png" alt=""></p><p>直接来看代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> TreeNode parent;  </span><br><span class="line">    <span class="keyword">private</span> Vector&lt;TreeNode&gt; children = <span class="keyword">new</span> Vector&lt;TreeNode&gt;();  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(String name)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getParent</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> parent;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(TreeNode parent)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.parent = parent;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加孩子节点  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(TreeNode node)</span></span>&#123;  </span><br><span class="line">        children.add(node);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除孩子节点  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(TreeNode node)</span></span>&#123;  </span><br><span class="line">        children.remove(node);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得孩子节点  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;TreeNode&gt; <span class="title">getChildren</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> children.elements();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    TreeNode root = <span class="keyword">null</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tree</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        root = <span class="keyword">new</span> TreeNode(name);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Tree tree = <span class="keyword">new</span> Tree(<span class="string">"A"</span>);  </span><br><span class="line">        TreeNode nodeB = <span class="keyword">new</span> TreeNode(<span class="string">"B"</span>);  </span><br><span class="line">        TreeNode nodeC = <span class="keyword">new</span> TreeNode(<span class="string">"C"</span>);  </span><br><span class="line"></span><br><span class="line">        nodeB.add(nodeC);  </span><br><span class="line">        tree.root.add(nodeB);  </span><br><span class="line">        System.out.println(<span class="string">"build the tree finished!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景: 将多个对象组合在一起进行操作,常用于表示树形结构中,例如二叉树,数等。</p><h2 id="12-享元模式-Flyweight"><a href="#12-享元模式-Flyweight" class="headerlink" title="12. 享元模式(Flyweight)"></a>12. 享元模式(Flyweight)</h2><p>享元模式的主要目的是实现对象的共享,即共享池,当系统中对象多的时候可以减少内存的开销,<br>通常与工厂模式一起使用。</p><p><img src="/images/post_images/20171225_11.png" alt=""></p><p>FlyWeightFactory负责创建和管理享元单元,当一个客户端请求时,工厂需要检查当前对象池中是否有符合条件的对象,如果有,就返回已经存在的对象,如果没有,则创建一个新对象,FlyWeight是超类。一提到共享池,我们很容易联想到Java里面的JDBC连接池,想想每个连接的特点,我们不难总结出：适用于作共享的一些个对象,他们有一些共有的属性,就拿数据库连接池来说,url、driverClassName、username、password及dbname,这些属性对于每个连接来说都是一样的,所以就适合用享元模式来处理,建一个工厂类,将上述类似属性作为内部数据,其它的作为外部数据,在方法调用时,当做参数传进来,这样就节省了空间,减少了实例的数量。看个例子:<br><img src="/images/post_images/20171225_12.png" alt=""></p><p>看下数据库连接池的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Connection&gt; pool;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*公有属性*/</span>  </span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;  </span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">"root"</span>;  </span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"root"</span>;  </span><br><span class="line">    <span class="keyword">private</span> String driverClassName = <span class="string">"com.mysql.jdbc.Driver"</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolSize = <span class="number">100</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionPool instance = <span class="keyword">null</span>;  </span><br><span class="line">    Connection conn = <span class="keyword">null</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*构造方法,做一些初始化工作*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ConnectionPool</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        pool = <span class="keyword">new</span> Vector&lt;Connection&gt;(poolSize);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                Class.forName(driverClassName);  </span><br><span class="line">                conn = DriverManager.getConnection(url, username, password);  </span><br><span class="line">                pool.add(conn);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 返回连接到连接池 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        pool.add(conn);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 返回连接池中的一个数据库连接 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (pool.size() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">            Connection conn = pool.get(<span class="number">0</span>);  </span><br><span class="line">            pool.remove(conn);  </span><br><span class="line">            <span class="keyword">return</span> conn;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过连接池的管理,实现了数据库连接的共享,不需要每一次都重新创建连接,节省了数据库重新创建的开销,提升了系统的性能！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文转载自&lt;a href=&quot;http://blog.csdn.net/zhangerqing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/zhangerqing&lt;/a&gt;&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
      <category term="设计模式" scheme="https://waver.me/categories/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
      <category term="设计模式" scheme="https://waver.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java中的23种设计模式(一)</title>
    <link href="https://waver.me/2017/12/23/Java%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%80/"/>
    <id>https://waver.me/2017/12/23/Java中的23种设计模式-一/</id>
    <published>2017-12-23T09:32:21.000Z</published>
    <updated>2018-01-22T09:45:54.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转自:<a href="http://blog.csdn.net/zhangerqing" target="_blank" rel="noopener">http://blog.csdn.net/zhangerqing</a></p></blockquote><h1 id="设计模式（Design-Patterns）"><a href="#设计模式（Design-Patterns）" class="headerlink" title="设计模式（Design Patterns）"></a>设计模式（Design Patterns）</h1><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问,设计模式于己于他人于系统都是多赢的,设计模式使代码编制真正工程化,设计模式是软件工程的基石,如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题,每种模式在现在中都有相应的原理来与之对应,每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的核心解决方案,这也是它能被广泛应用的原因</p><h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：</p><table><thead><tr><th style="text-align:center">创建型模式5种</th><th style="text-align:center">结构型模式7种</th><th style="text-align:center">行为型模式11种</th><th style="text-align:center">其他(2种)</th></tr></thead><tbody><tr><td style="text-align:center">工厂方法模式</td><td style="text-align:center">适配器模式</td><td style="text-align:center">策略模式</td><td style="text-align:center">并发型模式</td></tr><tr><td style="text-align:center">抽象工厂模式</td><td style="text-align:center">装饰器模式</td><td style="text-align:center">策略模式</td><td style="text-align:center">线程池模式</td></tr><tr><td style="text-align:center">单例模式</td><td style="text-align:center">代理模式</td><td style="text-align:center">模板方法模式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">建造者模式</td><td style="text-align:center">桥接模式</td><td style="text-align:center">观察者模式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">原型模式</td><td style="text-align:center">组合模式</td><td style="text-align:center">迭代子模式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">享元模式</td><td style="text-align:center">责任链模式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">命令模式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">备忘录模式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">状态模式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">访问者模式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">中介者模式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">解释器模式</td><td style="text-align:center"></td></tr></tbody></table><p>用一个图片来整体描述一下：<br><img src="/images/post_images/20171223_Design_Patterns_1.jpg" alt=""></p><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><ol><li>开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放,对修改关闭。在程序需要进行拓展的时候,不能去修改原有的代码,实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好,易于维护和升级。想要达到这样的效果,我们需要使用接口和抽象类,后面的具体设计中我们会提到这点。</li><li>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说,任何基类可以出现的地方,子类一定可以出现。 LSP是继承复用的基石,只有当衍生类可以替换掉基类,软件单位的功能不受到影响时,基类才能真正被复用,而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。<br>而基类与子类的继承关系就是抽象化的具体实现,所以里氏代换原则是对实现抽象化的具体步骤的规<br>范。—— From Baidu 百科</li><li>依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础,具体内容：真对接口编程,依赖于抽象而不依赖于具体。</li><li>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口,比使用单个接口要好。还是一个降低类之间的耦合度的意思,从这儿我们看出,其实设计模式就是一个软件的设计思想,从大型软件架构出发,为了升级和维护方便。所以上文中多次出现：降低依赖,降低耦合。</li><li>迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则,就是说：一个实体应当尽量少的与其他实体之间发生相互作用,使得系统功<br>能模块相对独立。</li><li>合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式,而不是使用继承。</li></ol><h1 id="Java的23中设计模式"><a href="#Java的23中设计模式" class="headerlink" title="Java的23中设计模式"></a>Java的23中设计模式</h1><p>从这一块开始,我们详细介绍Java中23种设计模式的概念,应用场景等情况,并结合他们的特点及设计模式的原则进行分析。</p><h2 id="1-工厂方法模式-Factory-Method"><a href="#1-工厂方法模式-Factory-Method" class="headerlink" title="1. 工厂方法模式(Factory Method)"></a>1. 工厂方法模式(Factory Method)</h2><p>就是建立一个工厂类,对实现了同一接口的一些类进行实例的创建。首先看下关系图：<br><img src="/images/post_images/20171223FactoryMethod.jpg" alt=""></p><p>举例如下：（我们举一个发送邮件和短信的例子）<br>首先,创建二者的共同接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次,创建实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is mailsender!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"this is sms sender!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后,建工厂类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String type)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"mail"</span>.equals(type)) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"sms"</span>.equals(type)) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            System.out.println(<span class="string">"请输入正确的类型!"</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来测试下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();  </span><br><span class="line">        Sender sender = factory.produce(<span class="string">"sms"</span>);  </span><br><span class="line">        sender.Send();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出: <code>this is sms sender!</code></p><h3 id="2-多个工厂方法模式"><a href="#2-多个工厂方法模式" class="headerlink" title="2. 多个工厂方法模式"></a>2. 多个工厂方法模式</h3><p>  是对普通工厂方法模式的改进,在普通工厂方法模式中,如果传递的字符串出错,则不能正确创建对象,而多个工厂方法模式是提供多个工厂方法,分别创建对象。关系图：<br><img src="/images/post_images/20171224_Factory.png" alt=""></p><p>将上面的代码做下修改,改动下SendFactory类就行,如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();  </span><br><span class="line">        Sender sender = factory.produceMail();  </span><br><span class="line">        sender.Send();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<code>this is mailsender!</code></p><h3 id="3-静态工厂方法模式"><a href="#3-静态工厂方法模式" class="headerlink" title="3. 静态工厂方法模式"></a>3. 静态工厂方法模式</h3><p>  将上面的多个工厂方法模式里的方法置为静态的,不需要创建实例,直接调用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;      </span><br><span class="line">        Sender sender = SendFactory.produceMail();  </span><br><span class="line">        sender.Send();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<code>this is mailsender!</code></p><p>总体来说,工厂模式适合：凡是出现了大量的产品需要创建,并且具有共同的接口时,可以通过工厂方法模式进行创建。在以上的三种模式中,第一种如果传入的字符串有误,不能正确创建对象,第三种相对于第二种,不需要实例化工厂类,所以,大多数情况下,我们会选用第三种——静态工厂方法模式。</p><h2 id="2-抽象工厂模式（Abstract-Factory）"><a href="#2-抽象工厂模式（Abstract-Factory）" class="headerlink" title="2. 抽象工厂模式（Abstract Factory）"></a>2. 抽象工厂模式（Abstract Factory）</h2><p>  工厂方法模式有一个问题就是,类的创建依赖工厂类,也就是说,如果想要拓展程序,必须对工厂类进行修改,这违背了闭包原则,所以,从设计角度考虑,有一定的问题,如何解决？就用到抽象工厂模式,创建多个工厂类,这样一旦需要增加新的功能,直接增加新的工厂类就可以了,不需要修改之前的代码。因为抽象工厂不太好理解,我们先看看图,然后就和代码,就比较容易理解。<br><img src="/images/post_images/20171224_Factory2.png" alt=""></p><p>请看例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个实现类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"this is mailsender!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两个工厂类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSmsFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在提供一个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Provider provider = <span class="keyword">new</span> SendMailFactory();  </span><br><span class="line">        Sender sender = provider.produce();  </span><br><span class="line">        sender.Send();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个模式的好处就是,如果你现在想增加一个功能：发及时信息,则只需做一个实现类,实现Sender接口,同时做一个工厂类,实现Provider接口,就OK了,无需去改动现成的代码。这样做,拓展性较好！</p><h2 id="3-单例模式（Singleton）"><a href="#3-单例模式（Singleton）" class="headerlink" title="3. 单例模式（Singleton）"></a>3. 单例模式（Singleton）</h2><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中,单例对象能保证在一个JVM中,该对象只有一个实例存在。这样的模式有几个好处：</p><ol><li>某些类创建比较频繁,对于一些大型的对象,这是一笔很大的系统开销。</li><li>省去了new操作符,降低了系统内存的使用频率,减轻GC压力。</li><li>有些类如交易所的核心交易引擎,控制着交易流程,如果该类可以创建多个的话,系统完全乱了。（比如一个军队出现了多个司令员同时指挥,肯定会乱成一团）,所以只有使用单例模式,才能保证核心交易服务器独立控制整个流程。</li></ol><p>首先我们写一个简单的单例类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 持有私有静态实例,防止被引用,此处赋值为null,目的是实现延迟加载 */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 私有构造方法,防止被实例化 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 静态工程方法,创建实例 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个类可以满足基本要求,但是,像这样毫无线程安全保护的类,如果我们把它放入多线程的环境下,肯定就会出现问题了,如何解决？我们首先会想到对getInstance方法加synchronized关键字,如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">&#125;</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">但是,<span class="keyword">synchronized</span>关键字锁住的是这个对象,这样的用法,在性能上会有所下降,因为每次调用getInstance(),都要对对象上锁,事实上,只有在第一次创建对象的时候需要加锁,之后就不需要了,所以,这个地方需要改进。我们改成下面这个：</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">synchronized</span> (instance) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>似乎解决了之前提到的问题,将synchronized关键字加在了内部,也就是说当调用的时候是不需要加锁的,只有在instance为null,并创建对象的时候才需要加锁,性能有一定的提升。但是,这样的情况,还是有可能有问题的,看下面的情况：在Java指令中创建对象和赋值操作是分开进行的,也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序,也就是说有可能JVM会为新的Singleton实例分配空间,然后直接赋值给instance成员,然后再去初始化这个Singleton实例。这样就可能出错了,我们以A、B两个线程为例：a&gt;A、B线程同时进入了第一个if判断b&gt;A首先进入synchronized块,由于instance为null,所以它执行instance = newSingleton();c&gt;由于JVM内部的优化机制,JVM先画出了一些分配给Singleton实例的空白内存,并赋值给instance成员（注意此时JVM没有开始初始化这个实例）,然后A离开了synchronized块。d&gt;B进入synchronized块,由于instance此时不是null,因此它马上离开了synchronized块并将结果返回给调用该方法的程序。e&gt;此时B线程打算使用Singleton实例,却发现它没有被初始化,于是错误发生了。所以程序还是有可能发生错误,其实程序在运行过程是很复杂的,从这点我们就可以看出,尤其是在写多线程环境下的程序更有难度,有挑战性。我们对该程序做进一步优化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span></span>&#123;           </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();           </span><br><span class="line">    &#125;           </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;           </span><br><span class="line">        <span class="keyword">return</span> SingletonFactory.instance;           </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>实际情况是,单例模式使用内部类来维护单例的实现,JVM内部的机制能够保证当一个类被加载的时候,这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候,JVM能够帮我们保证instance只被创建一次,并且会保证把赋值给instance的内存初始化完毕,这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制,这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 私有构造方法,防止被实例化 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 此处使用一个内部类来维护单例 */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取实例 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonFactory.instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> getInstance();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实说它完美,也不一定,如果在构造函数中抛出异常,实例将永远得不到创建,也会出错。所以<br>说,十分完美的东西是没有的,我们只能根据实际情况,选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步,所以只要将创建和getInstance()分开,单独为创建加synchronized关键字,也是可以的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance = <span class="keyword">null</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncInit</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> SingletonTest();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            syncInit();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>考虑性能的话,整个程序只需创建一次实例,所以性能也不会有什么影响。<font color="red">补充：采用”影子实例”的办法为单例对象的属性同步更新</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance = <span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">private</span> Vector properties = <span class="keyword">null</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector <span class="title">getProperties</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> properties;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncInit</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> SingletonTest();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            syncInit();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateProperties</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        SingletonTest shadow = <span class="keyword">new</span> SingletonTest();  </span><br><span class="line">        properties = shadow.getProperties();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过单例模式的学习告诉我们：</p><ol><li>单例模式理解起来简单,但是具体实现起来还是有一定的难度。</li><li>synchronized关键字锁定的是对象,在用的时候,一定要在恰当的地方使用（注意需要使用锁<br>的对象和过程,可能有的时候并不是整个对象及整个过程都需要锁）。</li></ol><p>到这儿,单例模式基本已经讲完了,结尾处,笔者突然想到另一个问题,就是采用类的静态方法,实现单例模式的效果,也是可行的,此处二者有什么不同？首先,静态类不能实现接口。（从类的角度说是可以的,但是那样就破坏了静态了。因为接口中不允许有static修饰的方法,所以即使实现了也是非静态的）其次,单例可以被延迟初始化,静态类一般在第一次加载是初始化。之所以延迟加载,是因为有些类比较庞大,所以延迟加载有助于提升性能。再次,单例类可以被继承,他的方法可以被覆写。但是静态类内部方法都是static,无法被覆写。最后一点,单例类比较灵活,毕竟从实现上只是一个普通的Java类,只要满足单例的基本需求,你可以在里面随心所欲的实现一些其它功能,但是静态类不行。从上面这些概括中,基本可以看出二者的区别,但是,从另一方面讲,我们上面最后实现的那个单例模式,内部就是用一个静态类来实现的,所以,二者有很大的关联,只是我们考虑问题的层面不同罢了。两种思想的结合,才能造就出完美的解决方案,就像HashMap采用数组+链表来实现一样,其实生活中很多事情都是这样,单用不同的方法来处理问题,总是有优点也有缺点,最完美的方法是,结合各个方法的优点,才能最好的解决问题！</p><h2 id="4-建造者模式-Builder"><a href="#4-建造者模式-Builder" class="headerlink" title="4. 建造者模式(Builder)"></a>4. 建造者模式(Builder)</h2><p>工厂类模式提供的是创建单个类的模式,而建造者模式则是将各种产品集中起来进行管理,用来创建复合对象,所谓复合对象就是指某个类具有不同的属性,其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：<br>还和前面一样,一个Sender接口,两个实现类MailSender和SmsSender。最后,建造者类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Sender&gt; list = <span class="keyword">new</span> ArrayList&lt;Sender&gt;();  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceMailSender</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;  </span><br><span class="line">            list.add(<span class="keyword">new</span> MailSender());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceSmsSender</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;  </span><br><span class="line">            list.add(<span class="keyword">new</span> SmsSender());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Builder builder = <span class="keyword">new</span> Builder();  </span><br><span class="line">        builder.produceMailSender(<span class="number">10</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这点看出,建造者模式将很多功能集成到一个类里,这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品,而建造者模式则关注创建符合对象,多个部分。因此,是选择工厂模式还是建造者模式,依实际情况而定。</p><h2 id="5-原型模式-Prototype"><a href="#5-原型模式-Prototype" class="headerlink" title="5. 原型模式(Prototype)"></a>5. 原型模式(Prototype)</h2><p>  原型模式虽然是创建型的模式,但是与工程模式没有关系,从名字即可看出,该模式的思想就是将一个对象作为原型,对其进行复制、克隆,产生一个和原对象类似的新对象。本小结会通过对象的复制,进行讲解。在Java中,复制对象是通过clone()实现的,先创建一个原型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone();  </span><br><span class="line">        <span class="keyword">return</span> proto;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单,一个原型类,只需要实现Cloneable接口,覆写clone方法,此处clone方法可以改成任意的名称,因为Cloneable接口是个空接口,你可以任意定义实现类的方法名,如cloneA或者cloneB,因为此处的重点是 super.clone()这句话,super.clone()调用的是 Object 的 clone() 方法,而在Object类中,clone()是native的,具体怎么实现,我会在另一篇文章中,关于解读Java中本地方法的调用,此处不再深究。在这儿,我将结合对象的浅复制和深复制来说一下,首先需要了解对象深、浅复制的概念：</p><ul><li>浅复制：将一个对象复制后,基本数据类型的变量都会重新创建,而引用类型,指向的还是原对<br>象所指向的。</li><li>深复制：将一个对象复制后,不论是基本数据类型还有引用类型,都是重新创建的。简单来说,<br>就是深复制进行了完全彻底的复制,而浅复制不彻底。此处,写一个深浅复制的例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </span><br><span class="line">    <span class="keyword">private</span> String string;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SerializableObject obj;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 浅复制 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone();  </span><br><span class="line">        <span class="keyword">return</span> proto;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 深复制 */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 写入当前对象的二进制流 */</span>  </span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();  </span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);  </span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 读出二进制流产生的新对象 */</span>  </span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span></span><br><span class="line">ByteArrayInputStream(bos.toByteArray());  </span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);  </span><br><span class="line">        <span class="keyword">return</span> ois.readObject();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> string;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String string)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.string = string;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SerializableObject <span class="title">getObj</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(SerializableObject obj)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.obj = obj;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializableObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要实现深复制,需要采用流的形式读入当前对象的二进制输入,再写出二进制数据对应的对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文转自:&lt;a href=&quot;http://blog.csdn.net/zhangerqing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/zhangerqing&lt;/a&gt;&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="Java" scheme="https://waver.me/categories/Java/"/>
    
      <category term="设计模式" scheme="https://waver.me/categories/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
      <category term="设计模式" scheme="https://waver.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaReview-day07-继承</title>
    <link href="https://waver.me/2017/12/18/JavaReview-day07-%E7%BB%A7%E6%89%BF/"/>
    <id>https://waver.me/2017/12/18/JavaReview-day07-继承/</id>
    <published>2017-12-18T11:14:57.000Z</published>
    <updated>2018-01-22T11:35:25.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>特点:</p><ul><li>提高了代码的复用性;</li><li>让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;</li><li>Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患</li></ul><h3 id="重写-覆盖"><a href="#重写-覆盖" class="headerlink" title="重写(覆盖)"></a>重写(覆盖)</h3><ul><li>当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父<br>类的函数被覆盖一样.</li><li>当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类<br>不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容.</li></ul><ol><li>子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败.</li><li>静态只能覆盖静态</li><li>如果父类中的方法权限为<code>private</code>, 则子类无法重写该方法.</li></ol><h3 id="重写和重载的区别"><a href="#重写和重载的区别" class="headerlink" title="重写和重载的区别"></a>重写和重载的区别</h3><ul><li>重载: 只看同名函数的参数列表</li><li>重写: 子父类方法要一模一样</li></ul><h3 id="子父类中构造函数的特点"><a href="#子父类中构造函数的特点" class="headerlink" title="子父类中构造函数的特点"></a>子父类中构造函数的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  Father()&#123;</span><br><span class="line">    System.out.println(<span class="string">"Father run |"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  Sun()&#123;</span><br><span class="line">    <span class="comment">// super();</span></span><br><span class="line">    System.out.println(<span class="string">"Son run |"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Son s = <span class="keyword">new</span> Son();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的运行结果为 <code>Father run | Son run |</code> ;</p><ul><li>子类中的构造函数第一行会隐式的存在一句 <code>super()</code> 默认调用父类中默认的构造方法;</li><li>如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 <code>super(xxx)</code><br>手动的来指定父类中特定的构造函数;</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><code>super()</code> 语句一定是在子类构造函数的第一行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExtend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son s = <span class="keyword">new</span> Son(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> m;</span><br><span class="line">    Father()&#123;</span><br><span class="line">        m = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"Father Run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Father(<span class="keyword">int</span> x)&#123;</span><br><span class="line">        m = <span class="number">6</span>;</span><br><span class="line">        System.out.println(<span class="string">"TTTT"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    Son()&#123;</span><br><span class="line">      <span class="keyword">this</span>(<span class="number">4</span>);</span><br><span class="line">      System.out.println(<span class="keyword">this</span>.m);</span><br><span class="line">      System.out.println(<span class="string">"Son run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Son(<span class="keyword">int</span> x)&#123;</span><br><span class="line">      <span class="keyword">this</span>();</span><br><span class="line">      System.out.println(<span class="string">"MMMM"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上代码会出现编译错误, 错误原因为 <code>recursive constructor invocation</code>意思为<br>‘<font color="red">构造器中出现了递归调用, 这是不被允许的</font>‘;</li></ul><h3 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h3><ul><li>final: 最终. 作为一个修饰符;</li></ul><h4 id="作用及特点"><a href="#作用及特点" class="headerlink" title="作用及特点"></a>作用及特点</h4><ol><li>可以修饰类, 函数, 变量;</li><li>被 <code>final</code> 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能;</li><li>被 <code>final</code> 修饰的方法不可以被复写;</li><li>被 <code>final</code> 修饰的变量是一个常量且只能赋值一次; <code>final</code> 既可以修饰成员变量, 又可以<br>修饰局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值<br>起个名字, 方便与阅读;</li><li>内部类定义在类中的局部位置上时, 只能访问局部被 <code>final</code> 修饰的局部变量;</li></ol><h3 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类(abstract)"></a>抽象类(abstract)</h3><ul><li><p>特点:</p><ol><li>抽象方法一定定义在抽象类中;</li><li>抽象方法和抽象类都必须被 <code>abstract</code> 关键字修饰;</li><li>抽象类不可以用 <code>new</code> 创建对象, 因为调用抽象方法没有意义;</li><li>抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, <strong>如<br>果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类</strong></li></ol></li><li><p>抽象类和一般类的区别:</p><ol><li>抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法;</li><li>抽象类不可以实例化;</li></ol></li><li><p>特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象;</p></li><li><code>abstract</code> 只可以修饰类和方法, 不能修饰变量;</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p> <strong>接口定义时的格式特点</strong>:</p><ul><li>接口转中常见定义: 常量, 抽象方法;</li><li>接口中的成员变量都有固定修饰符:<ol><li>常量:<code>public static final</code></li><li>方法:<code>public abstract</code>  </li></ol></li><li>接口是不可以创建对象的, 因为接口中有抽象方法</li><li>接口需要被子类实现子类对接口的抽象方法全部覆盖后, 子类才可以实例化</li><li>接口可以被类多实现, 也是对不支持多继承的转换形式, Java支持多实现;</li></ul><p><strong>接口与接口之间可以实现多继承</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showC</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><font color="red"><strong>注意</strong>:</font><br>接口与接口之间的继承中, 被继承的接口中不能含有名字相同, 返回值不同的方法;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">``` java</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//void test();//错误的写法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showC</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p&gt;特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高了代码的复用性;&lt;/li&gt;
&lt;li&gt;让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;&lt;/l
      
    
    </summary>
    
      <category term="JavaReview" scheme="https://waver.me/categories/JavaReview/"/>
    
    
      <category term="Java" scheme="https://waver.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages绑定域名</title>
    <link href="https://waver.me/2017/12/17/GitHub%20Pages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    <id>https://waver.me/2017/12/17/GitHub Pages绑定域名/</id>
    <published>2017-12-17T05:11:03.000Z</published>
    <updated>2017-12-17T11:55:29.617Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述</p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>如果嫌麻烦可以在<a href="https://www.godaddy.com/" target="_blank" rel="noopener">Godaddy</a> 购买<br>也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程</p><h3 id="选购域名"><a href="#选购域名" class="headerlink" title="选购域名"></a>选购域名</h3><p>  可以在<a href="https://sg.godaddy.com/zh/domains/domain-name-search" target="_blank" rel="noopener">此页面</a>搜索你喜欢的<br>域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考<a href="https://www.zhihu.com/question/19610337" target="_blank" rel="noopener">知乎答案</a> 推荐使用<code>.me</code></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><h4 id="更换域名服务器"><a href="#更换域名服务器" class="headerlink" title="更换域名服务器"></a>更换域名服务器</h4><p>  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPot</a><br>解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到<br>Godaddy 的域名服务器<br><img src="/images/post_images/20171217_DNSPot.jpg" alt="图1"><br><img src="/images/post_images/20171217_GoDaddy_DNS.jpg" alt="图2"><br>注意: 在GoDaddy中配置的为”f1g1ns1.dnspod.net”, 为没有”f1g1ns1.dnspod.net.”要去掉最<br>后的 <code>.</code></p><h4 id="GitHub中的域名支持"><a href="#GitHub中的域名支持" class="headerlink" title="GitHub中的域名支持"></a>GitHub中的域名支持</h4><p>  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地<br>址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示</p><p>现在github的服务器地址为：</p><ul><li>192.30.252.153</li><li>192.30.252.154</li></ul><h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><p>在你的博客仓库中下的 <code>/source</code> 目录中添加名为 <code>CNAME</code>的文件, 在文件中写入你在GoDaddy<br>注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述&lt;/p&gt;
&lt;h2 id=&quot;购买域名&quot;&gt;&lt;a href=&quot;#购买域名&quot; class=&quot;headerlink&quot; title=&quot;购买域名&quot;&gt;&lt;/a&gt;购买域名&lt;/h2&gt;&lt;p&gt;如果嫌麻烦可以在&lt;a href=&quot;https://ww
      
    
    </summary>
    
      <category term="Blog" scheme="https://waver.me/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://waver.me/tags/Blog/"/>
    
  </entry>
  
</feed>
