<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Waver</title>
  
  <subtitle>个人知识博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wavejoker.github.io/"/>
  <updated>2017-11-28T08:14:44.938Z</updated>
  <id>http://wavejoker.github.io/</id>
  
  <author>
    <name>waver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaReview-day04</title>
    <link href="http://wavejoker.github.io/2017/11/28/JavaReview-day04/"/>
    <id>http://wavejoker.github.io/2017/11/28/JavaReview-day04/</id>
    <published>2017-11-28T08:14:34.000Z</published>
    <updated>2017-11-28T08:14:44.938Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;!DOCTYPE html&gt;</p><html><br><meta charset="utf-8"><br><head><br></head><br><br><body><br><div><br>    <h3>数组</h3><br>    <p><br>        1.数据类型分类: 基本数据类型, 引用数据类型 </p><br>    <p><br>        2.Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器<br>    </p><br>    <p><br>        1) 栈内存:<br><br>        ## 用于存储局部变量, 当数据使用完, 所占空间会自动释放;<br><br><br>        2) 堆内存:<br><br>        ## 数组和对象,通过 new 建立的实例都存放在堆内存中;<br><br>        ## 每一个实体都有内存地址值;<br><br>        ## 实体中的变量都有默认的初始化值<br><br><br>        ## 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收<br>    </p><br><br>    <p><br>        数组的定义方式:<br><br>        1) int[] arr = new int[5]; (推荐写法)<br>        2) int arr[] = new int[5]; (与第一种意义相同)<br>        3) int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)<br>        4) int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)<br><br>    </p><br>    <p><br>    <b>数组排序:</b><br>        </p><h4>选择排序:</h4><br><br>    <code><br>        public void selectSort(int[] arr){<br>            for(int x = 0; x &lt; arr.length-1; x++){<br>                for(int y = x + 1; y &lt; arr.length; y++){<br>                    if(arr[x] &gt; arr[y]){<br>                        int temp = arr[x];<br>                        arr[x] = arr[y];<br>                        arr[y] = temp;<br>                    }<br>                }<br>            }<br>        }<br>    </code><br>    <h5><br>        说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置<br>    </h5><br>    <h4>冒泡排序:</h4><br>    <code><br>        public void bubbleSort(int[] arr){<br>            for(int x = 0; x &lt; arr.length; x ++){<br>                for(int y = 0; y &lt; arr.length - x - 1; y ++){<br>                    if(arr[y] &gt; arr[y + 1]){<br>                        int temp = arr[y];<br>                        arr[y] = arr[y + 1];<br>                        arr[y + 1] = temp;<br><br>                    }<br>                }<br>            }<br>        }<br>    </code><br>    <h5><br>        说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置<br>    </h5><br>    <p></p><br>    <h5><br>        使用 java.util包中的 Array.sort(arr); 可以进行排序数组;<br>    </h5><br><br>    <h4><br>        将数组交换的方法进行封装;<br>    </h4><br>    <code><br>        public void swap(int[] arr, int a, int b){<br>            int temp = arr[a];<br>            arr[b] = arr[a];<br>            arr[b] = temp;<br>        }<br>    </code><br><br>    <h5>使用异或方式实现</h5><br><br>    <code><br>        public void swap1(int arr, int a, int b){<br>            arr[b] = arr[b] ^ arr[a];<br>            arr[a] = arr[b] ^ arr[a];<br>            arr[b] = arr[b] ^ arr[a];<br>        }<br>    </code><br></div><br><br><div><br>  <h4># 折半查找</h4><br> <p><br>   </p><h5>第一种方式:</h5><br>   <code><br>     public int halfSearch (int[] arr, int key){<br>       int min = 0;<br>       int max = arr.length - 1;<br>       int mid = (min + max)/2;<br>       while(arr[mid] != key){<br>         if(key &lt; arr[mid]){<br>           max = mid - 1;<br>         }else if(key &gt; arr[mid]){<br>           min = mid + 1;<br>         }<br>         mid = (min + max)/2;<br>       }<br>       return mid;<br>     }<br>   </code><br>   <h5>第二种方式:</h5><br>   <code><br>     public int halfSearch2(int arr[], int key){<br>       int min = 0;<br>       int max = arr.length;<br>       while(min &lt;= max){<br>          mid = (min + max) &gt;&gt; 1;<br>          if(key &gt; arr[mid]){<br>            min = mid + 1;<br>          }else if(key &lt; arr[mid]){<br>            max = mid -1;<br>          }else{<br>            return mid;<br>          }<br>          return -1;<br><br>       }<br><br>     }<br>   </code><br><br><br> <p></p><br><h5>面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;</h5><br><p>思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入</p><br><p></p><br><br><h5>十进制转二进制</h5><br><p><br>  <code><br>    public void decimalToBinary() {<br>            int num = 8;<br>            StringBuffer sb = new StringBuffer();<br>            while (num &gt; 0) {<br>                sb.append(num % 2);<br>                num = num / 2;<br>            }<br>            System.out.println(sb.reverse());<br>        }<br>  </code><br></p><br><br><h5>十进制转十六进制: 第一种方式</h5><br><code><br>  public void decimalToHexadecimal() {<br>        int num = 60;<br>        StringBuffer stringBuffer = new StringBuffer();<br>        for (int x = 0; x &lt; 8; x++) {<br>            int temp = num &amp; 15;<br>            if (temp &gt; 9) {<br>                stringBuffer.append((char) (temp - 10 + ‘A’));<br>            } else {<br>                stringBuffer.append(temp);<br>            }<br>            num = num &gt;&gt;&gt; 4;<br>        }<br>        System.out.println(stringBuffer.reverse());<br>    }<br></code><br><p>二维数组的定义方法:<br>  int[][]<br></p><br></div><br></body><br><br></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html&gt;&lt;br&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;br&gt;&lt;head&gt;&lt;br&gt;&lt;/head&gt;&lt;br&gt;&lt;br&gt;&lt;body&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;    &lt;h3&gt;数组&lt;/h3&gt;&lt;br&gt;    &lt;p&gt;&lt;br&gt; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaReview_day03</title>
    <link href="http://wavejoker.github.io/2017/11/28/JavaReview-day03/"/>
    <id>http://wavejoker.github.io/2017/11/28/JavaReview-day03/</id>
    <published>2017-11-28T07:04:34.000Z</published>
    <updated>2017-11-28T08:44:08.168Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java</p></blockquote><p>###运算符</p><p>###位运算符:<br>1.”&lt;&lt;”: 左位移 2.”&gt;&gt;”: 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 &lt;&lt; 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.”&lt;&lt;&lt;”:无符号左移 4.”&gt;&gt;&gt;”:无符号右移</p><p>异或(^)可以用于加密 ‘&amp;’, ‘|’, ‘^’的运算</p><p>使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换</p><p>三元运算符 三元运算符会改变所运算元素的数据类型</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>if…else:</p><p>三元运算符 对比 if…else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if…else 简单, 可以简化 if…else</p><p>二. switch 语句:</p><p>1) switch可以中可以接收 byte, short, int char 类型的数据;</p><p>2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;</p><p>3) # switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;</p><h1 id="结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束"><a href="#结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束" class="headerlink" title="结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;"></a>结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;</h1><h1 id="如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句"><a href="#如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句" class="headerlink" title="如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,"></a>如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,</h1><p>  直到遇到 break 或程序结束;</p><p>4) # if … else 和 switch 语句的对比:</p><h2 id="switch-性能比-if…else-更高-if-…-else-只能顺序执行"><a href="#switch-性能比-if…else-更高-if-…-else-只能顺序执行" class="headerlink" title="switch 性能比 if…else 更高(if … else 只能顺序执行)"></a>switch 性能比 if…else 更高(if … else 只能顺序执行)</h2><h2 id="对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广"><a href="#对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广" class="headerlink" title="对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广"></a>对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广</h2><p>三. while 语句</p><p>1) do..while 和 while 的区别</p><h1 id="do…while-先执行循环体-再判断条件-循环体至少执行一次"><a href="#do…while-先执行循环体-再判断条件-循环体至少执行一次" class="headerlink" title="do…while 先执行循环体, 再判断条件(循环体至少执行一次);"></a>do…while 先执行循环体, 再判断条件(循环体至少执行一次);</h1><h1 id="while-先判断再执行"><a href="#while-先判断再执行" class="headerlink" title="while 先判断再执行"></a>while 先判断再执行</h1><p>四. for语句</p><p>格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }</p><p>for 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);</p><p>1) for 循环中的变量初始化语句只执行一次</p><p>2)for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int x = 0, y = 0, z = 0; x &lt; 4; x ++, y ++,z ++)&#123;</span><br><span class="line">  System.out.println(x+y+z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) for 和 while 的无限循环的表达形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for:</span><br><span class="line"> for(;;)&#123;</span><br><span class="line">   System.out.println(&quot;for无限循环&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>##如果 for 循环的条件不声明, 默认为 true;</p><h1 id="while"><a href="#while" class="headerlink" title="while"></a>while</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(true)&#123;</span><br><span class="line">  System.out.println(&quot; while 无限循环&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五. break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void testBreak() &#123;</span><br><span class="line">  w:</span><br><span class="line">  for (int x = 1; x &lt; 4; x++) &#123;</span><br><span class="line">      System.out.println(&quot;out\t&quot;);</span><br><span class="line">      q:</span><br><span class="line">      for (int m = 0; m &lt; 3; m++)&#123;</span><br><span class="line">          if (m == 2)&#123;</span><br><span class="line">              break w;</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.print(&quot;in\t&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  输出结果为: out    in    in</p><p>  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in</p><p>  2). continue<br>    作用:结束本次循环,继续下一次循环</p><pre><code># 如下代码可以打印 0~10 以内的 2 的倍数:</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void testContinue()&#123;</span><br><span class="line">    for (int i = 0; i &lt; 11; i ++)&#123;</span><br><span class="line">        if (i%2 == 1)&#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code># 1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void testContinue() &#123;</span><br><span class="line">  w:</span><br><span class="line">  for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    q:</span><br><span class="line">    for (int k = 0; k &lt; 4; k++) &#123;</span><br><span class="line">      System.out.println(&quot;i = &quot; + i);</span><br><span class="line">      continue w;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>输出结果为:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = 0</span><br><span class="line">i = 1</span><br><span class="line">i = 2</span><br></pre></td></tr></table></figure></code></pre><h2 id="break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错"><a href="#break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错" class="headerlink" title="break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);"></a>break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);</h2><h2 id="break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内"><a href="#break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内" class="headerlink" title="break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内"></a>break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内</h2><h3 id="输出等腰三角形"><a href="#输出等腰三角形" class="headerlink" title="输出等腰三角形"></a>输出等腰三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void testTriangle() &#123;</span><br><span class="line">for (int x = 1; x &lt;= 5; x++) &#123;</span><br><span class="line">    for (int y = x; y &lt; 5; y++) &#123;</span><br><span class="line">      System.out.print(&quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    for (int z = 0; z &lt; x; z ++ )&#123;</span><br><span class="line">      System.out.print(&quot;* &quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    *</span><br><span class="line">   * *</span><br><span class="line">  * * *</span><br><span class="line"> * * * *</span><br><span class="line">* * * * *</span><br></pre></td></tr></table></figure><p>六. 重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;###运算符&lt;/p&gt;
&lt;p&gt;###位运算符:&lt;br&gt;1.”&amp;lt;&amp;lt;”: 左位移 2.”&amp;gt;&amp;gt;”: 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数
      
    
    </summary>
    
      <category term="Java" scheme="http://wavejoker.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://wavejoker.github.io/tags/Java/"/>
    
      <category term="Knowledge" scheme="http://wavejoker.github.io/tags/Knowledge/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wavejoker.github.io/2017/11/28/hello-world/"/>
    <id>http://wavejoker.github.io/2017/11/28/hello-world/</id>
    <published>2017-11-28T05:36:15.086Z</published>
    <updated>2017-11-28T08:25:43.185Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Welcome" scheme="http://wavejoker.github.io/tags/Welcome/"/>
    
  </entry>
  
</feed>
