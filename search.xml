<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaReview-day11]]></title>
    <url>%2F2018%2F01%2F19%2FJavaReview-day11%2F</url>
    <content type="text"><![CDATA[线程进程和线程的区别 进程:是一个正在执行中的程序。 每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制元。 线程：就是进程中的一个独立的控制单元。 线程在控制着进程的执行。 特点一个进程中至少有一个线程。 举例: Java VM 启动的时候会有一个进程java.exe.该进程中至少一有个线程负责java程序的执行。而且这个线程运行的代码存在于main方法中。该线程称之为主线程。 扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程。 问题 如何在自定义的代码中，自定义一个线程呢？ 通过对api的查找，java已经提供了对线程这类事物的描述。就Thread类。 创建线程的第一种方式：继承Thread类。 步骤： 定义类继承Thread。 复写Thread类中的run方法。目的: 将自定义代码存储在run方法。让线程运行。 调用线程的start方法， 该方法两个作用：启动线程，调用run方法。 结论发现运行结果每一次都不同。因为多个线程都获取 cpu的执行权。cpu执行到谁，谁就运行。明确一点，在某一个时刻，只能有一个程序在运行。(多核除外)cpu在做着快速的切换，以达到看上去是同时运行的效果。我们可以形象把多线程的运行行为在互相抢夺cpu的执行权。 这就是多线程的一个特性：随机性。谁抢到谁执行，至于执行多长，cpu说的算。 为什么要覆盖run方法呢？Thread类用于描述线程。 该类就定义了一个功能，用于存储线程要运行的代码。该存储功能就是run方法。 也就是说Thread类中的run方法，用于存储线程要运行的代码。 1234567891011121314151617181920212223242526class Demo extends Thread&#123; public void run() &#123; for(int x=0; x&lt;60; x++) System.out.println("demo run----"+x); &#125;&#125;class ThreadDemo&#123; public static void main(String[] args) &#123; //for(int x=0; x&lt;4000; x++) //System.out.println("Hello World!"); Demo d = new Demo();//创建好一个线程。 //d.start();//开启线程并执行该线程的run方法。 d.run();//仅仅是对象调用方法。而线程创建了，并没有运行。 for(int x=0; x&lt;60; x++) System.out.println("Hello World!--"+x); &#125;&#125; 练习12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/*练习：创建两个线程，和主线程交替运行。原来线程都有自己默认的名称。Thread-编号 该编号从0开始。static Thread currentThread():获取当前线程对象。getName(): 获取线程名称。设置线程名称：setName或者构造函数。*/class Test extends Thread&#123; //private String name; Test(String name) &#123; //this.name = name; super(name); &#125; public void run() &#123; for(int x=0; x&lt;60; x++) &#123; System.out.println((Thread.currentThread()==this)+"..."+this.getName()+" run..."+x); &#125; &#125;&#125;class ThreadTest&#123; public static void main(String[] args) &#123; Test t1 = new Test("one---"); Test t2 = new Test("two+++"); t1.start(); t2.start();// t1.run();// t2.run(); for(int x=0; x&lt;60; x++) &#123; System.out.println("main....."+x); &#125; &#125;&#125; 线程的状态图 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/*需求：银行有一个金库。有两个储户分别存300员，每次存100，存3次。目的：该程序是否有安全问题，如果有，如何解决？如何找问题：1，明确哪些代码是多线程运行代码。2，明确共享数据。3，明确多线程运行代码中哪些语句是操作共享数据的。*/class Bank&#123; private int sum; //Object obj = new Object(); public synchronized void add(int n) &#123; //synchronized(obj) //&#123; sum = sum + n; try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125; System.out.println("sum="+sum); //&#125; &#125;&#125;class Cus implements Runnable&#123; private Bank b = new Bank(); public void run() &#123; for(int x=0; x&lt;3; x++) &#123; b.add(100); &#125; &#125;&#125;class BankDemo&#123; public static void main(String[] args) &#123; Cus c = new Cus(); Thread t1 = new Thread(c); Thread t2 = new Thread(c); t1.start(); t2.start(); &#125;&#125; 如果同步函数被静态修饰后, 使用的锁是什么呢？通过验证，发现不在是this。因为静态方法中也不可以定义this。 静态进内存是，内存中没有本类对象，但是一定有该类对应的字节码文件对象。类名.class 该对象的类型是Class 静态的同步方法，使用的锁是该方法所在类的字节码文件对象。 类名.class 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354class Ticket implements Runnable&#123; private static int tick = 100; //Object obj = new Object(); boolean flag = true; public void run() &#123; if(flag) &#123; while(true) &#123; synchronized(Ticket.class) &#123; if(tick&gt;0) &#123; try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125; System.out.println(Thread.currentThread().getName()+"....code : "+ tick--); &#125; &#125; &#125; &#125; else while(true) show(); &#125; public static synchronized void show() &#123; if(tick&gt;0) &#123; try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125; System.out.println(Thread.currentThread().getName()+"....show.... : "+ tick--); &#125; &#125;&#125;class StaticMethodDemo&#123; public static void main(String[] args) &#123; Ticket t = new Ticket(); Thread t1 = new Thread(t); Thread t2 = new Thread(t); t1.start(); try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125; t.flag = false; t2.start(); &#125;&#125; 买票小程序需求：简单的卖票程序。多个窗口同时买票。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Ticket implements Runnable//extends Thread&#123; private int tick = 100; public void run() &#123; while(true) &#123; if(tick&gt;0) &#123; System.out.println(Thread.currentThread().getName()+"....sale : "+ tick--); &#125; &#125; &#125;&#125;class TicketDemo&#123; public static void main(String[] args) &#123; Ticket t = new Ticket(); Thread t1 = new Thread(t);//创建了一个线程； Thread t2 = new Thread(t);//创建了一个线程； Thread t3 = new Thread(t);//创建了一个线程； Thread t4 = new Thread(t);//创建了一个线程； t1.start(); t2.start(); t3.start(); t4.start(); /* Ticket t1 = new Ticket(); //Ticket t2 = new Ticket(); //Ticket t3 = new Ticket(); //Ticket t4 = new Ticket(); t1.start(); t1.start(); t1.start(); t1.start(); */ &#125;&#125; 创建线程的第二种方式：实现Runable接口步骤： 定义类实现Runnable接口 覆盖Runnable接口中的run方法。 将线程要运行的代码存放在该run方法中。 通过Thread类建立线程对象。 将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。 为什么要将Runnable接口的子类对象传递给Thread的构造函数。 因为，自定义的run方法所属的对象是Runnable接口的子类对象。 所以要让线程去执行指定对象的run方法。就必须明确该run方法所属对象。 调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。 实现方式和继承方式有什么区别呢？ 实现方式好处：避免了单继承的局限性。在定义线程时，建意使用实现方式。 两种方式区别：继承Thread:线程代码存放Thread子类run方法中。实现Runnable，线程代码存在接口的子类的run方法。 线程同步(线程安全)问题: 同步函数用的是哪一个锁呢？函数需要被对象调用。那么函数都有一个所属对象引用。就是this。所以同步函数使用的锁是this。 通过该程序进行验证。 使用两个线程来买票。一个线程在同步代码块中。一个线程在同步函数中。都在执行买票动作。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class Ticket implements Runnable&#123; private int tick = 100; Object obj = new Object(); boolean flag = true; public void run() &#123; if(flag) &#123; while(true) &#123; synchronized(this) &#123; if(tick&gt;0) &#123; try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125; System.out.println(Thread.currentThread().getName()+"....code : "+ tick--); &#125; &#125; &#125; &#125; else while(true) show(); &#125; public synchronized void show()//this &#123; if(tick&gt;0) &#123; try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125; System.out.println(Thread.currentThread().getName()+"....show.... : "+ tick--); &#125; &#125;&#125;class ThisLockDemo&#123; public static void main(String[] args) &#123; Ticket t = new Ticket(); Thread t1 = new Thread(t); Thread t2 = new Thread(t); t1.start(); try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125; t.flag = false; t2.start();// Thread t3 = new Thread(t);// Thread t4 = new Thread(t);// t3.start();// t4.start(); &#125;&#125; 线程安全在单例设计模式中的应用 饿汉式 123456789class Single&#123; private static final Single s = new Single(); private Single()&#123;&#125; public static Single getInstance() &#123; return s; &#125;&#125; 懒汉式 123456789101112131415161718192021222324252627282930class Single&#123; private static Single s = null; private Single()&#123;&#125; public static Single getInstance() &#123; if(s==null) &#123; synchronized(Single.class) &#123; if(s==null) //---&gt;A; s = new Single(); &#125; &#125; return s; &#125;&#125;class SingleDemo&#123; public static void main(String[] args) &#123; System.out.println("Hello World!"); &#125;&#125; 死锁死锁。同步中嵌套同步。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class Ticket implements Runnable&#123; private int tick = 1000; Object obj = new Object(); boolean flag = true; public void run() &#123; if(flag) &#123; while(true) &#123; synchronized(obj) &#123; show(); &#125; &#125; &#125; else while(true) show(); &#125; public synchronized void show()//this &#123; synchronized(obj) &#123; if(tick&gt;0) &#123; try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125; System.out.println(Thread.currentThread().getName()+"....code : "+ tick--); &#125; &#125; &#125;&#125;class DeadLockDemo&#123; public static void main(String[] args) &#123; Ticket t = new Ticket(); Thread t1 = new Thread(t); Thread t2 = new Thread(t); t1.start(); try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125; t.flag = false; t2.start(); &#125;&#125; 死锁练习12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758class Test implements Runnable&#123; private boolean flag; Test(boolean flag) &#123; this.flag = flag; &#125; public void run() &#123; if(flag) &#123; while(true) &#123; synchronized(MyLock.locka) &#123; System.out.println(Thread.currentThread().getName()+"...if locka "); synchronized(MyLock.lockb) &#123; System.out.println(Thread.currentThread().getName()+"..if lockb"); &#125; &#125; &#125; &#125; else &#123; while(true) &#123; synchronized(MyLock.lockb) &#123; System.out.println(Thread.currentThread().getName()+"..else lockb"); synchronized(MyLock.locka) &#123; System.out.println(Thread.currentThread().getName()+".....else locka"); &#125; &#125; &#125; &#125; &#125;&#125;class MyLock&#123; static Object locka = new Object(); static Object lockb = new Object();&#125;class DeadLockTest&#123; public static void main(String[] args) &#123; Thread t1 = new Thread(new Test(true)); Thread t2 = new Thread(new Test(false)); t1.start(); t2.start(); &#125;&#125;]]></content>
      <categories>
        <category>JavaReview</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaReview-day10]]></title>
    <url>%2F2018%2F01%2F17%2FJavaReview-day10%2F</url>
    <content type="text"><![CDATA[异常的格式 第一种: 12345try&#123;&#125;catch(Exception e)&#123;&#125; 第二种: 12345try&#123;&#125;catch(Exception e)&#123;&#125; 第三种: 12345try&#123;&#125;finally&#123;&#125; 第三种格式的特点及作用 12345class ExceptionDemo&#123; public void function()&#123; throw new Exception(); &#125;&#125; 以上代码会编译失败但添加finally语句后即可编译成功, 如下: 123456789class ExceptionDemo&#123; public void function()&#123; try&#123; throw new Exception(); &#125;finally&#123; &#125; &#125;&#125; 异常在子父类覆盖中的体现 子类在覆盖父类时,如果父类的方法抛出异常, 那么子类的覆盖方法只能抛出父类的异常, 或该异常的子类; 如果父类方法抛出多个异常, 那么子类方法在覆盖该方法时, 只能抛出父类异常的子集; 如果父类或接口的方法中没有抛出异常, 那么子类在覆盖该方法时, 也不能抛出异常, 如果子类方法发生类异常, 就必须进行try处理, 绝对不能抛出;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071interface Inter&#123; void function();&#125;class D implements Inter&#123; public void function()//throws Exception &#123; &#125;&#125;class A extends Exception&#123;&#125;class B extends A&#123;&#125;class C extends Exception&#123;&#125;// Exception// |--A// |--B// |--Cclass Fu&#123; void show()throws A&#123; &#125;&#125;class Test&#123; void method(Fu f)//Fu f = new Zi(); &#123; try &#123; f.show(); &#125; catch (A a) &#123; &#125; &#125;&#125;class Zi extends Fu&#123; void show()throws C &#123; &#125;&#125;class ExceptionDemo&#123; public static void main(String[] args) &#123; Test t = new Test(); t.show(new Zi()); &#125;&#125; 总结异常： 是什么？是对问题的描述。将问题进行对象的封装。异常体系： Throwable |–Error |–Exception |–RuntimeException 异常体系的特点：异常体系中的所有类以及建立的对象都具备可抛性。 也就是说可以被throw和throws关键字所操作。 只有异常体系具备这个特点。 throw和throws的用法： throw定义在函数内，用于抛出异常对象。throws定义在函数上，用于抛出异常类，可以抛出多个用逗号隔开。 当函数内容有throw抛出异常对象，并未进行try处理。必须要在函数上声明，都在编译失败。 注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。如果函数声明了异常，调用者需要进行处理。处理方法可以throws可以try。 异常有两种： 编译时被检测异常 该异常在编译时，如果没有处理(没有抛也没有try)，编译失败。 该异常被标识，代表这可以被处理。 运行时异常(编译时不检测) 在编译时，不需要处理，编译器不检查。 该异常的发生，建议不处理，让程序停止。需要对代码进行修正。 异常处理语句：try{ 需要被检测的代码；}catch (){ 处理异常的代码；}finally{ 一定会执行的代码；} 有三个结合格式： 第一种 1234567try &#123; &#125; catch () &#123; &#125; 第二种 12345678try &#123; &#125; finally &#123; &#125; 第三种 1234567891011try &#123; &#125; catch () &#123; &#125; finally &#123; &#125; 注意: finally中定义的通常是 关闭资源代码。因为资源必须释放。 finally只有一种情况不会执行。当执行到System.exit(0);fianlly不会执行。 自定义异常：定义类继承Exception或者RuntimeException 1. 为了让该自定义类具备可抛性。 2. 让该类具备操作异常的共性方法。 当要定义自定义异常的信息时，可以使用父类已经定义好的功能。 异常异常信息传递给父类的构造函数。 1234567class MyException extends Exception&#123; MyException(String message) &#123; super(message); &#125;&#125; 自定义异常: 按照java的面向对象思想，将程序中出现的特有问题进行封装。异常的好处：1. 将问题进行封装。 2. 将正常流程代码和问题处理代码相分离，方便于阅读。 异常的处理原则：1. 处理方式有两种：try 或者 throws。 2. 调用到抛出异常的功能时，抛出几个，就处理几个。 一个try对应多个catch。 3. 多个catch，父类的catch放到最下面。 4. catch内，需要定义针对性的处理方式。不要简单的定义printStackTrace，输出语句。 也不要不写。 当捕获到的异常，本功能处理不了时，可以继续在catch中抛出。 12345678try&#123; throw new AException();&#125;catch (AException e)&#123; throw e;&#125; 如果该异常处理不了，但并不属于该功能出现的异常。可以将异常转换后，在抛出和该功能相关的异常。 或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，当调用者知道。并处理。也可以将捕获异常处理后，转换新的异常。123456789try&#123; throw new AException();&#125;catch (AException e)&#123; // 对AException处理。 throw new BException();&#125; 比如，汇款的例子。 异常的注意事项： 在子父类覆盖时： 1，子类抛出的异常必须是父类的异常的子类或者子集。 2，如果父类或者接口没有异常抛出时，子类覆盖出现异常，只能try不能抛。 参阅ExceptionTest.java 老师用电脑上课ExceptionTest1.java 图形面积。12345678910111213141516171819class &#123; public static void main(String[] args) &#123; int x = 0; try &#123; x = 4; &#125; catch () &#123; &#125; finally &#123; System.out.println("x="+x); &#125; &#125;&#125;]]></content>
      <categories>
        <category>JavaReview</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaReview-day09]]></title>
    <url>%2F2018%2F01%2F08%2FJavaReview-day09%2F</url>
    <content type="text"><![CDATA[内部类内部类简介:内部类是指在一个外部类的内部再定义一个类。类名不需要和文件夹相同。内部类可以是静态static的，也可用public，default，protected和private修饰。（而外部顶级类即类名和文件名相同的只能使用public和default）。 注意：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。所以内部类的成员变量/方法名可以和外部类的相同。 12345678910111213141516171819202122232425262728293031323334353637public class Outer &#123; static int mun = 6; class Inner//内部类。 &#123; void show() &#123; System.out.println("show run..." + mun); &#125; //static void function()//如果内部类中定义了静态成员，该内部类也必须是静态的。 //&#123; // System.out.println("function run ...."+num); //&#125; &#125; public void method() &#123; Inner in = new Inner(); in.show(); &#125;&#125;class InnerClassDemo &#123; public static void main(String[] args) &#123; //Outer out = new Outer(); //out.method(); //直接访问外部类中的内部类中的成员。 //Outer.Inner in = new Outer().new Inner(); //in.show(); //如果内部类是静态的。 相当于一个外部类 //Outer.Inner in = new Outer.Inner(); //in.show(); //如果内部类是静态的，成员是静态的。 //Outer.Inner.function(); &#125;&#125; 内部类的访问规则 内部类可以直接访问外部类中的成员, 包括私有, 这是因为内部类中持有一个外部类的引用, 格式 外部类名.this 外部类要访问内部类, 必须建立内部类的对象 访问格式: 当内部类定义在外部类的成员位置上, 而且非私有, 可以在 外部其他类 中, 可以直接建立内部类对象 格式: 外部类名.内部类名 变量名 = 外部类对象.内部类对象; 代码: Outer.Inner inner = new Outer(). new Inner();2.1234567891011121314151617181920 public class day09 &#123; public static void main(String[] args) &#123; Outer.Inner inner = new Outer(). new Inner(); inner.function(); &#125; &#125;class Outer&#123; public int x = 3; class Inner&#123; int x = 4; void function()&#123; int x = 6; System.out.println("X value:" + x); System.out.println("X value:" + this.x); System.out.println("X value:" + Outer.this.x); &#125; &#125;&#125; 输出结果为:6 3 4 局部中的内部类内部类定义在局部时: 不可以被成员修饰符修饰; 可以直接访问外部类中的成员, 因为还持有外部类中的引用但是不可以访问它所在的局部中的变量. 只能访问被 final 修饰的局部变量; 123456789101112131415161718192021public class Outer &#123; int x = 3; void method()&#123; final int y = 4; class Inner&#123; void function()&#123; System.out.println(y); &#125; new Inner.function(); &#125; &#125;class InnerClassDemo3&#123; public static void main(String[] args) &#123; Outer out = new Outer().method(); out.method(7); out.method(8); &#125;&#125;&#125; 匿名内部类 匿名内部类就是内部类的简写格式 定义匿名内部类的前提: 内部类必须是继承一个类或实现接口 匿名内部类的格式: new 父类对象或接口(){定义子类的内容} 其实匿名内部类就是一个匿名子类对象. 而且这个对象有点胖. 可以理解为带内容的对象; 123456789101112131415161718abstract class AbsDemo&#123; abstract void show();&#125;class Outer&#123; int x = 3; AbsDemo d = new AbsDemo()&#123; void show()&#123; System.out.println("x==" + x); &#125; void abc()&#123; System.out.println("haha"); &#125; &#125;;&#125;d.show();//d.abc();//编译失败 因为只能使用父类的引用,无法调用 异常 异常:就是程序在运行时出现不正常情况.异常的由来: 问题也是现实生活中一个具体的事物, 也可以通过java的类的形式进行描述. 并封装成对象. 对于问题的划分为两种:一种是严重的问题, 一种非严重的问题; 对于严重的, java 通过Error类进行描述: 对于Error一般不编写针对性的代码对其进行处理; 对于非严重的, java 通过Exception类进行描述.对于Exception可以使用针对性的处理方式进行处理; 异常：是在运行时期发生的不正常情况在java中用类的形式对不正常情况进行了描述和封装对象。描述不正常的情况的类，就称为异常类。以前正常流程代码和问题处理代码相结合，现在将正常流程代码和问题处理代码分离。提高阅读性.其实异常就是java通过面向对象的思想将问题封装成了对象.用异常类对其进行描述。不同的问题用不同的类进行具体的描述。 比如角标越界。空指针等等。问题很多，意味着描述的类也很多，将其共性进行向上抽取，形成了异常体系。最终问题（不正常情况）就分成了两大类。Throwable:无论是error，还是异常，问题，问题发生就应该可以抛出，让调用者知道并处理。 //该体系的特点就在于Throwable及其所有的子类都具有可抛性。 可抛性到底指的是什么呢？怎么体现可抛性呢？ 其实是通过两个关键字来体现的。 throws throw ,凡是可以被这两个关键字所操作的类和对象都具备可抛性. - 一般不可处理的。Error 特点：是由jvm抛出的严重性的问题。 这种问题发生一般不针对性处理。直接修改程序 - 可以处理的。Exception 该体系的特点： 子类的后缀名都是用其父类名作为后缀，阅读性很想。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class ExceptionDemo&#123; public static void main(String[] args) &#123; int[] arr = new int[1024*1024*800];//java.lang.OutOfMemoryError: Java heap space// arr = null;// System.out.println(arr[3]);////// sleep(-5); &#125; public static void sleep2(int time) &#123; if(time&lt;0) &#123; //处理办法。 //处理办法。 //处理办法。 //处理办法。 //处理办法。 &#125; if(time&gt;100000) &#123; //处理办法。 //处理办法。 //处理办法。 //处理办法。 //处理办法。 //处理办法。 &#125; System.out.println("我睡。。。"+time);// sleep(-5); &#125; public static void sleep(int time) &#123; if(time&lt;0) &#123;// 抛出 new FuTime();//就代码着时间为负的情况，这个对象中会包含着问题的名称，信息，位置等信息。 &#125; if(time&gt;100000) &#123;// 抛出 new BigTime(); &#125; System.out.println("我睡。。。"+time); &#125;&#125;/*class FuTime&#123;&#125;class BigTime&#123;&#125;*/ 运行时异常对于角标是整数不存在，可以用角标越界表示，对于负数为角标的情况，准备用负数角标异常来表示。 负数角标这种异常在java中并没有定义过。那就按照java异常的创建思想，面向对象，将负数角标进行自定义描述。并封装成对象。 这种自定义的问题描述成为自定义异常。 注意：如果让一个类称为异常类，必须要继承异常体系，因为只有称为异常体系的子类才有资格具备可抛性。才可以被两个关键字所操作，throws throw 异常的分类： 编译时被检测异常:只要是Exception和其子类都是，除了特殊子类RuntimeException体系。这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式。这样的问题都可以针对性的处理。 编译时不检测异常(运行时异常):就是Exception中的RuntimeException和其子类。这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的而或者引发了内部状态的改变导致的。那么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止,让调用者对代码进行修正。 所以自定义异常时，要么继承Exception。要么继承RuntimeException。 throws 和 throw 的区别。 throws使用在函数上。throw使用在函数内。 throws抛出的是异常类，可以抛出多个，用逗号隔开。throw抛出的是异常对象。 异常处理的捕捉形式： 这是可以对异常进行针对性处理的方式。 具体格式是： 123456789101112try&#123; //需要被检测异常的代码。&#125;catch(异常类 变量)//该变量用于接收发生的异常对象&#123; //处理异常的代码。&#125;finally&#123; //一定会被执行的代码。 &#125; 异常处理的原则： 函数内容如果抛出需要检测的异常，那么函数上必须要声明。否则必须在函数内用trycatch捕捉，否则编译失败。 如果调用到了声明异常的函数，要么trycatch要么throws，否则编译失败。 什么时候catch，什么时候throws 呢？功能内容可以解决，用catch。解决不了，用throws告诉调用者，由调用者解决 。 一个功能如果抛出了多个异常，那么调用时，必须有对应多个catch进行针对性的处理。内部又几个需要检测的异常，就抛几个异常，抛出几个，就catch几个。 异常的注意事项 子类在覆盖父类方法时，父类的方法如果抛出了异常，那么子类的方法只能抛出父类的异常或者该异常的子类。 如果父类抛出多个异常，那么子类只能抛出父类异常的子集。简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集。 注意：如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛，就只能try . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253interface Inter&#123; void function();&#125;class D implements Inter&#123; public void function()//throws Exception &#123;&#125;&#125;class A extends Exception&#123;&#125;class B extends A&#123;&#125;class C extends Exception&#123;&#125;class Fu&#123; void show()throws A &#123;&#125;&#125;class Test&#123; void method(Fu f)//Fu f = new Zi(); &#123; try &#123; f.show(); &#125; catch (A a) &#123; &#125; &#125;&#125;class Zi extends Fu&#123; void show()throws C &#123; &#125;&#125;]]></content>
      <categories>
        <category>JavaReview</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Struts2 - 1]]></title>
    <url>%2F2018%2F01%2F06%2FStruts2-1%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[微信跳一跳高分攻(外)略(挂)]]></title>
    <url>%2F2018%2F01%2F02%2F%E5%BE%AE%E4%BF%A1%E8%B7%B3%E4%B8%80%E8%B7%B3%E9%AB%98%E5%88%86%E6%94%BB-%E5%A4%96-%E7%95%A5-%E6%8C%82%2F</url>
    <content type="text"><![CDATA[最近看微信的跳一跳特别火, 作为一名程序员, 感觉有必要运用一下自己的专(找)业(挂)知(能)识(力), 搞一个高分外挂.具体流程请参考传送门, 本文只介绍环境搭建过程; Python笔者只用过 3.6 其他版本, 推荐使用]]></content>
      <categories>
        <category>Python</category>
        <category>外挂</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Result Maps collection already contains value for xxx.xxx.Mapper.BaseResultMap异常解决]]></title>
    <url>%2F2017%2F12%2F29%2FResult%20Maps%20collection%20already%20contains%20value%20for%20xxx.xxx.Mapper.BaseResultMap%2F</url>
    <content type="text"><![CDATA[突然项目启动时报出以下错误:百度上的所有答案没能解决, 最终索性重新把mapper文件重新生成了一遍, 结果令人感到意外, 竟然不报错了, 至于原因好像是运行过一个mybatis-gen12345678910Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListenerorg.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userServiceImpl&apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.bobo.mapper.UserMapper com.bobo.service.impl.UserServiceImpl.userMapper; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.bobo.mapper.UserMapper] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Autowired(required=true)&#125;Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMapRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMapRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMapRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMapRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;avisMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMapRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;avisMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMapRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\Work\IDEA\bobo\target\classes\com\bobo\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMapRelated cause: org.springframework.beans.factory.BeanCreationException: Error]]></content>
      <categories>
        <category>Exception</category>
      </categories>
      <tags>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven管理SSM时xml和properties文件丢失异常]]></title>
    <url>%2F2017%2F12%2F28%2Fmaven%E7%AE%A1%E7%90%86SSM%E6%97%B6xml%E5%92%8Cproperties%E6%96%87%E4%BB%B6%E4%B8%A2%E5%A4%B1%E5%BC%82%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[classpath resource [com/qinkangdeid/mapping/] cannot be resolved to URL because it does not exist 和 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常解决项目结构如图所示: 1234567891011121314151617181920&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt; 如上图所示, 将com.bobo.mapper和resource目录配置到pom文件的bulid中即可]]></content>
      <categories>
        <category>Exception</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaReview-day08]]></title>
    <url>%2F2017%2F12%2F26%2FJavaReview-day08%2F</url>
    <content type="text"><![CDATA[多态多态的特点 在多态中, 成员函数的特点: 在编译时期: 参阅引用型变量所属的类中是否有调用的方法. 如果有, 编译通过; 如果没有, 编译失败 在运行时期: 参阅对象所属类的中是否有调用的方法 简单总结就是: 成员函数在多态调用时, 编译看左边, 运行看右边; 因为成员函数存在覆盖特性。 在多态中, 成员变量的特点: 无论编译和运行, 都参考左边(引用型变量所属的类); 在多态中, 静态成员函数的特点: 无论编译和运行, 都参考左边(引用型变量所属的类); 其实对于静态方法，是不需要对象的。直接用类名调用即可。12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Fu&#123;// int num = 3; void show() &#123; System.out.println("fu show"); &#125; static void method() &#123; System.out.println("fu static method"); &#125;&#125;class Zi extends Fu&#123;// int num = 4; void show() &#123; System.out.println("zi show"); &#125; static void method() &#123; System.out.println("zi static method"); &#125;&#125;class DuoTaiDemo3&#123; public static void main(String[] args) &#123; Fu.method(); Zi.method(); Fu f = new Zi();//// f.method();// f.show();// System.out.println(f.num);// Zi z = new Zi();// System.out.println(z.num); &#125;&#125;]]></content>
      <categories>
        <category>JavaReview</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中的23中设计模式-四]]></title>
    <url>%2F2017%2F12%2F25%2FJava%E4%B8%AD%E7%9A%8423%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[本文转自:http://blog.csdn.net/zhangerqing; 其实每个设计模式都是很重要的一种思想,看上去很熟,其实是因为我们在学到的东西中都有涉及,尽管有时我们并不知道,其实在Java本身的设计之中处处都有体现,像AWT、JDBC、集合类、IO管道或者是Web框架,里面设计模式无处不在。因为我们篇幅有限,很难讲每一个设计模式都讲的很详细,不过我会尽我所能,尽量在有限的空间和篇幅内,把意思写清楚了,更好让大家明白。本章不出意外的话,应该是设计模式最后一讲了,首先还是上一下上篇开头的那个图: 本章讲讲第三类和第四类。 19. 备忘录模式（Memento）主要目的是保存一个对象的某个状态,以便在适当的时候恢复对象,个人觉得叫备份模式更形象些,通俗的讲下：假设有原始类A,A中有各种属性,A可以决定需要备份的属性,备忘录类B是用来存储A的一些内部状态,类C呢,就是一个用来存储备忘录的,且只能存储,不能修改等操作。做个图来分析一下: Original类是原始类,里面有需要保存的属性value及创建一个备忘录类,用来保存value值。Memento类是备忘录类,Storage类是存储备忘录的类,持有Memento类的实例,该模式很好理解。 直接看源码: 123456789101112131415161718192021222324public class Original &#123; private String value; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125; public Original(String value) &#123; this.value = value; &#125; public Memento createMemento()&#123; return new Memento(value); &#125; public void restoreMemento(Memento memento)&#123; this.value = memento.getValue(); &#125; &#125; 12345678910111213141516public class Memento &#123; private String value; public Memento(String value) &#123; this.value = value; &#125; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125; &#125; 12345678910111213141516public class Storage &#123; private Memento memento; public Storage(Memento memento) &#123; this.memento = memento; &#125; public Memento getMemento() &#123; return memento; &#125; public void setMemento(Memento memento) &#123; this.memento = memento; &#125; &#125; 测试类: 1234567891011121314151617181920public class Test &#123; public static void main(String[] args) &#123; // 创建原始类 Original origi = new Original("egg"); // 创建备忘录 Storage storage = new Storage(origi.createMemento()); // 修改原始类的状态 System.out.println("初始化状态为:" + origi.getValue()); origi.setValue("niu"); System.out.println("修改后的状态为:" + origi.getValue()); // 回复原始类的状态 origi.restoreMemento(storage.getMemento()); System.out.println("恢复后的状态为:" + origi.getValue()); &#125; &#125; 输出：初始化状态为:egg 修改后的状态为:niu 恢复后的状态为:egg 20. 状态模式(State)核心思想就是：当对象的状态改变时,同时改变其行为,很好理解！就拿QQ来说,有几种状态,在线、隐身、忙碌等,每个状态对应不同的操作,而且你的好友也能看到你的状态所以,状态模式就两点: 可以通过改变状态来获得不同的行为。 你的好友能同时看到你的变化。看图: State类是个状态类,Context类可以实现切换,我们来看看代码:12345678910111213141516171819202122232425262728package com.xtfggef.dp.state; /** * 状态类的核心类 * 2012-12-1 * @author erqing * */ public class State &#123; private String value; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125; public void method1()&#123; System.out.println("execute the first opt!"); &#125; public void method2()&#123; System.out.println("execute the second opt!"); &#125; &#125; 12345678910111213141516171819202122232425262728293031package com.xtfggef.dp.state; /** * 状态模式的切换类 2012-12-1 * @author erqing * */ public class Context &#123; private State state; public Context(State state) &#123; this.state = state; &#125; public State getState() &#123; return state; &#125; public void setState(State state) &#123; this.state = state; &#125; public void method() &#123; if (state.getValue().equals("state1")) &#123; state.method1(); &#125; else if (state.getValue().equals("state2")) &#123; state.method2(); &#125; &#125; &#125; 测试类:12345678910111213141516public class Test &#123; public static void main(String[] args) &#123; State state = new State(); Context context = new Context(state); //设置第一种状态 state.setValue("state1"); context.method(); //设置第二种状态 state.setValue("state2"); context.method(); &#125; &#125; 输出:execute the first opt! execute the second opt! 根据这个特性,状态模式在日常开发中用的挺多的,尤其是做网站的时候,我们有时希望根据对象的某一属性,区别开他们的一些功能,比如说简单的权限控制等。 21. 访问者模式（Visitor）访问者模式把数据结构和作用于结构上的操作解耦合,使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化,经常有新的数据对象增加进来,则不适合使用访问者模式。访问者模式的优点是增加操作很容易,因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中,其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From百科 简单来说,访问者模式就是一种分离对象数据结构与行为的方法,通过这种分离,可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：来看看原码:一个Visitor类,存放要访问的对象,123public interface Visitor &#123; public void visit(Subject sub); &#125; 1234567public class MyVisitor implements Visitor &#123; @Override public void visit(Subject sub) &#123; System.out.println("visit the subject:"+sub.getSubject()); &#125; &#125; Subject类,accept方法,接受将要访问它的对象,getSubject()获取将要被访问的属性,1234public interface Subject &#123; public void accept(Visitor visitor); public String getSubject(); &#125; 123456789101112public class MySubject implements Subject &#123; @Override public void accept(Visitor visitor) &#123; visitor.visit(this); &#125; @Override public String getSubject() &#123; return "love"; &#125; &#125; 测试:123456789public class Test &#123; public static void main(String[] args) &#123; Visitor visitor = new MyVisitor(); Subject sub = new MySubject(); sub.accept(visitor); &#125; &#125; 输出: visit the subject:love该模式适用场景：如果我们想为一个现有的类增加新功能,不得不考虑几个事情：1、新功能会不会与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对这些问题,最好的解决方法就是使用访问者模式,访问者模式适用于数据结构相对稳定的系统,把数据结构和算法解耦; 22. 中介者模式(Mediator)中介者模式也是用来降低类类之间的耦合的,因为如果类类之间有依赖关系的话,不利于功能的拓展和维护,因为只要修改一个对象,其它关联的对象都得进行修改。如果使用中介者模式,只需关心和Mediator类的关系,具体类类之间的关系及调度交给Mediator就行,这有点像spring容器的作用。先看看图:User类统一接口,User1和User2分别是不同的对象,二者之间有关联,如果不采用中介者模式,则需要二者相互持有引用,这样二者的耦合度很高,为了解耦,引入了Mediator类,提供统一接口,MyMediator为其实现类,里面持有User1和User2的实例,用来实现对User1和User2的控制。这样User1和User2两个对象相互独立,他们只需要保持好和Mediator之间的关系就行,剩下的全由MyMediator类来维护！基本实现:1234public interface Mediator &#123; public void createMediator(); public void workAll(); &#125; 12345678910111213141516171819202122232425public class MyMediator implements Mediator &#123; private User user1; private User user2; public User getUser1() &#123; return user1; &#125; public User getUser2() &#123; return user2; &#125; @Override public void createMediator() &#123; user1 = new User1(this); user2 = new User2(this); &#125; @Override public void workAll() &#123; user1.work(); user2.work(); &#125; &#125; 1234567891011121314public abstract class User &#123; private Mediator mediator; public Mediator getMediator()&#123; return mediator; &#125; public User(Mediator mediator) &#123; this.mediator = mediator; &#125; public abstract void work(); &#125; 1234567891011public class User1 extends User &#123; public User1(Mediator mediator)&#123; super(mediator); &#125; @Override public void work() &#123; System.out.println("user1 exe!"); &#125; &#125; 1234567891011public class User2 extends User &#123; public User2(Mediator mediator)&#123; super(mediator); &#125; @Override public void work() &#123; System.out.println("user2 exe!"); &#125; &#125; 测试类:12345678public class Test &#123; public static void main(String[] args) &#123; Mediator mediator = new MyMediator(); mediator.createMediator(); mediator.workAll(); &#125; &#125; 输出:user1 exe! user2 exe! 23. 解释器模式(Interpreter)解释器模式是我们暂时的最后一讲,一般主要应用在OOP开发中的编译器的开发中,所以适用面比较窄。 Context类是一个上下文环境类,Plus和Minus分别是用来计算的实现,代码如下:123public interface Expression &#123; public int interpret(Context context); &#125; 1234567public class Plus implements Expression &#123; @Override public int interpret(Context context) &#123; return context.getNum1()+context.getNum2(); &#125; &#125; 1234567public class Minus implements Expression &#123; @Override public int interpret(Context context) &#123; return context.getNum1()-context.getNum2(); &#125; &#125; 12345678910111213141516171819202122232425public class Context &#123; private int num1; private int num2; public Context(int num1, int num2) &#123; this.num1 = num1; this.num2 = num2; &#125; public int getNum1() &#123; return num1; &#125; public void setNum1(int num1) &#123; this.num1 = num1; &#125; public int getNum2() &#123; return num2; &#125; public void setNum2(int num2) &#123; this.num2 = num2; &#125; &#125; 测试类:12345678910public class Test &#123; public static void main(String[] args) &#123; // 计算9+2-8的值 int result = new Minus().interpret((new Context(new Plus() .interpret(new Context(9, 2)), 8))); System.out.println(result); &#125; &#125; 最后输出正确的结果:3。 基本就这样,解释器模式用来做各种各样的解释器,如正则表达式等的解释器等等！ 设计模式基本就这么大概讲完了,总体感觉有点简略,的确,这么点儿篇幅,不足以对整个23种设计模式做全面的阐述,此处读者可将它作为一个理论基础去学习,通过这四篇博文,先基本有个概念,虽然我讲的有些简单,但基本都能说明问题及他们的特点,如果对哪一个感兴趣,可以继续深入研究！]]></content>
      <categories>
        <category>Java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中的23中设计模式-三]]></title>
    <url>%2F2017%2F12%2F25%2FJava%E4%B8%AD%E7%9A%8423%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%89%2F</url>
    <content type="text"><![CDATA[本文转自:http://blog.csdn.net/zhangerqing 本章是关于设计模式的最后一讲,会讲到第三种设计模式——行为型模式,共11种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。这段时间一直在写关于设计模式的东西,终于写到一半了,写博文是个很费时间的东西,因为我得为读者负责,不论是图还是代码还是表述,都希望能尽量写清楚,以便读者理解,我想不论是我还是读者,都希望看到高质量的博文出来,从我本人出发,我会一直坚持下去,不断更新,源源动力来自于读者朋友们的不断支持,我会尽自己的努力,写好每一篇文章！希望大家能不断给出意见和建议,共同打造完美的博文！ 先来张图,看看这11中模式的关系： 通过父类与子类的关系进行实现。 两个类之间。 类的状态。 通过中间类 13. 策略模式(strategy)策略模式定义了一系列算法,并将每个算法封装起来,使他们可以相互替换,且算法的变化不会影响到使用算法的客户。需要设计一个接口,为一系列实现类提供统一的方法,多个实现类实现该接口,设计一个抽象类（可有可无,属于辅助类）,提供辅助函数,关系图如下: 图中ICalculator提供同意的方法,AbstractCalculator是辅助类,提供辅助方法,接下来,依次实现下每个类：首先统一接口: 123public interface ICalculator &#123; public int calculate(String exp); &#125; 辅助类:12345678910public abstract class AbstractCalculator &#123; public int[] split(String exp,String opt)&#123; String array[] = exp.split(opt); int arrayInt[] = new int[2]; arrayInt[0] = Integer.parseInt(array[0]); arrayInt[1] = Integer.parseInt(array[1]); return arrayInt; &#125; &#125; 三个实现类: 12345678public class Plus extends AbstractCalculator implements ICalculator &#123; @Override public int calculate(String exp) &#123; int arrayInt[] = split(exp,"\\+"); return arrayInt[0]+arrayInt[1]; &#125; &#125; 123456789public class Minus extends AbstractCalculator implements ICalculator &#123; @Override public int calculate(String exp) &#123; int arrayInt[] = split(exp,"-"); return arrayInt[0]-arrayInt[1]; &#125; &#125; 12345678public class Multiply extends AbstractCalculator implements ICalculator &#123; @Override public int calculate(String exp) &#123; int arrayInt[] = split(exp,"\\*"); return arrayInt[0]*arrayInt[1]; &#125; &#125; 简单的测试类:123456789public class StrategyTest &#123; public static void main(String[] args) &#123; String exp = "2+8"; ICalculator cal = new Plus(); int result = cal.calculate(exp); System.out.println(result); &#125; &#125; 输出: 10 策略模式的决定权在用户,系统本身提供不同算法的实现,新增或者删除算法,对各种算法做封装。因此,策略模式多用在算法决策系统中,外部用户只需要决定用哪个算法即可。 14. 模板方法模式(Template Method)解释一下模板方法模式,就是指：一个抽象类中,有一个主方法,再定义1…n个方法,可以是抽象的,也可以是实际的方法,定义一个类,继承该抽象类,重写抽象方法,通过调用抽象类,实现对子类的调用,先看个关系图:就是在AbstractCalculator类中定义一个主方法calculate,calculate()调用spilt()等,Plus和Minus分别继承AbstractCalculator类,通过对AbstractCalculator的调用实现对子类的调用,看下面的例子:12345678910111213141516171819public abstract class AbstractCalculator &#123; /*主方法,实现对本类其它方法的调用*/ public final int calculate(String exp,String opt)&#123; int array[] = split(exp,opt); return calculate(array[0],array[1]); &#125; /*被子类重写的方法*/ abstract public int calculate(int num1,int num2); public int[] split(String exp,String opt)&#123; String array[] = exp.split(opt); int arrayInt[] = new int[2]; arrayInt[0] = Integer.parseInt(array[0]); arrayInt[1] = Integer.parseInt(array[1]); return arrayInt; &#125; &#125; 1234567public class Plus extends AbstractCalculator &#123; @Override public int calculate(int num1,int num2) &#123; return num1 + num2; &#125; &#125; 测试类:123456789public class StrategyTest &#123; public static void main(String[] args) &#123; String exp = "8+8"; AbstractCalculator cal = new Plus(); int result = cal.calculate(exp, "\\+"); System.out.println(result); &#125; &#125; 我跟踪下这个小程序的执行过程：首先将exp和&quot;\\+&quot;做参数,调用AbstractCalculator类里的calculate(String,String)方法,在calculate(String,String)里调用同类的split(),之后再调用calculate(int ,int)方法,从这个方法进入到子类中,执行完return num1 + num2后,将值返回到AbstractCalculator类,赋给result,打印出来。正好验证了我们开头的思路。 15. 观察者模式（Observer）包括这个模式在内的接下来的四个模式,都是类和类之间的关系,不涉及到继承,学的时候应该 记得归纳,记得本文最开始的那个图。观察者模式很好理解,类似于邮件订阅和RSS订阅,当我们浏览一些博客或wiki时,经常会看到RSS图标,就这的意思是,当你订阅了该文章,如果后续有更新,会及时通知你。其实,简单来讲就一句话：当一个对象变化时,其它依赖该对象的对象都会收到通知,并且随着变化！对象之间是一种一对多的关系。先来看看关系图：我解释下这些类的作用：MySubject类就是我们的主对象,Observer1和Observer2是依赖于MySubject的对象,当MySubject变化时,Observer1和Observer2必然变化。AbstractSubject类中定义着需要监控的对象列表,可以对其进行修改：增加或删除被监控对象,且当MySubject变化时,负责通知在列表内存在的对象。我们看实现代码： 一个Observer接口:123public interface Observer &#123; public void update(); &#125; 两个实现类:1234567public class Observer1 implements Observer &#123; @Override public void update() &#123; System.out.println("observer1 has received!"); &#125; &#125; 12345678public class Observer2 implements Observer &#123; @Override public void update() &#123; System.out.println("observer2 has received!"); &#125; &#125; Subject接口及实现类:1234567891011121314public interface Subject &#123; /*增加观察者*/ public void add(Observer observer); /*删除观察者*/ public void del(Observer observer); /*通知所有的观察者*/ public void notifyObservers(); /*自身的操作*/ public void operation(); &#125; 123456789101112131415161718192021public abstract class AbstractSubject implements Subject &#123; private Vector&lt;Observer&gt; vector = new Vector&lt;Observer&gt;(); @Override public void add(Observer observer) &#123; vector.add(observer); &#125; @Override public void del(Observer observer) &#123; vector.remove(observer); &#125; @Override public void notifyObservers() &#123; Enumeration&lt;Observer&gt; enumo = vector.elements(); while(enumo.hasMoreElements())&#123; enumo.nextElement().update(); &#125; &#125; &#125; 123456789public class MySubject extends AbstractSubject &#123; @Override public void operation() &#123; System.out.println("update self!"); notifyObservers(); &#125; &#125; 测试类:1234567891011public class ObserverTest &#123; public static void main(String[] args) &#123; Subject sub = new MySubject(); sub.add(new Observer1()); sub.add(new Observer2()); sub.operation(); &#125; &#125; 输出：update self! observer1 has received! observer2 has received! 这些东西,其实不难,只是有些抽象,不太容易整体理解,建议读者：根据关系图,新建项目,自 己写代码(或者参考我的代码),按照总体思路走一遍,这样才能体会它的思想,理解起来容易！ 16. 迭代子模式（Iterator） 顾名思义,迭代器模式就是顺序访问聚集中的对象,一般来说,集合中非常常见,如果对集合类比 较熟悉的话,理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象,即聚集对象, 二是迭代器对象,用于对聚集对象进行遍历访问。我们看下关系图:这个思路和我们常用的一模一样,MyCollection中定义了集合的一些操作,MyIterator中定义了一系列迭代操作,且持有Collection实例,我们来看看实现代码： 两个接口: 12345678910public interface Collection &#123; public Iterator iterator(); /*取得集合元素*/ public Object get(int i); /*取得集合大小*/ public int size(); &#125; 1234567891011public interface Iterator &#123; //前移 public Object previous(); //后移 public Object next(); public boolean hasNext(); //取得第一个元素 public Object first(); &#125; 两个实现:123456789101112131415161718public class MyCollection implements Collection &#123; public String string[] = &#123;"A","B","C","D","E"&#125;; @Override public Iterator iterator() &#123; return new MyIterator(this); &#125; @Override public Object get(int i) &#123; return string[i]; &#125; @Override public int size() &#123; return string.length; &#125; &#125; 1234567891011121314151617181920212223242526272829303132333435363738394041public class MyIterator implements Iterator &#123; private Collection collection; private int pos = -1; public MyIterator(Collection collection)&#123; this.collection = collection; &#125; @Override public Object previous() &#123; if(pos &gt; 0)&#123; pos--; &#125; return collection.get(pos); &#125; @Override public Object next() &#123; if(pos&lt;collection.size()-1)&#123; pos++; &#125; return collection.get(pos); &#125; @Override public boolean hasNext() &#123; if(pos&lt;collection.size()-1)&#123; return true; &#125;else&#123; return false; &#125; &#125; @Override public Object first() &#123; pos = 0; return collection.get(pos); &#125; &#125; 测试类:1234567891011public class Test &#123; public static void main(String[] args) &#123; Collection collection = new MyCollection(); Iterator it = collection.iterator(); while(it.hasNext())&#123; System.out.println(it.next()); &#125; &#125; &#125; 输出: A B C D E 此处我们貌似模拟了一个集合类的过程,感觉是不是很爽？其实JDK中各个类也都是这些基本的东西,加一些设计模式,再加一些优化放到一起的,只要我们把这些东西学会了,掌握好了,我们也可以写出自己的集合类,甚至框架！ 17. 责任链模式(Chain of Responsibility)接下来我们将要谈谈责任链模式,有多个对象,每个对象持有对下一个对象的引用,这样就会形成一条链,请求在这条链上传递,直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个对象会处理该请求,所以,责任链模式可以实现,在隐瞒客户端的情况下,对系统进行动态的调整。先看看关系图: Abstracthandler类提供了get和set方法,方便MyHandle类设置和修改引用对象,MyHandle类是核心,实例化后生成一系列相互持有的对象,构成一条链。 123public interface Handler &#123; public void operator(); &#125; 12345678910111213public abstract class AbstractHandler &#123; private Handler handler; public Handler getHandler() &#123; return handler; &#125; public void setHandler(Handler handler) &#123; this.handler = handler; &#125; &#125; 12345678910111213141516public class MyHandler extends AbstractHandler implements Handler &#123; private String name; public MyHandler(String name) &#123; this.name = name; &#125; @Override public void operator() &#123; System.out.println(name+"deal!"); if(getHandler()!=null)&#123; getHandler().operator(); &#125; &#125; &#125; 12345678910111213public class Test &#123; public static void main(String[] args) &#123; MyHandler h1 = new MyHandler("h1"); MyHandler h2 = new MyHandler("h2"); MyHandler h3 = new MyHandler("h3"); h1.setHandler(h2); h2.setHandler(h3); h1.operator(); &#125; &#125; 输出:h1deal! h2deal! h3deal! 此处强调一点就是,链接上的请求可以是一条链,可以是一个树,还可以是一个环,模式本身不约束这个,需要我们自己去实现,同时,在一个时刻,命令只允许由一个对象传给另一个对象,而不允许传给多个对象。 18. 命令模式（Command）命令模式很好理解,举个例子,司令员下令让士兵去干件事情,从整个事情的角度来考虑,司令员的作用是,发出口令,口令经过传递,传到了士兵耳朵里,士兵去执行。这个过程好在,三者相互解耦,任何一方都不用去依赖其他人,只需要做好自己的事儿就行,司令员要的是结果,不会去关注到底士兵是怎么实现的。我们看看关系图: Invoker 是调用者（司令员）,Receiver 是被调用者（士兵）,MyCommand 是命令,实现了 Command 接口,持有接收对象,看实现代码: 123public interface Command &#123; public void exe(); &#125; 12345678910111213public class MyCommand implements Command &#123; private Receiver receiver; public MyCommand(Receiver receiver) &#123; this.receiver = receiver; &#125; @Override public void exe() &#123; receiver.action(); &#125; &#125; 12345public class Receiver &#123; public void action()&#123; System.out.println("command received!"); &#125; &#125; 123456789101112public class Invoker &#123; private Command command; public Invoker(Command command) &#123; this.command = command; &#125; public void action()&#123; command.exe(); &#125; &#125; 123456789public class Test &#123; public static void main(String[] args) &#123; Receiver receiver = new Receiver(); Command cmd = new MyCommand(receiver); Invoker invoker = new Invoker(cmd); invoker.action(); &#125; &#125; 输出: command received!这个很好理解,命令模式的目的就是达到命令的发出者和执行者之间解耦,实现请求和执行分开,熟悉Struts的同学应该知道,Struts其实就是一种将请求和呈现分离的技术,其中必然涉及命令模式的思想！本篇暂时就到这里,因为考虑到将来博文会不断的更新,不断的增加新内容,所以当前篇幅不易过长,以便大家阅读,所以接下来的放到另一篇里。敬请关注！]]></content>
      <categories>
        <category>Java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中的23中设计模式(二)]]></title>
    <url>%2F2017%2F12%2F25%2FJava%E4%B8%AD%E7%9A%8423%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[本文转载自http://blog.csdn.net/zhangerqing 我们接着讨论设计模式,上篇文章我讲完了5种创建型模式,这章开始,我将讲下7种结构型模式：适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模式是各种模式的起源,我们看下面的图： 6. 适配器模式(Adapter)适配器模式将某个类的接口转换成客户端期望的另一个接口表示,目的是消除由于接口不匹配所 造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。 首先,我们来看看类的适配器模式,先看类图： 核心思想就是：有一个Source类,拥有一个方法,待适配,目标接口时Targetable,通过Adapter类,将Source的功能扩展到Targetable里,看代码： 123456public class Source &#123; public void method1() &#123; System.out.println("this is original method!"); &#125; &#125; 12345678public interface Targetable &#123; /* 与原类中的方法相同 */ public void method1(); /* 新类的方法 */ public void method2(); &#125; 1234567public class Adapter extends Source implements Targetable &#123; @Override public void method2() &#123; System.out.println("this is the targetable method!"); &#125; &#125; Adapter类继承Source类,实现Targetable接口,下面是测试类: 12345678public class AdapterTest &#123; public static void main(String[] args) &#123; Targetable target = new Adapter(); target.method1(); target.method2(); &#125; &#125; 输出:this is original method! this is the targetable method!这样Targetable接口的实现类就具有了Source类的功能。 对象的适配器模式 基本思路和类的适配器模式相同,只是将Adapter类作修改,这次不继承Source类,而是持有Source类的实例,以达到解决兼容性的问题。看图: 只需要修改Adapter类的源码即可:123456789101112131415161718public class Wrapper implements Targetable &#123; private Source source; public Wrapper(Source source)&#123; super(); this.source = source; &#125; @Override public void method2() &#123; System.out.println("this is the targetable method!"); &#125; @Override public void method1() &#123; source.method1(); &#125; &#125; 测试类: 123456789public class AdapterTest &#123; public static void main(String[] args) &#123; Source source = new Source(); Targetable target = new Wrapper(source); target.method1(); target.method2(); &#125; &#125; 输出与第一种一样,只是适配的方法不同而已。 第三种适配器模式是接口的适配器模式,接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法,当我们写该接口的实现类时,必须实现该接口的所有方法,这明显有时比较浪费,因为并不是所有的方法都是我们需要的,有时只需要某一些,此处为了解决这个问题,我们引入了接口的适配器模式,借助于一个抽象类,该抽象类实现了该接口,实现了所有的方法,而我们不和原始的接口打交道,只和该抽象类取得联系,所以我们写一个类,继承该抽象类,重写我们需要的方法就行。看一下类图: 这个很好理解,在实际开发中,我们也常会遇到这种接口中定义了太多的方法,以致于有时我们在一些实现类中并不是都需要。看代码:12345public interface Sourceable &#123; public void method1(); public void method2(); &#125; 抽象类Wrapper2:12345public abstract class Wrapper2 implements Sourceable&#123; public void method1()&#123;&#125; public void method2()&#123;&#125; &#125; 12345public class SourceSub1 extends Wrapper2 &#123; public void method1()&#123; System.out.println("the sourceable interface's first Sub1!"); &#125; &#125; 12345public class SourceSub2 extends Wrapper2 &#123; public void method2()&#123; System.out.println("the sourceable interface's second Sub2!"); &#125; &#125; 123456789101112public class WrapperTest &#123; public static void main(String[] args) &#123; Sourceable source1 = new SourceSub1(); Sourceable source2 = new SourceSub2(); source1.method1(); source1.method2(); source2.method1(); source2.method2(); &#125; &#125; 测试输出：the sourceable interface&#39;s first Sub1! the sourceable interface&#39;s second Sub2!达到了我们的效果！讲了这么多,总结一下三种适配器模式的应用场景：类的适配器模式：当希望将一个类转换成满足另一个新接口的类时,可以使用类的适配器模式,创建一个新类,继承原有的类,实现新的接口即可。对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时,可以创建一个Wrapper类,持有原类的一个实例,在Wrapper类的方法中,调用实例的方法就行。接口的适配器模式：当不希望实现一个接口中所有的方法时,可以创建一个抽象类Wrapper,实现所有方法,我们写别的类的时候,继承抽象类即可。 7. 装饰模式（Decorator）顾名思义,装饰模式就是给一个对象增加一些新的功能,而且是动态的,要求装饰对象和被装饰对象实现同一个接口,装饰对象持有被装饰对象的实例,关系图如下: Source类是被装饰类,Decorator类是一个装饰类,可以为Source类动态的添加一些功能,代码如下:123public interface Sourceable &#123; public void method(); &#125; 1234567public class Source implements Sourceable &#123; @Override public void method() &#123; System.out.println("the original method!"); &#125; &#125; 123456789101112131415public class Decorator implements Sourceable &#123; private Sourceable source; public Decorator(Sourceable source)&#123; super(); this.source = source; &#125; @Override public void method() &#123; System.out.println("before decorator!"); source.method(); System.out.println("after decorator!"); &#125; &#125; 测试类:12345678public class DecoratorTest &#123; public static void main(String[] args) &#123; Sourceable source = new Source(); Sourceable obj = new Decorator(source); obj.method(); &#125; &#125; 输出：before decorator! the original method! after decorator! 装饰器模式的应用场景： 需要扩展一个类的功能。 动态的为一个对象增加功能,而且还能动态撤销。(继承不能做到这一点,继承的功能是静态的,不能动态增删。) 缺点：产生过多相似的对象,不易排错！ 8. 代理模式(Proxy)其实每个模式名称就表明了该模式的作用,代理模式就是多一个代理类出来,替原对象进行一些操作,比如我们在租房子的时候回去找中介,为什么呢？因为你对该地区房屋的信息掌握的不够全面,希望找一个更熟悉的人去帮你做,此处的代理就是这个意思。再如我们有的时候打官司,我们需要请律师,因为律师在法律方面有专长,可以替我们进行操作,表达我们的想法。先来看看关系图:根据上文的阐述,代理模式就比较容易的理解了,我们看下代码: 123public interface Sourceable &#123; public void method(); &#125; 1234567public class Source implements Sourceable &#123; @Override public void method() &#123; System.out.println("the original method!"); &#125; &#125; 1234567891011121314151617181920public class Proxy implements Sourceable &#123; private Source source; public Proxy()&#123; super(); this.source = new Source(); &#125; @Override public void method() &#123; before(); source.method(); atfer(); &#125; private void atfer() &#123; System.out.println("after proxy!"); &#125; private void before() &#123; System.out.println("before proxy!"); &#125; &#125; 测试类:12345678public class ProxyTest &#123; public static void main(String[] args) &#123; Sourceable source = new Proxy(); source.method(); &#125; &#125; 输出：before proxy! the original method! after proxy! 代理模式的应用场景:如果已有的方法在使用的时候需要对原有的方法进行改进,此时有两种办法： 修改原有的方法来适应。这样违反了“对扩展开放,对修改关闭”的原则。 就是采用一个代理类调用原有的方法,且对产生的结果进行控制。这种方法就是代理模式。使用代理模式,可以将功能划分的更加清晰,有助于后期维护！ 9、外观模式(Facade)外观模式是为了解决类与类之家的依赖关系的,像spring一样,可以将类和类之间的关系配置到配置文件中,而外观模式就是将他们的关系放在一个Facade类中,降低了类类之间的耦合度,该模式中没有涉及到接口,看下类图:(我们以一个计算机的启动过程为例) 我们先看下实现类:12345678910public class CPU &#123; public void startup()&#123; System.out.println("cpu startup!"); &#125; public void shutdown()&#123; System.out.println("cpu shutdown!"); &#125; &#125; 12345678910public class CPU &#123; public void startup()&#123; System.out.println("cpu startup!"); &#125; public void shutdown()&#123; System.out.println("cpu shutdown!"); &#125; &#125; 12345678910public class Disk &#123; public void startup()&#123; System.out.println("disk startup!"); &#125; public void shutdown()&#123; System.out.println("disk shutdown!"); &#125; &#125; 123456789101112131415161718192021222324252627public class Computer &#123; private CPU cpu; private Memory memory; private Disk disk; public Computer()&#123; cpu = new CPU(); memory = new Memory(); disk = new Disk(); &#125; public void startup()&#123; System.out.println("start the computer!"); cpu.startup(); memory.startup(); disk.startup(); System.out.println("start computer finished!"); &#125; public void shutdown()&#123; System.out.println("begin to close the computer!"); cpu.shutdown(); memory.shutdown(); disk.shutdown(); System.out.println("computer closed!"); &#125; &#125; User类如下:12345678public class User &#123; public static void main(String[] args) &#123; Computer computer = new Computer(); computer.startup(); computer.shutdown(); &#125; &#125; 输出:start the computer! cpu startup! memory startup! disk startup! start computer finished! begin to close the computer! cpu shutdown! memory shutdown! disk shutdown! computer closed! 如果我们没有Computer类,那么,CPU、Memory、Disk他们之间将会相互持有实例,产生关系,这样会造成严重的依赖,修改一个类,可能会带来其他类的修改,这不是我们想要看到的,有了Computer类,他们之间的关系被放在了Computer类里,这样就起到了解耦的作用,这,就是外观模式！ 桥接模式(Bridge)桥接模式就是把事物和其具体实现分开,使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦,使得二者可以独立变化,像我们常用的JDBC桥DriverManager一样,JDBC进行连接数据库的时候,在各个数据库之间进行切换,基本不需要动太多的代码,甚至丝毫不用动,原因就是JDBC提供统一接口,每个数据库提供各自的实现,用一个叫做数据库驱动的程序来桥接就行了。我们来看看关系图:实现代码:先定义接口:123public interface Sourceable &#123; public void method(); &#125; 分别定义两个实现类: 1234567public class SourceSub1 implements Sourceable &#123; @Override public void method() &#123; System.out.println("this is the first sub!"); &#125; &#125; 1234567public class SourceSub2 implements Sourceable &#123; @Override public void method() &#123; System.out.println("this is the second sub!"); &#125; &#125; 定义一个桥,持有Sourceable的一个实例:123456789101112131415public abstract class Bridge &#123; private Sourceable source; public void method()&#123; source.method(); &#125; public Sourceable getSource() &#123; return source; &#125; public void setSource(Sourceable source) &#123; this.source = source; &#125; &#125; 12345public class MyBridge extends Bridge &#123; public void method()&#123; getSource().method(); &#125; &#125; 测试类:1234567891011121314151617public class BridgeTest &#123; public static void main(String[] args) &#123; Bridge bridge = new MyBridge(); /*调用第一个对象*/ Sourceable source1 = new SourceSub1(); bridge.setSource(source1); bridge.method(); /*调用第二个对象*/ Sourceable source2 = new SourceSub2(); bridge.setSource(source2); bridge.method(); &#125; &#125; output：this is the first sub! this is the second sub!这样,就通过对Bridge类的调用,实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。接下来我再画个图,大家就应该明白了,因为这个图是我们JDBC连接的原理,有数据库学习基础的,一结合就都懂了。 11. 组合模式（Composite）组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便,看看关系图： 直接来看代码: 直接来看代码:1234567891011121314151617181920212223242526272829303132333435363738394041public class TreeNode &#123; private String name; private TreeNode parent; private Vector&lt;TreeNode&gt; children = new Vector&lt;TreeNode&gt;(); public TreeNode(String name)&#123; this.name = name; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public TreeNode getParent() &#123; return parent; &#125; public void setParent(TreeNode parent) &#123; this.parent = parent; &#125; //添加孩子节点 public void add(TreeNode node)&#123; children.add(node); &#125; //删除孩子节点 public void remove(TreeNode node)&#123; children.remove(node); &#125; //取得孩子节点 public Enumeration&lt;TreeNode&gt; getChildren()&#123; return children.elements(); &#125; &#125; 123456789101112131415161718public class Tree &#123; TreeNode root = null; public Tree(String name) &#123; root = new TreeNode(name); &#125; public static void main(String[] args) &#123; Tree tree = new Tree("A"); TreeNode nodeB = new TreeNode("B"); TreeNode nodeC = new TreeNode("C"); nodeB.add(nodeC); tree.root.add(nodeB); System.out.println("build the tree finished!"); &#125; &#125; 使用场景: 将多个对象组合在一起进行操作,常用于表示树形结构中,例如二叉树,数等。 12. 享元模式(Flyweight)享元模式的主要目的是实现对象的共享,即共享池,当系统中对象多的时候可以减少内存的开销,通常与工厂模式一起使用。 FlyWeightFactory负责创建和管理享元单元,当一个客户端请求时,工厂需要检查当前对象池中是否有符合条件的对象,如果有,就返回已经存在的对象,如果没有,则创建一个新对象,FlyWeight是超类。一提到共享池,我们很容易联想到Java里面的JDBC连接池,想想每个连接的特点,我们不难总结出：适用于作共享的一些个对象,他们有一些共有的属性,就拿数据库连接池来说,url、driverClassName、username、password及dbname,这些属性对于每个连接来说都是一样的,所以就适合用享元模式来处理,建一个工厂类,将上述类似属性作为内部数据,其它的作为外部数据,在方法调用时,当做参数传进来,这样就节省了空间,减少了实例的数量。看个例子: 看下数据库连接池的代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class ConnectionPool &#123; private Vector&lt;Connection&gt; pool; /*公有属性*/ private String url = "jdbc:mysql://localhost:3306/test"; private String username = "root"; private String password = "root"; private String driverClassName = "com.mysql.jdbc.Driver"; private int poolSize = 100; private static ConnectionPool instance = null; Connection conn = null; /*构造方法,做一些初始化工作*/ private ConnectionPool() &#123; pool = new Vector&lt;Connection&gt;(poolSize); for (int i = 0; i &lt; poolSize; i++) &#123; try &#123; Class.forName(driverClassName); conn = DriverManager.getConnection(url, username, password); pool.add(conn); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /* 返回连接到连接池 */ public synchronized void release() &#123; pool.add(conn); &#125; /* 返回连接池中的一个数据库连接 */ public synchronized Connection getConnection() &#123; if (pool.size() &gt; 0) &#123; Connection conn = pool.get(0); pool.remove(conn); return conn; &#125; else &#123; return null; &#125; &#125; &#125; 通过连接池的管理,实现了数据库连接的共享,不需要每一次都重新创建连接,节省了数据库重新创建的开销,提升了系统的性能！]]></content>
      <categories>
        <category>Java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中的23种设计模式(一)]]></title>
    <url>%2F2017%2F12%2F23%2FJava%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[本文转自:http://blog.csdn.net/zhangerqing 设计模式（Design Patterns）设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问,设计模式于己于他人于系统都是多赢的,设计模式使代码编制真正工程化,设计模式是软件工程的基石,如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题,每种模式在现在中都有相应的原理来与之对应,每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的核心解决方案,这也是它能被广泛应用的原因 设计模式的分类总体来说设计模式分为三大类： 创建型模式5种 结构型模式7种 行为型模式11种 其他(2种) 工厂方法模式 适配器模式 策略模式 并发型模式 抽象工厂模式 装饰器模式 策略模式 线程池模式 单例模式 代理模式 模板方法模式 建造者模式 桥接模式 观察者模式 原型模式 组合模式 迭代子模式 享元模式 责任链模式 命令模式 备忘录模式 状态模式 访问者模式 中介者模式 解释器模式 用一个图片来整体描述一下： 设计模式的六大原则 开闭原则（Open Close Principle）开闭原则就是说对扩展开放,对修改关闭。在程序需要进行拓展的时候,不能去修改原有的代码,实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好,易于维护和升级。想要达到这样的效果,我们需要使用接口和抽象类,后面的具体设计中我们会提到这点。 里氏代换原则（Liskov Substitution Principle）里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说,任何基类可以出现的地方,子类一定可以出现。 LSP是继承复用的基石,只有当衍生类可以替换掉基类,软件单位的功能不受到影响时,基类才能真正被复用,而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现,所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科 依赖倒转原则（Dependence Inversion Principle）这个是开闭原则的基础,具体内容：真对接口编程,依赖于抽象而不依赖于具体。 接口隔离原则（Interface Segregation Principle）这个原则的意思是：使用多个隔离的接口,比使用单个接口要好。还是一个降低类之间的耦合度的意思,从这儿我们看出,其实设计模式就是一个软件的设计思想,从大型软件架构出发,为了升级和维护方便。所以上文中多次出现：降低依赖,降低耦合。 迪米特法则（最少知道原则）（Demeter Principle）为什么叫最少知道原则,就是说：一个实体应当尽量少的与其他实体之间发生相互作用,使得系统功能模块相对独立。 合成复用原则（Composite Reuse Principle）原则是尽量使用合成/聚合的方式,而不是使用继承。 Java的23中设计模式从这一块开始,我们详细介绍Java中23种设计模式的概念,应用场景等情况,并结合他们的特点及设计模式的原则进行分析。 1. 工厂方法模式(Factory Method)就是建立一个工厂类,对实现了同一接口的一些类进行实例的创建。首先看下关系图： 举例如下：（我们举一个发送邮件和短信的例子）首先,创建二者的共同接口: 123public interface Sender &#123; public void Send(); &#125; 其次,创建实现类: 123456public class MailSender implements Sender &#123; @Override public void Send() &#123; System.out.println("this is mailsender!"); &#125;&#125; 1234567public class SmsSender implements Sender &#123; @Override public void Send() &#123; System.out.println("this is sms sender!"); &#125; &#125; 最后,建工厂类: 12345678910111213public class SendFactory &#123; public Sender produce(String type) &#123; if ("mail".equals(type)) &#123; return new MailSender(); &#125; else if ("sms".equals(type)) &#123; return new SmsSender(); &#125; else &#123; System.out.println("请输入正确的类型!"); return null; &#125; &#125; &#125; 我们来测试下:12345678public class FactoryTest &#123; public static void main(String[] args) &#123; SendFactory factory = new SendFactory(); Sender sender = factory.produce("sms"); sender.Send(); &#125; &#125; 输出: this is sms sender! 2. 多个工厂方法模式 是对普通工厂方法模式的改进,在普通工厂方法模式中,如果传递的字符串出错,则不能正确创建对象,而多个工厂方法模式是提供多个工厂方法,分别创建对象。关系图： 将上面的代码做下修改,改动下SendFactory类就行,如下:12345678910public class SendFactory &#123; public Sender produceMail()&#123; return new MailSender(); &#125; public Sender produceSms()&#123; return new SmsSender(); &#125; &#125; 测试类如下:12345678public class FactoryTest &#123; public static void main(String[] args) &#123; SendFactory factory = new SendFactory(); Sender sender = factory.produceMail(); sender.Send(); &#125; &#125; 输出：this is mailsender! 3. 静态工厂方法模式 将上面的多个工厂方法模式里的方法置为静态的,不需要创建实例,直接调用即可。 12345678910public class SendFactory &#123; public static Sender produceMail()&#123; return new MailSender(); &#125; public static Sender produceSms()&#123; return new SmsSender(); &#125; &#125; 1234567public class FactoryTest &#123; public static void main(String[] args) &#123; Sender sender = SendFactory.produceMail(); sender.Send(); &#125; &#125; 输出：this is mailsender! 总体来说,工厂模式适合：凡是出现了大量的产品需要创建,并且具有共同的接口时,可以通过工厂方法模式进行创建。在以上的三种模式中,第一种如果传入的字符串有误,不能正确创建对象,第三种相对于第二种,不需要实例化工厂类,所以,大多数情况下,我们会选用第三种——静态工厂方法模式。 2. 抽象工厂模式（Abstract Factory） 工厂方法模式有一个问题就是,类的创建依赖工厂类,也就是说,如果想要拓展程序,必须对工厂类进行修改,这违背了闭包原则,所以,从设计角度考虑,有一定的问题,如何解决？就用到抽象工厂模式,创建多个工厂类,这样一旦需要增加新的功能,直接增加新的工厂类就可以了,不需要修改之前的代码。因为抽象工厂不太好理解,我们先看看图,然后就和代码,就比较容易理解。 请看例子: 123public interface Sender &#123; public void Send(); &#125; 两个实现类:123456public class MailSender implements Sender &#123; @Override public void Send() &#123; System.out.println("this is mailsender!"); &#125; &#125; 两个工厂类:1234567public class SendMailFactory implements Provider &#123; @Override public Sender produce()&#123; return new MailSender(); &#125; &#125; 1234567public class SendSmsFactory implements Provider&#123; @Override public Sender produce() &#123; return new SmsSender(); &#125; &#125; 在提供一个接口:123public interface Provider &#123; public Sender produce(); &#125; 测试类: 12345678public class Test &#123; public static void main(String[] args) &#123; Provider provider = new SendMailFactory(); Sender sender = provider.produce(); sender.Send(); &#125; &#125; 其实这个模式的好处就是,如果你现在想增加一个功能：发及时信息,则只需做一个实现类,实现Sender接口,同时做一个工厂类,实现Provider接口,就OK了,无需去改动现成的代码。这样做,拓展性较好！ 3. 单例模式（Singleton）单例对象（Singleton）是一种常用的设计模式。在Java应用中,单例对象能保证在一个JVM中,该对象只有一个实例存在。这样的模式有几个好处： 某些类创建比较频繁,对于一些大型的对象,这是一笔很大的系统开销。 省去了new操作符,降低了系统内存的使用频率,减轻GC压力。 有些类如交易所的核心交易引擎,控制着交易流程,如果该类可以创建多个的话,系统完全乱了。（比如一个军队出现了多个司令员同时指挥,肯定会乱成一团）,所以只有使用单例模式,才能保证核心交易服务器独立控制整个流程。 首先我们写一个简单的单例类：12345678910111213141516171819202122public class Singleton &#123; /* 持有私有静态实例,防止被引用,此处赋值为null,目的是实现延迟加载 */ private static Singleton instance = null; /* 私有构造方法,防止被实例化 */ private Singleton() &#123; &#125; /* 静态工程方法,创建实例 */ public static Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125; /* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */ public Object readResolve() &#123; return instance; &#125; &#125; 这个类可以满足基本要求,但是,像这样毫无线程安全保护的类,如果我们把它放入多线程的环境下,肯定就会出现问题了,如何解决？我们首先会想到对getInstance方法加synchronized关键字,如下:123456789101112131415161718192021public static synchronized Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125;``但是,synchronized关键字锁住的是这个对象,这样的用法,在性能上会有所下降,因为每次调用getInstance(),都要对对象上锁,事实上,只有在第一次创建对象的时候需要加锁,之后就不需要了,所以,这个地方需要改进。我们改成下面这个：```javapublic static Singleton getInstance() &#123; if (instance == null) &#123; synchronized (instance) &#123; if (instance == null) &#123; instance = new Singleton(); &#125; &#125; &#125; return instance; &#125; 似乎解决了之前提到的问题,将synchronized关键字加在了内部,也就是说当调用的时候是不需要加锁的,只有在instance为null,并创建对象的时候才需要加锁,性能有一定的提升。但是,这样的情况,还是有可能有问题的,看下面的情况：在Java指令中创建对象和赋值操作是分开进行的,也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序,也就是说有可能JVM会为新的Singleton实例分配空间,然后直接赋值给instance成员,然后再去初始化这个Singleton实例。这样就可能出错了,我们以A、B两个线程为例：a&gt;A、B线程同时进入了第一个if判断b&gt;A首先进入synchronized块,由于instance为null,所以它执行instance = newSingleton();c&gt;由于JVM内部的优化机制,JVM先画出了一些分配给Singleton实例的空白内存,并赋值给instance成员（注意此时JVM没有开始初始化这个实例）,然后A离开了synchronized块。d&gt;B进入synchronized块,由于instance此时不是null,因此它马上离开了synchronized块并将结果返回给调用该方法的程序。e&gt;此时B线程打算使用Singleton实例,却发现它没有被初始化,于是错误发生了。所以程序还是有可能发生错误,其实程序在运行过程是很复杂的,从这点我们就可以看出,尤其是在写多线程环境下的程序更有难度,有挑战性。我们对该程序做进一步优化：123456private static class SingletonFactory&#123; private static Singleton instance = new Singleton(); &#125; public static Singleton getInstance()&#123; return SingletonFactory.instance; &#125; 实际情况是,单例模式使用内部类来维护单例的实现,JVM内部的机制能够保证当一个类被加载的时候,这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候,JVM能够帮我们保证instance只被创建一次,并且会保证把赋值给instance的内存初始化完毕,这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制,这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式: 123456789101112131415161718192021public class Singleton &#123; /* 私有构造方法,防止被实例化 */ private Singleton() &#123; &#125; /* 此处使用一个内部类来维护单例 */ private static class SingletonFactory &#123; private static Singleton instance = new Singleton(); &#125; /* 获取实例 */ public static Singleton getInstance() &#123; return SingletonFactory.instance; &#125; /* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */ public Object readResolve() &#123; return getInstance(); &#125; &#125; 其实说它完美,也不一定,如果在构造函数中抛出异常,实例将永远得不到创建,也会出错。所以说,十分完美的东西是没有的,我们只能根据实际情况,选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步,所以只要将创建和getInstance()分开,单独为创建加synchronized关键字,也是可以的:1234567891011121314151617181920public class SingletonTest &#123; private static SingletonTest instance = null; private SingletonTest() &#123; &#125; private static synchronized void syncInit() &#123; if (instance == null) &#123; instance = new SingletonTest(); &#125; &#125; public static SingletonTest getInstance() &#123; if (instance == null) &#123; syncInit(); &#125; return instance; &#125; &#125; 考虑性能的话,整个程序只需创建一次实例,所以性能也不会有什么影响。补充：采用”影子实例”的办法为单例对象的属性同步更新 123456789101112131415161718192021222324252627282930public class SingletonTest &#123; private static SingletonTest instance = null; private Vector properties = null; public Vector getProperties() &#123; return properties; &#125; private SingletonTest() &#123; &#125; private static synchronized void syncInit() &#123; if (instance == null) &#123; instance = new SingletonTest(); &#125; &#125; public static SingletonTest getInstance() &#123; if (instance == null) &#123; syncInit(); &#125; return instance; &#125; public void updateProperties() &#123; SingletonTest shadow = new SingletonTest(); properties = shadow.getProperties(); &#125; &#125; 通过单例模式的学习告诉我们： 单例模式理解起来简单,但是具体实现起来还是有一定的难度。 synchronized关键字锁定的是对象,在用的时候,一定要在恰当的地方使用（注意需要使用锁的对象和过程,可能有的时候并不是整个对象及整个过程都需要锁）。 到这儿,单例模式基本已经讲完了,结尾处,笔者突然想到另一个问题,就是采用类的静态方法,实现单例模式的效果,也是可行的,此处二者有什么不同？首先,静态类不能实现接口。（从类的角度说是可以的,但是那样就破坏了静态了。因为接口中不允许有static修饰的方法,所以即使实现了也是非静态的）其次,单例可以被延迟初始化,静态类一般在第一次加载是初始化。之所以延迟加载,是因为有些类比较庞大,所以延迟加载有助于提升性能。再次,单例类可以被继承,他的方法可以被覆写。但是静态类内部方法都是static,无法被覆写。最后一点,单例类比较灵活,毕竟从实现上只是一个普通的Java类,只要满足单例的基本需求,你可以在里面随心所欲的实现一些其它功能,但是静态类不行。从上面这些概括中,基本可以看出二者的区别,但是,从另一方面讲,我们上面最后实现的那个单例模式,内部就是用一个静态类来实现的,所以,二者有很大的关联,只是我们考虑问题的层面不同罢了。两种思想的结合,才能造就出完美的解决方案,就像HashMap采用数组+链表来实现一样,其实生活中很多事情都是这样,单用不同的方法来处理问题,总是有优点也有缺点,最完美的方法是,结合各个方法的优点,才能最好的解决问题！ 4. 建造者模式(Builder)工厂类模式提供的是创建单个类的模式,而建造者模式则是将各种产品集中起来进行管理,用来创建复合对象,所谓复合对象就是指某个类具有不同的属性,其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：还和前面一样,一个Sender接口,两个实现类MailSender和SmsSender。最后,建造者类如下： 12345678910111213141516public class Builder &#123; private List&lt;Sender&gt; list = new ArrayList&lt;Sender&gt;(); public void produceMailSender(int count)&#123; for(int i=0; i&lt;count; i++)&#123; list.add(new MailSender()); &#125; &#125; public void produceSmsSender(int count)&#123; for(int i=0; i&lt;count; i++)&#123; list.add(new SmsSender()); &#125; &#125; &#125; 测试类: 1234567public class Test &#123; public static void main(String[] args) &#123; Builder builder = new Builder(); builder.produceMailSender(10); &#125; &#125; 从这点看出,建造者模式将很多功能集成到一个类里,这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品,而建造者模式则关注创建符合对象,多个部分。因此,是选择工厂模式还是建造者模式,依实际情况而定。 5. 原型模式(Prototype) 原型模式虽然是创建型的模式,但是与工程模式没有关系,从名字即可看出,该模式的思想就是将一个对象作为原型,对其进行复制、克隆,产生一个和原对象类似的新对象。本小结会通过对象的复制,进行讲解。在Java中,复制对象是通过clone()实现的,先创建一个原型类： 1234567public class Prototype implements Cloneable &#123; public Object clone() throws CloneNotSupportedException &#123; Prototype proto = (Prototype) super.clone(); return proto; &#125; &#125; 很简单,一个原型类,只需要实现Cloneable接口,覆写clone方法,此处clone方法可以改成任意的名称,因为Cloneable接口是个空接口,你可以任意定义实现类的方法名,如cloneA或者cloneB,因为此处的重点是 super.clone()这句话,super.clone()调用的是 Object 的 clone() 方法,而在Object类中,clone()是native的,具体怎么实现,我会在另一篇文章中,关于解读Java中本地方法的调用,此处不再深究。在这儿,我将结合对象的浅复制和深复制来说一下,首先需要了解对象深、浅复制的概念： 浅复制：将一个对象复制后,基本数据类型的变量都会重新创建,而引用类型,指向的还是原对象所指向的。 深复制：将一个对象复制后,不论是基本数据类型还有引用类型,都是重新创建的。简单来说,就是深复制进行了完全彻底的复制,而浅复制不彻底。此处,写一个深浅复制的例子： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class Prototype implements Cloneable, Serializable &#123; private static final long serialVersionUID = 1L; private String string; private SerializableObject obj; /* 浅复制 */ public Object clone() throws CloneNotSupportedException &#123; Prototype proto = (Prototype) super.clone(); return proto; &#125; /* 深复制 */ public Object deepClone() throws IOException, ClassNotFoundException &#123; /* 写入当前对象的二进制流 */ ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(this); /* 读出二进制流产生的新对象 */ ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); ObjectInputStream ois = new ObjectInputStream(bis); return ois.readObject(); &#125; public String getString() &#123; return string; &#125; public void setString(String string) &#123; this.string = string; &#125; public SerializableObject getObj() &#123; return obj; &#125; public void setObj(SerializableObject obj) &#123; this.obj = obj; &#125; &#125; class SerializableObject implements Serializable &#123; private static final long serialVersionUID = 1L; &#125; 要实现深复制,需要采用流的形式读入当前对象的二进制输入,再写出二进制数据对应的对象。]]></content>
      <categories>
        <category>Java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaReview-day07]]></title>
    <url>%2F2017%2F12%2F18%2FJavaReview-day07%2F</url>
    <content type="text"><![CDATA[继承特点: 提高了代码的复用性; 让类与类之间产生了关系. 有了这个关系, 才有了多态的特性; Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患 重写(覆盖) 当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父类的函数被覆盖一样. 当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容. 子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败. 静态只能覆盖静态 如果父类中的方法权限为private, 则子类无法重写该方法. 重写和重载的区别 重载: 只看同名函数的参数列表 重写: 子父类方法要一模一样 子父类中构造函数的特点12345678910111213141516class Father&#123; Father()&#123; System.out.println("Father run |"); &#125;&#125;class Son extends Parent &#123; Sun()&#123; // super(); System.out.println("Son run |"); &#125;&#125;class Demo&#123; public static void main(String[] args) &#123; Son s = new Son(); &#125;&#125; 以上程序的运行结果为 Father run | Son run | ; 子类中的构造函数第一行会隐式的存在一句 super() 默认调用父类中默认的构造方法; 如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 super(xxx)手动的来指定父类中特定的构造函数; 注意 super() 语句一定是在子类构造函数的第一行 12345678910111213141516171819202122232425262728 public class TestExtend &#123; public static void main(String[] args) &#123; Son s = new Son(4); &#125; &#125; class Father&#123; public int m; Father()&#123; m = 2; System.out.println("Father Run"); &#125; Father(int x)&#123; m = 6; System.out.println("TTTT"); &#125; &#125; class Son extends Father&#123; Son()&#123; this(4); System.out.println(this.m); System.out.println("Son run"); &#125; Son(int x)&#123; this(); System.out.println("MMMM"); &#125;&#125; 以上代码会出现编译错误, 错误原因为 recursive constructor invocation意思为‘构造器中出现了递归调用, 这是不被允许的‘; final 关键字 final: 最终. 作为一个修饰符; 作用及特点 可以修饰类, 函数, 变量; 被 final 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能; 被 final 修饰的方法不可以被复写; 被 final 修饰的变量是一个常量且只能赋值一次; final 既可以修饰成员变量, 又可以修饰局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值起个名字, 方便与阅读; 内部类定义在类中的局部位置上时, 只能访问局部被 final 修饰的局部变量; 抽象类(abstract) 特点: 抽象方法一定定义在抽象类中; 抽象方法和抽象类都必须被 abstract 关键字修饰; 抽象类不可以用 new 创建对象, 因为调用抽象方法没有意义; 抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, 如果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类 抽象类和一般类的区别: 抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法; 抽象类不可以实例化; 特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象; abstract 只可以修饰类和方法, 不能修饰变量; 接口 接口定义时的格式特点: 接口转中常见定义: 常量, 抽象方法; 接口中的成员变量都有固定修饰符: 常量:public static final 方法:public abstract 接口是不可以创建对象的, 因为接口中有抽象方法 接口需要被子类实现子类对接口的抽象方法全部覆盖后, 子类才可以实例化 接口可以被类多实现, 也是对不支持多继承的转换形式, Java支持多实现; 接口与接口之间可以实现多继承1234567891011121314151617interface A&#123; void showA();&#125;interface B extends A &#123; void showB();&#125;interface C extends B &#123; void showC();&#125;class D implements C &#123; public void showA()&#123;&#125;; public void showB()&#123;&#125;; public void showC()&#123;&#125;;&#125; 注意:接口与接口之间的继承中, 被继承的接口中不能含有名字相同, 返回值不同的方法;1234567891011121314151617181920```javainterface A&#123; void showA(); int test();&#125;interface B &#123; void showB(); //void test();//错误的写法&#125;interface C extends A, B &#123; void showC();&#125;class D implements C &#123; public void showA()&#123;&#125;; public void showB()&#123;&#125;; public void showC()&#123;&#125;;&#125;]]></content>
      <categories>
        <category>JavaReview</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub Pages绑定域名]]></title>
    <url>%2F2017%2F12%2F17%2FGitHub%20Pages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述 购买域名如果嫌麻烦可以在Godaddy 购买也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程 选购域名 可以在此页面搜索你喜欢的域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考知乎答案 推荐使用.me 域名解析更换域名服务器 Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用DNSPot解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到Godaddy 的域名服务器注意: 在GoDaddy中配置的为”f1g1ns1.dnspod.net”, 为没有”f1g1ns1.dnspod.net.”要去掉最后的 . GitHub中的域名支持 GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示 现在github的服务器地址为： 192.30.252.153 192.30.252.154 添加CNAME文件在你的博客仓库中下的 /source 目录中添加名为 CNAME的文件, 在文件中写入你在GoDaddy注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FTP storFile返回false 解决方法]]></title>
    <url>%2F2017%2F12%2F04%2FFTPClient.storFile%E8%BF%94%E5%9B%9Efalse-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[本文参考地址 错误描述 自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false 解决方法 添加以下代码即可 1ftpClient.setControlEncoding(&quot;UTF-8&quot;);]]></content>
      <categories>
        <category>Exception</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次Redis连接用尽异常解决]]></title>
    <url>%2F2017%2F12%2F01%2F%E8%AE%B0%E4%B8%80%E6%AC%A1Redis%E8%BF%9E%E6%8E%A5%E7%94%A8%E5%B0%BD%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[不知怎么突然jedis出现 “Could not get a resource from the pool” 错误,错误原因是连接池中的链接用尽 解决方法:12345678redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool at redis.clients.util.Pool.getResource(Pool.java:22) at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22) at java.lang.Thread.run(Thread.java:662) Caused by: java.util.NoSuchElementException: Timeout waiting for idle object at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134) at redis.clients.util.Pool.getResource(Pool.java:20) ... 2 more 增加 Jedis 的活动连接数:12345678910111213141516171819202122&lt;bean id=&quot;jedisPoolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt; &lt;!-- 最大连接数 --&gt; &lt;property name=&quot;maxTotal&quot; value=&quot;300&quot; /&gt; &lt;!-- 最大空闲连接数 --&gt; &lt;property name=&quot;maxIdle&quot; value=&quot;50&quot; /&gt; &lt;!-- 每次释放连接的最大数目 --&gt; &lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;1024&quot; /&gt; &lt;!-- 释放连接的扫描间隔（毫秒） --&gt; &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;30000&quot; /&gt; &lt;!-- 连接最小空闲时间 --&gt; &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;1800000&quot; /&gt; &lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt; &lt;property name=&quot;softMinEvictableIdleTimeMillis&quot; value=&quot;10000&quot; /&gt; &lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt; &lt;property name=&quot;maxWaitMillis&quot; value=&quot;1500&quot; /&gt; &lt;!-- 在获取连接的时候检查有效性, 默认false --&gt; &lt;property name=&quot;testOnBorrow&quot; value=&quot;true&quot; /&gt; &lt;!-- 在空闲时检查有效性, 默认false --&gt; &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt; &lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt; &lt;property name=&quot;blockWhenExhausted&quot; value=&quot;false&quot; /&gt; &lt;/bean&gt; 将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放. 使用 jedis.close(); 释放资源后问题解决, 修改前的代码:12345public String get(String key) &#123; Jedis jedis = jedisPool.getResource(); String get = jedis.get(key); return get; &#125; 修改后的代码:123456public String get(String key) &#123; Jedis jedis = jedisPool.getResource(); String get = jedis.get(key); jedis.close(); return get; &#125;]]></content>
      <categories>
        <category>Exception</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Redis</tag>
        <tag>Jedis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaReview-day06]]></title>
    <url>%2F2017%2F11%2F30%2FJavaReview-day06%2F</url>
    <content type="text"><![CDATA[Java复习第6天static 关键字static 的特点: 内存特点 存储位置: data segment(数据区 [也叫 共享区/方法区]); 可以通过 “类名.静态成员” 的方式调用; 随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长); 优先于对象存在(加载); 被所有对象所共享 只有数据被多个对象共享是才适合定义静态 可以直接被类名调用 静态变量和非静态变量的举例123456789class Person&#123; String name;//成员变量，实例变量 static String country = "CN";//静态变量。类变量 public void show()&#123; System.out.println(Person.country+":"+this.name); &#125; &#125; 静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量 静态变量和非静态变量的访问权限的不同 static方法只能访问static的变量，没有权限访问非static变量。 static方法中声明的变量可以与非static变量并且是类的属性重名 方法中声明的变量可以与非static变量并且是类的属性重名 非static方法中可以方访问static变量。 static方法可以访问static属性 实例变量(静态变量)和类变量(非静态变量)的区别 存放位置: 类变量随着类的加载而存在于方法区中; 实例变量随着对象的建立而存在于堆内存中; 生命周期: 类变量的生命周期最长,随着类的消失而消失; 实例变量随着对象的消失而消失; 静态使用注意事项 静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员; 静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this; 主函数(main) 也是静态的; main()函数 主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用; 主函数的定义: public: 代表着该函数访问权限是最大的; static: 代表主函数随着类的加载就已经存在了; void: 主函数没有具体的返回值; main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别; (String[] args): 函数的参数,参数类型是一个字符串类型的数组; 主函数的格式是固定的: JVM 可以识别的; JVM 在调用主函数时, 传入的参数是 new String[0]; 可以在通过命令行运行时使用以下方式向 main 函数中传入参数: 1$java MainDemo hehe enen oo PS: 向 main 函数中传入 “hehe” “enen” “oo” 三个参数 1234567891011121314class MainDemo&#123; public static void main(String[] args) &#123; String[] arr = &#123;"hehe", "haha", "oo", "enen"&#125; TestMain.main(arr); &#125;&#125;class TestMain&#123; public static void main(String[] args) &#123; for(int x=0; x&lt;args.length; x++)&#123; System.out.println(args[x]); &#125; &#125;&#125; 静态的使用条件可以分为两部分(因为静态修饰的内容有成员变量和函数): 什么时候定义静态变量: 当对象中出现共享的数据时, 该数据被静态所修饰; 对象中的特有数据要定义成非静态, 存在于堆内存中; 什么时候定义静态方法: 当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的; JVM的编译特点 JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 class文件,如果没有, 再查找与其同名的 java文件,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错; 类加载的特点 只有用到类中的内容是, 类才被加载 123456789class Demo&#123; System.out.println("a");&#125;class TestDemo&#123; public static void main(String[] args) &#123; Demo demo = null; &#125;&#125; 以上代码执行后没有运行结果, 因为 TestDemo 中并没有实际用到 Demo 中的内容 Java 帮助文档Java注释常用标签实例 @see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。 @link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用”label”作为超链接文本而不用”See Also” @docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接 @inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中 @version 该标签格式如下： @version version-information 其中，”version-information”可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了”-version”标记，那么久可以从生成的HTML文档中提取出版本信息 @author 该标签的格式如下： @author author-information 其中，”author-information”,望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息 @since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本 @param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符 @throws 异常 @deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。 Java注释的使用顺序 @author (classes and interfaces only, required) @version (classes and interfaces only, required. See footnote 1) @param (methods and constructors only) @return (methods only) @exception (@throws is a synonym added in Javadoc 1.2) @see @since @serial (or @serialField or @serialData) @deprecated (see How and When To Deprecate APIs) 注意 一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致; 默认构造函数的权限是随着类的权限变化而变化的; 静态代码块 格式: 12345class&#123; static&#123; //静态代码块中的执行语句 &#125;&#125; 特点: 随着类的加载而执行, 且只执行一次; 作用: 用于给类初始化 应用: 类中各个代码块之间的执行顺序123456789101112131415161718192021222324 class StaticCode&#123; StaticCode()&#123; System.out.print("b "); &#125; static&#123; System.out.print("a "); &#125; &#123; System.out.print("c "); &#125; StaticCode(int x)&#123; System.out.print("d "); &#125; &#125;class StaticCodeDemo&#123; public static void main(String[] args) &#123; new StaticCode(4); &#125;&#125; 以上代码的输出结果是: a c d 原因: 静态代码块的作用是给类初始化的, 随着类的加载而执行, 且只执行一次; 构造代码块的作用是给对象(所有对象)初始化的,对象一建立就运行, 而且优先于构造函数执行; 构造函数的作用是给对应对象初始化 参考链接: Java中普通代码块，构造代码块，静态代码块区别及代码示例 总结 虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化 只有在调用new方法时才会创建类的实例 类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法 类实例销毁时候，首先销毁子类部分，再销毁父类部分 对象的初始化过程12345678910111213141516171819202122232425class class Person&#123; private int age; private String name = "Jack"; private static String country = "CN"; Person(String name, int age)&#123; this.name = name; this.age = age; &#125; public void speak() &#123; System.out.println("name=" + this.name + ", age="+age); &#125;&#125;class PersonDemo&#123; public static void main(String[] args) &#123; Person p = new Person("Tom", 20); &#125;&#125; 以上代码中 Person p = new Person(&quot;Tom&quot;, 20)执行时 Java 所完成的工作: 在栈内存中创建变量 ‘p’; 因为 “new” 用到了 “Person.class“, 所以先找到“Person.class“文件并加载到内存中 执行该类中的 static 代码块, 给 “Person 类“进行初始化 在堆内存中开辟空间, 并分配内存地址 在内存中建立对象的特有属性, 并进行默认初始化 对属性进行显示初始化 对对象进行构造代码块初始化 对对象进行对应的构造函数初始化 将内存地址赋给栈内存中的 ‘p’ 变量 对象调用成员过程单例设计模式例子下面是一个简单的单例设计模式的例子123456789101112131415class Single&#123; private Single()&#123;&#125; private static Single s = new Single(); private static Single getInstance()&#123; return s; &#125;&#125;class SingleDemo&#123; public static void main(String[] args) &#123; Single s = Single.getInstance(); &#125;&#125; 饿汉式12345678class Single&#123; private Single()&#123;&#125; private static Single single = new Single(); public static Single getInstance()&#123; return single; &#125;&#125; 懒汉式12345678910111213class Single&#123; private Single()&#123;&#125; private static Single single = null; public static Single getInstance()&#123; if (single == null) &#123; //如果在此卡住, 则会出现多个对象 single = new Single(); &#125; return single; &#125;&#125; 懒汉式和饿汉式的区别 饿汉式不管调不调用, 都会先加载对象, 而懒汉式则会在需要时才会进行加载对象 懒汉式最终解决方案12345678910111213141516class Single&#123; private Single()&#123;&#125; private static Single single = null; public static Single getInstance()&#123; if (single == null) &#123; synchronized(Single.class)&#123; if (single == null) &#123; single = new Single(); &#125; &#125; &#125; return single; &#125;&#125; 注意! 懒汉式加载会有安全性问题: 如果同时被多个对象同时调用, 则会出现多个对象 开发用饿汉式]]></content>
      <categories>
        <category>JavaReview</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javareview-day05]]></title>
    <url>%2F2017%2F11%2F29%2FJavareview-day05%2F</url>
    <content type="text"><![CDATA[Java 复习第五天封装 私有只是封装的一种表现形式 封装可以增加代码的健壮性 构造函数 对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作); 当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法; 当在类中定义了构造函数后,默认的构造函数就会消失; 构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能; 成员变量和局部变量作用范围 成员变量作用于整个类中, 局部变量作用于函数中或者语句中; 在内存中的位置: 成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在; 局部变量: 存在栈内存中其他区别成员变量都有默认值, 在不赋值的情况下也可以参与运算. 匿名对象 匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化 如果对一个对象进行多个成员调用, 必须给这个对象起个名字 匿名对象可以作为实际参数进行传递 构造代码块作用: 给对象进行初始化 特点: 对象一建立就运行, 而且优先于构造函数执行; 和构造函数的区别: 构造代码块是给所有对象进行统一初始化 构造函数是给对应的对象进行初始化 构造代码块中定义的事不同对象共性的初始化内容 构造代码块示例: 123456789class User&#123; private String name; //以下'&#123;&#125;'和其中的内容为构造代码块 &#123; private int id; &#125;&#125; this 关键字: this 代表的是本类对象, 即 this 所在函数所属对象的引用 this语句: 1this(xxx); 作用: this()用于构造函数之间的调用特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。 注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用 12345678910111213class Persion&#123; int age; String name; Persion()&#123; this(name); &#125; Persion(String name)&#123; this(); &#125;&#125;class test&#123; Persion p = new Persion();&#125; this 和 super 关键字的特点: this 和 super 关键字不能再 static 类型的方法或 static 的代码块中 原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用 原因2: 无法再静态代码中加载非静态的关键字]]></content>
      <categories>
        <category>JavaReview</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaReview-day04]]></title>
    <url>%2F2017%2F11%2F28%2FJavaReview-day04%2F</url>
    <content type="text"><![CDATA[数组 1. 数据类型分类: 基本数据类型, 引用数据类型 2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器 - 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放; - 堆内存: 1. 数组和对象,通过 new 建立的实例都存放在堆内存中; 2. 每一个实体都有内存地址值; 3. 实体中的变量都有默认的初始化值 4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收 数组的定义方式1. int[] arr = new int[5]; (推荐写法) 2. int arr[] = new int[5]; (与第一种意义相同) 3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式) 4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式) 数组排序选择排序1234567891011public void selectSort(int[] arr)&#123; for(int x = 0; x &lt; arr.length-1; x++)&#123; for(int y = x + 1; y &lt; arr.length; y++)&#123; if(arr[x] &gt; arr[y])&#123; int temp = arr[x]; arr[x] = arr[y]; arr[y] = temp; &#125; &#125; &#125;&#125; 说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置 冒泡排序123456789101112public void bubbleSort(int[] arr)&#123; for(int x = 0; x &lt; arr.length; x ++)&#123; for(int y = 0; y &lt; arr.length - x - 1; y ++)&#123; if(arr[y] &gt; arr[y + 1])&#123; int temp = arr[y]; arr[y] = arr[y + 1]; arr[y + 1] = temp; &#125; &#125; &#125;&#125; 说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置使用 java.util包中的 Array.sort(arr); 可以进行排序数组 将数组交换的方法进行封装12345public void swap(int[] arr, int a, int b)&#123; int temp = arr[a]; arr[b] = arr[a]; arr[b] = temp;&#125; 使用异或方式实现12345public void swap1(int arr, int a, int b)&#123; arr[b] = arr[b] ^ arr[a]; arr[a] = arr[b] ^ arr[a]; arr[b] = arr[b] ^ arr[a];&#125; 折半查找第一种方式1234567891011121314public int halfSearch (int[] arr, int key)&#123; int min = 0; int max = arr.length - 1; int mid = (min + max)/2; while(arr[mid] != key)&#123; if(key &lt; arr[mid])&#123; max = mid - 1; &#125;else if(key &gt; arr[mid])&#123; min = mid + 1; &#125; mid = (min + max)/2; &#125; return mid;&#125; 第二种方式1234567891011121314151617public int halfSearch2(int arr[], int key)&#123; int min = 0; int max = arr.length; while(min &lt;= max)&#123; mid = (min + max) &gt;&gt; 1; if(key &gt; arr[mid])&#123; min = mid + 1; &#125;else if(key &lt; arr[mid])&#123; max = mid -1; &#125;else&#123; return mid; &#125; return -1; &#125;&#125; 面试题:将一个数字插入一个有序数组, 插入后,保证数组有序; 思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入 十进制转二进制 123456789public void decimalToBinary() &#123; int num = 8; StringBuffer sb = new StringBuffer(); while (num &gt; 0) &#123; sb.append(num % 2); num = num / 2; &#125; System.out.println(sb.reverse()); &#125; 十进制转十六进制 第一种方式 1234567891011121314public void decimalToHexadecimal() &#123; int num = 60; StringBuffer stringBuffer = new StringBuffer(); for (int x = 0; x &lt; 8; x++) &#123; int temp = num &amp; 15; if (temp &gt; 9) &#123; stringBuffer.append((char) (temp - 10 + 'A')); &#125; else &#123; stringBuffer.append(temp); &#125; num = num &gt;&gt;&gt; 4; &#125; System.out.println(stringBuffer.reverse()); &#125; 二维数组的定义方法 12345int[][] array = &#123;&#123;1,2&#125;,&#123;34,5,7&#125;&#125;;int[][] array1 = new int[][]&#123;&#123;10,20,30&#125;,&#123;40,50&#125;,&#123;60&#125;&#125;;short[][] array3 = new short[5][8];float[][] array4;array4 = new float[5][5];]]></content>
      <categories>
        <category>JavaReview</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaReview-day03]]></title>
    <url>%2F2017%2F11%2F28%2FJavaReview-day03%2F</url>
    <content type="text"><![CDATA[Java 运算符位运算符:1.”&lt;&lt;”: 左位移 2.”&gt;&gt;”: 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 &lt;&lt; 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.”&lt;&lt;&lt;”:无符号左移 4.”&gt;&gt;&gt;”:无符号右移 异或(^)可以用于加密 ‘&amp;’, ‘|’, ‘^’的运算 使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换 三元运算符 三元运算符会改变所运算元素的数据类型 语句if…else: 三元运算符 对比 if…else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if…else 简单, 可以简化 if…else 二. switch 语句: 1) switch可以中可以接收 byte, short, int char 类型的数据; 2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持; 3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default; 结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;如果匹配的 case 没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句, 直到遇到 break 或程序结束; 4) if … else 和 switch 语句的对比: switch 性能比 if…else 更高(if … else 只能顺序执行)对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广while 语句do..while 和 while 的区别do…while 先执行循环体, 再判断条件(循环体至少执行一次);while 先判断再执行for语句格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; } for 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果); for 循环中的变量初始化语句只执行一次for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:123for(int x = 0, y = 0, z = 0; x &lt; 4; x ++, y ++,z ++)&#123; System.out.println(x+y+z);&#125; for 和 while 的无限循环的表达形式1234for: for(;;)&#123; System.out.println(&quot;for无限循环&quot;); &#125; 如果 for 循环的条件不声明, 默认为 true;while123while(true)&#123; System.out.println(&quot; while 无限循环&quot;);&#125; break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下12345678910111213public void testBreak() &#123; w: for (int x = 1; x &lt; 4; x++) &#123; System.out.println(&quot;out\t&quot;); q: for (int m = 0; m &lt; 3; m++)&#123; if (m == 2)&#123; break w; &#125; System.out.print(&quot;in\t&quot;); &#125; &#125; &#125; 输出结果为: out in in 若将 break 后的 w 删掉,结果为: out in in out in in out in in 2). continue 作用:结束本次循环,继续下一次循环 # 如下代码可以打印 0~10 以内的 2 的倍数: 12345678public void testContinue()&#123; for (int i = 0; i &lt; 11; i ++)&#123; if (i%2 == 1)&#123; continue; &#125; System.out.println(i); &#125;&#125; 1) continue可以继续指定循环, 只需要将循环命名即可,具体实现如下12345678910public void testContinue() &#123; w: for (int i = 0; i &lt; 3; i++) &#123; q: for (int k = 0; k &lt; 4; k++) &#123; System.out.println(&quot;i = &quot; + i); continue w; &#125; &#125;&#125; 输出结果为: 123i = 0i = 1i = 2 break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内输出等腰三角形123456789101112public void testTriangle() &#123;for (int x = 1; x &lt;= 5; x++) &#123; for (int y = x; y &lt; 5; y++) &#123; System.out.print(&quot; &quot;); &#125; for (int z = 0; z &lt; x; z ++ )&#123; System.out.print(&quot;* &quot;); &#125; System.out.println(); &#125;&#125; 结果如下: 12345 * * * * * * * * * ** * * * * 重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;]]></content>
      <categories>
        <category>JavaReview</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F11%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Welcome</tag>
      </tags>
  </entry>
</search>
