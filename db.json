{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/head.jpg","path":"images/head.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wave.png","path":"images/wave.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wave1.png","path":"images/wave1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wave_full.png","path":"images/wave_full.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3c55461fd7ebfdd3d61a183baf6957ed474a4a39","modified":1513485623149},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1511847375090},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1511847375091},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1511847375093},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1511847375095},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1511847375096},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1511847375097},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1511847375099},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1511847375100},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1511847375101},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1511847375103},{"_id":"themes/next/README.cn.md","hash":"419b60d064a4ac66565ddeec1be55802acf68c8b","modified":1511847375104},{"_id":"themes/next/README.md","hash":"631d68e9cbced2f11cd976bf883b7d8b08b9b365","modified":1511847375105},{"_id":"themes/next/_config.yml","hash":"288e1b14b264bd62a3caa4113297bc70931341b5","modified":1513436811412},{"_id":"themes/next/bower.json","hash":"47471a8f13528dc4052b746db5b4be2375682173","modified":1511847375108},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1511847375109},{"_id":"themes/next/package.json","hash":"39370e2aadf1f9a7c105edff064c6e47682b3932","modified":1511847375229},{"_id":"source/about/index.md","hash":"ecab55c7793f999f05708d53b45cbfeae5a89fae","modified":1511855313343},{"_id":"source/_posts/FTPClient.storFile返回false-解决方法.md","hash":"5cf2dcfe74df868672058863a0d768bd99b1d990","modified":1512972117223},{"_id":"source/_posts/GitHub Pages绑定域名.md","hash":"2408d1a508e4fa365dab64c578e61475abecfff2","modified":1513511729617},{"_id":"source/_posts/JavaReview-day03.md","hash":"b4c98fc653e4c6bb6219517b14675640feab4610","modified":1512822293358},{"_id":"source/_posts/JavaReview-day04.md","hash":"8c1448b05e6dbcd6a8229da57cb4e90a11b9f193","modified":1512990688415},{"_id":"source/_posts/JavaReview-day06.md","hash":"19a644565f09c9236467c56790997fafed743b3f","modified":1514024512067},{"_id":"source/_posts/JavaReview-day07.md","hash":"1cb32748a5ddee753b378f323fefb821d8000d50","modified":1514027247722},{"_id":"source/_posts/Javareview-day05.md","hash":"079d868db39a6b53eea95844bd092c987f7270c9","modified":1513069142877},{"_id":"source/_posts/Java中的23中设计模式-三.md","hash":"04b3fcd1706df6ef2e48e2b71aede514d0d89527","modified":1514198548306},{"_id":"source/_posts/Java中的23中设计模式-二.md","hash":"bdaa39b4211a28dd4a447d5777fc7d70c2c8caae","modified":1514196335292},{"_id":"source/_posts/Java中的23中设计模式-四.md","hash":"269736fc4207a6975249af02549df3e3f973c013","modified":1514199919523},{"_id":"source/_posts/Java中的23种设计模式-一.md","hash":"60bc9a6c7a54145cb0bd928787f78ed7b5d5094c","modified":1514196350834},{"_id":"source/_posts/hello-world.md","hash":"1fd53c43fd9f21f4e7a6757c1274858efe79c5cf","modified":1511857543185},{"_id":"source/_posts/记一次Redis连接用尽异常解决.md","hash":"e92cf11298a21a1204b1154881255a445db30063","modified":1513438180462},{"_id":"source/categories/index.md","hash":"7a9b86244cd0d64a50e27219c42cb8c6fb80c7d7","modified":1511959410883},{"_id":"source/schedule/index.md","hash":"25624e46c4156830d1d7966407b786e9e70041d6","modified":1512992357317},{"_id":"source/tags/index.md","hash":"a46234ad1cc6ffeb68e1bc93119bbc1a1871a6eb","modified":1511855528794},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1511847375113},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1511847375111},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1511847375114},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1511847375116},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1511847375117},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1511847375120},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1511847375122},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1511847375123},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1511847375124},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1511847375125},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1511847375126},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1511847375128},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1511847375129},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1511847375132},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1511847375130},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1511847375135},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1511847375221},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1511847375222},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1511847375223},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1511847375225},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1511847375224},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1511847375226},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1511847375228},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1511847375230},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1511847375232},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1511847375624},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1511847375625},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1511847375626},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375406},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1511847375133},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1511847375134},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1511847375136},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1511847375137},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1511847375138},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1511847375140},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b9f9959225876fb56fb3fba96306d19396e704d4","modified":1511847375142},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1511847375143},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1511847375144},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1511847375145},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1511847375147},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1511847375151},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1511847375152},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1511847375153},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1511847375154},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1511847375166},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1511847375167},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1511847375174},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1511847375204},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1511847375205},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1511847375207},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1511847375208},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1511847375209},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1511847375210},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1511847375211},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1511847375234},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1511847375236},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1511847375237},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1511847375238},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1511847375240},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1511847375241},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1511847375242},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1511847375243},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1511847375244},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1511847375406},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1511847375408},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1511847375409},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1511847375410},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1511847375412},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1511847375413},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1511847375414},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1511847375415},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1511847375417},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1511847375418},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1511847375419},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"282ddfad637413c58d09ba6fc41c84bac1f65d1c","modified":1511846828381},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"a93596e8de150c8a82fa7a59d8212ac0119a81fa","modified":1511847532516},{"_id":"themes/next/source/images/head.jpg","hash":"037c34b9ae8c9b1682c612a392b519e0129f0b42","modified":1511083685478},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511847375423},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1511847375424},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511847375426},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1511847375427},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1511847375428},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1511847375429},{"_id":"themes/next/source/images/wave.png","hash":"405fcb4e8a6819bf6562fcd7d8643179ab5dec93","modified":1511081665000},{"_id":"themes/next/source/images/wave1.png","hash":"8c7683bb139e407faa425647fd9948a2e09d329a","modified":1511081916000},{"_id":"themes/next/source/images/wave_full.png","hash":"832ce139a6c77cb97e705ade7fba6745d328c9bd","modified":1511081916000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375170},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375171},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375361},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375361},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375364},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375401},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375404},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1511847375149},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1511847375150},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1511847375157},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1511847375158},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1511847375156},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1511847375160},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1511847375162},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1511847375163},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1511847375164},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1511847375169},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1511847375170},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1511847375172},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1511847375177},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1511847375179},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1511847375176},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1511847375180},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1511847375181},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1511847375184},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1511847375182},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1511847375185},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1511847375189},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1511847375190},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1511847375186},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1511847375187},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1511847375191},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1511847375192},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1511847375193},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1511847375195},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1511847375196},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1511847375198},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1511847375199},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1511847375201},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1511847375202},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1511847375203},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1511847375215},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1511847375217},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1511847375218},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1511847375219},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1511847375360},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"9305ac5644191f7539dbabb28f99d93fbe7f3313","modified":1513587099903},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1511847375363},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1511847375364},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1511847375399},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1511847375400},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1511847375402},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1511847375403},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1511847375432},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1511847375433},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1511847375434},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1511847375435},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1511847375437},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1511847375439},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1511847375440},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1511847375442},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1511847375444},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1511847375446},{"_id":"themes/next/source/js/src/utils.js","hash":"b7ddc240208d57596a67c78a04a11b0f0bdecc97","modified":1511847375447},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1511847375469},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1511847375476},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1511847375478},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1511847375504},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1511847375505},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1511847375507},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1511847375509},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1511847375514},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1511847375516},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1511847375518},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1511847375519},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1511847375521},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1511847375551},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1511847375555},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1511847375557},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1511847375558},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1511847375560},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1511847375562},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1511847375563},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1511847375567},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1511847375569},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1511847375574},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1511847375572},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1511847375575},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1511847375577},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1511847375579},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1511847375581},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1511847375583},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1511847375586},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1511847375584},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1511847375587},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1511847375588},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1511847375590},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1511847375591},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1511847375593},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1511847375594},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1511847375596},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1511847375597},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1511847375599},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1511847375611},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1511847375612},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1511847375619},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1511847375621},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1511847375623},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1511847375553},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1511847375213},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1511847375214},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1511847375247},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1511847375248},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1511847375249},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1511847375251},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1511847375252},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1511847375276},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1511847375317},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1511847375348},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1511847375349},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1511847375351},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1511847375353},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1511847375355},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1511847375357},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1511847375354},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1511847375367},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1511847375370},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1511847375369},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1511847375372},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1511847375375},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1511847375377},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1511847375374},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1511847375378},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1511847375383},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1511847375385},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1511847375386},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1511847375388},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1511847375387},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1511847375391},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1511847375392},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1511847375393},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1511847375395},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"30561ed60fc64f3e4ce85143bdb55faa814743a6","modified":1511847375396},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1511847375397},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1511847375443},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1511847375461},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1511847375464},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1511847375468},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1511847375480},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1511847375482},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1511847375485},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1511847375483},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1511847375486},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1511847375488},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1511847375498},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1511847375511},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1511847375512},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1511847375502},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1511847375501},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1511847375526},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1511847375523},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1511847375524},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1511847375608},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1511847375609},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1511847375463},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1511847375549},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1511847375616},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1511847375547},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1511847375256},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1511847375258},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1511847375257},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1511847375260},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1511847375261},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1511847375263},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1511847375264},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1511847375266},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1511847375268},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1511847375269},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1511847375271},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1511847375273},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1511847375275},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1511847375278},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1511847375279},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1511847375281},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1511847375283},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1511847375284},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1511847375286},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1511847375287},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1511847375289},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1511847375290},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1511847375292},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1511847375293},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1511847375295},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1511847375296},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1511847375298},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1511847375299},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1511847375301},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1511856075208},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1511847375304},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1511847375306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1511847375307},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1511847375309},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1511847375310},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1511847375312},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1511847375314},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1511847375315},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1511847375318},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1511847375320},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1511847375321},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1511847375323},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1511847375324},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1511847375326},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1511847375327},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1511847375329},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1511847375330},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1511847375332},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1511847375334},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1511847375336},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1511847375337},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1511847375339},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1511847375340},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1511847375342},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1511847375343},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1511847375344},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1511847375346},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1511847375254},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1511847375382},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1511847375390},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1511847375379},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1511847375452},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1511847375456},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1511847375455},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1511847375457},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1511847375459},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1511847375489},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1511847375491},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1511847375493},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1511847375494},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1511847375495},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1511847375497},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1511847375531},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1511847375535},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1511847375545},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1511847375475},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1511847375606},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1511847375541},{"_id":"public/atom.xml","hash":"98a19d1447033e88c0c2126f61c8f8aa89630a31","modified":1514199955869},{"_id":"public/search.xml","hash":"fedf7b23783456fe361b1405c5ac9183d5ea0ae3","modified":1514199955890},{"_id":"public/sitemap.xml","hash":"bbf8d4e7a950803d1fc2f5d32b0879956a990d61","modified":1514199955891},{"_id":"public/about/index.html","hash":"7396048a73ea586f9b11780e8b8eac1ceba841ab","modified":1514199956383},{"_id":"public/categories/index.html","hash":"a0d76a8e312fd125f4cc04fb6f6ba57578ea2248","modified":1514199956386},{"_id":"public/schedule/index.html","hash":"ce28d70c84a1d7aaf1cd54030c5384617de8de22","modified":1514199956387},{"_id":"public/tags/index.html","hash":"b5b4025c12f65228d4958c5290280fad176ab7dc","modified":1514199956387},{"_id":"public/2017/12/25/Java中的23中设计模式-二/index.html","hash":"36a57c629d535c237c49bf34c6b90d96e9a5991d","modified":1514199956387},{"_id":"public/2017/12/23/Java中的23种设计模式-一/index.html","hash":"8431d20d86b7e606947f216433ab220521b32c97","modified":1514199956387},{"_id":"public/2017/12/18/JavaReview-day07/index.html","hash":"e2fced4e0e2cebc8f95ce1d240fb9a5f4ab97794","modified":1514199956387},{"_id":"public/2017/12/17/GitHub Pages绑定域名/index.html","hash":"1e8e7b98d2ae4265fe880b09edcda7cad5f2f3d7","modified":1514199956387},{"_id":"public/2017/12/04/FTPClient.storFile返回false-解决方法/index.html","hash":"f8c4c9343b6f00a9ce7fc32060df95c9e0d06fba","modified":1514199956387},{"_id":"public/2017/12/01/记一次Redis连接用尽异常解决/index.html","hash":"b463ed1cf26315c75eb155ca36774673319f67ef","modified":1514199956387},{"_id":"public/2017/11/30/JavaReview-day06/index.html","hash":"37b89ca6a4e32dd3f0699ab4e2c9c9d145260940","modified":1514199956387},{"_id":"public/2017/11/29/Javareview-day05/index.html","hash":"3aa089575e6a60ea9243c5fd96569188a1c2792e","modified":1514199956388},{"_id":"public/2017/11/28/JavaReview-day04/index.html","hash":"726838eb3e11f38ec5a792851b7c8744b253eecf","modified":1514199956388},{"_id":"public/2017/11/28/JavaReview-day03/index.html","hash":"fa84239f6ded25f7fde6d8aa8c9b19b996495fa2","modified":1514199956388},{"_id":"public/2017/11/28/hello-world/index.html","hash":"3db86702b8315cce4a591cf44af9b7e1dae45569","modified":1514199956388},{"_id":"public/archives/index.html","hash":"d005611116d706aecd6099029abacd2caec838d6","modified":1514199956388},{"_id":"public/archives/page/2/index.html","hash":"3ba0e4c92347ad7624ab6631323c493e5e283ca0","modified":1514199956388},{"_id":"public/archives/2017/index.html","hash":"db2f788d7510f6f7eee573389b6effa261a26827","modified":1514199956388},{"_id":"public/archives/2017/page/2/index.html","hash":"43adfed1f5365cb2c0971ce7cf5d3ad912426304","modified":1514199956388},{"_id":"public/archives/2017/11/index.html","hash":"cd7afdfa9afa6838d0a36725a581b62e3466d3d3","modified":1514199956388},{"_id":"public/archives/2017/12/index.html","hash":"bc18fe0bebccb5c8ad7007d4571757c9021b05c4","modified":1514199956388},{"_id":"public/categories/Exception/index.html","hash":"9b0a5322852353a699f86f824996c749f0c8e403","modified":1514199956388},{"_id":"public/categories/Blog/index.html","hash":"4385eacc5494285e7c375d3bf4d0ae5534219ced","modified":1514199956389},{"_id":"public/categories/JavaReview/index.html","hash":"2fb9e0feac4181f74dea9544cb2ffe1a4c697168","modified":1514199956389},{"_id":"public/categories/Java/index.html","hash":"b65ac4ad97446d33eabe5d9895934146d0ead97e","modified":1514199956389},{"_id":"public/categories/Java/设计模式/index.html","hash":"a37aa89361d8617d8a15868ffe38188d12feb401","modified":1514199956389},{"_id":"public/index.html","hash":"d95af3065766424f8cd973a7cf5dc1fcf3a56d1b","modified":1514199956389},{"_id":"public/page/2/index.html","hash":"d86b3b13168d7fd4d55a8ce2d993abb8631515ef","modified":1514199956389},{"_id":"public/tags/Java/index.html","hash":"bded944ef5bc38956d8e66007fa099d958d1e619","modified":1514199956389},{"_id":"public/tags/FTP/index.html","hash":"2af5297bf23232eb158188d7ae51fbf628065d58","modified":1514199956389},{"_id":"public/tags/Blog/index.html","hash":"4cc7283b016216003b65ce1779dd11b4ca984df9","modified":1514199956389},{"_id":"public/tags/设计模式/index.html","hash":"c1c75e4374ba5c750ccbbd4bdcbf4531f9c6927e","modified":1514199956389},{"_id":"public/tags/Welcome/index.html","hash":"dc0417ebef22777ea6d51e6d91d79418bf1a4a99","modified":1514199956389},{"_id":"public/tags/Redis/index.html","hash":"9bf70b50b58f553b72e52bda406bbdc595041cc6","modified":1514199956389},{"_id":"public/tags/Jedis/index.html","hash":"3e33106b4f30e4bb8240dfa6847419dea4a55b08","modified":1514199956389},{"_id":"public/2017/12/25/Java中的23中设计模式-四/index.html","hash":"795cd0f38678d30796a181427213652a99fe2164","modified":1514199956408},{"_id":"public/2017/12/25/Java中的23中设计模式-三/index.html","hash":"5563b007444de55e342bf065451c4ffa6a40bdce","modified":1514199956408},{"_id":"public/tags/Java/page/2/index.html","hash":"0cee9a7ce46e28f6d94307606480bb9e435ed465","modified":1514199956409},{"_id":"public/CNAME","hash":"3c55461fd7ebfdd3d61a183baf6957ed474a4a39","modified":1514199956421},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1514199956421},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514199956421},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514199956421},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1514199956421},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1514199956421},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1514199956421},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1514199956421},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1514199956421},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1514199956421},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1514199956422},{"_id":"public/images/favicon-16x16-next.png","hash":"282ddfad637413c58d09ba6fc41c84bac1f65d1c","modified":1514199956422},{"_id":"public/images/favicon-32x32-next.png","hash":"a93596e8de150c8a82fa7a59d8212ac0119a81fa","modified":1514199956422},{"_id":"public/images/head.jpg","hash":"037c34b9ae8c9b1682c612a392b519e0129f0b42","modified":1514199956422},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514199956422},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1514199956422},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514199956422},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1514199956422},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1514199956422},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514199956422},{"_id":"public/images/wave.png","hash":"405fcb4e8a6819bf6562fcd7d8643179ab5dec93","modified":1514199956422},{"_id":"public/images/wave1.png","hash":"8c7683bb139e407faa425647fd9948a2e09d329a","modified":1514199956422},{"_id":"public/images/wave_full.png","hash":"832ce139a6c77cb97e705ade7fba6745d328c9bd","modified":1514199956422},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1514199956422},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1514199956422},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514199956423},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514199956423},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514199956423},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514199956423},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514199956423},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514199956423},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1514199956423},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514199956423},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514199956423},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514199956423},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514199956423},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514199956423},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514199956423},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514199957970},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514199957984},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514199958006},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514199958006},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514199958006},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514199958006},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514199958006},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514199958006},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514199958006},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514199958006},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514199958006},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514199958006},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1514199958006},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514199958007},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514199958007},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514199958007},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1514199958007},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1514199958007},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1514199958007},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1514199958007},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1514199958007},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1514199958007},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514199958007},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514199958007},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514199958008},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514199958009},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514199958009},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514199958009},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1514199958009},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514199958009},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514199958009},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514199958009},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514199958009},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514199958009},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514199958009},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514199958009},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514199958009},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514199958009},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514199958009},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514199958009},{"_id":"public/css/main.css","hash":"1fe64829ac06d22dbaed4cf464dcd2b2b2a5b0c6","modified":1514199958009},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514199958010},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514199958010},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514199958010},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514199958010},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514199958010},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514199958010},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514199958010},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514199958010},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514199958010},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514199958010},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514199958010},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514199958010},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514199958011},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514199958011},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514199958011},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514199958011},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514199958011},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514199958011},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514199958011},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514199958011},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514199958012},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514199958012},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514199958012},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1514199958156}],"Category":[{"name":"Exception","_id":"cjbm3jz550003fkkx0gwp2ki0"},{"name":"Blog","_id":"cjbm3jz5f0008fkkxxwkbod7o"},{"name":"JavaReview","_id":"cjbm3jz5m000ffkkxll4tdkd8"},{"name":"Java","_id":"cjbm3jz6p0018fkkx83h4en5q"},{"name":"设计模式","parent":"cjbm3jz6p0018fkkx83h4en5q","_id":"cjbm3jz6w001kfkkx052card9"}],"Data":[],"Page":[{"title":"about","date":"2017-11-28T07:48:33.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-11-28 15:48:33\n---\n","updated":"2017-11-28T07:48:33.343Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjbm3jz4u0000fkkxiuardfcc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-11-28T07:27:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-11-28 15:27:54\ntype: \"categories\"\n---\n","updated":"2017-11-29T12:43:30.883Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjbm3jzfo001xfkkxunvflolg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2017-12-11T11:39:17.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2017-12-11 19:39:17\n---\n","updated":"2017-12-11T11:39:17.317Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjbm3jzfq001yfkkxtro0kuh5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-11-28T07:44:28.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-11-28 15:44:28\ntype: \"tags\"\n---\n","updated":"2017-11-28T07:52:08.794Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjbm3jzfu0020fkkx2scxaxas","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"FTP storFile返回false 解决方法","date":"2017-12-04T11:59:29.000Z","type":["Java","FTP"],"_content":"\n[本文参考地址](https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined)\n\n## 错误描述\n\n- 自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false\n\n\n## 解决方法\n\n- 添加以下代码即可\n\n  ```\n    ftpClient.setControlEncoding(\"UTF-8\");\n  ```\n","source":"_posts/FTPClient.storFile返回false-解决方法.md","raw":"---\ntitle: FTP storFile返回false 解决方法\ndate: 2017-12-04T19:59:29.000Z\ntags:\n  - Java\n  - FTP\ncategories:\n  - Exception\ntype:\n  - Java\n  - FTP\n---\n\n[本文参考地址](https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined)\n\n## 错误描述\n\n- 自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false\n\n\n## 解决方法\n\n- 添加以下代码即可\n\n  ```\n    ftpClient.setControlEncoding(\"UTF-8\");\n  ```\n","slug":"FTPClient.storFile返回false-解决方法","published":1,"updated":"2017-12-11T06:01:57.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz4w0001fkkxfjyoph7y","content":"<p><a href=\"https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined\" target=\"_blank\" rel=\"noopener\">本文参考地址</a></p>\n<h2 id=\"错误描述\"><a href=\"#错误描述\" class=\"headerlink\" title=\"错误描述\"></a>错误描述</h2><ul>\n<li>自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false</li>\n</ul>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>添加以下代码即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftpClient.setControlEncoding(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined\" target=\"_blank\" rel=\"noopener\">本文参考地址</a></p>\n<h2 id=\"错误描述\"><a href=\"#错误描述\" class=\"headerlink\" title=\"错误描述\"></a>错误描述</h2><ul>\n<li>自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false</li>\n</ul>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>添加以下代码即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftpClient.setControlEncoding(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"GitHub Pages绑定域名","date":"2017-12-17T05:11:03.000Z","type":["Blog"],"_content":"\n本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述\n\n## 购买域名\n如果嫌麻烦可以在[Godaddy](https://www.godaddy.com/) 购买\n也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程\n\n### 选购域名\n  可以在[此页面](https://sg.godaddy.com/zh/domains/domain-name-search)搜索你喜欢的\n域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考[知乎答案](https://www.zhihu.com/question/19610337) 推荐使用`.me`\n\n### 域名解析\n#### 更换域名服务器\n  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用[DNSPot](https://www.dnspod.cn/)\n解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到\nGodaddy 的域名服务器\n![图1](/images/post_images/20171217_DNSPot.jpg)\n![图2](/images/post_images/20171217_GoDaddy_DNS.jpg)\n注意: 在GoDaddy中配置的为\"f1g1ns1.dnspod.net\", 为没有\"f1g1ns1.dnspod.net.\"要去掉最\n后的 `.`\n\n#### GitHub中的域名支持\n  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地\n址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示\n\n现在github的服务器地址为：\n  - 192.30.252.153\n  - 192.30.252.154\n\n## 添加CNAME文件\n在你的博客仓库中下的 `/source` 目录中添加名为 `CNAME`的文件, 在文件中写入你在GoDaddy\n注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!\n","source":"_posts/GitHub Pages绑定域名.md","raw":"---\ntitle: GitHub Pages绑定域名\ndate: 2017-12-17 13:11:03\ncategories:\n  - Blog\ntags:\n  - Blog\ntype:\n  - Blog\n---\n\n本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述\n\n## 购买域名\n如果嫌麻烦可以在[Godaddy](https://www.godaddy.com/) 购买\n也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程\n\n### 选购域名\n  可以在[此页面](https://sg.godaddy.com/zh/domains/domain-name-search)搜索你喜欢的\n域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考[知乎答案](https://www.zhihu.com/question/19610337) 推荐使用`.me`\n\n### 域名解析\n#### 更换域名服务器\n  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用[DNSPot](https://www.dnspod.cn/)\n解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到\nGodaddy 的域名服务器\n![图1](/images/post_images/20171217_DNSPot.jpg)\n![图2](/images/post_images/20171217_GoDaddy_DNS.jpg)\n注意: 在GoDaddy中配置的为\"f1g1ns1.dnspod.net\", 为没有\"f1g1ns1.dnspod.net.\"要去掉最\n后的 `.`\n\n#### GitHub中的域名支持\n  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地\n址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示\n\n现在github的服务器地址为：\n  - 192.30.252.153\n  - 192.30.252.154\n\n## 添加CNAME文件\n在你的博客仓库中下的 `/source` 目录中添加名为 `CNAME`的文件, 在文件中写入你在GoDaddy\n注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!\n","slug":"GitHub Pages绑定域名","published":1,"updated":"2017-12-17T11:55:29.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz520002fkkxx98frkvu","content":"<p>本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>如果嫌麻烦可以在<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">Godaddy</a> 购买<br>也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程</p>\n<h3 id=\"选购域名\"><a href=\"#选购域名\" class=\"headerlink\" title=\"选购域名\"></a>选购域名</h3><p>  可以在<a href=\"https://sg.godaddy.com/zh/domains/domain-name-search\" target=\"_blank\" rel=\"noopener\">此页面</a>搜索你喜欢的<br>域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考<a href=\"https://www.zhihu.com/question/19610337\" target=\"_blank\" rel=\"noopener\">知乎答案</a> 推荐使用<code>.me</code></p>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><h4 id=\"更换域名服务器\"><a href=\"#更换域名服务器\" class=\"headerlink\" title=\"更换域名服务器\"></a>更换域名服务器</h4><p>  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">DNSPot</a><br>解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到<br>Godaddy 的域名服务器<br><img src=\"/images/post_images/20171217_DNSPot.jpg\" alt=\"图1\"><br><img src=\"/images/post_images/20171217_GoDaddy_DNS.jpg\" alt=\"图2\"><br>注意: 在GoDaddy中配置的为”f1g1ns1.dnspod.net”, 为没有”f1g1ns1.dnspod.net.”要去掉最<br>后的 <code>.</code></p>\n<h4 id=\"GitHub中的域名支持\"><a href=\"#GitHub中的域名支持\" class=\"headerlink\" title=\"GitHub中的域名支持\"></a>GitHub中的域名支持</h4><p>  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地<br>址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示</p>\n<p>现在github的服务器地址为：</p>\n<ul>\n<li>192.30.252.153</li>\n<li>192.30.252.154</li>\n</ul>\n<h2 id=\"添加CNAME文件\"><a href=\"#添加CNAME文件\" class=\"headerlink\" title=\"添加CNAME文件\"></a>添加CNAME文件</h2><p>在你的博客仓库中下的 <code>/source</code> 目录中添加名为 <code>CNAME</code>的文件, 在文件中写入你在GoDaddy<br>注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>如果嫌麻烦可以在<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">Godaddy</a> 购买<br>也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程</p>\n<h3 id=\"选购域名\"><a href=\"#选购域名\" class=\"headerlink\" title=\"选购域名\"></a>选购域名</h3><p>  可以在<a href=\"https://sg.godaddy.com/zh/domains/domain-name-search\" target=\"_blank\" rel=\"noopener\">此页面</a>搜索你喜欢的<br>域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考<a href=\"https://www.zhihu.com/question/19610337\" target=\"_blank\" rel=\"noopener\">知乎答案</a> 推荐使用<code>.me</code></p>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><h4 id=\"更换域名服务器\"><a href=\"#更换域名服务器\" class=\"headerlink\" title=\"更换域名服务器\"></a>更换域名服务器</h4><p>  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">DNSPot</a><br>解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到<br>Godaddy 的域名服务器<br><img src=\"/images/post_images/20171217_DNSPot.jpg\" alt=\"图1\"><br><img src=\"/images/post_images/20171217_GoDaddy_DNS.jpg\" alt=\"图2\"><br>注意: 在GoDaddy中配置的为”f1g1ns1.dnspod.net”, 为没有”f1g1ns1.dnspod.net.”要去掉最<br>后的 <code>.</code></p>\n<h4 id=\"GitHub中的域名支持\"><a href=\"#GitHub中的域名支持\" class=\"headerlink\" title=\"GitHub中的域名支持\"></a>GitHub中的域名支持</h4><p>  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地<br>址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示</p>\n<p>现在github的服务器地址为：</p>\n<ul>\n<li>192.30.252.153</li>\n<li>192.30.252.154</li>\n</ul>\n<h2 id=\"添加CNAME文件\"><a href=\"#添加CNAME文件\" class=\"headerlink\" title=\"添加CNAME文件\"></a>添加CNAME文件</h2><p>在你的博客仓库中下的 <code>/source</code> 目录中添加名为 <code>CNAME</code>的文件, 在文件中写入你在GoDaddy<br>注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!</p>\n"},{"title":"JavaReview-day03","date":"2017-11-28T07:04:34.000Z","type":"JavaReview","_content":"\n> Java\n\n## 运算符\n\n### 位运算符:\n\n1.\"<<\": 左位移 2.\">>\": 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 << 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.\"<<<\":无符号左移 4.\">>>\":无符号右移\n\n异或(^)可以用于加密 '&', '|', '^'的运算\n\n使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换\n\n三元运算符 三元运算符会改变所运算元素的数据类型\n\n### 语句\n\nif...else:\n\n三元运算符 对比 if...else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if...else 简单, 可以简化 if...else\n\n二. switch 语句:\n\n1) switch可以中可以接收 byte, short, int char 类型的数据;\n\n2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;\n\n3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;\n\n\n#### 结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;\n\n#### 如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,\n  直到遇到 break 或程序结束;\n\n4) if ... else 和 switch 语句的对比:\n\n#### switch 性能比 if...else 更高(if ... else 只能顺序执行)\n\n#### 对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广\n\n##  while 语句\n\n### do..while 和 while 的区别\n\n\n#### do...while 先执行循环体, 再判断条件(循环体至少执行一次);\n#### while 先判断再执行\n\n\n## for语句\n\n格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }\n\n\nfor 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);\n\n\n### for 循环中的变量初始化语句只执行一次\n\n### for 循环中的语句不只是一句,多条语句可用 \",\" 隔开,如下:\n\n```\n  for(int x = 0, y = 0, z = 0; x < 4; x ++, y ++,z ++){\n    System.out.println(x+y+z);\n  }\n```\n\n### for 和 while 的无限循环的表达形式\n\n```\n for:\n  for(;;){\n    System.out.println(\"for无限循环\");\n  }\n```\n### 如果 for 循环的条件不声明, 默认为 true;\n\n### while\n```\nwhile(true){\n  System.out.println(\" while 无限循环\");\n}\n```\n\n## break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下\n\n\n```\n    public void testBreak() {\n      w:\n      for (int x = 1; x < 4; x++) {\n          System.out.println(\"out\\t\");\n          q:\n          for (int m = 0; m < 3; m++){\n              if (m == 2){\n                  break w;\n              }\n              System.out.print(\"in\\t\");\n          }\n      }\n      }\n```\n\n  输出结果为: out    in    in\n\n  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in\n\n\n  2). continue\n    作用:结束本次循环,继续下一次循环\n    # 如下代码可以打印 0~10 以内的 2 的倍数:\n```\n        public void testContinue(){\n            for (int i = 0; i < 11; i ++){\n                if (i%2 == 1){\n                    continue;\n                }\n            System.out.println(i);\n            }\n        }\n```\n\n### 1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下\n```\n        public void testContinue() {\n          w:\n          for (int i = 0; i < 3; i++) {\n            q:\n            for (int k = 0; k < 4; k++) {\n              System.out.println(\"i = \" + i);\n              continue w;\n              }\n          }\n        }\n```\n\n输出结果为:\n    ```\n               i = 0\n               i = 1\n               i = 2\n    ```\n### break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);\n\n### break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内\n\n### 输出等腰三角形\n```\npublic void testTriangle() {\nfor (int x = 1; x <= 5; x++) {\n    for (int y = x; y < 5; y++) {\n      System.out.print(\" \");\n    }\n    for (int z = 0; z < x; z ++ ){\n      System.out.print(\"* \");\n      }\n      System.out.println();\n  }\n\n}\n\n```\n\n  结果如下:\n\n```\n      *\n     * *\n    * * *\n   * * * *\n  * * * * *\n```\n## 重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;\n","source":"_posts/JavaReview-day03.md","raw":"---\ntitle: JavaReview-day03\ndate: 2017-11-28T15:04:34.000Z\ntype: JavaReview\ncategories:\n  - JavaReview\ntags:\n  - Java\n---\n\n> Java\n\n## 运算符\n\n### 位运算符:\n\n1.\"<<\": 左位移 2.\">>\": 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 << 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.\"<<<\":无符号左移 4.\">>>\":无符号右移\n\n异或(^)可以用于加密 '&', '|', '^'的运算\n\n使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换\n\n三元运算符 三元运算符会改变所运算元素的数据类型\n\n### 语句\n\nif...else:\n\n三元运算符 对比 if...else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if...else 简单, 可以简化 if...else\n\n二. switch 语句:\n\n1) switch可以中可以接收 byte, short, int char 类型的数据;\n\n2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;\n\n3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;\n\n\n#### 结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;\n\n#### 如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,\n  直到遇到 break 或程序结束;\n\n4) if ... else 和 switch 语句的对比:\n\n#### switch 性能比 if...else 更高(if ... else 只能顺序执行)\n\n#### 对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广\n\n##  while 语句\n\n### do..while 和 while 的区别\n\n\n#### do...while 先执行循环体, 再判断条件(循环体至少执行一次);\n#### while 先判断再执行\n\n\n## for语句\n\n格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }\n\n\nfor 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);\n\n\n### for 循环中的变量初始化语句只执行一次\n\n### for 循环中的语句不只是一句,多条语句可用 \",\" 隔开,如下:\n\n```\n  for(int x = 0, y = 0, z = 0; x < 4; x ++, y ++,z ++){\n    System.out.println(x+y+z);\n  }\n```\n\n### for 和 while 的无限循环的表达形式\n\n```\n for:\n  for(;;){\n    System.out.println(\"for无限循环\");\n  }\n```\n### 如果 for 循环的条件不声明, 默认为 true;\n\n### while\n```\nwhile(true){\n  System.out.println(\" while 无限循环\");\n}\n```\n\n## break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下\n\n\n```\n    public void testBreak() {\n      w:\n      for (int x = 1; x < 4; x++) {\n          System.out.println(\"out\\t\");\n          q:\n          for (int m = 0; m < 3; m++){\n              if (m == 2){\n                  break w;\n              }\n              System.out.print(\"in\\t\");\n          }\n      }\n      }\n```\n\n  输出结果为: out    in    in\n\n  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in\n\n\n  2). continue\n    作用:结束本次循环,继续下一次循环\n    # 如下代码可以打印 0~10 以内的 2 的倍数:\n```\n        public void testContinue(){\n            for (int i = 0; i < 11; i ++){\n                if (i%2 == 1){\n                    continue;\n                }\n            System.out.println(i);\n            }\n        }\n```\n\n### 1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下\n```\n        public void testContinue() {\n          w:\n          for (int i = 0; i < 3; i++) {\n            q:\n            for (int k = 0; k < 4; k++) {\n              System.out.println(\"i = \" + i);\n              continue w;\n              }\n          }\n        }\n```\n\n输出结果为:\n    ```\n               i = 0\n               i = 1\n               i = 2\n    ```\n### break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);\n\n### break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内\n\n### 输出等腰三角形\n```\npublic void testTriangle() {\nfor (int x = 1; x <= 5; x++) {\n    for (int y = x; y < 5; y++) {\n      System.out.print(\" \");\n    }\n    for (int z = 0; z < x; z ++ ){\n      System.out.print(\"* \");\n      }\n      System.out.println();\n  }\n\n}\n\n```\n\n  结果如下:\n\n```\n      *\n     * *\n    * * *\n   * * * *\n  * * * * *\n```\n## 重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;\n","slug":"JavaReview-day03","published":1,"updated":"2017-12-09T12:24:53.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz590005fkkx0l9p78hd","content":"<blockquote>\n<p>Java</p>\n</blockquote>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符:\"></a>位运算符:</h3><p>1.”&lt;&lt;”: 左位移 2.”&gt;&gt;”: 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 &lt;&lt; 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.”&lt;&lt;&lt;”:无符号左移 4.”&gt;&gt;&gt;”:无符号右移</p>\n<p>异或(^)可以用于加密 ‘&amp;’, ‘|’, ‘^’的运算</p>\n<p>使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换</p>\n<p>三元运算符 三元运算符会改变所运算元素的数据类型</p>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><p>if…else:</p>\n<p>三元运算符 对比 if…else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if…else 简单, 可以简化 if…else</p>\n<p>二. switch 语句:</p>\n<p>1) switch可以中可以接收 byte, short, int char 类型的数据;</p>\n<p>2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;</p>\n<p>3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;</p>\n<h4 id=\"结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束\"><a href=\"#结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束\" class=\"headerlink\" title=\"结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;\"></a>结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;</h4><h4 id=\"如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句\"><a href=\"#如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句\" class=\"headerlink\" title=\"如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,\"></a>如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,</h4><p>  直到遇到 break 或程序结束;</p>\n<p>4) if … else 和 switch 语句的对比:</p>\n<h4 id=\"switch-性能比-if…else-更高-if-…-else-只能顺序执行\"><a href=\"#switch-性能比-if…else-更高-if-…-else-只能顺序执行\" class=\"headerlink\" title=\"switch 性能比 if…else 更高(if … else 只能顺序执行)\"></a>switch 性能比 if…else 更高(if … else 只能顺序执行)</h4><h4 id=\"对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广\"><a href=\"#对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广\" class=\"headerlink\" title=\"对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广\"></a>对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广</h4><h2 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h2><h3 id=\"do-while-和-while-的区别\"><a href=\"#do-while-和-while-的区别\" class=\"headerlink\" title=\"do..while 和 while 的区别\"></a>do..while 和 while 的区别</h3><h4 id=\"do…while-先执行循环体-再判断条件-循环体至少执行一次\"><a href=\"#do…while-先执行循环体-再判断条件-循环体至少执行一次\" class=\"headerlink\" title=\"do…while 先执行循环体, 再判断条件(循环体至少执行一次);\"></a>do…while 先执行循环体, 再判断条件(循环体至少执行一次);</h4><h4 id=\"while-先判断再执行\"><a href=\"#while-先判断再执行\" class=\"headerlink\" title=\"while 先判断再执行\"></a>while 先判断再执行</h4><h2 id=\"for语句\"><a href=\"#for语句\" class=\"headerlink\" title=\"for语句\"></a>for语句</h2><p>格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }</p>\n<p>for 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);</p>\n<h3 id=\"for-循环中的变量初始化语句只执行一次\"><a href=\"#for-循环中的变量初始化语句只执行一次\" class=\"headerlink\" title=\"for 循环中的变量初始化语句只执行一次\"></a>for 循环中的变量初始化语句只执行一次</h3><h3 id=\"for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下\"><a href=\"#for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下\" class=\"headerlink\" title=\"for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:\"></a>for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int x = 0, y = 0, z = 0; x &lt; 4; x ++, y ++,z ++)&#123;</span><br><span class=\"line\">  System.out.println(x+y+z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for-和-while-的无限循环的表达形式\"><a href=\"#for-和-while-的无限循环的表达形式\" class=\"headerlink\" title=\"for 和 while 的无限循环的表达形式\"></a>for 和 while 的无限循环的表达形式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for:</span><br><span class=\"line\"> for(;;)&#123;</span><br><span class=\"line\">   System.out.println(&quot;for无限循环&quot;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果-for-循环的条件不声明-默认为-true\"><a href=\"#如果-for-循环的条件不声明-默认为-true\" class=\"headerlink\" title=\"如果 for 循环的条件不声明, 默认为 true;\"></a>如果 for 循环的条件不声明, 默认为 true;</h3><h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(true)&#123;</span><br><span class=\"line\">  System.out.println(&quot; while 无限循环&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下\"><a href=\"#break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下\" class=\"headerlink\" title=\"break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下\"></a>break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testBreak() &#123;</span><br><span class=\"line\">  w:</span><br><span class=\"line\">  for (int x = 1; x &lt; 4; x++) &#123;</span><br><span class=\"line\">      System.out.println(&quot;out\\t&quot;);</span><br><span class=\"line\">      q:</span><br><span class=\"line\">      for (int m = 0; m &lt; 3; m++)&#123;</span><br><span class=\"line\">          if (m == 2)&#123;</span><br><span class=\"line\">              break w;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          System.out.print(&quot;in\\t&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>  输出结果为: out    in    in</p>\n<p>  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in</p>\n<p>  2). continue<br>    作用:结束本次循环,继续下一次循环</p>\n<pre><code># 如下代码可以打印 0~10 以内的 2 的倍数:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testContinue()&#123;</span><br><span class=\"line\">    for (int i = 0; i &lt; 11; i ++)&#123;</span><br><span class=\"line\">        if (i%2 == 1)&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下\"><a href=\"#1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下\" class=\"headerlink\" title=\"1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下\"></a>1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testContinue() &#123;</span><br><span class=\"line\">  w:</span><br><span class=\"line\">  for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">    q:</span><br><span class=\"line\">    for (int k = 0; k &lt; 4; k++) &#123;</span><br><span class=\"line\">      System.out.println(&quot;i = &quot; + i);</span><br><span class=\"line\">      continue w;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 0</span><br><span class=\"line\">i = 1</span><br><span class=\"line\">i = 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错\"><a href=\"#break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错\" class=\"headerlink\" title=\"break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);\"></a>break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);</h3><h3 id=\"break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内\"><a href=\"#break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内\" class=\"headerlink\" title=\"break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内\"></a>break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内</h3><h3 id=\"输出等腰三角形\"><a href=\"#输出等腰三角形\" class=\"headerlink\" title=\"输出等腰三角形\"></a>输出等腰三角形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testTriangle() &#123;</span><br><span class=\"line\">for (int x = 1; x &lt;= 5; x++) &#123;</span><br><span class=\"line\">    for (int y = x; y &lt; 5; y++) &#123;</span><br><span class=\"line\">      System.out.print(&quot; &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int z = 0; z &lt; x; z ++ )&#123;</span><br><span class=\"line\">      System.out.print(&quot;* &quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    *</span><br><span class=\"line\">   * *</span><br><span class=\"line\">  * * *</span><br><span class=\"line\"> * * * *</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure>\n<h2 id=\"重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中\"><a href=\"#重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中\" class=\"headerlink\" title=\"重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;\"></a>重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Java</p>\n</blockquote>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符:\"></a>位运算符:</h3><p>1.”&lt;&lt;”: 左位移 2.”&gt;&gt;”: 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 &lt;&lt; 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.”&lt;&lt;&lt;”:无符号左移 4.”&gt;&gt;&gt;”:无符号右移</p>\n<p>异或(^)可以用于加密 ‘&amp;’, ‘|’, ‘^’的运算</p>\n<p>使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换</p>\n<p>三元运算符 三元运算符会改变所运算元素的数据类型</p>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><p>if…else:</p>\n<p>三元运算符 对比 if…else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if…else 简单, 可以简化 if…else</p>\n<p>二. switch 语句:</p>\n<p>1) switch可以中可以接收 byte, short, int char 类型的数据;</p>\n<p>2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;</p>\n<p>3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;</p>\n<h4 id=\"结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束\"><a href=\"#结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束\" class=\"headerlink\" title=\"结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;\"></a>结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;</h4><h4 id=\"如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句\"><a href=\"#如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句\" class=\"headerlink\" title=\"如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,\"></a>如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,</h4><p>  直到遇到 break 或程序结束;</p>\n<p>4) if … else 和 switch 语句的对比:</p>\n<h4 id=\"switch-性能比-if…else-更高-if-…-else-只能顺序执行\"><a href=\"#switch-性能比-if…else-更高-if-…-else-只能顺序执行\" class=\"headerlink\" title=\"switch 性能比 if…else 更高(if … else 只能顺序执行)\"></a>switch 性能比 if…else 更高(if … else 只能顺序执行)</h4><h4 id=\"对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广\"><a href=\"#对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广\" class=\"headerlink\" title=\"对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广\"></a>对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广</h4><h2 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h2><h3 id=\"do-while-和-while-的区别\"><a href=\"#do-while-和-while-的区别\" class=\"headerlink\" title=\"do..while 和 while 的区别\"></a>do..while 和 while 的区别</h3><h4 id=\"do…while-先执行循环体-再判断条件-循环体至少执行一次\"><a href=\"#do…while-先执行循环体-再判断条件-循环体至少执行一次\" class=\"headerlink\" title=\"do…while 先执行循环体, 再判断条件(循环体至少执行一次);\"></a>do…while 先执行循环体, 再判断条件(循环体至少执行一次);</h4><h4 id=\"while-先判断再执行\"><a href=\"#while-先判断再执行\" class=\"headerlink\" title=\"while 先判断再执行\"></a>while 先判断再执行</h4><h2 id=\"for语句\"><a href=\"#for语句\" class=\"headerlink\" title=\"for语句\"></a>for语句</h2><p>格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }</p>\n<p>for 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);</p>\n<h3 id=\"for-循环中的变量初始化语句只执行一次\"><a href=\"#for-循环中的变量初始化语句只执行一次\" class=\"headerlink\" title=\"for 循环中的变量初始化语句只执行一次\"></a>for 循环中的变量初始化语句只执行一次</h3><h3 id=\"for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下\"><a href=\"#for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下\" class=\"headerlink\" title=\"for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:\"></a>for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int x = 0, y = 0, z = 0; x &lt; 4; x ++, y ++,z ++)&#123;</span><br><span class=\"line\">  System.out.println(x+y+z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for-和-while-的无限循环的表达形式\"><a href=\"#for-和-while-的无限循环的表达形式\" class=\"headerlink\" title=\"for 和 while 的无限循环的表达形式\"></a>for 和 while 的无限循环的表达形式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for:</span><br><span class=\"line\"> for(;;)&#123;</span><br><span class=\"line\">   System.out.println(&quot;for无限循环&quot;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果-for-循环的条件不声明-默认为-true\"><a href=\"#如果-for-循环的条件不声明-默认为-true\" class=\"headerlink\" title=\"如果 for 循环的条件不声明, 默认为 true;\"></a>如果 for 循环的条件不声明, 默认为 true;</h3><h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(true)&#123;</span><br><span class=\"line\">  System.out.println(&quot; while 无限循环&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下\"><a href=\"#break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下\" class=\"headerlink\" title=\"break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下\"></a>break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testBreak() &#123;</span><br><span class=\"line\">  w:</span><br><span class=\"line\">  for (int x = 1; x &lt; 4; x++) &#123;</span><br><span class=\"line\">      System.out.println(&quot;out\\t&quot;);</span><br><span class=\"line\">      q:</span><br><span class=\"line\">      for (int m = 0; m &lt; 3; m++)&#123;</span><br><span class=\"line\">          if (m == 2)&#123;</span><br><span class=\"line\">              break w;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          System.out.print(&quot;in\\t&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>  输出结果为: out    in    in</p>\n<p>  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in</p>\n<p>  2). continue<br>    作用:结束本次循环,继续下一次循环</p>\n<pre><code># 如下代码可以打印 0~10 以内的 2 的倍数:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testContinue()&#123;</span><br><span class=\"line\">    for (int i = 0; i &lt; 11; i ++)&#123;</span><br><span class=\"line\">        if (i%2 == 1)&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下\"><a href=\"#1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下\" class=\"headerlink\" title=\"1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下\"></a>1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testContinue() &#123;</span><br><span class=\"line\">  w:</span><br><span class=\"line\">  for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">    q:</span><br><span class=\"line\">    for (int k = 0; k &lt; 4; k++) &#123;</span><br><span class=\"line\">      System.out.println(&quot;i = &quot; + i);</span><br><span class=\"line\">      continue w;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 0</span><br><span class=\"line\">i = 1</span><br><span class=\"line\">i = 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错\"><a href=\"#break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错\" class=\"headerlink\" title=\"break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);\"></a>break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);</h3><h3 id=\"break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内\"><a href=\"#break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内\" class=\"headerlink\" title=\"break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内\"></a>break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内</h3><h3 id=\"输出等腰三角形\"><a href=\"#输出等腰三角形\" class=\"headerlink\" title=\"输出等腰三角形\"></a>输出等腰三角形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testTriangle() &#123;</span><br><span class=\"line\">for (int x = 1; x &lt;= 5; x++) &#123;</span><br><span class=\"line\">    for (int y = x; y &lt; 5; y++) &#123;</span><br><span class=\"line\">      System.out.print(&quot; &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int z = 0; z &lt; x; z ++ )&#123;</span><br><span class=\"line\">      System.out.print(&quot;* &quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    *</span><br><span class=\"line\">   * *</span><br><span class=\"line\">  * * *</span><br><span class=\"line\"> * * * *</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure>\n<h2 id=\"重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中\"><a href=\"#重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中\" class=\"headerlink\" title=\"重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;\"></a>重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;</h2>"},{"title":"JavaReview-day04","date":"2017-11-28T08:14:34.000Z","type":["JavaReview"],"_content":"\n### 数组\n\n      1. 数据类型分类: 基本数据类型, 引用数据类型\n      2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器\n\n    - 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放;\n    - 堆内存:\n      1. 数组和对象,通过 new 建立的实例都存放在堆内存中;\n      2. 每一个实体都有内存地址值;\n      3. 实体中的变量都有默认的初始化值\n      4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收\n\n### 数组的定义方式\n\n        1. int[] arr = new int[5]; (推荐写法)\n        2. int arr[] = new int[5]; (与第一种意义相同)\n        3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)\n        4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)\n\n#### 数组排序\n##### 选择排序\n\n```Java\n        public void selectSort(int[] arr){\n            for(int x = 0; x < arr.length-1; x++){\n                for(int y = x + 1; y < arr.length; y++){\n                    if(arr[x] > arr[y]){\n                        int temp = arr[x];\n                        arr[x] = arr[y];\n                        arr[y] = temp;\n                    }\n                }\n            }\n        }\n```\n> 说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置\n\n##### 冒泡排序\n```Java\n        public void bubbleSort(int[] arr){\n            for(int x = 0; x < arr.length; x ++){\n                for(int y = 0; y < arr.length - x - 1; y ++){\n                    if(arr[y] > arr[y + 1]){\n                        int temp = arr[y];\n                        arr[y] = arr[y + 1];\n                        arr[y + 1] = temp;\n\n                    }\n                }\n            }\n        }\n```\n##### 说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置\n##### 使用 java.util包中的 Array.sort(arr); 可以进行排序数组\n\n- 将数组交换的方法进行封装\n```Java\n        public void swap(int[] arr, int a, int b){\n            int temp = arr[a];\n            arr[b] = arr[a];\n            arr[b] = temp;\n        }\n```\n##### 使用异或方式实现\n\n```Java\n        public void swap1(int arr, int a, int b){\n            arr[b] = arr[b] ^ arr[a];\n            arr[a] = arr[b] ^ arr[a];\n            arr[b] = arr[b] ^ arr[a];\n        }\n```\n\n#### 折半查找\n##### 第一种方式\n```Java\n     public int halfSearch (int[] arr, int key){\n       int min = 0;\n       int max = arr.length - 1;\n       int mid = (min + max)/2;\n       while(arr[mid] != key){\n         if(key < arr[mid]){\n           max = mid - 1;\n         }else if(key > arr[mid]){\n           min = mid + 1;\n         }\n         mid = (min + max)/2;\n       }\n       return mid;\n     }\n```\n##### 第二种方式\n```Java\n     public int halfSearch2(int arr[], int key){\n       int min = 0;\n       int max = arr.length;\n       while(min <= max){\n          mid = (min + max) >> 1;\n          if(key > arr[mid]){\n            min = mid + 1;\n          }else if(key < arr[mid]){\n            max = mid -1;\n          }else{\n            return mid;\n          }\n          return -1;\n\n       }\n\n     }\n```\n\n\n> 面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;\n\n- 思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入\n\n##### 十进制转二进制\n  ```Java\n    public void decimalToBinary() {\n            int num = 8;\n            StringBuffer sb = new StringBuffer();\n            while (num > 0) {\n                sb.append(num % 2);\n                num = num / 2;\n            }\n            System.out.println(sb.reverse());\n        }\n  ```\n\n##### 十进制转十六进制\n - 第一种方式\n\n```Java\n  public void decimalToHexadecimal() {\n        int num = 60;\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int x = 0; x < 8; x++) {\n            int temp = num & 15;\n            if (temp > 9) {\n                stringBuffer.append((char) (temp - 10 + 'A'));\n            } else {\n                stringBuffer.append(temp);\n            }\n            num = num >>> 4;\n        }\n        System.out.println(stringBuffer.reverse());\n    }\n```\n**二维数组的定义方法**\n\n```Java\nint[][] array = {{1,2},{34,5,7}};\nint[][] array1 = new int[][]{{10,20,30},{40,50},{60}};\nshort[][] array3 = new short[5][8];\nfloat[][] array4;\narray4 = new float[5][5];\n\n```\n","source":"_posts/JavaReview-day04.md","raw":"---\ntitle: JavaReview-day04\ndate: 2017-11-28 16:14:34\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n\n---\n\n### 数组\n\n      1. 数据类型分类: 基本数据类型, 引用数据类型\n      2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器\n\n    - 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放;\n    - 堆内存:\n      1. 数组和对象,通过 new 建立的实例都存放在堆内存中;\n      2. 每一个实体都有内存地址值;\n      3. 实体中的变量都有默认的初始化值\n      4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收\n\n### 数组的定义方式\n\n        1. int[] arr = new int[5]; (推荐写法)\n        2. int arr[] = new int[5]; (与第一种意义相同)\n        3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)\n        4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)\n\n#### 数组排序\n##### 选择排序\n\n```Java\n        public void selectSort(int[] arr){\n            for(int x = 0; x < arr.length-1; x++){\n                for(int y = x + 1; y < arr.length; y++){\n                    if(arr[x] > arr[y]){\n                        int temp = arr[x];\n                        arr[x] = arr[y];\n                        arr[y] = temp;\n                    }\n                }\n            }\n        }\n```\n> 说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置\n\n##### 冒泡排序\n```Java\n        public void bubbleSort(int[] arr){\n            for(int x = 0; x < arr.length; x ++){\n                for(int y = 0; y < arr.length - x - 1; y ++){\n                    if(arr[y] > arr[y + 1]){\n                        int temp = arr[y];\n                        arr[y] = arr[y + 1];\n                        arr[y + 1] = temp;\n\n                    }\n                }\n            }\n        }\n```\n##### 说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置\n##### 使用 java.util包中的 Array.sort(arr); 可以进行排序数组\n\n- 将数组交换的方法进行封装\n```Java\n        public void swap(int[] arr, int a, int b){\n            int temp = arr[a];\n            arr[b] = arr[a];\n            arr[b] = temp;\n        }\n```\n##### 使用异或方式实现\n\n```Java\n        public void swap1(int arr, int a, int b){\n            arr[b] = arr[b] ^ arr[a];\n            arr[a] = arr[b] ^ arr[a];\n            arr[b] = arr[b] ^ arr[a];\n        }\n```\n\n#### 折半查找\n##### 第一种方式\n```Java\n     public int halfSearch (int[] arr, int key){\n       int min = 0;\n       int max = arr.length - 1;\n       int mid = (min + max)/2;\n       while(arr[mid] != key){\n         if(key < arr[mid]){\n           max = mid - 1;\n         }else if(key > arr[mid]){\n           min = mid + 1;\n         }\n         mid = (min + max)/2;\n       }\n       return mid;\n     }\n```\n##### 第二种方式\n```Java\n     public int halfSearch2(int arr[], int key){\n       int min = 0;\n       int max = arr.length;\n       while(min <= max){\n          mid = (min + max) >> 1;\n          if(key > arr[mid]){\n            min = mid + 1;\n          }else if(key < arr[mid]){\n            max = mid -1;\n          }else{\n            return mid;\n          }\n          return -1;\n\n       }\n\n     }\n```\n\n\n> 面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;\n\n- 思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入\n\n##### 十进制转二进制\n  ```Java\n    public void decimalToBinary() {\n            int num = 8;\n            StringBuffer sb = new StringBuffer();\n            while (num > 0) {\n                sb.append(num % 2);\n                num = num / 2;\n            }\n            System.out.println(sb.reverse());\n        }\n  ```\n\n##### 十进制转十六进制\n - 第一种方式\n\n```Java\n  public void decimalToHexadecimal() {\n        int num = 60;\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int x = 0; x < 8; x++) {\n            int temp = num & 15;\n            if (temp > 9) {\n                stringBuffer.append((char) (temp - 10 + 'A'));\n            } else {\n                stringBuffer.append(temp);\n            }\n            num = num >>> 4;\n        }\n        System.out.println(stringBuffer.reverse());\n    }\n```\n**二维数组的定义方法**\n\n```Java\nint[][] array = {{1,2},{34,5,7}};\nint[][] array1 = new int[][]{{10,20,30},{40,50},{60}};\nshort[][] array3 = new short[5][8];\nfloat[][] array4;\narray4 = new float[5][5];\n\n```\n","slug":"JavaReview-day04","published":1,"updated":"2017-12-11T11:11:28.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz5c0006fkkxwgepzx0e","content":"<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><pre><code>  1. 数据类型分类: 基本数据类型, 引用数据类型\n  2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器\n\n- 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放;\n- 堆内存:\n  1. 数组和对象,通过 new 建立的实例都存放在堆内存中;\n  2. 每一个实体都有内存地址值;\n  3. 实体中的变量都有默认的初始化值\n  4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收\n</code></pre><h3 id=\"数组的定义方式\"><a href=\"#数组的定义方式\" class=\"headerlink\" title=\"数组的定义方式\"></a>数组的定义方式</h3><pre><code>1. int[] arr = new int[5]; (推荐写法)\n2. int arr[] = new int[5]; (与第一种意义相同)\n3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)\n4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)\n</code></pre><h4 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h4><h5 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length-<span class=\"number\">1</span>; x++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = x + <span class=\"number\">1</span>; y &lt; arr.length; y++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[x] &gt; arr[y])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[x];</span><br><span class=\"line\">                arr[x] = arr[y];</span><br><span class=\"line\">                arr[y] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置</p>\n</blockquote>\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length; x ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; arr.length - x - <span class=\"number\">1</span>; y ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[y] &gt; arr[y + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[y];</span><br><span class=\"line\">                arr[y] = arr[y + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[y + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置\"><a href=\"#说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置\" class=\"headerlink\" title=\"说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置\"></a>说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置</h5><h5 id=\"使用-java-util包中的-Array-sort-arr-可以进行排序数组\"><a href=\"#使用-java-util包中的-Array-sort-arr-可以进行排序数组\" class=\"headerlink\" title=\"使用 java.util包中的 Array.sort(arr); 可以进行排序数组\"></a>使用 java.util包中的 Array.sort(arr); 可以进行排序数组</h5><ul>\n<li>将数组交换的方法进行封装<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = arr[a];</span><br><span class=\"line\">    arr[b] = arr[a];</span><br><span class=\"line\">    arr[b] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"使用异或方式实现\"><a href=\"#使用异或方式实现\" class=\"headerlink\" title=\"使用异或方式实现\"></a>使用异或方式实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap1</span><span class=\"params\">(<span class=\"keyword\">int</span> arr, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    arr[b] = arr[b] ^ arr[a];</span><br><span class=\"line\">    arr[a] = arr[b] ^ arr[a];</span><br><span class=\"line\">    arr[b] = arr[b] ^ arr[a];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h4><h5 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">halfSearch</span> <span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (min + max)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(arr[mid] != key)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">      max = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">      min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mid = (min + max)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">halfSearch2</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(min &lt;= max)&#123;</span><br><span class=\"line\">     mid = (min + max) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">       min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">       max = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;</p>\n</blockquote>\n<ul>\n<li>思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入</li>\n</ul>\n<h5 id=\"十进制转二进制\"><a href=\"#十进制转二进制\" class=\"headerlink\" title=\"十进制转二进制\"></a>十进制转二进制</h5>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decimalToBinary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">8</span>;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sb.append(num % <span class=\"number\">2</span>);</span><br><span class=\"line\">            num = num / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.reverse());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"十进制转十六进制\"><a href=\"#十进制转十六进制\" class=\"headerlink\" title=\"十进制转十六进制\"></a>十进制转十六进制</h5><ul>\n<li>第一种方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decimalToHexadecimal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> num = <span class=\"number\">60</span>;</span><br><span class=\"line\">      StringBuffer stringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">8</span>; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> temp = num &amp; <span class=\"number\">15</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (temp &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">              stringBuffer.append((<span class=\"keyword\">char</span>) (temp - <span class=\"number\">10</span> + <span class=\"string\">'A'</span>));</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              stringBuffer.append(temp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          num = num &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(stringBuffer.reverse());</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>二维数组的定义方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[][] array = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,&#123;<span class=\"number\">34</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;,&#123;<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;,&#123;<span class=\"number\">60</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">short</span>[][] array3 = <span class=\"keyword\">new</span> <span class=\"keyword\">short</span>[<span class=\"number\">5</span>][<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">float</span>[][] array4;</span><br><span class=\"line\">array4 = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><pre><code>  1. 数据类型分类: 基本数据类型, 引用数据类型\n  2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器\n\n- 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放;\n- 堆内存:\n  1. 数组和对象,通过 new 建立的实例都存放在堆内存中;\n  2. 每一个实体都有内存地址值;\n  3. 实体中的变量都有默认的初始化值\n  4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收\n</code></pre><h3 id=\"数组的定义方式\"><a href=\"#数组的定义方式\" class=\"headerlink\" title=\"数组的定义方式\"></a>数组的定义方式</h3><pre><code>1. int[] arr = new int[5]; (推荐写法)\n2. int arr[] = new int[5]; (与第一种意义相同)\n3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)\n4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)\n</code></pre><h4 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h4><h5 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length-<span class=\"number\">1</span>; x++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = x + <span class=\"number\">1</span>; y &lt; arr.length; y++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[x] &gt; arr[y])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[x];</span><br><span class=\"line\">                arr[x] = arr[y];</span><br><span class=\"line\">                arr[y] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置</p>\n</blockquote>\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length; x ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; arr.length - x - <span class=\"number\">1</span>; y ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[y] &gt; arr[y + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[y];</span><br><span class=\"line\">                arr[y] = arr[y + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[y + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置\"><a href=\"#说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置\" class=\"headerlink\" title=\"说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置\"></a>说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置</h5><h5 id=\"使用-java-util包中的-Array-sort-arr-可以进行排序数组\"><a href=\"#使用-java-util包中的-Array-sort-arr-可以进行排序数组\" class=\"headerlink\" title=\"使用 java.util包中的 Array.sort(arr); 可以进行排序数组\"></a>使用 java.util包中的 Array.sort(arr); 可以进行排序数组</h5><ul>\n<li>将数组交换的方法进行封装<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = arr[a];</span><br><span class=\"line\">    arr[b] = arr[a];</span><br><span class=\"line\">    arr[b] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"使用异或方式实现\"><a href=\"#使用异或方式实现\" class=\"headerlink\" title=\"使用异或方式实现\"></a>使用异或方式实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap1</span><span class=\"params\">(<span class=\"keyword\">int</span> arr, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    arr[b] = arr[b] ^ arr[a];</span><br><span class=\"line\">    arr[a] = arr[b] ^ arr[a];</span><br><span class=\"line\">    arr[b] = arr[b] ^ arr[a];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h4><h5 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">halfSearch</span> <span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (min + max)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(arr[mid] != key)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">      max = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">      min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mid = (min + max)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">halfSearch2</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(min &lt;= max)&#123;</span><br><span class=\"line\">     mid = (min + max) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">       min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">       max = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;</p>\n</blockquote>\n<ul>\n<li>思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入</li>\n</ul>\n<h5 id=\"十进制转二进制\"><a href=\"#十进制转二进制\" class=\"headerlink\" title=\"十进制转二进制\"></a>十进制转二进制</h5>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decimalToBinary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">8</span>;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sb.append(num % <span class=\"number\">2</span>);</span><br><span class=\"line\">            num = num / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.reverse());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"十进制转十六进制\"><a href=\"#十进制转十六进制\" class=\"headerlink\" title=\"十进制转十六进制\"></a>十进制转十六进制</h5><ul>\n<li>第一种方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decimalToHexadecimal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> num = <span class=\"number\">60</span>;</span><br><span class=\"line\">      StringBuffer stringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">8</span>; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> temp = num &amp; <span class=\"number\">15</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (temp &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">              stringBuffer.append((<span class=\"keyword\">char</span>) (temp - <span class=\"number\">10</span> + <span class=\"string\">'A'</span>));</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              stringBuffer.append(temp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          num = num &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(stringBuffer.reverse());</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>二维数组的定义方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[][] array = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,&#123;<span class=\"number\">34</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;,&#123;<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;,&#123;<span class=\"number\">60</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">short</span>[][] array3 = <span class=\"keyword\">new</span> <span class=\"keyword\">short</span>[<span class=\"number\">5</span>][<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">float</span>[][] array4;</span><br><span class=\"line\">array4 = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaReview-day06","date":"2017-11-30T11:49:08.000Z","type":["JavaReview"],"_content":"\n# Java复习第6天\n\n## static 关键字\n\n### static 的特点:\n\n1. 内存特点\n\n  - 存储位置: data segment(数据区 [也叫 共享区/方法区]);\n  - 可以通过 \"类名.静态成员\" 的方式调用;\n  - 随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长);\n  - 优先于对象存在(加载);\n  - 被所有对象所共享\n  - 只有数据被多个对象共享是才适合定义静态\n  - 可以直接被类名调用\n\n### 静态变量和非静态变量的举例\n\n```java\n    class Person{\n         String name;//成员变量，实例变量\n       static String country = \"CN\";//静态变量。类变量\n       public  void show(){\n\n         System.out.println(Person.country+\":\"+this.name);\n\n        }\n      }\n```\n\n- 静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量\n\n- 静态变量和非静态变量的访问权限的不同\n\n  - static方法只能访问static的变量，没有权限访问非static变量。\n  - static方法中声明的变量可以与非static变量并且是类的属性重名\n  - 方法中声明的变量可以与非static变量并且是类的属性重名\n  - 非static方法中可以方访问static变量。\n  - static方法可以访问static属性\n\n### 实例变量(静态变量)和类变量(非静态变量)的区别\n\n1. 存放位置:\n\n  - 类变量随着类的加载而存在于方法区中;\n  - 实例变量随着对象的建立而存在于堆内存中;\n\n2. 生命周期:\n\n  - 类变量的生命周期最长,随着类的消失而消失;\n  - 实例变量随着对象的消失而消失;\n\n### 静态使用注意事项\n\n- 静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员;\n- 静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this;\n- 主函数(main) 也是静态的;\n\n## main()函数\n\n1. 主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用;\n2. 主函数的定义:\n\n  - public: 代表着该函数访问权限是最大的;\n  - static: 代表主函数随着类的加载就已经存在了;\n  - void: 主函数没有具体的返回值;\n  - main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别;\n  - (String[] args): 函数的参数,参数类型是一个字符串类型的数组;\n\n3. 主函数的格式是固定的: JVM 可以识别的;\n\n4. JVM 在调用主函数时, 传入的参数是 new String[0];\n\n5. 可以在通过命令行运行时使用以下方式向 main 函数中传入参数:\n\n  ```bash\n  $java MainDemo hehe enen oo\n  ```\n\n  PS: 向 main 函数中传入 \"hehe\" \"enen\" \"oo\" 三个参数\n\n```java\n  class MainDemo\n  {\n      public static void main(String[] args) {\n        String[] arr = {\"hehe\", \"haha\", \"oo\", \"enen\"}\n        TestMain.main(arr);\n      }\n  }\n  class TestMain{\n    public static void main(String[] args) {\n      for(int x=0; x<args.length; x++){\n          System.out.println(args[x]);\n      }\n    }\n  }\n```\n\n### 静态的使用条件\n\n#### 可以分为两部分(因为静态修饰的内容有成员变量和函数):\n\n1. 什么时候定义静态变量:\n\n  - 当对象中出现共享的数据时, 该数据被静态所修饰;\n  - 对象中的特有数据要定义成非静态, 存在于堆内存中;\n\n2. 什么时候定义静态方法:\n\n  - 当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的;\n\n### JVM的编译特点\n\n- JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 **class文件**,如果没有, 再查找与其同名的 **java文件**,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错;\n\n### 类加载的特点\n\n- 只有用到类中的内容是, 类才被加载\n\n```java\nclass Demo{\n  System.out.println(\"a\");\n}\nclass TestDemo{\n  public static void main(String[] args) {\n    Demo demo = null;\n  }\n\n}\n```\n\n以上代码执行后没有运行结果, 因为 `TestDemo` 中并没有实际用到 `Demo` 中的内容\n\n## Java 帮助文档\n\n### Java注释常用标签实例\n\n- @see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。\n- @link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用\"label\"作为超链接文本而不用\"See Also\"\n- @docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接\n- @inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中\n- @version 该标签格式如下： @version version-information 其中，\"version-information\"可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了\"-version\"标记，那么久可以从生成的HTML文档中提取出版本信息\n- @author 该标签的格式如下： @author author-information 其中，\"author-information\",望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息\n- @since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本\n- @param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符\n- @throws 异常\n- @deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。\n\n### Java注释的使用顺序\n\n1. @author (classes and interfaces only, required)\n2. @version (classes and interfaces only, required. See footnote 1)\n3. @param (methods and constructors only)\n4. @return (methods only)\n5. @exception (@throws is a synonym added in Javadoc 1.2)\n6. @see\n7. @since\n8. @serial (or @serialField or @serialData)\n9. @deprecated (see How and When To Deprecate APIs)\n\n### 注意\n\n- 一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致;\n- 默认构造函数的权限是随着类的权限变化而变化的;\n\n### 静态代码块\n\n- 格式:\n\n  ```java\n  class{\n    static{\n        //静态代码块中的执行语句\n    }\n  }\n  ```\n\n- 特点: 随着类的加载而执行, **且只执行一次**;\n\n- 作用: 用于给类初始化\n\n### 应用: 类中各个代码块之间的执行顺序\n\n```java\n\n  class StaticCode{\n\n    StaticCode(){\n      System.out.print(\"b \");\n    }\n\n    static{\n      System.out.print(\"a \");\n    }\n\n    {\n      System.out.print(\"c \");\n    }\n\n    StaticCode(int x){\n      System.out.print(\"d \");\n    }\n  }\nclass StaticCodeDemo{\n  public static void main(String[] args) {\n    new StaticCode(4);\n  }\n}\n```\n\n- 以上代码的输出结果是: `a c d`\n\n#### 原因:\n\n  - 静态代码块的作用是给<font color=\"#005792\">**类**</font>初始化的, 随着类的加载而执行, **且只执行一次**;\n  - 构造代码块的作用是给<font color=\"#005792\">**对象(所有对象)**</font>初始化的,对象一建立就运行, 而且优先于构造函数执行;\n  - 构造函数的作用是给<font color=\"#005792\">**对应对象**</font>初始化\n\n参考链接: [Java中普通代码块，构造代码块，静态代码块区别及代码示例](https://www.cnblogs.com/sophine/p/3531282.html)\n\n### 总结\n\n1. 虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化\n2. 只有在调用new方法时才会创建类的实例\n3. 类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法\n4. 类实例销毁时候，首先销毁子类部分，再销毁父类部分\n\n## 对象的初始化过程\n\n```java\nclass class Person\n{\n    private int age;\n    private String name = \"Jack\";\n    private static String country = \"CN\";\n\n    Person(String name, int age){\n      this.name = name;\n      this.age = age;\n    }\n\n    public void speak()\n    {\n        System.out.println(\"name=\" + this.name + \", age=\"+age);\n    }\n}\n\nclass  PersonDemo\n{\n    public static void main(String[] args)\n    {\n        Person p = new Person(\"Tom\", 20);\n    }\n\n}\n```\n以上代码中 `Person p = new Person(\"Tom\", 20)`执行时 Java 所完成的工作:\n1. 在栈内存中创建变量 'p';\n2. 因为 \"new\" 用到了 <font color=\"red\">\"**Person.class**\"</font>, 所以先找到<font color=\"red\">\"**Person.class**\"</font>文件并加载到\n   内存中\n3. 执行该类中的 <font color=\"red\">**static 代码块**</font>, 给 <font color=\"red\">\"**Person 类**\"</font>进行初始化\n4. 在堆内存中开辟空间, 并分配内存地址\n5. 在内存中建立对象的特有属性, 并进行默认初始化\n6. 对属性进行显示初始化\n7. 对对象进行构造代码块初始化\n8. 对对象进行对应的构造函数初始化\n9. 将内存地址赋给栈内存中的 'p' 变量\n\n### 对象调用成员过程\n\n\n\n### 单例设计模式\n\n#### 例子\n\n下面是一个简单的单例设计模式的例子\n```java\n\n  class Single{\n\n    private Single(){}\n    private static Single s = new Single();\n    private static Single getInstance(){\n      return s;\n    }\n  }\n\n  class SingleDemo{\n    public static void main(String[] args) {\n      Single s = Single.getInstance();\n    }\n  }\n```\n#### 饿汉式\n\n```java\n\n  class Single{\n    private Single(){}\n    private static Single single = new Single();\n    public static Single getInstance(){\n      return single;\n    }\n  }\n\n```\n\n### 懒汉式\n\n```java\n\n  class Single{\n    private Single(){}\n    private static Single single = null;\n    public static Single getInstance(){\n      if (single == null) {\n        //如果在此卡住, 则会出现多个对象\n        single = new Single();\n      }\n      return single;\n    }\n\n  }\n\n```\n\n##### 懒汉式和饿汉式的区别\n\n- 饿汉式不管调不调用, 都会先加载对象, 而懒汉式则会在需要时才会进行加载对象\n\n##### 懒汉式最终解决方案\n```java\n  class Single{\n    private Single(){}\n    private static Single single = null;\n    public static Single getInstance(){\n      if (single == null) {\n        synchronized(Single.class){\n          if (single == null) {\n            single = new Single();\n          }\n        }\n\n      }\n      return single;\n    }\n\n  }\n```\n\n##### 注意!\n- 懒汉式加载会有安全性问题: 如果同时被多个对象同时调用, 则会出现多个对象\n- 开发用饿汉式\n","source":"_posts/JavaReview-day06.md","raw":"---\ntitle: JavaReview-day06\ndate: 2017-11-30T19:49:08.000Z\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n# Java复习第6天\n\n## static 关键字\n\n### static 的特点:\n\n1. 内存特点\n\n  - 存储位置: data segment(数据区 [也叫 共享区/方法区]);\n  - 可以通过 \"类名.静态成员\" 的方式调用;\n  - 随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长);\n  - 优先于对象存在(加载);\n  - 被所有对象所共享\n  - 只有数据被多个对象共享是才适合定义静态\n  - 可以直接被类名调用\n\n### 静态变量和非静态变量的举例\n\n```java\n    class Person{\n         String name;//成员变量，实例变量\n       static String country = \"CN\";//静态变量。类变量\n       public  void show(){\n\n         System.out.println(Person.country+\":\"+this.name);\n\n        }\n      }\n```\n\n- 静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量\n\n- 静态变量和非静态变量的访问权限的不同\n\n  - static方法只能访问static的变量，没有权限访问非static变量。\n  - static方法中声明的变量可以与非static变量并且是类的属性重名\n  - 方法中声明的变量可以与非static变量并且是类的属性重名\n  - 非static方法中可以方访问static变量。\n  - static方法可以访问static属性\n\n### 实例变量(静态变量)和类变量(非静态变量)的区别\n\n1. 存放位置:\n\n  - 类变量随着类的加载而存在于方法区中;\n  - 实例变量随着对象的建立而存在于堆内存中;\n\n2. 生命周期:\n\n  - 类变量的生命周期最长,随着类的消失而消失;\n  - 实例变量随着对象的消失而消失;\n\n### 静态使用注意事项\n\n- 静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员;\n- 静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this;\n- 主函数(main) 也是静态的;\n\n## main()函数\n\n1. 主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用;\n2. 主函数的定义:\n\n  - public: 代表着该函数访问权限是最大的;\n  - static: 代表主函数随着类的加载就已经存在了;\n  - void: 主函数没有具体的返回值;\n  - main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别;\n  - (String[] args): 函数的参数,参数类型是一个字符串类型的数组;\n\n3. 主函数的格式是固定的: JVM 可以识别的;\n\n4. JVM 在调用主函数时, 传入的参数是 new String[0];\n\n5. 可以在通过命令行运行时使用以下方式向 main 函数中传入参数:\n\n  ```bash\n  $java MainDemo hehe enen oo\n  ```\n\n  PS: 向 main 函数中传入 \"hehe\" \"enen\" \"oo\" 三个参数\n\n```java\n  class MainDemo\n  {\n      public static void main(String[] args) {\n        String[] arr = {\"hehe\", \"haha\", \"oo\", \"enen\"}\n        TestMain.main(arr);\n      }\n  }\n  class TestMain{\n    public static void main(String[] args) {\n      for(int x=0; x<args.length; x++){\n          System.out.println(args[x]);\n      }\n    }\n  }\n```\n\n### 静态的使用条件\n\n#### 可以分为两部分(因为静态修饰的内容有成员变量和函数):\n\n1. 什么时候定义静态变量:\n\n  - 当对象中出现共享的数据时, 该数据被静态所修饰;\n  - 对象中的特有数据要定义成非静态, 存在于堆内存中;\n\n2. 什么时候定义静态方法:\n\n  - 当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的;\n\n### JVM的编译特点\n\n- JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 **class文件**,如果没有, 再查找与其同名的 **java文件**,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错;\n\n### 类加载的特点\n\n- 只有用到类中的内容是, 类才被加载\n\n```java\nclass Demo{\n  System.out.println(\"a\");\n}\nclass TestDemo{\n  public static void main(String[] args) {\n    Demo demo = null;\n  }\n\n}\n```\n\n以上代码执行后没有运行结果, 因为 `TestDemo` 中并没有实际用到 `Demo` 中的内容\n\n## Java 帮助文档\n\n### Java注释常用标签实例\n\n- @see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。\n- @link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用\"label\"作为超链接文本而不用\"See Also\"\n- @docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接\n- @inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中\n- @version 该标签格式如下： @version version-information 其中，\"version-information\"可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了\"-version\"标记，那么久可以从生成的HTML文档中提取出版本信息\n- @author 该标签的格式如下： @author author-information 其中，\"author-information\",望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息\n- @since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本\n- @param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符\n- @throws 异常\n- @deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。\n\n### Java注释的使用顺序\n\n1. @author (classes and interfaces only, required)\n2. @version (classes and interfaces only, required. See footnote 1)\n3. @param (methods and constructors only)\n4. @return (methods only)\n5. @exception (@throws is a synonym added in Javadoc 1.2)\n6. @see\n7. @since\n8. @serial (or @serialField or @serialData)\n9. @deprecated (see How and When To Deprecate APIs)\n\n### 注意\n\n- 一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致;\n- 默认构造函数的权限是随着类的权限变化而变化的;\n\n### 静态代码块\n\n- 格式:\n\n  ```java\n  class{\n    static{\n        //静态代码块中的执行语句\n    }\n  }\n  ```\n\n- 特点: 随着类的加载而执行, **且只执行一次**;\n\n- 作用: 用于给类初始化\n\n### 应用: 类中各个代码块之间的执行顺序\n\n```java\n\n  class StaticCode{\n\n    StaticCode(){\n      System.out.print(\"b \");\n    }\n\n    static{\n      System.out.print(\"a \");\n    }\n\n    {\n      System.out.print(\"c \");\n    }\n\n    StaticCode(int x){\n      System.out.print(\"d \");\n    }\n  }\nclass StaticCodeDemo{\n  public static void main(String[] args) {\n    new StaticCode(4);\n  }\n}\n```\n\n- 以上代码的输出结果是: `a c d`\n\n#### 原因:\n\n  - 静态代码块的作用是给<font color=\"#005792\">**类**</font>初始化的, 随着类的加载而执行, **且只执行一次**;\n  - 构造代码块的作用是给<font color=\"#005792\">**对象(所有对象)**</font>初始化的,对象一建立就运行, 而且优先于构造函数执行;\n  - 构造函数的作用是给<font color=\"#005792\">**对应对象**</font>初始化\n\n参考链接: [Java中普通代码块，构造代码块，静态代码块区别及代码示例](https://www.cnblogs.com/sophine/p/3531282.html)\n\n### 总结\n\n1. 虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化\n2. 只有在调用new方法时才会创建类的实例\n3. 类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法\n4. 类实例销毁时候，首先销毁子类部分，再销毁父类部分\n\n## 对象的初始化过程\n\n```java\nclass class Person\n{\n    private int age;\n    private String name = \"Jack\";\n    private static String country = \"CN\";\n\n    Person(String name, int age){\n      this.name = name;\n      this.age = age;\n    }\n\n    public void speak()\n    {\n        System.out.println(\"name=\" + this.name + \", age=\"+age);\n    }\n}\n\nclass  PersonDemo\n{\n    public static void main(String[] args)\n    {\n        Person p = new Person(\"Tom\", 20);\n    }\n\n}\n```\n以上代码中 `Person p = new Person(\"Tom\", 20)`执行时 Java 所完成的工作:\n1. 在栈内存中创建变量 'p';\n2. 因为 \"new\" 用到了 <font color=\"red\">\"**Person.class**\"</font>, 所以先找到<font color=\"red\">\"**Person.class**\"</font>文件并加载到\n   内存中\n3. 执行该类中的 <font color=\"red\">**static 代码块**</font>, 给 <font color=\"red\">\"**Person 类**\"</font>进行初始化\n4. 在堆内存中开辟空间, 并分配内存地址\n5. 在内存中建立对象的特有属性, 并进行默认初始化\n6. 对属性进行显示初始化\n7. 对对象进行构造代码块初始化\n8. 对对象进行对应的构造函数初始化\n9. 将内存地址赋给栈内存中的 'p' 变量\n\n### 对象调用成员过程\n\n\n\n### 单例设计模式\n\n#### 例子\n\n下面是一个简单的单例设计模式的例子\n```java\n\n  class Single{\n\n    private Single(){}\n    private static Single s = new Single();\n    private static Single getInstance(){\n      return s;\n    }\n  }\n\n  class SingleDemo{\n    public static void main(String[] args) {\n      Single s = Single.getInstance();\n    }\n  }\n```\n#### 饿汉式\n\n```java\n\n  class Single{\n    private Single(){}\n    private static Single single = new Single();\n    public static Single getInstance(){\n      return single;\n    }\n  }\n\n```\n\n### 懒汉式\n\n```java\n\n  class Single{\n    private Single(){}\n    private static Single single = null;\n    public static Single getInstance(){\n      if (single == null) {\n        //如果在此卡住, 则会出现多个对象\n        single = new Single();\n      }\n      return single;\n    }\n\n  }\n\n```\n\n##### 懒汉式和饿汉式的区别\n\n- 饿汉式不管调不调用, 都会先加载对象, 而懒汉式则会在需要时才会进行加载对象\n\n##### 懒汉式最终解决方案\n```java\n  class Single{\n    private Single(){}\n    private static Single single = null;\n    public static Single getInstance(){\n      if (single == null) {\n        synchronized(Single.class){\n          if (single == null) {\n            single = new Single();\n          }\n        }\n\n      }\n      return single;\n    }\n\n  }\n```\n\n##### 注意!\n- 懒汉式加载会有安全性问题: 如果同时被多个对象同时调用, 则会出现多个对象\n- 开发用饿汉式\n","slug":"JavaReview-day06","published":1,"updated":"2017-12-23T10:21:52.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz5d0007fkkxdeohlssa","content":"<h1 id=\"Java复习第6天\"><a href=\"#Java复习第6天\" class=\"headerlink\" title=\"Java复习第6天\"></a>Java复习第6天</h1><h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"static-的特点\"><a href=\"#static-的特点\" class=\"headerlink\" title=\"static 的特点:\"></a>static 的特点:</h3><ol>\n<li><p>内存特点</p>\n<ul>\n<li>存储位置: data segment(数据区 [也叫 共享区/方法区]);</li>\n<li>可以通过 “类名.静态成员” 的方式调用;</li>\n<li>随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长);</li>\n<li>优先于对象存在(加载);</li>\n<li>被所有对象所共享</li>\n<li>只有数据被多个对象共享是才适合定义静态</li>\n<li>可以直接被类名调用</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"静态变量和非静态变量的举例\"><a href=\"#静态变量和非静态变量的举例\" class=\"headerlink\" title=\"静态变量和非静态变量的举例\"></a>静态变量和非静态变量的举例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">     String name;<span class=\"comment\">//成员变量，实例变量</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> String country = <span class=\"string\">\"CN\"</span>;<span class=\"comment\">//静态变量。类变量</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(Person.country+<span class=\"string\">\":\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量</p>\n</li>\n<li><p>静态变量和非静态变量的访问权限的不同</p>\n<ul>\n<li>static方法只能访问static的变量，没有权限访问非static变量。</li>\n<li>static方法中声明的变量可以与非static变量并且是类的属性重名</li>\n<li>方法中声明的变量可以与非static变量并且是类的属性重名</li>\n<li>非static方法中可以方访问static变量。</li>\n<li>static方法可以访问static属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实例变量-静态变量-和类变量-非静态变量-的区别\"><a href=\"#实例变量-静态变量-和类变量-非静态变量-的区别\" class=\"headerlink\" title=\"实例变量(静态变量)和类变量(非静态变量)的区别\"></a>实例变量(静态变量)和类变量(非静态变量)的区别</h3><ol>\n<li><p>存放位置:</p>\n<ul>\n<li>类变量随着类的加载而存在于方法区中;</li>\n<li>实例变量随着对象的建立而存在于堆内存中;</li>\n</ul>\n</li>\n<li><p>生命周期:</p>\n<ul>\n<li>类变量的生命周期最长,随着类的消失而消失;</li>\n<li>实例变量随着对象的消失而消失;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"静态使用注意事项\"><a href=\"#静态使用注意事项\" class=\"headerlink\" title=\"静态使用注意事项\"></a>静态使用注意事项</h3><ul>\n<li>静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员;</li>\n<li>静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this;</li>\n<li>主函数(main) 也是静态的;</li>\n</ul>\n<h2 id=\"main-函数\"><a href=\"#main-函数\" class=\"headerlink\" title=\"main()函数\"></a>main()函数</h2><ol>\n<li>主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用;</li>\n<li><p>主函数的定义:</p>\n<ul>\n<li>public: 代表着该函数访问权限是最大的;</li>\n<li>static: 代表主函数随着类的加载就已经存在了;</li>\n<li>void: 主函数没有具体的返回值;</li>\n<li>main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别;</li>\n<li>(String[] args): 函数的参数,参数类型是一个字符串类型的数组;</li>\n</ul>\n</li>\n<li><p>主函数的格式是固定的: JVM 可以识别的;</p>\n</li>\n<li><p>JVM 在调用主函数时, 传入的参数是 new String[0];</p>\n</li>\n<li><p>可以在通过命令行运行时使用以下方式向 main 函数中传入参数:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$java</span> MainDemo hehe enen oo</span><br></pre></td></tr></table></figure>\n<p>PS: 向 main 函数中传入 “hehe” “enen” “oo” 三个参数</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      String[] arr = &#123;<span class=\"string\">\"hehe\"</span>, <span class=\"string\">\"haha\"</span>, <span class=\"string\">\"oo\"</span>, <span class=\"string\">\"enen\"</span>&#125;</span><br><span class=\"line\">      TestMain.main(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMain</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;args.length; x++)&#123;</span><br><span class=\"line\">        System.out.println(args[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态的使用条件\"><a href=\"#静态的使用条件\" class=\"headerlink\" title=\"静态的使用条件\"></a>静态的使用条件</h3><h4 id=\"可以分为两部分-因为静态修饰的内容有成员变量和函数\"><a href=\"#可以分为两部分-因为静态修饰的内容有成员变量和函数\" class=\"headerlink\" title=\"可以分为两部分(因为静态修饰的内容有成员变量和函数):\"></a>可以分为两部分(因为静态修饰的内容有成员变量和函数):</h4><ol>\n<li><p>什么时候定义静态变量:</p>\n<ul>\n<li>当对象中出现共享的数据时, 该数据被静态所修饰;</li>\n<li>对象中的特有数据要定义成非静态, 存在于堆内存中;</li>\n</ul>\n</li>\n<li><p>什么时候定义静态方法:</p>\n<ul>\n<li>当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"JVM的编译特点\"><a href=\"#JVM的编译特点\" class=\"headerlink\" title=\"JVM的编译特点\"></a>JVM的编译特点</h3><ul>\n<li>JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 <strong>class文件</strong>,如果没有, 再查找与其同名的 <strong>java文件</strong>,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错;</li>\n</ul>\n<h3 id=\"类加载的特点\"><a href=\"#类加载的特点\" class=\"headerlink\" title=\"类加载的特点\"></a>类加载的特点</h3><ul>\n<li>只有用到类中的内容是, 类才被加载</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Demo demo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码执行后没有运行结果, 因为 <code>TestDemo</code> 中并没有实际用到 <code>Demo</code> 中的内容</p>\n<h2 id=\"Java-帮助文档\"><a href=\"#Java-帮助文档\" class=\"headerlink\" title=\"Java 帮助文档\"></a>Java 帮助文档</h2><h3 id=\"Java注释常用标签实例\"><a href=\"#Java注释常用标签实例\" class=\"headerlink\" title=\"Java注释常用标签实例\"></a>Java注释常用标签实例</h3><ul>\n<li>@see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。</li>\n<li>@link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用”label”作为超链接文本而不用”See Also”</li>\n<li>@docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接</li>\n<li>@inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中</li>\n<li>@version 该标签格式如下： @version version-information 其中，”version-information”可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了”-version”标记，那么久可以从生成的HTML文档中提取出版本信息</li>\n<li>@author 该标签的格式如下： @author author-information 其中，”author-information”,望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息</li>\n<li>@since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本</li>\n<li>@param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符</li>\n<li>@throws 异常</li>\n<li>@deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。</li>\n</ul>\n<h3 id=\"Java注释的使用顺序\"><a href=\"#Java注释的使用顺序\" class=\"headerlink\" title=\"Java注释的使用顺序\"></a>Java注释的使用顺序</h3><ol>\n<li>@author (classes and interfaces only, required)</li>\n<li>@version (classes and interfaces only, required. See footnote 1)</li>\n<li>@param (methods and constructors only)</li>\n<li>@return (methods only)</li>\n<li>@exception (@throws is a synonym added in Javadoc 1.2)</li>\n<li>@see</li>\n<li>@since</li>\n<li>@serial (or @serialField or @serialData)</li>\n<li>@deprecated (see How and When To Deprecate APIs)</li>\n</ol>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致;</li>\n<li>默认构造函数的权限是随着类的权限变化而变化的;</li>\n</ul>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><ul>\n<li><p>格式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//静态代码块中的执行语句</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特点: 随着类的加载而执行, <strong>且只执行一次</strong>;</p>\n</li>\n<li><p>作用: 用于给类初始化</p>\n</li>\n</ul>\n<h3 id=\"应用-类中各个代码块之间的执行顺序\"><a href=\"#应用-类中各个代码块之间的执行顺序\" class=\"headerlink\" title=\"应用: 类中各个代码块之间的执行顺序\"></a>应用: 类中各个代码块之间的执行顺序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticCode</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    StaticCode()&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"b \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"a \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"c \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    StaticCode(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"d \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticCodeDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> StaticCode(<span class=\"number\">4</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以上代码的输出结果是: <code>a c d</code></li>\n</ul>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因:\"></a>原因:</h4><ul>\n<li>静态代码块的作用是给<font color=\"#005792\"><strong>类</strong></font>初始化的, 随着类的加载而执行, <strong>且只执行一次</strong>;</li>\n<li>构造代码块的作用是给<font color=\"#005792\"><strong>对象(所有对象)</strong></font>初始化的,对象一建立就运行, 而且优先于构造函数执行;</li>\n<li>构造函数的作用是给<font color=\"#005792\"><strong>对应对象</strong></font>初始化</li>\n</ul>\n<p>参考链接: <a href=\"https://www.cnblogs.com/sophine/p/3531282.html\" target=\"_blank\" rel=\"noopener\">Java中普通代码块，构造代码块，静态代码块区别及代码示例</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化</li>\n<li>只有在调用new方法时才会创建类的实例</li>\n<li>类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法</li>\n<li>类实例销毁时候，首先销毁子类部分，再销毁父类部分</li>\n</ol>\n<h2 id=\"对象的初始化过程\"><a href=\"#对象的初始化过程\" class=\"headerlink\" title=\"对象的初始化过程\"></a>对象的初始化过程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = <span class=\"string\">\"Jack\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String country = <span class=\"string\">\"CN\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"name=\"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\", age=\"</span>+age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">PersonDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中 <code>Person p = new Person(&quot;Tom&quot;, 20)</code>执行时 Java 所完成的工作:</p>\n<ol>\n<li>在栈内存中创建变量 ‘p’;</li>\n<li>因为 “new” 用到了 <font color=\"red\">“<strong>Person.class</strong>“</font>, 所以先找到<font color=\"red\">“<strong>Person.class</strong>“</font>文件并加载到<br>内存中</li>\n<li>执行该类中的 <font color=\"red\"><strong>static 代码块</strong></font>, 给 <font color=\"red\">“<strong>Person 类</strong>“</font>进行初始化</li>\n<li>在堆内存中开辟空间, 并分配内存地址</li>\n<li>在内存中建立对象的特有属性, 并进行默认初始化</li>\n<li>对属性进行显示初始化</li>\n<li>对对象进行构造代码块初始化</li>\n<li>对对象进行对应的构造函数初始化</li>\n<li>将内存地址赋给栈内存中的 ‘p’ 变量</li>\n</ol>\n<h3 id=\"对象调用成员过程\"><a href=\"#对象调用成员过程\" class=\"headerlink\" title=\"对象调用成员过程\"></a>对象调用成员过程</h3><h3 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h3><h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>下面是一个简单的单例设计模式的例子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single s = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Single s = Single.getInstance();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果在此卡住, 则会出现多个对象</span></span><br><span class=\"line\">      single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"懒汉式和饿汉式的区别\"><a href=\"#懒汉式和饿汉式的区别\" class=\"headerlink\" title=\"懒汉式和饿汉式的区别\"></a>懒汉式和饿汉式的区别</h5><ul>\n<li>饿汉式不管调不调用, 都会先加载对象, 而懒汉式则会在需要时才会进行加载对象</li>\n</ul>\n<h5 id=\"懒汉式最终解决方案\"><a href=\"#懒汉式最终解决方案\" class=\"headerlink\" title=\"懒汉式最终解决方案\"></a>懒汉式最终解决方案</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span>(Single.class)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意!\"></a>注意!</h5><ul>\n<li>懒汉式加载会有安全性问题: 如果同时被多个对象同时调用, 则会出现多个对象</li>\n<li>开发用饿汉式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java复习第6天\"><a href=\"#Java复习第6天\" class=\"headerlink\" title=\"Java复习第6天\"></a>Java复习第6天</h1><h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"static-的特点\"><a href=\"#static-的特点\" class=\"headerlink\" title=\"static 的特点:\"></a>static 的特点:</h3><ol>\n<li><p>内存特点</p>\n<ul>\n<li>存储位置: data segment(数据区 [也叫 共享区/方法区]);</li>\n<li>可以通过 “类名.静态成员” 的方式调用;</li>\n<li>随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长);</li>\n<li>优先于对象存在(加载);</li>\n<li>被所有对象所共享</li>\n<li>只有数据被多个对象共享是才适合定义静态</li>\n<li>可以直接被类名调用</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"静态变量和非静态变量的举例\"><a href=\"#静态变量和非静态变量的举例\" class=\"headerlink\" title=\"静态变量和非静态变量的举例\"></a>静态变量和非静态变量的举例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">     String name;<span class=\"comment\">//成员变量，实例变量</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> String country = <span class=\"string\">\"CN\"</span>;<span class=\"comment\">//静态变量。类变量</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(Person.country+<span class=\"string\">\":\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量</p>\n</li>\n<li><p>静态变量和非静态变量的访问权限的不同</p>\n<ul>\n<li>static方法只能访问static的变量，没有权限访问非static变量。</li>\n<li>static方法中声明的变量可以与非static变量并且是类的属性重名</li>\n<li>方法中声明的变量可以与非static变量并且是类的属性重名</li>\n<li>非static方法中可以方访问static变量。</li>\n<li>static方法可以访问static属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实例变量-静态变量-和类变量-非静态变量-的区别\"><a href=\"#实例变量-静态变量-和类变量-非静态变量-的区别\" class=\"headerlink\" title=\"实例变量(静态变量)和类变量(非静态变量)的区别\"></a>实例变量(静态变量)和类变量(非静态变量)的区别</h3><ol>\n<li><p>存放位置:</p>\n<ul>\n<li>类变量随着类的加载而存在于方法区中;</li>\n<li>实例变量随着对象的建立而存在于堆内存中;</li>\n</ul>\n</li>\n<li><p>生命周期:</p>\n<ul>\n<li>类变量的生命周期最长,随着类的消失而消失;</li>\n<li>实例变量随着对象的消失而消失;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"静态使用注意事项\"><a href=\"#静态使用注意事项\" class=\"headerlink\" title=\"静态使用注意事项\"></a>静态使用注意事项</h3><ul>\n<li>静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员;</li>\n<li>静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this;</li>\n<li>主函数(main) 也是静态的;</li>\n</ul>\n<h2 id=\"main-函数\"><a href=\"#main-函数\" class=\"headerlink\" title=\"main()函数\"></a>main()函数</h2><ol>\n<li>主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用;</li>\n<li><p>主函数的定义:</p>\n<ul>\n<li>public: 代表着该函数访问权限是最大的;</li>\n<li>static: 代表主函数随着类的加载就已经存在了;</li>\n<li>void: 主函数没有具体的返回值;</li>\n<li>main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别;</li>\n<li>(String[] args): 函数的参数,参数类型是一个字符串类型的数组;</li>\n</ul>\n</li>\n<li><p>主函数的格式是固定的: JVM 可以识别的;</p>\n</li>\n<li><p>JVM 在调用主函数时, 传入的参数是 new String[0];</p>\n</li>\n<li><p>可以在通过命令行运行时使用以下方式向 main 函数中传入参数:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$java</span> MainDemo hehe enen oo</span><br></pre></td></tr></table></figure>\n<p>PS: 向 main 函数中传入 “hehe” “enen” “oo” 三个参数</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      String[] arr = &#123;<span class=\"string\">\"hehe\"</span>, <span class=\"string\">\"haha\"</span>, <span class=\"string\">\"oo\"</span>, <span class=\"string\">\"enen\"</span>&#125;</span><br><span class=\"line\">      TestMain.main(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMain</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;args.length; x++)&#123;</span><br><span class=\"line\">        System.out.println(args[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态的使用条件\"><a href=\"#静态的使用条件\" class=\"headerlink\" title=\"静态的使用条件\"></a>静态的使用条件</h3><h4 id=\"可以分为两部分-因为静态修饰的内容有成员变量和函数\"><a href=\"#可以分为两部分-因为静态修饰的内容有成员变量和函数\" class=\"headerlink\" title=\"可以分为两部分(因为静态修饰的内容有成员变量和函数):\"></a>可以分为两部分(因为静态修饰的内容有成员变量和函数):</h4><ol>\n<li><p>什么时候定义静态变量:</p>\n<ul>\n<li>当对象中出现共享的数据时, 该数据被静态所修饰;</li>\n<li>对象中的特有数据要定义成非静态, 存在于堆内存中;</li>\n</ul>\n</li>\n<li><p>什么时候定义静态方法:</p>\n<ul>\n<li>当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"JVM的编译特点\"><a href=\"#JVM的编译特点\" class=\"headerlink\" title=\"JVM的编译特点\"></a>JVM的编译特点</h3><ul>\n<li>JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 <strong>class文件</strong>,如果没有, 再查找与其同名的 <strong>java文件</strong>,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错;</li>\n</ul>\n<h3 id=\"类加载的特点\"><a href=\"#类加载的特点\" class=\"headerlink\" title=\"类加载的特点\"></a>类加载的特点</h3><ul>\n<li>只有用到类中的内容是, 类才被加载</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Demo demo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码执行后没有运行结果, 因为 <code>TestDemo</code> 中并没有实际用到 <code>Demo</code> 中的内容</p>\n<h2 id=\"Java-帮助文档\"><a href=\"#Java-帮助文档\" class=\"headerlink\" title=\"Java 帮助文档\"></a>Java 帮助文档</h2><h3 id=\"Java注释常用标签实例\"><a href=\"#Java注释常用标签实例\" class=\"headerlink\" title=\"Java注释常用标签实例\"></a>Java注释常用标签实例</h3><ul>\n<li>@see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。</li>\n<li>@link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用”label”作为超链接文本而不用”See Also”</li>\n<li>@docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接</li>\n<li>@inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中</li>\n<li>@version 该标签格式如下： @version version-information 其中，”version-information”可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了”-version”标记，那么久可以从生成的HTML文档中提取出版本信息</li>\n<li>@author 该标签的格式如下： @author author-information 其中，”author-information”,望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息</li>\n<li>@since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本</li>\n<li>@param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符</li>\n<li>@throws 异常</li>\n<li>@deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。</li>\n</ul>\n<h3 id=\"Java注释的使用顺序\"><a href=\"#Java注释的使用顺序\" class=\"headerlink\" title=\"Java注释的使用顺序\"></a>Java注释的使用顺序</h3><ol>\n<li>@author (classes and interfaces only, required)</li>\n<li>@version (classes and interfaces only, required. See footnote 1)</li>\n<li>@param (methods and constructors only)</li>\n<li>@return (methods only)</li>\n<li>@exception (@throws is a synonym added in Javadoc 1.2)</li>\n<li>@see</li>\n<li>@since</li>\n<li>@serial (or @serialField or @serialData)</li>\n<li>@deprecated (see How and When To Deprecate APIs)</li>\n</ol>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致;</li>\n<li>默认构造函数的权限是随着类的权限变化而变化的;</li>\n</ul>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><ul>\n<li><p>格式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//静态代码块中的执行语句</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特点: 随着类的加载而执行, <strong>且只执行一次</strong>;</p>\n</li>\n<li><p>作用: 用于给类初始化</p>\n</li>\n</ul>\n<h3 id=\"应用-类中各个代码块之间的执行顺序\"><a href=\"#应用-类中各个代码块之间的执行顺序\" class=\"headerlink\" title=\"应用: 类中各个代码块之间的执行顺序\"></a>应用: 类中各个代码块之间的执行顺序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticCode</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    StaticCode()&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"b \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"a \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"c \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    StaticCode(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"d \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticCodeDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> StaticCode(<span class=\"number\">4</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以上代码的输出结果是: <code>a c d</code></li>\n</ul>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因:\"></a>原因:</h4><ul>\n<li>静态代码块的作用是给<font color=\"#005792\"><strong>类</strong></font>初始化的, 随着类的加载而执行, <strong>且只执行一次</strong>;</li>\n<li>构造代码块的作用是给<font color=\"#005792\"><strong>对象(所有对象)</strong></font>初始化的,对象一建立就运行, 而且优先于构造函数执行;</li>\n<li>构造函数的作用是给<font color=\"#005792\"><strong>对应对象</strong></font>初始化</li>\n</ul>\n<p>参考链接: <a href=\"https://www.cnblogs.com/sophine/p/3531282.html\" target=\"_blank\" rel=\"noopener\">Java中普通代码块，构造代码块，静态代码块区别及代码示例</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化</li>\n<li>只有在调用new方法时才会创建类的实例</li>\n<li>类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法</li>\n<li>类实例销毁时候，首先销毁子类部分，再销毁父类部分</li>\n</ol>\n<h2 id=\"对象的初始化过程\"><a href=\"#对象的初始化过程\" class=\"headerlink\" title=\"对象的初始化过程\"></a>对象的初始化过程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = <span class=\"string\">\"Jack\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String country = <span class=\"string\">\"CN\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"name=\"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\", age=\"</span>+age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">PersonDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中 <code>Person p = new Person(&quot;Tom&quot;, 20)</code>执行时 Java 所完成的工作:</p>\n<ol>\n<li>在栈内存中创建变量 ‘p’;</li>\n<li>因为 “new” 用到了 <font color=\"red\">“<strong>Person.class</strong>“</font>, 所以先找到<font color=\"red\">“<strong>Person.class</strong>“</font>文件并加载到<br>内存中</li>\n<li>执行该类中的 <font color=\"red\"><strong>static 代码块</strong></font>, 给 <font color=\"red\">“<strong>Person 类</strong>“</font>进行初始化</li>\n<li>在堆内存中开辟空间, 并分配内存地址</li>\n<li>在内存中建立对象的特有属性, 并进行默认初始化</li>\n<li>对属性进行显示初始化</li>\n<li>对对象进行构造代码块初始化</li>\n<li>对对象进行对应的构造函数初始化</li>\n<li>将内存地址赋给栈内存中的 ‘p’ 变量</li>\n</ol>\n<h3 id=\"对象调用成员过程\"><a href=\"#对象调用成员过程\" class=\"headerlink\" title=\"对象调用成员过程\"></a>对象调用成员过程</h3><h3 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h3><h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>下面是一个简单的单例设计模式的例子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single s = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Single s = Single.getInstance();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果在此卡住, 则会出现多个对象</span></span><br><span class=\"line\">      single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"懒汉式和饿汉式的区别\"><a href=\"#懒汉式和饿汉式的区别\" class=\"headerlink\" title=\"懒汉式和饿汉式的区别\"></a>懒汉式和饿汉式的区别</h5><ul>\n<li>饿汉式不管调不调用, 都会先加载对象, 而懒汉式则会在需要时才会进行加载对象</li>\n</ul>\n<h5 id=\"懒汉式最终解决方案\"><a href=\"#懒汉式最终解决方案\" class=\"headerlink\" title=\"懒汉式最终解决方案\"></a>懒汉式最终解决方案</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span>(Single.class)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意!\"></a>注意!</h5><ul>\n<li>懒汉式加载会有安全性问题: 如果同时被多个对象同时调用, 则会出现多个对象</li>\n<li>开发用饿汉式</li>\n</ul>\n"},{"title":"JavaReview-day07","date":"2017-12-18T11:14:57.000Z","type":["JavaReview"],"_content":"\n## 继承\n\n特点:\n - 提高了代码的复用性;\n - 让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;\n - Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患\n\n\n### 重写(覆盖)\n\n- 当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父\n类的函数被覆盖一样.\n- 当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类\n不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容.\n\n1. 子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败.\n2. 静态只能覆盖静态\n3. 如果父类中的方法权限为`private`, 则子类无法重写该方法.\n\n\n### 重写和重载的区别\n\n- 重载: 只看同名函数的参数列表\n- 重写: 子父类方法要一模一样\n\n### 子父类中构造函数的特点\n\n```java\n  class Father{\n    Father(){\n      System.out.println(\"Father run |\");\n    }\n  }\n  class Son extends Parent {\n    Sun(){\n      // super();\n      System.out.println(\"Son run |\");\n    }\n  }\n  class Demo{\n    public static void main(String[] args) {\n      Son s = new Son();\n    }\n  }\n\n```\n以上程序的运行结果为 `Father run | Son run |` ;\n\n- 子类中的构造函数第一行会隐式的存在一句 `super()` 默认调用父类中默认的构造方法;\n- 如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 `super(xxx)`\n手动的来指定父类中特定的构造函数;\n\n#### 注意\n\n- `super()` 语句一定是在子类构造函数的第一行\n\n```java\n  public class TestExtend {\n\n    public static void main(String[] args) {\n        Son s = new Son(4);\n    }\n  }\n  class Father{\n    public int m;\n    Father(){\n        m = 2;\n        System.out.println(\"Father Run\");\n    }\n    Father(int x){\n        m = 6;\n        System.out.println(\"TTTT\");\n    }\n  }\n  class Son extends Father{\n    Son(){\n      this(4);\n      System.out.println(this.m);\n      System.out.println(\"Son run\");\n    }\n    Son(int x){\n      this();\n      System.out.println(\"MMMM\");\n    }\n}\n\n```\n\n- 以上代码会出现编译错误, 错误原因为 `recursive constructor invocation`意思为\n'<font color='red'>构造器中出现了递归调用, 这是不被允许的</font>';\n\n### final 关键字\n\n- final: 最终. 作为一个修饰符;\n\n#### 作用及特点\n\n1. 可以修饰类, 函数, 变量;\n2. 被 `final` 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能;\n3. 被 `final` 修饰的方法不可以被复写;\n4. 被 `final` 修饰的变量是一个常量且只能赋值一次; `final` 既可以修饰成员变量, 又可以修饰\n局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值起个\n名字, 方便与阅读;\n5. 内部类定义在类中的局部位置上时, 只能访问局部被 `final` 修饰的局部变量;\n\n\n### 抽象类(abstract)\n\n- 特点:\n  1. 抽象方法一定定义在抽象类中;\n  2. 抽象方法和抽象类都必须被 `abstract` 关键字修饰;\n  3. 抽象类不可以用 `new` 创建对象, 因为调用抽象方法没有意义;\n  4. 抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, **如\n  果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类**\n\n- 抽象类和一般类的区别:\n  1. 抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法;\n  2. 抽象类不可以实例化;\n\n- 特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象;\n- `abstract` 只可以修饰类和方法, 不能修饰变量;\n\n\n### 模板方法设计模式\n","source":"_posts/JavaReview-day07.md","raw":"---\ntitle: JavaReview-day07\ndate: 2017-12-18 19:14:57\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n## 继承\n\n特点:\n - 提高了代码的复用性;\n - 让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;\n - Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患\n\n\n### 重写(覆盖)\n\n- 当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父\n类的函数被覆盖一样.\n- 当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类\n不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容.\n\n1. 子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败.\n2. 静态只能覆盖静态\n3. 如果父类中的方法权限为`private`, 则子类无法重写该方法.\n\n\n### 重写和重载的区别\n\n- 重载: 只看同名函数的参数列表\n- 重写: 子父类方法要一模一样\n\n### 子父类中构造函数的特点\n\n```java\n  class Father{\n    Father(){\n      System.out.println(\"Father run |\");\n    }\n  }\n  class Son extends Parent {\n    Sun(){\n      // super();\n      System.out.println(\"Son run |\");\n    }\n  }\n  class Demo{\n    public static void main(String[] args) {\n      Son s = new Son();\n    }\n  }\n\n```\n以上程序的运行结果为 `Father run | Son run |` ;\n\n- 子类中的构造函数第一行会隐式的存在一句 `super()` 默认调用父类中默认的构造方法;\n- 如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 `super(xxx)`\n手动的来指定父类中特定的构造函数;\n\n#### 注意\n\n- `super()` 语句一定是在子类构造函数的第一行\n\n```java\n  public class TestExtend {\n\n    public static void main(String[] args) {\n        Son s = new Son(4);\n    }\n  }\n  class Father{\n    public int m;\n    Father(){\n        m = 2;\n        System.out.println(\"Father Run\");\n    }\n    Father(int x){\n        m = 6;\n        System.out.println(\"TTTT\");\n    }\n  }\n  class Son extends Father{\n    Son(){\n      this(4);\n      System.out.println(this.m);\n      System.out.println(\"Son run\");\n    }\n    Son(int x){\n      this();\n      System.out.println(\"MMMM\");\n    }\n}\n\n```\n\n- 以上代码会出现编译错误, 错误原因为 `recursive constructor invocation`意思为\n'<font color='red'>构造器中出现了递归调用, 这是不被允许的</font>';\n\n### final 关键字\n\n- final: 最终. 作为一个修饰符;\n\n#### 作用及特点\n\n1. 可以修饰类, 函数, 变量;\n2. 被 `final` 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能;\n3. 被 `final` 修饰的方法不可以被复写;\n4. 被 `final` 修饰的变量是一个常量且只能赋值一次; `final` 既可以修饰成员变量, 又可以修饰\n局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值起个\n名字, 方便与阅读;\n5. 内部类定义在类中的局部位置上时, 只能访问局部被 `final` 修饰的局部变量;\n\n\n### 抽象类(abstract)\n\n- 特点:\n  1. 抽象方法一定定义在抽象类中;\n  2. 抽象方法和抽象类都必须被 `abstract` 关键字修饰;\n  3. 抽象类不可以用 `new` 创建对象, 因为调用抽象方法没有意义;\n  4. 抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, **如\n  果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类**\n\n- 抽象类和一般类的区别:\n  1. 抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法;\n  2. 抽象类不可以实例化;\n\n- 特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象;\n- `abstract` 只可以修饰类和方法, 不能修饰变量;\n\n\n### 模板方法设计模式\n","slug":"JavaReview-day07","published":1,"updated":"2017-12-23T11:07:27.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz5h000bfkkxz0nsv6g6","content":"<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>特点:</p>\n<ul>\n<li>提高了代码的复用性;</li>\n<li>让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;</li>\n<li>Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患</li>\n</ul>\n<h3 id=\"重写-覆盖\"><a href=\"#重写-覆盖\" class=\"headerlink\" title=\"重写(覆盖)\"></a>重写(覆盖)</h3><ul>\n<li>当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父<br>类的函数被覆盖一样.</li>\n<li>当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类<br>不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容.</li>\n</ul>\n<ol>\n<li>子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败.</li>\n<li>静态只能覆盖静态</li>\n<li>如果父类中的方法权限为<code>private</code>, 则子类无法重写该方法.</li>\n</ol>\n<h3 id=\"重写和重载的区别\"><a href=\"#重写和重载的区别\" class=\"headerlink\" title=\"重写和重载的区别\"></a>重写和重载的区别</h3><ul>\n<li>重载: 只看同名函数的参数列表</li>\n<li>重写: 子父类方法要一模一样</li>\n</ul>\n<h3 id=\"子父类中构造函数的特点\"><a href=\"#子父类中构造函数的特点\" class=\"headerlink\" title=\"子父类中构造函数的特点\"></a>子父类中构造函数的特点</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">  Father()&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Father run |\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  Sun()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// super();</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Son run |\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Son s = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序的运行结果为 <code>Father run | Son run |</code> ;</p>\n<ul>\n<li>子类中的构造函数第一行会隐式的存在一句 <code>super()</code> 默认调用父类中默认的构造方法;</li>\n<li>如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 <code>super(xxx)</code><br>手动的来指定父类中特定的构造函数;</li>\n</ul>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li><code>super()</code> 语句一定是在子类构造函数的第一行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestExtend</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Son s = <span class=\"keyword\">new</span> Son(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    Father()&#123;</span><br><span class=\"line\">        m = <span class=\"number\">2</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Father Run\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Father(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">        m = <span class=\"number\">6</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"TTTT\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    Son()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"keyword\">this</span>.m);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Son run\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Son(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"MMMM\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以上代码会出现编译错误, 错误原因为 <code>recursive constructor invocation</code>意思为<br>‘<font color=\"red\">构造器中出现了递归调用, 这是不被允许的</font>‘;</li>\n</ul>\n<h3 id=\"final-关键字\"><a href=\"#final-关键字\" class=\"headerlink\" title=\"final 关键字\"></a>final 关键字</h3><ul>\n<li>final: 最终. 作为一个修饰符;</li>\n</ul>\n<h4 id=\"作用及特点\"><a href=\"#作用及特点\" class=\"headerlink\" title=\"作用及特点\"></a>作用及特点</h4><ol>\n<li>可以修饰类, 函数, 变量;</li>\n<li>被 <code>final</code> 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能;</li>\n<li>被 <code>final</code> 修饰的方法不可以被复写;</li>\n<li>被 <code>final</code> 修饰的变量是一个常量且只能赋值一次; <code>final</code> 既可以修饰成员变量, 又可以修饰<br>局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值起个<br>名字, 方便与阅读;</li>\n<li>内部类定义在类中的局部位置上时, 只能访问局部被 <code>final</code> 修饰的局部变量;</li>\n</ol>\n<h3 id=\"抽象类-abstract\"><a href=\"#抽象类-abstract\" class=\"headerlink\" title=\"抽象类(abstract)\"></a>抽象类(abstract)</h3><ul>\n<li><p>特点:</p>\n<ol>\n<li>抽象方法一定定义在抽象类中;</li>\n<li>抽象方法和抽象类都必须被 <code>abstract</code> 关键字修饰;</li>\n<li>抽象类不可以用 <code>new</code> 创建对象, 因为调用抽象方法没有意义;</li>\n<li>抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, <strong>如<br>果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类</strong></li>\n</ol>\n</li>\n<li><p>抽象类和一般类的区别:</p>\n<ol>\n<li>抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法;</li>\n<li>抽象类不可以实例化;</li>\n</ol>\n</li>\n<li><p>特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象;</p>\n</li>\n<li><code>abstract</code> 只可以修饰类和方法, 不能修饰变量;</li>\n</ul>\n<h3 id=\"模板方法设计模式\"><a href=\"#模板方法设计模式\" class=\"headerlink\" title=\"模板方法设计模式\"></a>模板方法设计模式</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>特点:</p>\n<ul>\n<li>提高了代码的复用性;</li>\n<li>让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;</li>\n<li>Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患</li>\n</ul>\n<h3 id=\"重写-覆盖\"><a href=\"#重写-覆盖\" class=\"headerlink\" title=\"重写(覆盖)\"></a>重写(覆盖)</h3><ul>\n<li>当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父<br>类的函数被覆盖一样.</li>\n<li>当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类<br>不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容.</li>\n</ul>\n<ol>\n<li>子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败.</li>\n<li>静态只能覆盖静态</li>\n<li>如果父类中的方法权限为<code>private</code>, 则子类无法重写该方法.</li>\n</ol>\n<h3 id=\"重写和重载的区别\"><a href=\"#重写和重载的区别\" class=\"headerlink\" title=\"重写和重载的区别\"></a>重写和重载的区别</h3><ul>\n<li>重载: 只看同名函数的参数列表</li>\n<li>重写: 子父类方法要一模一样</li>\n</ul>\n<h3 id=\"子父类中构造函数的特点\"><a href=\"#子父类中构造函数的特点\" class=\"headerlink\" title=\"子父类中构造函数的特点\"></a>子父类中构造函数的特点</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">  Father()&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Father run |\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  Sun()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// super();</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Son run |\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Son s = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序的运行结果为 <code>Father run | Son run |</code> ;</p>\n<ul>\n<li>子类中的构造函数第一行会隐式的存在一句 <code>super()</code> 默认调用父类中默认的构造方法;</li>\n<li>如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 <code>super(xxx)</code><br>手动的来指定父类中特定的构造函数;</li>\n</ul>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li><code>super()</code> 语句一定是在子类构造函数的第一行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestExtend</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Son s = <span class=\"keyword\">new</span> Son(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    Father()&#123;</span><br><span class=\"line\">        m = <span class=\"number\">2</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Father Run\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Father(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">        m = <span class=\"number\">6</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"TTTT\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    Son()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"keyword\">this</span>.m);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Son run\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Son(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"MMMM\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以上代码会出现编译错误, 错误原因为 <code>recursive constructor invocation</code>意思为<br>‘<font color=\"red\">构造器中出现了递归调用, 这是不被允许的</font>‘;</li>\n</ul>\n<h3 id=\"final-关键字\"><a href=\"#final-关键字\" class=\"headerlink\" title=\"final 关键字\"></a>final 关键字</h3><ul>\n<li>final: 最终. 作为一个修饰符;</li>\n</ul>\n<h4 id=\"作用及特点\"><a href=\"#作用及特点\" class=\"headerlink\" title=\"作用及特点\"></a>作用及特点</h4><ol>\n<li>可以修饰类, 函数, 变量;</li>\n<li>被 <code>final</code> 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能;</li>\n<li>被 <code>final</code> 修饰的方法不可以被复写;</li>\n<li>被 <code>final</code> 修饰的变量是一个常量且只能赋值一次; <code>final</code> 既可以修饰成员变量, 又可以修饰<br>局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值起个<br>名字, 方便与阅读;</li>\n<li>内部类定义在类中的局部位置上时, 只能访问局部被 <code>final</code> 修饰的局部变量;</li>\n</ol>\n<h3 id=\"抽象类-abstract\"><a href=\"#抽象类-abstract\" class=\"headerlink\" title=\"抽象类(abstract)\"></a>抽象类(abstract)</h3><ul>\n<li><p>特点:</p>\n<ol>\n<li>抽象方法一定定义在抽象类中;</li>\n<li>抽象方法和抽象类都必须被 <code>abstract</code> 关键字修饰;</li>\n<li>抽象类不可以用 <code>new</code> 创建对象, 因为调用抽象方法没有意义;</li>\n<li>抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, <strong>如<br>果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类</strong></li>\n</ol>\n</li>\n<li><p>抽象类和一般类的区别:</p>\n<ol>\n<li>抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法;</li>\n<li>抽象类不可以实例化;</li>\n</ol>\n</li>\n<li><p>特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象;</p>\n</li>\n<li><code>abstract</code> 只可以修饰类和方法, 不能修饰变量;</li>\n</ul>\n<h3 id=\"模板方法设计模式\"><a href=\"#模板方法设计模式\" class=\"headerlink\" title=\"模板方法设计模式\"></a>模板方法设计模式</h3>"},{"title":"Javareview-day05","date":"2017-11-29T10:55:32.000Z","type":["JavaReview"],"_content":"\n# Java 复习第五天\n\n## 封装\n\n- 私有只是封装的一种表现形式\n- 封装可以增加代码的健壮性\n\n## 构造函数\n\n1. 对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作);\n2. 当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法;\n3. 当在类中定义了构造函数后,默认的构造函数就会消失;\n4. 构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能;\n\n## 成员变量和局部变量\n\n### 作用范围\n\n1. 成员变量作用于整个类中, 局部变量作用于函数中或者语句中;\n2. 在内存中的位置:\n\n  - 成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在;\n  - 局部变量: 存在栈内存中\n#### 其他区别\n成员变量都有默认值, 在不赋值的情况下也可以参与运算.\n\n\n### 匿名对象\n\n- 匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化\n- 如果对一个对象进行多个成员调用, 必须给这个对象起个名字\n- 匿名对象可以作为实际参数进行传递\n\n### 构造代码块\n#### 作用:\n  - 给对象进行初始化\n\n#### 特点:\n  - 对象一建立就运行, 而且优先于构造函数执行;\n\n#### 和构造函数的区别:\n  - 构造代码块是给所有对象进行统一初始化\n  - 构造函数是给对应的对象进行初始化\n  - 构造代码块中定义的事不同对象共性的初始化内容\n\n#### 构造代码块示例:\n\n  ```java\n  class User{\n    private String name;\n    //以下'{}'和其中的内容为构造代码块\n    {\n      private int id;\n    }\n\n\n  }\n\n  ```\n\n### this 关键字:\n  1. this 代表的是本类对象, 即 this 所在函数所属对象的引用\n  2. this语句:\n    ```java\n    this(xxx);\n    ```\n    作用: this()用于构造函数之间的调用\n    特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。\n  3. **注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用**\n\n  ```java\n    class Persion{\n      int age;\n      String name;\n      Persion(){\n        this(name);\n      }\n      Persion(String name){\n        this();\n      }\n    }\n    class test{\n      Persion p = new Persion();\n    }\n\n  ```\n\n### this 和 super 关键字的特点:\n\n1. this 和 super 关键字不能再 static 类型的方法或 static 的代码块中\n\n  - 原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用\n  - 原因2: 无法再静态代码中加载非静态的关键字\n","source":"_posts/Javareview-day05.md","raw":"---\ntitle: Javareview-day05\ndate: 2017-11-29T18:55:32.000Z\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n# Java 复习第五天\n\n## 封装\n\n- 私有只是封装的一种表现形式\n- 封装可以增加代码的健壮性\n\n## 构造函数\n\n1. 对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作);\n2. 当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法;\n3. 当在类中定义了构造函数后,默认的构造函数就会消失;\n4. 构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能;\n\n## 成员变量和局部变量\n\n### 作用范围\n\n1. 成员变量作用于整个类中, 局部变量作用于函数中或者语句中;\n2. 在内存中的位置:\n\n  - 成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在;\n  - 局部变量: 存在栈内存中\n#### 其他区别\n成员变量都有默认值, 在不赋值的情况下也可以参与运算.\n\n\n### 匿名对象\n\n- 匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化\n- 如果对一个对象进行多个成员调用, 必须给这个对象起个名字\n- 匿名对象可以作为实际参数进行传递\n\n### 构造代码块\n#### 作用:\n  - 给对象进行初始化\n\n#### 特点:\n  - 对象一建立就运行, 而且优先于构造函数执行;\n\n#### 和构造函数的区别:\n  - 构造代码块是给所有对象进行统一初始化\n  - 构造函数是给对应的对象进行初始化\n  - 构造代码块中定义的事不同对象共性的初始化内容\n\n#### 构造代码块示例:\n\n  ```java\n  class User{\n    private String name;\n    //以下'{}'和其中的内容为构造代码块\n    {\n      private int id;\n    }\n\n\n  }\n\n  ```\n\n### this 关键字:\n  1. this 代表的是本类对象, 即 this 所在函数所属对象的引用\n  2. this语句:\n    ```java\n    this(xxx);\n    ```\n    作用: this()用于构造函数之间的调用\n    特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。\n  3. **注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用**\n\n  ```java\n    class Persion{\n      int age;\n      String name;\n      Persion(){\n        this(name);\n      }\n      Persion(String name){\n        this();\n      }\n    }\n    class test{\n      Persion p = new Persion();\n    }\n\n  ```\n\n### this 和 super 关键字的特点:\n\n1. this 和 super 关键字不能再 static 类型的方法或 static 的代码块中\n\n  - 原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用\n  - 原因2: 无法再静态代码中加载非静态的关键字\n","slug":"Javareview-day05","published":1,"updated":"2017-12-12T08:59:02.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz5k000dfkkxfh7xwmqj","content":"<h1 id=\"Java-复习第五天\"><a href=\"#Java-复习第五天\" class=\"headerlink\" title=\"Java 复习第五天\"></a>Java 复习第五天</h1><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li>私有只是封装的一种表现形式</li>\n<li>封装可以增加代码的健壮性</li>\n</ul>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><ol>\n<li>对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作);</li>\n<li>当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法;</li>\n<li>当在类中定义了构造函数后,默认的构造函数就会消失;</li>\n<li>构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能;</li>\n</ol>\n<h2 id=\"成员变量和局部变量\"><a href=\"#成员变量和局部变量\" class=\"headerlink\" title=\"成员变量和局部变量\"></a>成员变量和局部变量</h2><h3 id=\"作用范围\"><a href=\"#作用范围\" class=\"headerlink\" title=\"作用范围\"></a>作用范围</h3><ol>\n<li>成员变量作用于整个类中, 局部变量作用于函数中或者语句中;</li>\n<li><p>在内存中的位置:</p>\n<ul>\n<li>成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在;</li>\n<li>局部变量: 存在栈内存中<h4 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h4>成员变量都有默认值, 在不赋值的情况下也可以参与运算.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h3><ul>\n<li>匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化</li>\n<li>如果对一个对象进行多个成员调用, 必须给这个对象起个名字</li>\n<li>匿名对象可以作为实际参数进行传递</li>\n</ul>\n<h3 id=\"构造代码块\"><a href=\"#构造代码块\" class=\"headerlink\" title=\"构造代码块\"></a>构造代码块</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用:\"></a>作用:</h4><ul>\n<li>给对象进行初始化</li>\n</ul>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><ul>\n<li>对象一建立就运行, 而且优先于构造函数执行;</li>\n</ul>\n<h4 id=\"和构造函数的区别\"><a href=\"#和构造函数的区别\" class=\"headerlink\" title=\"和构造函数的区别:\"></a>和构造函数的区别:</h4><ul>\n<li>构造代码块是给所有对象进行统一初始化</li>\n<li>构造函数是给对应的对象进行初始化</li>\n<li>构造代码块中定义的事不同对象共性的初始化内容</li>\n</ul>\n<h4 id=\"构造代码块示例\"><a href=\"#构造代码块示例\" class=\"headerlink\" title=\"构造代码块示例:\"></a>构造代码块示例:</h4>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"comment\">//以下'&#123;&#125;'和其中的内容为构造代码块</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this-关键字\"><a href=\"#this-关键字\" class=\"headerlink\" title=\"this 关键字:\"></a>this 关键字:</h3><ol>\n<li>this 代表的是本类对象, 即 this 所在函数所属对象的引用</li>\n<li><p>this语句:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>(xxx);</span><br></pre></td></tr></table></figure>\n<p>作用: this()用于构造函数之间的调用<br>特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。</p>\n</li>\n<li><p><strong>注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  Persion()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Persion(String name)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  Persion p = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"this-和-super-关键字的特点\"><a href=\"#this-和-super-关键字的特点\" class=\"headerlink\" title=\"this 和 super 关键字的特点:\"></a>this 和 super 关键字的特点:</h3><ol>\n<li><p>this 和 super 关键字不能再 static 类型的方法或 static 的代码块中</p>\n<ul>\n<li>原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用</li>\n<li>原因2: 无法再静态代码中加载非静态的关键字</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-复习第五天\"><a href=\"#Java-复习第五天\" class=\"headerlink\" title=\"Java 复习第五天\"></a>Java 复习第五天</h1><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li>私有只是封装的一种表现形式</li>\n<li>封装可以增加代码的健壮性</li>\n</ul>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><ol>\n<li>对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作);</li>\n<li>当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法;</li>\n<li>当在类中定义了构造函数后,默认的构造函数就会消失;</li>\n<li>构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能;</li>\n</ol>\n<h2 id=\"成员变量和局部变量\"><a href=\"#成员变量和局部变量\" class=\"headerlink\" title=\"成员变量和局部变量\"></a>成员变量和局部变量</h2><h3 id=\"作用范围\"><a href=\"#作用范围\" class=\"headerlink\" title=\"作用范围\"></a>作用范围</h3><ol>\n<li>成员变量作用于整个类中, 局部变量作用于函数中或者语句中;</li>\n<li><p>在内存中的位置:</p>\n<ul>\n<li>成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在;</li>\n<li>局部变量: 存在栈内存中<h4 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h4>成员变量都有默认值, 在不赋值的情况下也可以参与运算.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h3><ul>\n<li>匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化</li>\n<li>如果对一个对象进行多个成员调用, 必须给这个对象起个名字</li>\n<li>匿名对象可以作为实际参数进行传递</li>\n</ul>\n<h3 id=\"构造代码块\"><a href=\"#构造代码块\" class=\"headerlink\" title=\"构造代码块\"></a>构造代码块</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用:\"></a>作用:</h4><ul>\n<li>给对象进行初始化</li>\n</ul>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><ul>\n<li>对象一建立就运行, 而且优先于构造函数执行;</li>\n</ul>\n<h4 id=\"和构造函数的区别\"><a href=\"#和构造函数的区别\" class=\"headerlink\" title=\"和构造函数的区别:\"></a>和构造函数的区别:</h4><ul>\n<li>构造代码块是给所有对象进行统一初始化</li>\n<li>构造函数是给对应的对象进行初始化</li>\n<li>构造代码块中定义的事不同对象共性的初始化内容</li>\n</ul>\n<h4 id=\"构造代码块示例\"><a href=\"#构造代码块示例\" class=\"headerlink\" title=\"构造代码块示例:\"></a>构造代码块示例:</h4>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"comment\">//以下'&#123;&#125;'和其中的内容为构造代码块</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this-关键字\"><a href=\"#this-关键字\" class=\"headerlink\" title=\"this 关键字:\"></a>this 关键字:</h3><ol>\n<li>this 代表的是本类对象, 即 this 所在函数所属对象的引用</li>\n<li><p>this语句:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>(xxx);</span><br></pre></td></tr></table></figure>\n<p>作用: this()用于构造函数之间的调用<br>特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。</p>\n</li>\n<li><p><strong>注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  Persion()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Persion(String name)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  Persion p = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"this-和-super-关键字的特点\"><a href=\"#this-和-super-关键字的特点\" class=\"headerlink\" title=\"this 和 super 关键字的特点:\"></a>this 和 super 关键字的特点:</h3><ol>\n<li><p>this 和 super 关键字不能再 static 类型的方法或 static 的代码块中</p>\n<ul>\n<li>原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用</li>\n<li>原因2: 无法再静态代码中加载非静态的关键字</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Java中的23中设计模式(二)","date":"2017-12-25T00:27:27.000Z","type":["Java","设计模式"],"_content":"\n> 本文转载自[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n我们接着讨论设计模式，上篇文章我讲完了5种创建型模式，这章开始，我将讲下7种结构型模式：适\n配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模\n式是各种模式的起源，我们看下面的图：\n\n![](/images/post_images/20171225_01.png)\n## 6. 适配器模式(Adapter)\n\t适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造\n成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。\n\n首先，我们来看看类的适配器模式，先看类图：\n![](/images/post_images/20171225_02.png)\n\n核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口时Targetable，通过Adapter\n类，将Source的功能扩展到Targetable里，看代码：\n\n```java\npublic class Source {  \n\n    public void method1() {  \n        System.out.println(\"this is original method!\");  \n    }  \n}  \n```\n\n```java\npublic interface Targetable {  \n\n    /* 与原类中的方法相同 */  \n    public void method1();  \n\n    /* 新类的方法 */  \n    public void method2();  \n}  \n\n```\n\n```java\npublic class Adapter extends Source implements Targetable {  \n\n    @Override  \n    public void method2() {  \n        System.out.println(\"this is the targetable method!\");  \n    }  \n}  \n```\nAdapter类继承Source类，实现Targetable接口，下面是测试类:\n\n```java\npublic class AdapterTest {  \n\n    public static void main(String[] args) {  \n        Targetable target = new Adapter();  \n        target.method1();  \n        target.method2();  \n    }  \n}\n```\n输出:\n`this is original method!\nthis is the targetable method!`\n这样Targetable接口的实现类就具有了Source类的功能。\n\n<font color='#B83B5E'>**对象的适配器模式**</font>\n\n基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source\n类的实例，以达到解决兼容性的问题。看图:\n![](/images/post_images/20171225_03.png)\n\n只需要修改Adapter类的源码即可:\n```java\npublic class Wrapper implements Targetable {  \n\n    private Source source;  \n\n    public Wrapper(Source source){  \n        super();  \n        this.source = source;  \n    }  \n    @Override  \n    public void method2() {  \n        System.out.println(\"this is the targetable method!\");  \n    }  \n\n    @Override  \n    public void method1() {  \n        source.method1();  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class AdapterTest {  \n\n    public static void main(String[] args) {  \n        Source source = new Source();  \n        Targetable target = new Wrapper(source);  \n        target.method1();  \n        target.method2();  \n    }  \n}\n```\n输出与第一种一样，只是适配的方法不同而已。\n\n第三种适配器模式是<font color='#B83B5E'>**接口的适配器模式**</font>，接口的适配器是\n这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口\n的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，\n此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接\n口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个\n类，继承该抽象类，重写我们需要的方法就行。看一下类图:\n![](/images/post_images/20171225_04.png)\n\n这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在\n一些实现类中并不是都需要。看代码:\n```java\npublic interface Sourceable {  \n\n    public void method1();  \n    public void method2();  \n}  \n```\n抽象类Wrapper2:\n```java\npublic abstract class Wrapper2 implements Sourceable{  \n\n    public void method1(){}  \n    public void method2(){}  \n}  \n```\n```java\npublic class SourceSub1 extends Wrapper2 {  \n    public void method1(){  \n        System.out.println(\"the sourceable interface's first Sub1!\");  \n    }  \n}\n```\n```java\npublic class SourceSub2 extends Wrapper2 {  \n    public void method2(){  \n        System.out.println(\"the sourceable interface's second Sub2!\");  \n    }  \n}  \n```\n```java\npublic class WrapperTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source1 = new SourceSub1();  \n        Sourceable source2 = new SourceSub2();  \n\n        source1.method1();  \n        source1.method2();  \n        source2.method1();  \n        source2.method2();  \n    }  \n}\n```\n测试输出：\n`the sourceable interface's first Sub1!\nthe sourceable interface's second Sub2!`\n达到了我们的效果！\n讲了这么多，总结一下三种适配器模式的应用场景：\n类的适配器模式：当希望将<font color='#F08A5D'>一个类</font>转换成满足<font color='#F08A5D'>另一个新接口</font>的类时，可以使用类的适配器模式，创\n建一个新类，继承原有的类，实现新的接口即可。\n对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类\n，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。\n接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所\n有方法，我们写别的类的时候，继承抽象类即可。\n\n## 7. 装饰模式（Decorator）\n\n顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对\n象实现同一个接口，装饰对象持有被装饰对象的实例，关系图如下:\n![](/images/post_images/20171225_05.png)\n\nSource类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能，代码如下:\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n```java\npublic class Source implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"the original method!\");  \n    }  \n}  \n```\n\n```java\npublic class Decorator implements Sourceable {  \n\n    private Sourceable source;  \n\n    public Decorator(Sourceable source){  \n        super();  \n        this.source = source;  \n    }  \n    @Override  \n    public void method() {  \n        System.out.println(\"before decorator!\");  \n        source.method();  \n        System.out.println(\"after decorator!\");  \n    }  \n}  \n```\n\n测试类:\n```java\npublic class DecoratorTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source = new Source();  \n        Sourceable obj = new Decorator(source);  \n        obj.method();  \n    }  \n}  \n```\n输出：\n`before decorator!\nthe original method!\nafter decorator!`\n\n- 装饰器模式的应用场景：\n1. 需要扩展一个类的功能。\n2. 动态的为一个对象增加功能，而且还能动态撤销。(继承不能做到这一点，继承的功能是静态的，不能动态增删。)\n\n- 缺点：产生过多相似的对象，不易排错！\n\n## 8. 代理模式(Proxy)\n其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操\n作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面\n，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需\n要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。先来看看关系图:\n![](/images/post_images/20171225_06.png)\n根据上文的阐述，代理模式就比较容易的理解了，我们看下代码:\n\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n\n```java\npublic class Source implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"the original method!\");  \n    }  \n}  \n```\n\n```java\npublic class Proxy implements Sourceable {  \n\n    private Source source;  \n    public Proxy(){  \n        super();  \n        this.source = new Source();  \n    }  \n    @Override  \n    public void method() {  \n        before();  \n        source.method();  \n        atfer();  \n    }  \n    private void atfer() {  \n        System.out.println(\"after proxy!\");  \n    }  \n    private void before() {  \n        System.out.println(\"before proxy!\");  \n    }  \n}  \n```\n测试类:\n```java\npublic class ProxyTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source = new Proxy();  \n        source.method();  \n    }  \n\n}\n```\n输出：\n`before proxy!\nthe original method!\nafter proxy!`\n\n- **代理模式的应用场景:**\n如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：\n1. 修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。\n2. 就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。\n使用代理模式，可以将功能划分的更加清晰，有助于后期维护！\n\n## 9、外观模式(Facade)\n\n外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配\n置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式\n中没有涉及到接口，看下类图:(我们以一个计算机的启动过程为例)\n![](/images/post_images/20171225_07.png)\n\n我们先看下实现类:\n```java\npublic class CPU {  \n\n    public void startup(){  \n        System.out.println(\"cpu startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"cpu shutdown!\");  \n    }  \n}  \n```\n```java\npublic class CPU {  \n\n    public void startup(){  \n        System.out.println(\"cpu startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"cpu shutdown!\");  \n    }  \n}  \n```\n```java\npublic class Disk {  \n\n    public void startup(){  \n        System.out.println(\"disk startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"disk shutdown!\");  \n    }  \n}  \n```\n```java\npublic class Computer {  \n    private CPU cpu;  \n    private Memory memory;  \n    private Disk disk;  \n\n    public Computer(){  \n        cpu = new CPU();  \n        memory = new Memory();  \n        disk = new Disk();  \n    }  \n\n    public void startup(){  \n        System.out.println(\"start the computer!\");  \n        cpu.startup();  \n        memory.startup();  \n        disk.startup();  \n        System.out.println(\"start computer finished!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"begin to close the computer!\");  \n        cpu.shutdown();  \n        memory.shutdown();  \n        disk.shutdown();  \n        System.out.println(\"computer closed!\");  \n    }  \n}  \n```\nUser类如下:\n```java\npublic class User {  \n\n    public static void main(String[] args) {  \n        Computer computer = new Computer();  \n        computer.startup();  \n        computer.shutdown();  \n    }  \n}  \n```\n输出:\n`start the computer!\n\tcpu startup!\n\tmemory startup!\n\tdisk startup!\n\tstart computer finished!\n\tbegin to close the computer!\n\tcpu shutdown!\n\tmemory shutdown!\n\tdisk shutdown!\n\tcomputer closed!`\n\n如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这\n样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有\n了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观\n模式！\n\n## 桥接模式(Bridge)\n桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与\n实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数\n据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就\n是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。\n我们来看看关系图:\n![](/images/post_images/20171225_08.png)\n实现代码:\n先定义接口:\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n分别定义两个实现类:\n\n```java\npublic class SourceSub1 implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"this is the first sub!\");  \n    }  \n}  \n```\n```java\npublic class SourceSub2 implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"this is the second sub!\");  \n    }  \n}  \n```\n定义一个桥，持有Sourceable的一个实例:\n```java\npublic abstract class Bridge {  \n    private Sourceable source;  \n\n    public void method(){  \n        source.method();  \n    }  \n\n    public Sourceable getSource() {  \n        return source;  \n    }  \n\n    public void setSource(Sourceable source) {  \n        this.source = source;  \n    }  \n}\n```\n\n```java\npublic class MyBridge extends Bridge {  \n    public void method(){  \n        getSource().method();  \n    }  \n}\n```\n测试类:\n```java\npublic class BridgeTest {  \n\n    public static void main(String[] args) {  \n\n        Bridge bridge = new MyBridge();  \n\n        /*调用第一个对象*/  \n        Sourceable source1 = new SourceSub1();  \n        bridge.setSource(source1);  \n        bridge.method();  \n\n        /*调用第二个对象*/  \n        Sourceable source2 = new SourceSub2();  \n        bridge.setSource(source2);  \n        bridge.method();  \n    }  \n}  \n```\noutput：\n`this is the first sub!\n this is the second sub!`\n这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的\n调用。接下来我再画个图，大家就应该明白了，因为这个图是我们JDBC连接的原理，有数据库学习\n基础的，一结合就都懂了。\n![](/images/post_images/20171225_09.png)\n\n## 11. 组合模式（Composite）\n\t组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便，看看关系图：\n直接来看代码:\n![](/images/post_images/20171225_10.png)\n\n直接来看代码:\n```java\npublic class TreeNode {  \n\n    private String name;  \n    private TreeNode parent;  \n    private Vector<TreeNode> children = new Vector<TreeNode>();  \n\n    public TreeNode(String name){  \n        this.name = name;  \n    }  \n\n    public String getName() {  \n        return name;  \n    }  \n\n    public void setName(String name) {  \n        this.name = name;  \n    }  \n\n    public TreeNode getParent() {  \n        return parent;  \n    }  \n\n    public void setParent(TreeNode parent) {  \n        this.parent = parent;  \n    }  \n\n    //添加孩子节点  \n    public void add(TreeNode node){  \n        children.add(node);  \n    }  \n\n    //删除孩子节点  \n    public void remove(TreeNode node){  \n        children.remove(node);  \n    }  \n\n    //取得孩子节点  \n    public Enumeration<TreeNode> getChildren(){  \n        return children.elements();  \n    }  \n}  \n```\n\n```java\npublic class Tree {  \n\n    TreeNode root = null;  \n\n    public Tree(String name) {  \n        root = new TreeNode(name);  \n    }  \n\n    public static void main(String[] args) {  \n        Tree tree = new Tree(\"A\");  \n        TreeNode nodeB = new TreeNode(\"B\");  \n        TreeNode nodeC = new TreeNode(\"C\");  \n\n        nodeB.add(nodeC);  \n        tree.root.add(nodeB);  \n        System.out.println(\"build the tree finished!\");  \n    }  \n}  \n```\n使用场景: 将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。\n\n## 12. 享元模式(Flyweight)\n\n享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，\n通常与工厂模式一起使用。\n\n![](/images/post_images/20171225_11.png)\n\nFlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是\n否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight\n是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不\n难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url\n、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，\n所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数\n据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。\n看个例子:\n![](/images/post_images/20171225_12.png)\n\n看下数据库连接池的代码:\n\n```java\npublic class ConnectionPool {  \n\n    private Vector<Connection> pool;  \n\n    /*公有属性*/  \n    private String url = \"jdbc:mysql://localhost:3306/test\";  \n    private String username = \"root\";  \n    private String password = \"root\";  \n    private String driverClassName = \"com.mysql.jdbc.Driver\";  \n\n    private int poolSize = 100;  \n    private static ConnectionPool instance = null;  \n    Connection conn = null;  \n\n    /*构造方法，做一些初始化工作*/  \n    private ConnectionPool() {  \n        pool = new Vector<Connection>(poolSize);  \n\n        for (int i = 0; i < poolSize; i++) {  \n            try {  \n                Class.forName(driverClassName);  \n                conn = DriverManager.getConnection(url, username, password);  \n                pool.add(conn);  \n            } catch (ClassNotFoundException e) {  \n                e.printStackTrace();  \n            } catch (SQLException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }  \n\n    /* 返回连接到连接池 */  \n    public synchronized void release() {  \n        pool.add(conn);  \n    }  \n\n    /* 返回连接池中的一个数据库连接 */  \n    public synchronized Connection getConnection() {  \n        if (pool.size() > 0) {  \n            Connection conn = pool.get(0);  \n            pool.remove(conn);  \n            return conn;  \n        } else {  \n            return null;  \n        }  \n    }  \n}  \n```\n通过连接池的管理，实现了数据库连接的共享，不需要每一次都重新创建连接，节省了数据库重新\n创建的开销，提升了系统的性能！\n","source":"_posts/Java中的23中设计模式-二.md","raw":"---\ntitle: Java中的23中设计模式(二)\ndate: 2017-12-25 08:27:27\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - Java\n  - 设计模式\ntype:\n  - Java\n  - 设计模式\n---\n\n> 本文转载自[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n我们接着讨论设计模式，上篇文章我讲完了5种创建型模式，这章开始，我将讲下7种结构型模式：适\n配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模\n式是各种模式的起源，我们看下面的图：\n\n![](/images/post_images/20171225_01.png)\n## 6. 适配器模式(Adapter)\n\t适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造\n成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。\n\n首先，我们来看看类的适配器模式，先看类图：\n![](/images/post_images/20171225_02.png)\n\n核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口时Targetable，通过Adapter\n类，将Source的功能扩展到Targetable里，看代码：\n\n```java\npublic class Source {  \n\n    public void method1() {  \n        System.out.println(\"this is original method!\");  \n    }  \n}  \n```\n\n```java\npublic interface Targetable {  \n\n    /* 与原类中的方法相同 */  \n    public void method1();  \n\n    /* 新类的方法 */  \n    public void method2();  \n}  \n\n```\n\n```java\npublic class Adapter extends Source implements Targetable {  \n\n    @Override  \n    public void method2() {  \n        System.out.println(\"this is the targetable method!\");  \n    }  \n}  \n```\nAdapter类继承Source类，实现Targetable接口，下面是测试类:\n\n```java\npublic class AdapterTest {  \n\n    public static void main(String[] args) {  \n        Targetable target = new Adapter();  \n        target.method1();  \n        target.method2();  \n    }  \n}\n```\n输出:\n`this is original method!\nthis is the targetable method!`\n这样Targetable接口的实现类就具有了Source类的功能。\n\n<font color='#B83B5E'>**对象的适配器模式**</font>\n\n基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source\n类的实例，以达到解决兼容性的问题。看图:\n![](/images/post_images/20171225_03.png)\n\n只需要修改Adapter类的源码即可:\n```java\npublic class Wrapper implements Targetable {  \n\n    private Source source;  \n\n    public Wrapper(Source source){  \n        super();  \n        this.source = source;  \n    }  \n    @Override  \n    public void method2() {  \n        System.out.println(\"this is the targetable method!\");  \n    }  \n\n    @Override  \n    public void method1() {  \n        source.method1();  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class AdapterTest {  \n\n    public static void main(String[] args) {  \n        Source source = new Source();  \n        Targetable target = new Wrapper(source);  \n        target.method1();  \n        target.method2();  \n    }  \n}\n```\n输出与第一种一样，只是适配的方法不同而已。\n\n第三种适配器模式是<font color='#B83B5E'>**接口的适配器模式**</font>，接口的适配器是\n这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口\n的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，\n此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接\n口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个\n类，继承该抽象类，重写我们需要的方法就行。看一下类图:\n![](/images/post_images/20171225_04.png)\n\n这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在\n一些实现类中并不是都需要。看代码:\n```java\npublic interface Sourceable {  \n\n    public void method1();  \n    public void method2();  \n}  \n```\n抽象类Wrapper2:\n```java\npublic abstract class Wrapper2 implements Sourceable{  \n\n    public void method1(){}  \n    public void method2(){}  \n}  \n```\n```java\npublic class SourceSub1 extends Wrapper2 {  \n    public void method1(){  \n        System.out.println(\"the sourceable interface's first Sub1!\");  \n    }  \n}\n```\n```java\npublic class SourceSub2 extends Wrapper2 {  \n    public void method2(){  \n        System.out.println(\"the sourceable interface's second Sub2!\");  \n    }  \n}  \n```\n```java\npublic class WrapperTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source1 = new SourceSub1();  \n        Sourceable source2 = new SourceSub2();  \n\n        source1.method1();  \n        source1.method2();  \n        source2.method1();  \n        source2.method2();  \n    }  \n}\n```\n测试输出：\n`the sourceable interface's first Sub1!\nthe sourceable interface's second Sub2!`\n达到了我们的效果！\n讲了这么多，总结一下三种适配器模式的应用场景：\n类的适配器模式：当希望将<font color='#F08A5D'>一个类</font>转换成满足<font color='#F08A5D'>另一个新接口</font>的类时，可以使用类的适配器模式，创\n建一个新类，继承原有的类，实现新的接口即可。\n对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类\n，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。\n接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所\n有方法，我们写别的类的时候，继承抽象类即可。\n\n## 7. 装饰模式（Decorator）\n\n顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对\n象实现同一个接口，装饰对象持有被装饰对象的实例，关系图如下:\n![](/images/post_images/20171225_05.png)\n\nSource类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能，代码如下:\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n```java\npublic class Source implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"the original method!\");  \n    }  \n}  \n```\n\n```java\npublic class Decorator implements Sourceable {  \n\n    private Sourceable source;  \n\n    public Decorator(Sourceable source){  \n        super();  \n        this.source = source;  \n    }  \n    @Override  \n    public void method() {  \n        System.out.println(\"before decorator!\");  \n        source.method();  \n        System.out.println(\"after decorator!\");  \n    }  \n}  \n```\n\n测试类:\n```java\npublic class DecoratorTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source = new Source();  \n        Sourceable obj = new Decorator(source);  \n        obj.method();  \n    }  \n}  \n```\n输出：\n`before decorator!\nthe original method!\nafter decorator!`\n\n- 装饰器模式的应用场景：\n1. 需要扩展一个类的功能。\n2. 动态的为一个对象增加功能，而且还能动态撤销。(继承不能做到这一点，继承的功能是静态的，不能动态增删。)\n\n- 缺点：产生过多相似的对象，不易排错！\n\n## 8. 代理模式(Proxy)\n其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操\n作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面\n，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需\n要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。先来看看关系图:\n![](/images/post_images/20171225_06.png)\n根据上文的阐述，代理模式就比较容易的理解了，我们看下代码:\n\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n\n```java\npublic class Source implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"the original method!\");  \n    }  \n}  \n```\n\n```java\npublic class Proxy implements Sourceable {  \n\n    private Source source;  \n    public Proxy(){  \n        super();  \n        this.source = new Source();  \n    }  \n    @Override  \n    public void method() {  \n        before();  \n        source.method();  \n        atfer();  \n    }  \n    private void atfer() {  \n        System.out.println(\"after proxy!\");  \n    }  \n    private void before() {  \n        System.out.println(\"before proxy!\");  \n    }  \n}  \n```\n测试类:\n```java\npublic class ProxyTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source = new Proxy();  \n        source.method();  \n    }  \n\n}\n```\n输出：\n`before proxy!\nthe original method!\nafter proxy!`\n\n- **代理模式的应用场景:**\n如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：\n1. 修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。\n2. 就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。\n使用代理模式，可以将功能划分的更加清晰，有助于后期维护！\n\n## 9、外观模式(Facade)\n\n外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配\n置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式\n中没有涉及到接口，看下类图:(我们以一个计算机的启动过程为例)\n![](/images/post_images/20171225_07.png)\n\n我们先看下实现类:\n```java\npublic class CPU {  \n\n    public void startup(){  \n        System.out.println(\"cpu startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"cpu shutdown!\");  \n    }  \n}  \n```\n```java\npublic class CPU {  \n\n    public void startup(){  \n        System.out.println(\"cpu startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"cpu shutdown!\");  \n    }  \n}  \n```\n```java\npublic class Disk {  \n\n    public void startup(){  \n        System.out.println(\"disk startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"disk shutdown!\");  \n    }  \n}  \n```\n```java\npublic class Computer {  \n    private CPU cpu;  \n    private Memory memory;  \n    private Disk disk;  \n\n    public Computer(){  \n        cpu = new CPU();  \n        memory = new Memory();  \n        disk = new Disk();  \n    }  \n\n    public void startup(){  \n        System.out.println(\"start the computer!\");  \n        cpu.startup();  \n        memory.startup();  \n        disk.startup();  \n        System.out.println(\"start computer finished!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"begin to close the computer!\");  \n        cpu.shutdown();  \n        memory.shutdown();  \n        disk.shutdown();  \n        System.out.println(\"computer closed!\");  \n    }  \n}  \n```\nUser类如下:\n```java\npublic class User {  \n\n    public static void main(String[] args) {  \n        Computer computer = new Computer();  \n        computer.startup();  \n        computer.shutdown();  \n    }  \n}  \n```\n输出:\n`start the computer!\n\tcpu startup!\n\tmemory startup!\n\tdisk startup!\n\tstart computer finished!\n\tbegin to close the computer!\n\tcpu shutdown!\n\tmemory shutdown!\n\tdisk shutdown!\n\tcomputer closed!`\n\n如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这\n样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有\n了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观\n模式！\n\n## 桥接模式(Bridge)\n桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与\n实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数\n据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就\n是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。\n我们来看看关系图:\n![](/images/post_images/20171225_08.png)\n实现代码:\n先定义接口:\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n分别定义两个实现类:\n\n```java\npublic class SourceSub1 implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"this is the first sub!\");  \n    }  \n}  \n```\n```java\npublic class SourceSub2 implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"this is the second sub!\");  \n    }  \n}  \n```\n定义一个桥，持有Sourceable的一个实例:\n```java\npublic abstract class Bridge {  \n    private Sourceable source;  \n\n    public void method(){  \n        source.method();  \n    }  \n\n    public Sourceable getSource() {  \n        return source;  \n    }  \n\n    public void setSource(Sourceable source) {  \n        this.source = source;  \n    }  \n}\n```\n\n```java\npublic class MyBridge extends Bridge {  \n    public void method(){  \n        getSource().method();  \n    }  \n}\n```\n测试类:\n```java\npublic class BridgeTest {  \n\n    public static void main(String[] args) {  \n\n        Bridge bridge = new MyBridge();  \n\n        /*调用第一个对象*/  \n        Sourceable source1 = new SourceSub1();  \n        bridge.setSource(source1);  \n        bridge.method();  \n\n        /*调用第二个对象*/  \n        Sourceable source2 = new SourceSub2();  \n        bridge.setSource(source2);  \n        bridge.method();  \n    }  \n}  \n```\noutput：\n`this is the first sub!\n this is the second sub!`\n这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的\n调用。接下来我再画个图，大家就应该明白了，因为这个图是我们JDBC连接的原理，有数据库学习\n基础的，一结合就都懂了。\n![](/images/post_images/20171225_09.png)\n\n## 11. 组合模式（Composite）\n\t组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便，看看关系图：\n直接来看代码:\n![](/images/post_images/20171225_10.png)\n\n直接来看代码:\n```java\npublic class TreeNode {  \n\n    private String name;  \n    private TreeNode parent;  \n    private Vector<TreeNode> children = new Vector<TreeNode>();  \n\n    public TreeNode(String name){  \n        this.name = name;  \n    }  \n\n    public String getName() {  \n        return name;  \n    }  \n\n    public void setName(String name) {  \n        this.name = name;  \n    }  \n\n    public TreeNode getParent() {  \n        return parent;  \n    }  \n\n    public void setParent(TreeNode parent) {  \n        this.parent = parent;  \n    }  \n\n    //添加孩子节点  \n    public void add(TreeNode node){  \n        children.add(node);  \n    }  \n\n    //删除孩子节点  \n    public void remove(TreeNode node){  \n        children.remove(node);  \n    }  \n\n    //取得孩子节点  \n    public Enumeration<TreeNode> getChildren(){  \n        return children.elements();  \n    }  \n}  \n```\n\n```java\npublic class Tree {  \n\n    TreeNode root = null;  \n\n    public Tree(String name) {  \n        root = new TreeNode(name);  \n    }  \n\n    public static void main(String[] args) {  \n        Tree tree = new Tree(\"A\");  \n        TreeNode nodeB = new TreeNode(\"B\");  \n        TreeNode nodeC = new TreeNode(\"C\");  \n\n        nodeB.add(nodeC);  \n        tree.root.add(nodeB);  \n        System.out.println(\"build the tree finished!\");  \n    }  \n}  \n```\n使用场景: 将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。\n\n## 12. 享元模式(Flyweight)\n\n享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，\n通常与工厂模式一起使用。\n\n![](/images/post_images/20171225_11.png)\n\nFlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是\n否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight\n是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不\n难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url\n、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，\n所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数\n据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。\n看个例子:\n![](/images/post_images/20171225_12.png)\n\n看下数据库连接池的代码:\n\n```java\npublic class ConnectionPool {  \n\n    private Vector<Connection> pool;  \n\n    /*公有属性*/  \n    private String url = \"jdbc:mysql://localhost:3306/test\";  \n    private String username = \"root\";  \n    private String password = \"root\";  \n    private String driverClassName = \"com.mysql.jdbc.Driver\";  \n\n    private int poolSize = 100;  \n    private static ConnectionPool instance = null;  \n    Connection conn = null;  \n\n    /*构造方法，做一些初始化工作*/  \n    private ConnectionPool() {  \n        pool = new Vector<Connection>(poolSize);  \n\n        for (int i = 0; i < poolSize; i++) {  \n            try {  \n                Class.forName(driverClassName);  \n                conn = DriverManager.getConnection(url, username, password);  \n                pool.add(conn);  \n            } catch (ClassNotFoundException e) {  \n                e.printStackTrace();  \n            } catch (SQLException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }  \n\n    /* 返回连接到连接池 */  \n    public synchronized void release() {  \n        pool.add(conn);  \n    }  \n\n    /* 返回连接池中的一个数据库连接 */  \n    public synchronized Connection getConnection() {  \n        if (pool.size() > 0) {  \n            Connection conn = pool.get(0);  \n            pool.remove(conn);  \n            return conn;  \n        } else {  \n            return null;  \n        }  \n    }  \n}  \n```\n通过连接池的管理，实现了数据库连接的共享，不需要每一次都重新创建连接，节省了数据库重新\n创建的开销，提升了系统的性能！\n","slug":"Java中的23中设计模式-二","published":1,"updated":"2017-12-25T10:05:35.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz5q000ifkkxtx3unhg2","content":"<blockquote>\n<p>本文转载自<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<p>我们接着讨论设计模式，上篇文章我讲完了5种创建型模式，这章开始，我将讲下7种结构型模式：适<br>配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模<br>式是各种模式的起源，我们看下面的图：</p>\n<p><img src=\"/images/post_images/20171225_01.png\" alt=\"\"></p>\n<h2 id=\"6-适配器模式-Adapter\"><a href=\"#6-适配器模式-Adapter\" class=\"headerlink\" title=\"6. 适配器模式(Adapter)\"></a>6. 适配器模式(Adapter)</h2><pre><code>适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造\n</code></pre><p>成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p>\n<p>首先，我们来看看类的适配器模式，先看类图：<br><img src=\"/images/post_images/20171225_02.png\" alt=\"\"></p>\n<p>核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口时Targetable，通过Adapter<br>类，将Source的功能扩展到Targetable里，看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 与原类中的方法相同 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 新类的方法 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the targetable method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Adapter类继承Source类，实现Targetable接口，下面是测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Targetable target = <span class=\"keyword\">new</span> Adapter();  </span><br><span class=\"line\">        target.method1();  </span><br><span class=\"line\">        target.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><code>this is original method!\nthis is the targetable method!</code><br>这样Targetable接口的实现类就具有了Source类的功能。</p>\n<font color=\"#B83B5E\"><strong>对象的适配器模式</strong></font>\n\n<p>基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source<br>类的实例，以达到解决兼容性的问题。看图:<br><img src=\"/images/post_images/20171225_03.png\" alt=\"\"></p>\n<p>只需要修改Adapter类的源码即可:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Source source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Wrapper</span><span class=\"params\">(Source source)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the targetable method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        source.method1();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Source source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">        Targetable target = <span class=\"keyword\">new</span> Wrapper(source);  </span><br><span class=\"line\">        target.method1();  </span><br><span class=\"line\">        target.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出与第一种一样，只是适配的方法不同而已。</p>\n<p>第三种适配器模式是<font color=\"#B83B5E\"><strong>接口的适配器模式</strong></font>，接口的适配器是<br>这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口<br>的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，<br>此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接<br>口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个<br>类，继承该抽象类，重写我们需要的方法就行。看一下类图:<br><img src=\"/images/post_images/20171225_04.png\" alt=\"\"></p>\n<p>这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在<br>一些实现类中并不是都需要。看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>抽象类Wrapper2:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span></span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper2</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the sourceable interface's first Sub1!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper2</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the sourceable interface's second Sub2!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WrapperTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source1 = <span class=\"keyword\">new</span> SourceSub1();  </span><br><span class=\"line\">        Sourceable source2 = <span class=\"keyword\">new</span> SourceSub2();  </span><br><span class=\"line\"></span><br><span class=\"line\">        source1.method1();  </span><br><span class=\"line\">        source1.method2();  </span><br><span class=\"line\">        source2.method1();  </span><br><span class=\"line\">        source2.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：<br><code>the sourceable interface&#39;s first Sub1!\nthe sourceable interface&#39;s second Sub2!</code><br>达到了我们的效果！<br>讲了这么多，总结一下三种适配器模式的应用场景：<br>类的适配器模式：当希望将<font color=\"#F08A5D\">一个类</font>转换成满足<font color=\"#F08A5D\">另一个新接口</font>的类时，可以使用类的适配器模式，创<br>建一个新类，继承原有的类，实现新的接口即可。<br>对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类<br>，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。<br>接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所<br>有方法，我们写别的类的时候，继承抽象类即可。</p>\n<h2 id=\"7-装饰模式（Decorator）\"><a href=\"#7-装饰模式（Decorator）\" class=\"headerlink\" title=\"7. 装饰模式（Decorator）\"></a>7. 装饰模式（Decorator）</h2><p>顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对<br>象实现同一个接口，装饰对象持有被装饰对象的实例，关系图如下:<br><img src=\"/images/post_images/20171225_05.png\" alt=\"\"></p>\n<p>Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能，代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Sourceable source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decorator</span><span class=\"params\">(Sourceable source)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before decorator!\"</span>);  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after decorator!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">        Sourceable obj = <span class=\"keyword\">new</span> Decorator(source);  </span><br><span class=\"line\">        obj.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>before decorator!\nthe original method!\nafter decorator!</code></p>\n<ul>\n<li>装饰器模式的应用场景：</li>\n</ul>\n<ol>\n<li>需要扩展一个类的功能。</li>\n<li>动态的为一个对象增加功能，而且还能动态撤销。(继承不能做到这一点，继承的功能是静态的，不能动态增删。)</li>\n</ol>\n<ul>\n<li>缺点：产生过多相似的对象，不易排错！</li>\n</ul>\n<h2 id=\"8-代理模式-Proxy\"><a href=\"#8-代理模式-Proxy\" class=\"headerlink\" title=\"8. 代理模式(Proxy)\"></a>8. 代理模式(Proxy)</h2><p>其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操<br>作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面<br>，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需<br>要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。先来看看关系图:<br><img src=\"/images/post_images/20171225_06.png\" alt=\"\"><br>根据上文的阐述，代理模式就比较容易的理解了，我们看下代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Source source;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        before();  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">        atfer();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">atfer</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after proxy!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before proxy!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source = <span class=\"keyword\">new</span> Proxy();  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>before proxy!\nthe original method!\nafter proxy!</code></p>\n<ul>\n<li><strong>代理模式的应用场景:</strong><br>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：</li>\n</ul>\n<ol>\n<li>修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。</li>\n<li>就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</li>\n</ol>\n<h2 id=\"9、外观模式-Facade\"><a href=\"#9、外观模式-Facade\" class=\"headerlink\" title=\"9、外观模式(Facade)\"></a>9、外观模式(Facade)</h2><p>外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配<br>置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式<br>中没有涉及到接口，看下类图:(我们以一个计算机的启动过程为例)<br><img src=\"/images/post_images/20171225_07.png\" alt=\"\"></p>\n<p>我们先看下实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Disk</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> CPU cpu;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memory memory;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Disk disk;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        cpu = <span class=\"keyword\">new</span> CPU();  </span><br><span class=\"line\">        memory = <span class=\"keyword\">new</span> Memory();  </span><br><span class=\"line\">        disk = <span class=\"keyword\">new</span> Disk();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start the computer!\"</span>);  </span><br><span class=\"line\">        cpu.startup();  </span><br><span class=\"line\">        memory.startup();  </span><br><span class=\"line\">        disk.startup();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start computer finished!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"begin to close the computer!\"</span>);  </span><br><span class=\"line\">        cpu.shutdown();  </span><br><span class=\"line\">        memory.shutdown();  </span><br><span class=\"line\">        disk.shutdown();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"computer closed!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User类如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Computer computer = <span class=\"keyword\">new</span> Computer();  </span><br><span class=\"line\">        computer.startup();  </span><br><span class=\"line\">        computer.shutdown();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>start the computer!\n    cpu startup!\n    memory startup!\n    disk startup!\n    start computer finished!\n    begin to close the computer!\n    cpu shutdown!\n    memory shutdown!\n    disk shutdown!\n    computer closed!</code></p>\n<p>如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这<br>样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有<br>了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观<br>模式！</p>\n<h2 id=\"桥接模式-Bridge\"><a href=\"#桥接模式-Bridge\" class=\"headerlink\" title=\"桥接模式(Bridge)\"></a>桥接模式(Bridge)</h2><p>桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与<br>实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数<br>据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就<br>是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。<br>我们来看看关系图:<br><img src=\"/images/post_images/20171225_08.png\" alt=\"\"><br>实现代码:<br>先定义接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>分别定义两个实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the first sub!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the second sub!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个桥，持有Sourceable的一个实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bridge</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Sourceable source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sourceable <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSource</span><span class=\"params\">(Sourceable source)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBridge</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bridge</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        getSource().method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgeTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        Bridge bridge = <span class=\"keyword\">new</span> MyBridge();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*调用第一个对象*/</span>  </span><br><span class=\"line\">        Sourceable source1 = <span class=\"keyword\">new</span> SourceSub1();  </span><br><span class=\"line\">        bridge.setSource(source1);  </span><br><span class=\"line\">        bridge.method();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*调用第二个对象*/</span>  </span><br><span class=\"line\">        Sourceable source2 = <span class=\"keyword\">new</span> SourceSub2();  </span><br><span class=\"line\">        bridge.setSource(source2);  </span><br><span class=\"line\">        bridge.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>output：<br><code>this is the first sub!\n this is the second sub!</code><br>这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的<br>调用。接下来我再画个图，大家就应该明白了，因为这个图是我们JDBC连接的原理，有数据库学习<br>基础的，一结合就都懂了。<br><img src=\"/images/post_images/20171225_09.png\" alt=\"\"></p>\n<h2 id=\"11-组合模式（Composite）\"><a href=\"#11-组合模式（Composite）\" class=\"headerlink\" title=\"11. 组合模式（Composite）\"></a>11. 组合模式（Composite）</h2><pre><code>组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便，看看关系图：\n</code></pre><p>直接来看代码:<br><img src=\"/images/post_images/20171225_10.png\" alt=\"\"></p>\n<p>直接来看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> TreeNode parent;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;TreeNode&gt; children = <span class=\"keyword\">new</span> Vector&lt;TreeNode&gt;();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(String name)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> parent;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParent</span><span class=\"params\">(TreeNode parent)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parent = parent;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(TreeNode node)</span></span>&#123;  </span><br><span class=\"line\">        children.add(node);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(TreeNode node)</span></span>&#123;  </span><br><span class=\"line\">        children.remove(node);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取得孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Enumeration&lt;TreeNode&gt; <span class=\"title\">getChildren</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> children.elements();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> TreeNode(name);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Tree tree = <span class=\"keyword\">new</span> Tree(<span class=\"string\">\"A\"</span>);  </span><br><span class=\"line\">        TreeNode nodeB = <span class=\"keyword\">new</span> TreeNode(<span class=\"string\">\"B\"</span>);  </span><br><span class=\"line\">        TreeNode nodeC = <span class=\"keyword\">new</span> TreeNode(<span class=\"string\">\"C\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        nodeB.add(nodeC);  </span><br><span class=\"line\">        tree.root.add(nodeB);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"build the tree finished!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用场景: 将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。</p>\n<h2 id=\"12-享元模式-Flyweight\"><a href=\"#12-享元模式-Flyweight\" class=\"headerlink\" title=\"12. 享元模式(Flyweight)\"></a>12. 享元模式(Flyweight)</h2><p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，<br>通常与工厂模式一起使用。</p>\n<p><img src=\"/images/post_images/20171225_11.png\" alt=\"\"></p>\n<p>FlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是<br>否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight<br>是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不<br>难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url<br>、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，<br>所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数<br>据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。<br>看个例子:<br><img src=\"/images/post_images/20171225_12.png\" alt=\"\"></p>\n<p>看下数据库连接池的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionPool</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Connection&gt; pool;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*公有属性*/</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username = <span class=\"string\">\"root\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password = <span class=\"string\">\"root\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> poolSize = <span class=\"number\">100</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConnectionPool instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    Connection conn = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*构造方法，做一些初始化工作*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ConnectionPool</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pool = <span class=\"keyword\">new</span> Vector&lt;Connection&gt;(poolSize);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; poolSize; i++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                Class.forName(driverClassName);  </span><br><span class=\"line\">                conn = DriverManager.getConnection(url, username, password);  </span><br><span class=\"line\">                pool.add(conn);  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;  </span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 返回连接到连接池 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pool.add(conn);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 返回连接池中的一个数据库连接 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pool.size() &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            Connection conn = pool.get(<span class=\"number\">0</span>);  </span><br><span class=\"line\">            pool.remove(conn);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> conn;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过连接池的管理，实现了数据库连接的共享，不需要每一次都重新创建连接，节省了数据库重新<br>创建的开销，提升了系统的性能！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转载自<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<p>我们接着讨论设计模式，上篇文章我讲完了5种创建型模式，这章开始，我将讲下7种结构型模式：适<br>配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模<br>式是各种模式的起源，我们看下面的图：</p>\n<p><img src=\"/images/post_images/20171225_01.png\" alt=\"\"></p>\n<h2 id=\"6-适配器模式-Adapter\"><a href=\"#6-适配器模式-Adapter\" class=\"headerlink\" title=\"6. 适配器模式(Adapter)\"></a>6. 适配器模式(Adapter)</h2><pre><code>适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造\n</code></pre><p>成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p>\n<p>首先，我们来看看类的适配器模式，先看类图：<br><img src=\"/images/post_images/20171225_02.png\" alt=\"\"></p>\n<p>核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口时Targetable，通过Adapter<br>类，将Source的功能扩展到Targetable里，看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 与原类中的方法相同 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 新类的方法 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the targetable method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Adapter类继承Source类，实现Targetable接口，下面是测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Targetable target = <span class=\"keyword\">new</span> Adapter();  </span><br><span class=\"line\">        target.method1();  </span><br><span class=\"line\">        target.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><code>this is original method!\nthis is the targetable method!</code><br>这样Targetable接口的实现类就具有了Source类的功能。</p>\n<font color=\"#B83B5E\"><strong>对象的适配器模式</strong></font>\n\n<p>基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source<br>类的实例，以达到解决兼容性的问题。看图:<br><img src=\"/images/post_images/20171225_03.png\" alt=\"\"></p>\n<p>只需要修改Adapter类的源码即可:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Source source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Wrapper</span><span class=\"params\">(Source source)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the targetable method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        source.method1();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Source source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">        Targetable target = <span class=\"keyword\">new</span> Wrapper(source);  </span><br><span class=\"line\">        target.method1();  </span><br><span class=\"line\">        target.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出与第一种一样，只是适配的方法不同而已。</p>\n<p>第三种适配器模式是<font color=\"#B83B5E\"><strong>接口的适配器模式</strong></font>，接口的适配器是<br>这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口<br>的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，<br>此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接<br>口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个<br>类，继承该抽象类，重写我们需要的方法就行。看一下类图:<br><img src=\"/images/post_images/20171225_04.png\" alt=\"\"></p>\n<p>这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在<br>一些实现类中并不是都需要。看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>抽象类Wrapper2:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span></span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper2</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the sourceable interface's first Sub1!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper2</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the sourceable interface's second Sub2!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WrapperTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source1 = <span class=\"keyword\">new</span> SourceSub1();  </span><br><span class=\"line\">        Sourceable source2 = <span class=\"keyword\">new</span> SourceSub2();  </span><br><span class=\"line\"></span><br><span class=\"line\">        source1.method1();  </span><br><span class=\"line\">        source1.method2();  </span><br><span class=\"line\">        source2.method1();  </span><br><span class=\"line\">        source2.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：<br><code>the sourceable interface&#39;s first Sub1!\nthe sourceable interface&#39;s second Sub2!</code><br>达到了我们的效果！<br>讲了这么多，总结一下三种适配器模式的应用场景：<br>类的适配器模式：当希望将<font color=\"#F08A5D\">一个类</font>转换成满足<font color=\"#F08A5D\">另一个新接口</font>的类时，可以使用类的适配器模式，创<br>建一个新类，继承原有的类，实现新的接口即可。<br>对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类<br>，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。<br>接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所<br>有方法，我们写别的类的时候，继承抽象类即可。</p>\n<h2 id=\"7-装饰模式（Decorator）\"><a href=\"#7-装饰模式（Decorator）\" class=\"headerlink\" title=\"7. 装饰模式（Decorator）\"></a>7. 装饰模式（Decorator）</h2><p>顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对<br>象实现同一个接口，装饰对象持有被装饰对象的实例，关系图如下:<br><img src=\"/images/post_images/20171225_05.png\" alt=\"\"></p>\n<p>Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能，代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Sourceable source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decorator</span><span class=\"params\">(Sourceable source)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before decorator!\"</span>);  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after decorator!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">        Sourceable obj = <span class=\"keyword\">new</span> Decorator(source);  </span><br><span class=\"line\">        obj.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>before decorator!\nthe original method!\nafter decorator!</code></p>\n<ul>\n<li>装饰器模式的应用场景：</li>\n</ul>\n<ol>\n<li>需要扩展一个类的功能。</li>\n<li>动态的为一个对象增加功能，而且还能动态撤销。(继承不能做到这一点，继承的功能是静态的，不能动态增删。)</li>\n</ol>\n<ul>\n<li>缺点：产生过多相似的对象，不易排错！</li>\n</ul>\n<h2 id=\"8-代理模式-Proxy\"><a href=\"#8-代理模式-Proxy\" class=\"headerlink\" title=\"8. 代理模式(Proxy)\"></a>8. 代理模式(Proxy)</h2><p>其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操<br>作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面<br>，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需<br>要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。先来看看关系图:<br><img src=\"/images/post_images/20171225_06.png\" alt=\"\"><br>根据上文的阐述，代理模式就比较容易的理解了，我们看下代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Source source;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        before();  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">        atfer();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">atfer</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after proxy!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before proxy!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source = <span class=\"keyword\">new</span> Proxy();  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>before proxy!\nthe original method!\nafter proxy!</code></p>\n<ul>\n<li><strong>代理模式的应用场景:</strong><br>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：</li>\n</ul>\n<ol>\n<li>修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。</li>\n<li>就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</li>\n</ol>\n<h2 id=\"9、外观模式-Facade\"><a href=\"#9、外观模式-Facade\" class=\"headerlink\" title=\"9、外观模式(Facade)\"></a>9、外观模式(Facade)</h2><p>外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配<br>置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式<br>中没有涉及到接口，看下类图:(我们以一个计算机的启动过程为例)<br><img src=\"/images/post_images/20171225_07.png\" alt=\"\"></p>\n<p>我们先看下实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Disk</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> CPU cpu;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memory memory;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Disk disk;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        cpu = <span class=\"keyword\">new</span> CPU();  </span><br><span class=\"line\">        memory = <span class=\"keyword\">new</span> Memory();  </span><br><span class=\"line\">        disk = <span class=\"keyword\">new</span> Disk();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start the computer!\"</span>);  </span><br><span class=\"line\">        cpu.startup();  </span><br><span class=\"line\">        memory.startup();  </span><br><span class=\"line\">        disk.startup();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start computer finished!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"begin to close the computer!\"</span>);  </span><br><span class=\"line\">        cpu.shutdown();  </span><br><span class=\"line\">        memory.shutdown();  </span><br><span class=\"line\">        disk.shutdown();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"computer closed!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User类如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Computer computer = <span class=\"keyword\">new</span> Computer();  </span><br><span class=\"line\">        computer.startup();  </span><br><span class=\"line\">        computer.shutdown();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>start the computer!\n    cpu startup!\n    memory startup!\n    disk startup!\n    start computer finished!\n    begin to close the computer!\n    cpu shutdown!\n    memory shutdown!\n    disk shutdown!\n    computer closed!</code></p>\n<p>如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这<br>样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有<br>了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观<br>模式！</p>\n<h2 id=\"桥接模式-Bridge\"><a href=\"#桥接模式-Bridge\" class=\"headerlink\" title=\"桥接模式(Bridge)\"></a>桥接模式(Bridge)</h2><p>桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与<br>实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数<br>据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就<br>是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。<br>我们来看看关系图:<br><img src=\"/images/post_images/20171225_08.png\" alt=\"\"><br>实现代码:<br>先定义接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>分别定义两个实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the first sub!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the second sub!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个桥，持有Sourceable的一个实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bridge</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Sourceable source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sourceable <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSource</span><span class=\"params\">(Sourceable source)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBridge</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bridge</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        getSource().method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgeTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        Bridge bridge = <span class=\"keyword\">new</span> MyBridge();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*调用第一个对象*/</span>  </span><br><span class=\"line\">        Sourceable source1 = <span class=\"keyword\">new</span> SourceSub1();  </span><br><span class=\"line\">        bridge.setSource(source1);  </span><br><span class=\"line\">        bridge.method();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*调用第二个对象*/</span>  </span><br><span class=\"line\">        Sourceable source2 = <span class=\"keyword\">new</span> SourceSub2();  </span><br><span class=\"line\">        bridge.setSource(source2);  </span><br><span class=\"line\">        bridge.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>output：<br><code>this is the first sub!\n this is the second sub!</code><br>这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的<br>调用。接下来我再画个图，大家就应该明白了，因为这个图是我们JDBC连接的原理，有数据库学习<br>基础的，一结合就都懂了。<br><img src=\"/images/post_images/20171225_09.png\" alt=\"\"></p>\n<h2 id=\"11-组合模式（Composite）\"><a href=\"#11-组合模式（Composite）\" class=\"headerlink\" title=\"11. 组合模式（Composite）\"></a>11. 组合模式（Composite）</h2><pre><code>组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便，看看关系图：\n</code></pre><p>直接来看代码:<br><img src=\"/images/post_images/20171225_10.png\" alt=\"\"></p>\n<p>直接来看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> TreeNode parent;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;TreeNode&gt; children = <span class=\"keyword\">new</span> Vector&lt;TreeNode&gt;();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(String name)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> parent;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParent</span><span class=\"params\">(TreeNode parent)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parent = parent;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(TreeNode node)</span></span>&#123;  </span><br><span class=\"line\">        children.add(node);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(TreeNode node)</span></span>&#123;  </span><br><span class=\"line\">        children.remove(node);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取得孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Enumeration&lt;TreeNode&gt; <span class=\"title\">getChildren</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> children.elements();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> TreeNode(name);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Tree tree = <span class=\"keyword\">new</span> Tree(<span class=\"string\">\"A\"</span>);  </span><br><span class=\"line\">        TreeNode nodeB = <span class=\"keyword\">new</span> TreeNode(<span class=\"string\">\"B\"</span>);  </span><br><span class=\"line\">        TreeNode nodeC = <span class=\"keyword\">new</span> TreeNode(<span class=\"string\">\"C\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        nodeB.add(nodeC);  </span><br><span class=\"line\">        tree.root.add(nodeB);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"build the tree finished!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用场景: 将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。</p>\n<h2 id=\"12-享元模式-Flyweight\"><a href=\"#12-享元模式-Flyweight\" class=\"headerlink\" title=\"12. 享元模式(Flyweight)\"></a>12. 享元模式(Flyweight)</h2><p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，<br>通常与工厂模式一起使用。</p>\n<p><img src=\"/images/post_images/20171225_11.png\" alt=\"\"></p>\n<p>FlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是<br>否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight<br>是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不<br>难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url<br>、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，<br>所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数<br>据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。<br>看个例子:<br><img src=\"/images/post_images/20171225_12.png\" alt=\"\"></p>\n<p>看下数据库连接池的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionPool</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Connection&gt; pool;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*公有属性*/</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username = <span class=\"string\">\"root\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password = <span class=\"string\">\"root\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> poolSize = <span class=\"number\">100</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConnectionPool instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    Connection conn = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*构造方法，做一些初始化工作*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ConnectionPool</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pool = <span class=\"keyword\">new</span> Vector&lt;Connection&gt;(poolSize);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; poolSize; i++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                Class.forName(driverClassName);  </span><br><span class=\"line\">                conn = DriverManager.getConnection(url, username, password);  </span><br><span class=\"line\">                pool.add(conn);  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;  </span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 返回连接到连接池 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pool.add(conn);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 返回连接池中的一个数据库连接 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pool.size() &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            Connection conn = pool.get(<span class=\"number\">0</span>);  </span><br><span class=\"line\">            pool.remove(conn);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> conn;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过连接池的管理，实现了数据库连接的共享，不需要每一次都重新创建连接，节省了数据库重新<br>创建的开销，提升了系统的性能！</p>\n"},{"title":"Java中的23中设计模式-三","date":"2017-12-25T10:04:02.000Z","type":["Java","设计模式"],"_content":"> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n本章是关于设计模式的最后一讲，会讲到第三种设计模式——行为型模式，共11种：策略模式、模板方\n法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、\n中介者模式、解释器模式。这段时间一直在写关于设计模式的东西，终于写到一半了，写博文是个很\n费时间的东西，因为我得为读者负责，不论是图还是代码还是表述，都希望能尽量写清楚，以便读者\n理解，我想不论是我还是读者，都希望看到高质量的博文出来，从我本人出发，我会一直坚持下去，\n不断更新，源源动力来自于读者朋友们的不断支持，我会尽自己的努力，写好每一篇文章！希望大家\n能不断给出意见和建议，共同打造完美的博文！\n\n先来张图，看看这11中模式的关系：\n1. 通过父类与子类的关系进行实现。\n2. 两个类之间。\n3. 类的状态。\n4. 通过中间类\n![](/images/post_images/20171225_13.png)\n\n## 13. 策略模式(strategy)\n\n策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影\n响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接\n口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数，关系图如下:\n![](/images/post_images/20171225_14.png)\n\n图中ICalculator提供同意的方法，\nAbstractCalculator是辅助类，提供辅助方法，接下来，依次实现下每个类：\n首先统一接口:\n\n```java\npublic interface ICalculator {  \n    public int calculate(String exp);  \n}  \n```\n辅助类:\n```java\npublic abstract class AbstractCalculator {  \n\n    public int[] split(String exp,String opt){  \n        String array[] = exp.split(opt);  \n        int arrayInt[] = new int[2];  \n        arrayInt[0] = Integer.parseInt(array[0]);  \n        arrayInt[1] = Integer.parseInt(array[1]);  \n        return arrayInt;  \n    }  \n}  \n```\n三个实现类:\n\n```java\npublic class Plus extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"\\\\+\");  \n        return arrayInt[0]+arrayInt[1];  \n    }  \n}  \n```\n```java\npublic class Minus extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"-\");  \n        return arrayInt[0]-arrayInt[1];  \n    }  \n\n}  \n```\n```java\npublic class Multiply extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"\\\\*\");  \n        return arrayInt[0]*arrayInt[1];  \n    }  \n}  \n```\n简单的测试类:\n```java\npublic class StrategyTest {  \n\n    public static void main(String[] args) {  \n        String exp = \"2+8\";  \n        ICalculator cal = new Plus();  \n        int result = cal.calculate(exp);  \n        System.out.println(result);  \n    }  \n}  \n```\n\n输出: `10`\n\n策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装\n。因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。\n\n## 14. 模板方法模式(Template Method)\n\n解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1...n个方法，可以是抽象\n的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对\n子类的调用，先看个关系图:\n![](/images/post_images/20171225_15.png)\n就是在AbstractCalculator类中定义一个主方法calculate，calculate()调用spilt()等，Plus\n和Minus分别继承AbstractCalculator类，通过对AbstractCalculator的调用实现对子类的调用\n，看下面的例子:\n```java\npublic abstract class AbstractCalculator {  \n\n    /*主方法，实现对本类其它方法的调用*/  \n    public final int calculate(String exp,String opt){  \n        int array[] = split(exp,opt);  \n        return calculate(array[0],array[1]);  \n    }  \n\n    /*被子类重写的方法*/  \n    abstract public int calculate(int num1,int num2);  \n\n    public int[] split(String exp,String opt){  \n        String array[] = exp.split(opt);  \n        int arrayInt[] = new int[2];  \n        arrayInt[0] = Integer.parseInt(array[0]);  \n        arrayInt[1] = Integer.parseInt(array[1]);  \n        return arrayInt;  \n    }  \n}  \n```\n```java\npublic class Plus extends AbstractCalculator {  \n\n    @Override  \n    public int calculate(int num1,int num2) {  \n        return num1 + num2;\n    }  \n}\n```\n测试类:\n```java\npublic class StrategyTest {  \n\n    public static void main(String[] args) {  \n        String exp = \"8+8\";  \n        AbstractCalculator cal = new Plus();  \n        int result = cal.calculate(exp, \"\\\\+\");  \n        System.out.println(result);  \n    }  \n}  \n```\n我跟踪下这个小程序的执行过程：首先将`exp和\"\\\\+\"`做参数，调用AbstractCalculator类里\n的`calculate(String,String)`方法，在`calculate(String,String)`里调用同类\n的`split()`，之后再调用`calculate(int ,int)`方法，从这个方法进入到子类中，执行\n完`return num1 + num2`后，将值返回到`AbstractCalculator`类，赋给`result`，打印出来\n。正好验证了我们开头的思路。\n\n\n## 15. 观察者模式（Observer）\n包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记\n得归纳，记得本文最开始的那个图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览\n一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，如果后续有更新，会\n及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知\n，并且随着变化！对象之间是一种一对多的关系。先来看看关系图：\n![](/images/post_images/20171225_16.png)\n我解释下这些类的作用：MySubject类就是我们的主对象，Observer1和Observer2是依赖\n于MySubject的对象，当MySubject变化时，Observer1和Observer2必然变化\n。AbstractSubject类中定义着需要监控的对象列表，可以对其进行修改：增加或删除被监控对象\n，且当MySubject变化时，负责通知在列表内存在的对象。\n我们看实现代码：\n\n一个Observer接口:\n```java\npublic interface Observer {  \n    public void update();  \n}  \n```\n两个实现类:\n```java\npublic class Observer1 implements Observer {  \n\n    @Override  \n    public void update() {  \n        System.out.println(\"observer1 has received!\");  \n    }  \n}  \n```\n```java\npublic class Observer2 implements Observer {  \n\n    @Override  \n    public void update() {  \n        System.out.println(\"observer2 has received!\");  \n    }  \n\n}\n```\nSubject接口及实现类:\n```java\npublic interface Subject {  \n\n    /*增加观察者*/  \n    public void add(Observer observer);  \n\n    /*删除观察者*/  \n    public void del(Observer observer);  \n\n    /*通知所有的观察者*/  \n    public void notifyObservers();  \n\n    /*自身的操作*/  \n    public void operation();  \n}  \n```\n```java\npublic abstract class AbstractSubject implements Subject {  \n\n    private Vector<Observer> vector = new Vector<Observer>();  \n    @Override  \n    public void add(Observer observer) {  \n        vector.add(observer);  \n    }  \n\n    @Override  \n    public void del(Observer observer) {  \n        vector.remove(observer);  \n    }  \n\n    @Override  \n    public void notifyObservers() {  \n        Enumeration<Observer> enumo = vector.elements();  \n        while(enumo.hasMoreElements()){  \n            enumo.nextElement().update();  \n        }  \n    }  \n}  \n```\n\n```java\npublic class MySubject extends AbstractSubject {  \n\n    @Override  \n    public void operation() {  \n        System.out.println(\"update self!\");  \n        notifyObservers();  \n    }  \n\n}  \n```\n测试类:\n```java\npublic class ObserverTest {  \n\n    public static void main(String[] args) {  \n        Subject sub = new MySubject();  \n        sub.add(new Observer1());  \n        sub.add(new Observer2());  \n\n        sub.operation();  \n    }  \n\n}  \n```\n\n输出：\n`update self!\nobserver1 has received!\nobserver2 has received!`\n\n 这些东西，其实不难，只是有些抽象，不太容易整体理解，建议读者：根据关系图，新建项目，自\n 己写代码(或者参考我的代码),按照总体思路走一遍，这样才能体会它的思想，理解起来容易！\n\n## 16. 迭代子模式（Iterator）\n 顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比\n 较熟悉的话，理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，\n 二是迭代器对象，用于对聚集对象进行遍历访问。我们看下关系图:\n![](/images/post_images/20171225_16.png)\n这个思路和我们常用的一模一样，MyCollection中定义了集合的一些操作，MyIterator中定义了\n一系列迭代操作，且持有Collection实例，我们来看看实现代码：\n\n两个接口:\n\n```java\npublic interface Collection {  \n\n    public Iterator iterator();  \n\n    /*取得集合元素*/  \n    public Object get(int i);  \n\n    /*取得集合大小*/  \n    public int size();  \n}  \n\n```\n```java\npublic interface Iterator {  \n    //前移  \n    public Object previous();  \n\n    //后移  \n    public Object next();  \n    public boolean hasNext();  \n\n    //取得第一个元素  \n    public Object first();  \n}  \n```\n两个实现:\n```java\npublic class MyCollection implements Collection {  \n\n    public String string[] = {\"A\",\"B\",\"C\",\"D\",\"E\"};  \n    @Override  \n    public Iterator iterator() {  \n        return new MyIterator(this);  \n    }  \n\n    @Override  \n    public Object get(int i) {  \n        return string[i];  \n    }  \n\n    @Override  \n    public int size() {  \n        return string.length;  \n    }  \n}  \n```\n```java\npublic class MyIterator implements Iterator {  \n\n    private Collection collection;  \n    private int pos = -1;  \n\n    public MyIterator(Collection collection){  \n        this.collection = collection;  \n    }  \n\n    @Override  \n    public Object previous() {  \n        if(pos > 0){  \n            pos--;  \n        }  \n        return collection.get(pos);  \n    }  \n\n    @Override  \n    public Object next() {  \n        if(pos<collection.size()-1){  \n            pos++;  \n        }  \n        return collection.get(pos);  \n    }  \n\n    @Override  \n    public boolean hasNext() {  \n        if(pos<collection.size()-1){  \n            return true;  \n        }else{  \n            return false;  \n        }  \n    }  \n\n    @Override  \n    public Object first() {  \n        pos = 0;  \n        return collection.get(pos);  \n    }  \n\n}  \n```\n\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Collection collection = new MyCollection();  \n        Iterator it = collection.iterator();  \n\n        while(it.hasNext()){  \n            System.out.println(it.next());  \n        }  \n    }  \n}  \n```\n\n输出: `A B C D E`\n\n此处我们貌似模拟了一个集合类的过程，感觉是不是很爽？其实JDK中各个类也都是这些基本的东西\n，加一些设计模式，再加一些优化放到一起的，只要我们把这些东西学会了，掌握好了，我们也可\n以写出自己的集合类，甚至框架！\n\n\n## 17. 责任链模式(Chain of Responsibility)\n接下来我们将要谈谈责任链模式，有多个对象，每个对象持有对下一个对象的引用，这样就会形成\n一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个\n对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整\n。先看看关系图:\n\n![](/images/post_images/20171225_18.png)\n\nAbstracthandler类提供了get和set方法，方便MyHandle类设置和修改引用对象，MyHandle类是\n核心，实例化后生成一系列相互持有的对象，构成一条链。\n\n```java\npublic interface Handler {  \n    public void operator();  \n}  \n```\n\n```java\npublic abstract class AbstractHandler {  \n\n    private Handler handler;  \n\n    public Handler getHandler() {  \n        return handler;  \n    }  \n\n    public void setHandler(Handler handler) {  \n        this.handler = handler;  \n    }  \n\n}  \n```\n\n```java\npublic class MyHandler extends AbstractHandler implements Handler {  \n\n    private String name;  \n\n    public MyHandler(String name) {  \n        this.name = name;  \n    }  \n\n    @Override  \n    public void operator() {  \n        System.out.println(name+\"deal!\");  \n        if(getHandler()!=null){  \n            getHandler().operator();  \n        }  \n    }  \n}  \n```\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        MyHandler h1 = new MyHandler(\"h1\");  \n        MyHandler h2 = new MyHandler(\"h2\");  \n        MyHandler h3 = new MyHandler(\"h3\");  \n\n        h1.setHandler(h2);  \n        h2.setHandler(h3);  \n\n        h1.operator();  \n    }  \n}  \n```\n\n输出:\n`h1deal!\nh2deal!\nh3deal!`\n\n此处强调一点就是，链接上的请求可以是一条链，可以是一个树，还可以是一个环，模式本身不约\n束这个，需要我们自己去实现，同时，在一个时刻，命令只允许由一个对象传给另一个对象，而不\n允许传给多个对象。\n\n## 18. 命令模式（Command）\n命令模式很好理解，举个例子，司令员下令让士兵去干件事情，从整个事情的角度来考虑，司令员\n的作用是，发出口令，口令经过传递，传到了士兵耳朵里，士兵去执行。这个过程好在，三者相互\n解耦，任何一方都不用去依赖其他人，只需要做好自己的事儿就行，司令员要的是结果，不会去关\n注到底士兵是怎么实现的。我们看看关系图:\n\n![](/images/post_images/20171225_19.png)\n\n**Invoker** 是调用者（司令员），**Receiver** 是被调用者（士兵），**MyCommand** 是命\n令，实现了 **Command** 接口，持有接收对象，看实现代码:\n\n```java\npublic interface Command {  \n    public void exe();  \n}  \n```\n```java\npublic class MyCommand implements Command {  \n\n    private Receiver receiver;  \n\n    public MyCommand(Receiver receiver) {  \n        this.receiver = receiver;  \n    }  \n\n    @Override  \n    public void exe() {  \n        receiver.action();  \n    }  \n}  \n```\n```java\npublic class Receiver {  \n    public void action(){  \n        System.out.println(\"command received!\");  \n    }  \n}  \n```\n```java\npublic class Invoker {  \n\n    private Command command;  \n\n    public Invoker(Command command) {  \n        this.command = command;  \n    }  \n\n    public void action(){  \n        command.exe();  \n    }  \n}  \n```\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Receiver receiver = new Receiver();  \n        Command cmd = new MyCommand(receiver);  \n        Invoker invoker = new Invoker(cmd);  \n        invoker.action();  \n    }  \n}  \n```\n输出: `command received!`\n这个很好理解，命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开，\n熟悉Struts的同学应该知道，Struts其实就是一种将请求和呈现分离的技术，其中必然涉及命令模\n式的思想！\n本篇暂时就到这里，因为考虑到将来博文会不断的更新，不断的增加新内容，所以当前篇幅不易过\n长，以便大家阅读，所以接下来的放到另一篇里。敬请关注！\n","source":"_posts/Java中的23中设计模式-三.md","raw":"---\ntitle: 'Java中的23中设计模式-三'\ndate: 2017-12-25 18:04:02\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - Java\n  - 设计模式\ntype:\n  - Java\n  - 设计模式\n---\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n本章是关于设计模式的最后一讲，会讲到第三种设计模式——行为型模式，共11种：策略模式、模板方\n法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、\n中介者模式、解释器模式。这段时间一直在写关于设计模式的东西，终于写到一半了，写博文是个很\n费时间的东西，因为我得为读者负责，不论是图还是代码还是表述，都希望能尽量写清楚，以便读者\n理解，我想不论是我还是读者，都希望看到高质量的博文出来，从我本人出发，我会一直坚持下去，\n不断更新，源源动力来自于读者朋友们的不断支持，我会尽自己的努力，写好每一篇文章！希望大家\n能不断给出意见和建议，共同打造完美的博文！\n\n先来张图，看看这11中模式的关系：\n1. 通过父类与子类的关系进行实现。\n2. 两个类之间。\n3. 类的状态。\n4. 通过中间类\n![](/images/post_images/20171225_13.png)\n\n## 13. 策略模式(strategy)\n\n策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影\n响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接\n口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数，关系图如下:\n![](/images/post_images/20171225_14.png)\n\n图中ICalculator提供同意的方法，\nAbstractCalculator是辅助类，提供辅助方法，接下来，依次实现下每个类：\n首先统一接口:\n\n```java\npublic interface ICalculator {  \n    public int calculate(String exp);  \n}  \n```\n辅助类:\n```java\npublic abstract class AbstractCalculator {  \n\n    public int[] split(String exp,String opt){  \n        String array[] = exp.split(opt);  \n        int arrayInt[] = new int[2];  \n        arrayInt[0] = Integer.parseInt(array[0]);  \n        arrayInt[1] = Integer.parseInt(array[1]);  \n        return arrayInt;  \n    }  \n}  \n```\n三个实现类:\n\n```java\npublic class Plus extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"\\\\+\");  \n        return arrayInt[0]+arrayInt[1];  \n    }  \n}  \n```\n```java\npublic class Minus extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"-\");  \n        return arrayInt[0]-arrayInt[1];  \n    }  \n\n}  \n```\n```java\npublic class Multiply extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"\\\\*\");  \n        return arrayInt[0]*arrayInt[1];  \n    }  \n}  \n```\n简单的测试类:\n```java\npublic class StrategyTest {  \n\n    public static void main(String[] args) {  \n        String exp = \"2+8\";  \n        ICalculator cal = new Plus();  \n        int result = cal.calculate(exp);  \n        System.out.println(result);  \n    }  \n}  \n```\n\n输出: `10`\n\n策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装\n。因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。\n\n## 14. 模板方法模式(Template Method)\n\n解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1...n个方法，可以是抽象\n的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对\n子类的调用，先看个关系图:\n![](/images/post_images/20171225_15.png)\n就是在AbstractCalculator类中定义一个主方法calculate，calculate()调用spilt()等，Plus\n和Minus分别继承AbstractCalculator类，通过对AbstractCalculator的调用实现对子类的调用\n，看下面的例子:\n```java\npublic abstract class AbstractCalculator {  \n\n    /*主方法，实现对本类其它方法的调用*/  \n    public final int calculate(String exp,String opt){  \n        int array[] = split(exp,opt);  \n        return calculate(array[0],array[1]);  \n    }  \n\n    /*被子类重写的方法*/  \n    abstract public int calculate(int num1,int num2);  \n\n    public int[] split(String exp,String opt){  \n        String array[] = exp.split(opt);  \n        int arrayInt[] = new int[2];  \n        arrayInt[0] = Integer.parseInt(array[0]);  \n        arrayInt[1] = Integer.parseInt(array[1]);  \n        return arrayInt;  \n    }  \n}  \n```\n```java\npublic class Plus extends AbstractCalculator {  \n\n    @Override  \n    public int calculate(int num1,int num2) {  \n        return num1 + num2;\n    }  \n}\n```\n测试类:\n```java\npublic class StrategyTest {  \n\n    public static void main(String[] args) {  \n        String exp = \"8+8\";  \n        AbstractCalculator cal = new Plus();  \n        int result = cal.calculate(exp, \"\\\\+\");  \n        System.out.println(result);  \n    }  \n}  \n```\n我跟踪下这个小程序的执行过程：首先将`exp和\"\\\\+\"`做参数，调用AbstractCalculator类里\n的`calculate(String,String)`方法，在`calculate(String,String)`里调用同类\n的`split()`，之后再调用`calculate(int ,int)`方法，从这个方法进入到子类中，执行\n完`return num1 + num2`后，将值返回到`AbstractCalculator`类，赋给`result`，打印出来\n。正好验证了我们开头的思路。\n\n\n## 15. 观察者模式（Observer）\n包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记\n得归纳，记得本文最开始的那个图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览\n一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，如果后续有更新，会\n及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知\n，并且随着变化！对象之间是一种一对多的关系。先来看看关系图：\n![](/images/post_images/20171225_16.png)\n我解释下这些类的作用：MySubject类就是我们的主对象，Observer1和Observer2是依赖\n于MySubject的对象，当MySubject变化时，Observer1和Observer2必然变化\n。AbstractSubject类中定义着需要监控的对象列表，可以对其进行修改：增加或删除被监控对象\n，且当MySubject变化时，负责通知在列表内存在的对象。\n我们看实现代码：\n\n一个Observer接口:\n```java\npublic interface Observer {  \n    public void update();  \n}  \n```\n两个实现类:\n```java\npublic class Observer1 implements Observer {  \n\n    @Override  \n    public void update() {  \n        System.out.println(\"observer1 has received!\");  \n    }  \n}  \n```\n```java\npublic class Observer2 implements Observer {  \n\n    @Override  \n    public void update() {  \n        System.out.println(\"observer2 has received!\");  \n    }  \n\n}\n```\nSubject接口及实现类:\n```java\npublic interface Subject {  \n\n    /*增加观察者*/  \n    public void add(Observer observer);  \n\n    /*删除观察者*/  \n    public void del(Observer observer);  \n\n    /*通知所有的观察者*/  \n    public void notifyObservers();  \n\n    /*自身的操作*/  \n    public void operation();  \n}  \n```\n```java\npublic abstract class AbstractSubject implements Subject {  \n\n    private Vector<Observer> vector = new Vector<Observer>();  \n    @Override  \n    public void add(Observer observer) {  \n        vector.add(observer);  \n    }  \n\n    @Override  \n    public void del(Observer observer) {  \n        vector.remove(observer);  \n    }  \n\n    @Override  \n    public void notifyObservers() {  \n        Enumeration<Observer> enumo = vector.elements();  \n        while(enumo.hasMoreElements()){  \n            enumo.nextElement().update();  \n        }  \n    }  \n}  \n```\n\n```java\npublic class MySubject extends AbstractSubject {  \n\n    @Override  \n    public void operation() {  \n        System.out.println(\"update self!\");  \n        notifyObservers();  \n    }  \n\n}  \n```\n测试类:\n```java\npublic class ObserverTest {  \n\n    public static void main(String[] args) {  \n        Subject sub = new MySubject();  \n        sub.add(new Observer1());  \n        sub.add(new Observer2());  \n\n        sub.operation();  \n    }  \n\n}  \n```\n\n输出：\n`update self!\nobserver1 has received!\nobserver2 has received!`\n\n 这些东西，其实不难，只是有些抽象，不太容易整体理解，建议读者：根据关系图，新建项目，自\n 己写代码(或者参考我的代码),按照总体思路走一遍，这样才能体会它的思想，理解起来容易！\n\n## 16. 迭代子模式（Iterator）\n 顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比\n 较熟悉的话，理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，\n 二是迭代器对象，用于对聚集对象进行遍历访问。我们看下关系图:\n![](/images/post_images/20171225_16.png)\n这个思路和我们常用的一模一样，MyCollection中定义了集合的一些操作，MyIterator中定义了\n一系列迭代操作，且持有Collection实例，我们来看看实现代码：\n\n两个接口:\n\n```java\npublic interface Collection {  \n\n    public Iterator iterator();  \n\n    /*取得集合元素*/  \n    public Object get(int i);  \n\n    /*取得集合大小*/  \n    public int size();  \n}  \n\n```\n```java\npublic interface Iterator {  \n    //前移  \n    public Object previous();  \n\n    //后移  \n    public Object next();  \n    public boolean hasNext();  \n\n    //取得第一个元素  \n    public Object first();  \n}  \n```\n两个实现:\n```java\npublic class MyCollection implements Collection {  \n\n    public String string[] = {\"A\",\"B\",\"C\",\"D\",\"E\"};  \n    @Override  \n    public Iterator iterator() {  \n        return new MyIterator(this);  \n    }  \n\n    @Override  \n    public Object get(int i) {  \n        return string[i];  \n    }  \n\n    @Override  \n    public int size() {  \n        return string.length;  \n    }  \n}  \n```\n```java\npublic class MyIterator implements Iterator {  \n\n    private Collection collection;  \n    private int pos = -1;  \n\n    public MyIterator(Collection collection){  \n        this.collection = collection;  \n    }  \n\n    @Override  \n    public Object previous() {  \n        if(pos > 0){  \n            pos--;  \n        }  \n        return collection.get(pos);  \n    }  \n\n    @Override  \n    public Object next() {  \n        if(pos<collection.size()-1){  \n            pos++;  \n        }  \n        return collection.get(pos);  \n    }  \n\n    @Override  \n    public boolean hasNext() {  \n        if(pos<collection.size()-1){  \n            return true;  \n        }else{  \n            return false;  \n        }  \n    }  \n\n    @Override  \n    public Object first() {  \n        pos = 0;  \n        return collection.get(pos);  \n    }  \n\n}  \n```\n\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Collection collection = new MyCollection();  \n        Iterator it = collection.iterator();  \n\n        while(it.hasNext()){  \n            System.out.println(it.next());  \n        }  \n    }  \n}  \n```\n\n输出: `A B C D E`\n\n此处我们貌似模拟了一个集合类的过程，感觉是不是很爽？其实JDK中各个类也都是这些基本的东西\n，加一些设计模式，再加一些优化放到一起的，只要我们把这些东西学会了，掌握好了，我们也可\n以写出自己的集合类，甚至框架！\n\n\n## 17. 责任链模式(Chain of Responsibility)\n接下来我们将要谈谈责任链模式，有多个对象，每个对象持有对下一个对象的引用，这样就会形成\n一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个\n对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整\n。先看看关系图:\n\n![](/images/post_images/20171225_18.png)\n\nAbstracthandler类提供了get和set方法，方便MyHandle类设置和修改引用对象，MyHandle类是\n核心，实例化后生成一系列相互持有的对象，构成一条链。\n\n```java\npublic interface Handler {  \n    public void operator();  \n}  \n```\n\n```java\npublic abstract class AbstractHandler {  \n\n    private Handler handler;  \n\n    public Handler getHandler() {  \n        return handler;  \n    }  \n\n    public void setHandler(Handler handler) {  \n        this.handler = handler;  \n    }  \n\n}  \n```\n\n```java\npublic class MyHandler extends AbstractHandler implements Handler {  \n\n    private String name;  \n\n    public MyHandler(String name) {  \n        this.name = name;  \n    }  \n\n    @Override  \n    public void operator() {  \n        System.out.println(name+\"deal!\");  \n        if(getHandler()!=null){  \n            getHandler().operator();  \n        }  \n    }  \n}  \n```\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        MyHandler h1 = new MyHandler(\"h1\");  \n        MyHandler h2 = new MyHandler(\"h2\");  \n        MyHandler h3 = new MyHandler(\"h3\");  \n\n        h1.setHandler(h2);  \n        h2.setHandler(h3);  \n\n        h1.operator();  \n    }  \n}  \n```\n\n输出:\n`h1deal!\nh2deal!\nh3deal!`\n\n此处强调一点就是，链接上的请求可以是一条链，可以是一个树，还可以是一个环，模式本身不约\n束这个，需要我们自己去实现，同时，在一个时刻，命令只允许由一个对象传给另一个对象，而不\n允许传给多个对象。\n\n## 18. 命令模式（Command）\n命令模式很好理解，举个例子，司令员下令让士兵去干件事情，从整个事情的角度来考虑，司令员\n的作用是，发出口令，口令经过传递，传到了士兵耳朵里，士兵去执行。这个过程好在，三者相互\n解耦，任何一方都不用去依赖其他人，只需要做好自己的事儿就行，司令员要的是结果，不会去关\n注到底士兵是怎么实现的。我们看看关系图:\n\n![](/images/post_images/20171225_19.png)\n\n**Invoker** 是调用者（司令员），**Receiver** 是被调用者（士兵），**MyCommand** 是命\n令，实现了 **Command** 接口，持有接收对象，看实现代码:\n\n```java\npublic interface Command {  \n    public void exe();  \n}  \n```\n```java\npublic class MyCommand implements Command {  \n\n    private Receiver receiver;  \n\n    public MyCommand(Receiver receiver) {  \n        this.receiver = receiver;  \n    }  \n\n    @Override  \n    public void exe() {  \n        receiver.action();  \n    }  \n}  \n```\n```java\npublic class Receiver {  \n    public void action(){  \n        System.out.println(\"command received!\");  \n    }  \n}  \n```\n```java\npublic class Invoker {  \n\n    private Command command;  \n\n    public Invoker(Command command) {  \n        this.command = command;  \n    }  \n\n    public void action(){  \n        command.exe();  \n    }  \n}  \n```\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Receiver receiver = new Receiver();  \n        Command cmd = new MyCommand(receiver);  \n        Invoker invoker = new Invoker(cmd);  \n        invoker.action();  \n    }  \n}  \n```\n输出: `command received!`\n这个很好理解，命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开，\n熟悉Struts的同学应该知道，Struts其实就是一种将请求和呈现分离的技术，其中必然涉及命令模\n式的思想！\n本篇暂时就到这里，因为考虑到将来博文会不断的更新，不断的增加新内容，所以当前篇幅不易过\n长，以便大家阅读，所以接下来的放到另一篇里。敬请关注！\n","slug":"Java中的23中设计模式-三","published":1,"updated":"2017-12-25T10:42:28.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz5u000kfkkxhuzspwex","content":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<p>本章是关于设计模式的最后一讲，会讲到第三种设计模式——行为型模式，共11种：策略模式、模板方<br>法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、<br>中介者模式、解释器模式。这段时间一直在写关于设计模式的东西，终于写到一半了，写博文是个很<br>费时间的东西，因为我得为读者负责，不论是图还是代码还是表述，都希望能尽量写清楚，以便读者<br>理解，我想不论是我还是读者，都希望看到高质量的博文出来，从我本人出发，我会一直坚持下去，<br>不断更新，源源动力来自于读者朋友们的不断支持，我会尽自己的努力，写好每一篇文章！希望大家<br>能不断给出意见和建议，共同打造完美的博文！</p>\n<p>先来张图，看看这11中模式的关系：</p>\n<ol>\n<li>通过父类与子类的关系进行实现。</li>\n<li>两个类之间。</li>\n<li>类的状态。</li>\n<li>通过中间类<br><img src=\"/images/post_images/20171225_13.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"13-策略模式-strategy\"><a href=\"#13-策略模式-strategy\" class=\"headerlink\" title=\"13. 策略模式(strategy)\"></a>13. 策略模式(strategy)</h2><p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影<br>响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接<br>口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数，关系图如下:<br><img src=\"/images/post_images/20171225_14.png\" alt=\"\"></p>\n<p>图中ICalculator提供同意的方法，<br>AbstractCalculator是辅助类，提供辅助方法，接下来，依次实现下每个类：<br>首先统一接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>辅助类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] split(String exp,String opt)&#123;  </span><br><span class=\"line\">        String array[] = exp.split(opt);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">0</span>] = Integer.parseInt(array[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">1</span>] = Integer.parseInt(array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三个实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"\\\\+\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]+arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Minus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"-\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]-arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multiply</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"\\\\*\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]*arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单的测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        String exp = <span class=\"string\">\"2+8\"</span>;  </span><br><span class=\"line\">        ICalculator cal = <span class=\"keyword\">new</span> Plus();  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = cal.calculate(exp);  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>10</code></p>\n<p>策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装<br>。因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。</p>\n<h2 id=\"14-模板方法模式-Template-Method\"><a href=\"#14-模板方法模式-Template-Method\" class=\"headerlink\" title=\"14. 模板方法模式(Template Method)\"></a>14. 模板方法模式(Template Method)</h2><p>解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象<br>的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对<br>子类的调用，先看个关系图:<br><img src=\"/images/post_images/20171225_15.png\" alt=\"\"><br>就是在AbstractCalculator类中定义一个主方法calculate，calculate()调用spilt()等，Plus<br>和Minus分别继承AbstractCalculator类，通过对AbstractCalculator的调用实现对子类的调用<br>，看下面的例子:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*主方法，实现对本类其它方法的调用*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp,String opt)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> array[] = split(exp,opt);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> calculate(array[<span class=\"number\">0</span>],array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*被子类重写的方法*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] split(String exp,String opt)&#123;  </span><br><span class=\"line\">        String array[] = exp.split(opt);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">0</span>] = Integer.parseInt(array[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">1</span>] = Integer.parseInt(array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        String exp = <span class=\"string\">\"8+8\"</span>;  </span><br><span class=\"line\">        AbstractCalculator cal = <span class=\"keyword\">new</span> Plus();  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = cal.calculate(exp, <span class=\"string\">\"\\\\+\"</span>);  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我跟踪下这个小程序的执行过程：首先将<code>exp和&quot;\\\\+&quot;</code>做参数，调用AbstractCalculator类里<br>的<code>calculate(String,String)</code>方法，在<code>calculate(String,String)</code>里调用同类<br>的<code>split()</code>，之后再调用<code>calculate(int ,int)</code>方法，从这个方法进入到子类中，执行<br>完<code>return num1 + num2</code>后，将值返回到<code>AbstractCalculator</code>类，赋给<code>result</code>，打印出来<br>。正好验证了我们开头的思路。</p>\n<h2 id=\"15-观察者模式（Observer）\"><a href=\"#15-观察者模式（Observer）\" class=\"headerlink\" title=\"15. 观察者模式（Observer）\"></a>15. 观察者模式（Observer）</h2><p>包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记<br>得归纳，记得本文最开始的那个图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览<br>一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，如果后续有更新，会<br>及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知<br>，并且随着变化！对象之间是一种一对多的关系。先来看看关系图：<br><img src=\"/images/post_images/20171225_16.png\" alt=\"\"><br>我解释下这些类的作用：MySubject类就是我们的主对象，Observer1和Observer2是依赖<br>于MySubject的对象，当MySubject变化时，Observer1和Observer2必然变化<br>。AbstractSubject类中定义着需要监控的对象列表，可以对其进行修改：增加或删除被监控对象<br>，且当MySubject变化时，负责通知在列表内存在的对象。<br>我们看实现代码：</p>\n<p>一个Observer接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"observer1 has received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"observer2 has received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Subject接口及实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*增加观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*删除观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(Observer observer)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*通知所有的观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*自身的操作*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; vector = <span class=\"keyword\">new</span> Vector&lt;Observer&gt;();  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span> </span>&#123;  </span><br><span class=\"line\">        vector.add(observer);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(Observer observer)</span> </span>&#123;  </span><br><span class=\"line\">        vector.remove(observer);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Enumeration&lt;Observer&gt; enumo = vector.elements();  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(enumo.hasMoreElements())&#123;  </span><br><span class=\"line\">            enumo.nextElement().update();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSubject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"update self!\"</span>);  </span><br><span class=\"line\">        notifyObservers();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Subject sub = <span class=\"keyword\">new</span> MySubject();  </span><br><span class=\"line\">        sub.add(<span class=\"keyword\">new</span> Observer1());  </span><br><span class=\"line\">        sub.add(<span class=\"keyword\">new</span> Observer2());  </span><br><span class=\"line\"></span><br><span class=\"line\">        sub.operation();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>update self!\nobserver1 has received!\nobserver2 has received!</code></p>\n<p> 这些东西，其实不难，只是有些抽象，不太容易整体理解，建议读者：根据关系图，新建项目，自<br> 己写代码(或者参考我的代码),按照总体思路走一遍，这样才能体会它的思想，理解起来容易！</p>\n<h2 id=\"16-迭代子模式（Iterator）\"><a href=\"#16-迭代子模式（Iterator）\" class=\"headerlink\" title=\"16. 迭代子模式（Iterator）\"></a>16. 迭代子模式（Iterator）</h2><p> 顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比<br> 较熟悉的话，理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，<br> 二是迭代器对象，用于对聚集对象进行遍历访问。我们看下关系图:<br><img src=\"/images/post_images/20171225_16.png\" alt=\"\"><br>这个思路和我们常用的一模一样，MyCollection中定义了集合的一些操作，MyIterator中定义了<br>一系列迭代操作，且持有Collection实例，我们来看看实现代码：</p>\n<p>两个接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*取得集合元素*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*取得集合大小*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//前移  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">previous</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后移  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取得第一个元素  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">first</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCollection</span> <span class=\"keyword\">implements</span> <span class=\"title\">Collection</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String string[] = &#123;<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"E\"</span>&#125;;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyIterator(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string[i];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.length;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Collection collection;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pos = -<span class=\"number\">1</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyIterator</span><span class=\"params\">(Collection collection)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.collection = collection;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">previous</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos &gt; <span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            pos--;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos&lt;collection.size()-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">            pos++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos&lt;collection.size()-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">first</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pos = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Collection collection = <span class=\"keyword\">new</span> MyCollection();  </span><br><span class=\"line\">        Iterator it = collection.iterator();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;  </span><br><span class=\"line\">            System.out.println(it.next());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>A B C D E</code></p>\n<p>此处我们貌似模拟了一个集合类的过程，感觉是不是很爽？其实JDK中各个类也都是这些基本的东西<br>，加一些设计模式，再加一些优化放到一起的，只要我们把这些东西学会了，掌握好了，我们也可<br>以写出自己的集合类，甚至框架！</p>\n<h2 id=\"17-责任链模式-Chain-of-Responsibility\"><a href=\"#17-责任链模式-Chain-of-Responsibility\" class=\"headerlink\" title=\"17. 责任链模式(Chain of Responsibility)\"></a>17. 责任链模式(Chain of Responsibility)</h2><p>接下来我们将要谈谈责任链模式，有多个对象，每个对象持有对下一个对象的引用，这样就会形成<br>一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个<br>对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整<br>。先看看关系图:</p>\n<p><img src=\"/images/post_images/20171225_18.png\" alt=\"\"></p>\n<p>Abstracthandler类提供了get和set方法，方便MyHandle类设置和修改引用对象，MyHandle类是<br>核心，实例化后生成一系列相互持有的对象，构成一条链。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Handler</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandler</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Handler <span class=\"title\">getHandler</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHandler</span><span class=\"params\">(Handler handler)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">Handler</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">\"deal!\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getHandler()!=<span class=\"keyword\">null</span>)&#123;  </span><br><span class=\"line\">            getHandler().operator();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        MyHandler h1 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h1\"</span>);  </span><br><span class=\"line\">        MyHandler h2 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h2\"</span>);  </span><br><span class=\"line\">        MyHandler h3 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h3\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        h1.setHandler(h2);  </span><br><span class=\"line\">        h2.setHandler(h3);  </span><br><span class=\"line\"></span><br><span class=\"line\">        h1.operator();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><code>h1deal!\nh2deal!\nh3deal!</code></p>\n<p>此处强调一点就是，链接上的请求可以是一条链，可以是一个树，还可以是一个环，模式本身不约<br>束这个，需要我们自己去实现，同时，在一个时刻，命令只允许由一个对象传给另一个对象，而不<br>允许传给多个对象。</p>\n<h2 id=\"18-命令模式（Command）\"><a href=\"#18-命令模式（Command）\" class=\"headerlink\" title=\"18. 命令模式（Command）\"></a>18. 命令模式（Command）</h2><p>命令模式很好理解，举个例子，司令员下令让士兵去干件事情，从整个事情的角度来考虑，司令员<br>的作用是，发出口令，口令经过传递，传到了士兵耳朵里，士兵去执行。这个过程好在，三者相互<br>解耦，任何一方都不用去依赖其他人，只需要做好自己的事儿就行，司令员要的是结果，不会去关<br>注到底士兵是怎么实现的。我们看看关系图:</p>\n<p><img src=\"/images/post_images/20171225_19.png\" alt=\"\"></p>\n<p><strong>Invoker</strong> 是调用者（司令员），<strong>Receiver</strong> 是被调用者（士兵），<strong>MyCommand</strong> 是命<br>令，实现了 <strong>Command</strong> 接口，持有接收对象，看实现代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exe</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Receiver receiver;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCommand</span><span class=\"params\">(Receiver receiver)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exe</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        receiver.action();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"command received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Command command;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Invoker</span><span class=\"params\">(Command command)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.command = command;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        command.exe();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Receiver receiver = <span class=\"keyword\">new</span> Receiver();  </span><br><span class=\"line\">        Command cmd = <span class=\"keyword\">new</span> MyCommand(receiver);  </span><br><span class=\"line\">        Invoker invoker = <span class=\"keyword\">new</span> Invoker(cmd);  </span><br><span class=\"line\">        invoker.action();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出: <code>command received!</code><br>这个很好理解，命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开，<br>熟悉Struts的同学应该知道，Struts其实就是一种将请求和呈现分离的技术，其中必然涉及命令模<br>式的思想！<br>本篇暂时就到这里，因为考虑到将来博文会不断的更新，不断的增加新内容，所以当前篇幅不易过<br>长，以便大家阅读，所以接下来的放到另一篇里。敬请关注！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<p>本章是关于设计模式的最后一讲，会讲到第三种设计模式——行为型模式，共11种：策略模式、模板方<br>法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、<br>中介者模式、解释器模式。这段时间一直在写关于设计模式的东西，终于写到一半了，写博文是个很<br>费时间的东西，因为我得为读者负责，不论是图还是代码还是表述，都希望能尽量写清楚，以便读者<br>理解，我想不论是我还是读者，都希望看到高质量的博文出来，从我本人出发，我会一直坚持下去，<br>不断更新，源源动力来自于读者朋友们的不断支持，我会尽自己的努力，写好每一篇文章！希望大家<br>能不断给出意见和建议，共同打造完美的博文！</p>\n<p>先来张图，看看这11中模式的关系：</p>\n<ol>\n<li>通过父类与子类的关系进行实现。</li>\n<li>两个类之间。</li>\n<li>类的状态。</li>\n<li>通过中间类<br><img src=\"/images/post_images/20171225_13.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"13-策略模式-strategy\"><a href=\"#13-策略模式-strategy\" class=\"headerlink\" title=\"13. 策略模式(strategy)\"></a>13. 策略模式(strategy)</h2><p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影<br>响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接<br>口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数，关系图如下:<br><img src=\"/images/post_images/20171225_14.png\" alt=\"\"></p>\n<p>图中ICalculator提供同意的方法，<br>AbstractCalculator是辅助类，提供辅助方法，接下来，依次实现下每个类：<br>首先统一接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>辅助类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] split(String exp,String opt)&#123;  </span><br><span class=\"line\">        String array[] = exp.split(opt);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">0</span>] = Integer.parseInt(array[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">1</span>] = Integer.parseInt(array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三个实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"\\\\+\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]+arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Minus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"-\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]-arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multiply</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"\\\\*\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]*arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单的测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        String exp = <span class=\"string\">\"2+8\"</span>;  </span><br><span class=\"line\">        ICalculator cal = <span class=\"keyword\">new</span> Plus();  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = cal.calculate(exp);  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>10</code></p>\n<p>策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装<br>。因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。</p>\n<h2 id=\"14-模板方法模式-Template-Method\"><a href=\"#14-模板方法模式-Template-Method\" class=\"headerlink\" title=\"14. 模板方法模式(Template Method)\"></a>14. 模板方法模式(Template Method)</h2><p>解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象<br>的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对<br>子类的调用，先看个关系图:<br><img src=\"/images/post_images/20171225_15.png\" alt=\"\"><br>就是在AbstractCalculator类中定义一个主方法calculate，calculate()调用spilt()等，Plus<br>和Minus分别继承AbstractCalculator类，通过对AbstractCalculator的调用实现对子类的调用<br>，看下面的例子:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*主方法，实现对本类其它方法的调用*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp,String opt)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> array[] = split(exp,opt);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> calculate(array[<span class=\"number\">0</span>],array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*被子类重写的方法*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] split(String exp,String opt)&#123;  </span><br><span class=\"line\">        String array[] = exp.split(opt);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">0</span>] = Integer.parseInt(array[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">1</span>] = Integer.parseInt(array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        String exp = <span class=\"string\">\"8+8\"</span>;  </span><br><span class=\"line\">        AbstractCalculator cal = <span class=\"keyword\">new</span> Plus();  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = cal.calculate(exp, <span class=\"string\">\"\\\\+\"</span>);  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我跟踪下这个小程序的执行过程：首先将<code>exp和&quot;\\\\+&quot;</code>做参数，调用AbstractCalculator类里<br>的<code>calculate(String,String)</code>方法，在<code>calculate(String,String)</code>里调用同类<br>的<code>split()</code>，之后再调用<code>calculate(int ,int)</code>方法，从这个方法进入到子类中，执行<br>完<code>return num1 + num2</code>后，将值返回到<code>AbstractCalculator</code>类，赋给<code>result</code>，打印出来<br>。正好验证了我们开头的思路。</p>\n<h2 id=\"15-观察者模式（Observer）\"><a href=\"#15-观察者模式（Observer）\" class=\"headerlink\" title=\"15. 观察者模式（Observer）\"></a>15. 观察者模式（Observer）</h2><p>包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记<br>得归纳，记得本文最开始的那个图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览<br>一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，如果后续有更新，会<br>及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知<br>，并且随着变化！对象之间是一种一对多的关系。先来看看关系图：<br><img src=\"/images/post_images/20171225_16.png\" alt=\"\"><br>我解释下这些类的作用：MySubject类就是我们的主对象，Observer1和Observer2是依赖<br>于MySubject的对象，当MySubject变化时，Observer1和Observer2必然变化<br>。AbstractSubject类中定义着需要监控的对象列表，可以对其进行修改：增加或删除被监控对象<br>，且当MySubject变化时，负责通知在列表内存在的对象。<br>我们看实现代码：</p>\n<p>一个Observer接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"observer1 has received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"observer2 has received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Subject接口及实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*增加观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*删除观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(Observer observer)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*通知所有的观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*自身的操作*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; vector = <span class=\"keyword\">new</span> Vector&lt;Observer&gt;();  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span> </span>&#123;  </span><br><span class=\"line\">        vector.add(observer);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(Observer observer)</span> </span>&#123;  </span><br><span class=\"line\">        vector.remove(observer);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Enumeration&lt;Observer&gt; enumo = vector.elements();  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(enumo.hasMoreElements())&#123;  </span><br><span class=\"line\">            enumo.nextElement().update();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSubject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"update self!\"</span>);  </span><br><span class=\"line\">        notifyObservers();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Subject sub = <span class=\"keyword\">new</span> MySubject();  </span><br><span class=\"line\">        sub.add(<span class=\"keyword\">new</span> Observer1());  </span><br><span class=\"line\">        sub.add(<span class=\"keyword\">new</span> Observer2());  </span><br><span class=\"line\"></span><br><span class=\"line\">        sub.operation();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>update self!\nobserver1 has received!\nobserver2 has received!</code></p>\n<p> 这些东西，其实不难，只是有些抽象，不太容易整体理解，建议读者：根据关系图，新建项目，自<br> 己写代码(或者参考我的代码),按照总体思路走一遍，这样才能体会它的思想，理解起来容易！</p>\n<h2 id=\"16-迭代子模式（Iterator）\"><a href=\"#16-迭代子模式（Iterator）\" class=\"headerlink\" title=\"16. 迭代子模式（Iterator）\"></a>16. 迭代子模式（Iterator）</h2><p> 顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比<br> 较熟悉的话，理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，<br> 二是迭代器对象，用于对聚集对象进行遍历访问。我们看下关系图:<br><img src=\"/images/post_images/20171225_16.png\" alt=\"\"><br>这个思路和我们常用的一模一样，MyCollection中定义了集合的一些操作，MyIterator中定义了<br>一系列迭代操作，且持有Collection实例，我们来看看实现代码：</p>\n<p>两个接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*取得集合元素*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*取得集合大小*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//前移  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">previous</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后移  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取得第一个元素  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">first</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCollection</span> <span class=\"keyword\">implements</span> <span class=\"title\">Collection</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String string[] = &#123;<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"E\"</span>&#125;;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyIterator(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string[i];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.length;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Collection collection;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pos = -<span class=\"number\">1</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyIterator</span><span class=\"params\">(Collection collection)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.collection = collection;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">previous</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos &gt; <span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            pos--;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos&lt;collection.size()-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">            pos++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos&lt;collection.size()-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">first</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pos = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Collection collection = <span class=\"keyword\">new</span> MyCollection();  </span><br><span class=\"line\">        Iterator it = collection.iterator();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;  </span><br><span class=\"line\">            System.out.println(it.next());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>A B C D E</code></p>\n<p>此处我们貌似模拟了一个集合类的过程，感觉是不是很爽？其实JDK中各个类也都是这些基本的东西<br>，加一些设计模式，再加一些优化放到一起的，只要我们把这些东西学会了，掌握好了，我们也可<br>以写出自己的集合类，甚至框架！</p>\n<h2 id=\"17-责任链模式-Chain-of-Responsibility\"><a href=\"#17-责任链模式-Chain-of-Responsibility\" class=\"headerlink\" title=\"17. 责任链模式(Chain of Responsibility)\"></a>17. 责任链模式(Chain of Responsibility)</h2><p>接下来我们将要谈谈责任链模式，有多个对象，每个对象持有对下一个对象的引用，这样就会形成<br>一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个<br>对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整<br>。先看看关系图:</p>\n<p><img src=\"/images/post_images/20171225_18.png\" alt=\"\"></p>\n<p>Abstracthandler类提供了get和set方法，方便MyHandle类设置和修改引用对象，MyHandle类是<br>核心，实例化后生成一系列相互持有的对象，构成一条链。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Handler</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandler</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Handler <span class=\"title\">getHandler</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHandler</span><span class=\"params\">(Handler handler)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">Handler</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">\"deal!\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getHandler()!=<span class=\"keyword\">null</span>)&#123;  </span><br><span class=\"line\">            getHandler().operator();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        MyHandler h1 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h1\"</span>);  </span><br><span class=\"line\">        MyHandler h2 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h2\"</span>);  </span><br><span class=\"line\">        MyHandler h3 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h3\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        h1.setHandler(h2);  </span><br><span class=\"line\">        h2.setHandler(h3);  </span><br><span class=\"line\"></span><br><span class=\"line\">        h1.operator();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><code>h1deal!\nh2deal!\nh3deal!</code></p>\n<p>此处强调一点就是，链接上的请求可以是一条链，可以是一个树，还可以是一个环，模式本身不约<br>束这个，需要我们自己去实现，同时，在一个时刻，命令只允许由一个对象传给另一个对象，而不<br>允许传给多个对象。</p>\n<h2 id=\"18-命令模式（Command）\"><a href=\"#18-命令模式（Command）\" class=\"headerlink\" title=\"18. 命令模式（Command）\"></a>18. 命令模式（Command）</h2><p>命令模式很好理解，举个例子，司令员下令让士兵去干件事情，从整个事情的角度来考虑，司令员<br>的作用是，发出口令，口令经过传递，传到了士兵耳朵里，士兵去执行。这个过程好在，三者相互<br>解耦，任何一方都不用去依赖其他人，只需要做好自己的事儿就行，司令员要的是结果，不会去关<br>注到底士兵是怎么实现的。我们看看关系图:</p>\n<p><img src=\"/images/post_images/20171225_19.png\" alt=\"\"></p>\n<p><strong>Invoker</strong> 是调用者（司令员），<strong>Receiver</strong> 是被调用者（士兵），<strong>MyCommand</strong> 是命<br>令，实现了 <strong>Command</strong> 接口，持有接收对象，看实现代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exe</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Receiver receiver;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCommand</span><span class=\"params\">(Receiver receiver)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exe</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        receiver.action();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"command received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Command command;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Invoker</span><span class=\"params\">(Command command)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.command = command;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        command.exe();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Receiver receiver = <span class=\"keyword\">new</span> Receiver();  </span><br><span class=\"line\">        Command cmd = <span class=\"keyword\">new</span> MyCommand(receiver);  </span><br><span class=\"line\">        Invoker invoker = <span class=\"keyword\">new</span> Invoker(cmd);  </span><br><span class=\"line\">        invoker.action();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出: <code>command received!</code><br>这个很好理解，命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开，<br>熟悉Struts的同学应该知道，Struts其实就是一种将请求和呈现分离的技术，其中必然涉及命令模<br>式的思想！<br>本篇暂时就到这里，因为考虑到将来博文会不断的更新，不断的增加新内容，所以当前篇幅不易过<br>长，以便大家阅读，所以接下来的放到另一篇里。敬请关注！</p>\n"},{"title":"Java中的23中设计模式-四","date":"2017-12-25T10:41:56.000Z","type":["Java","设计模式"],"_content":"\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n\t其实每个设计模式都是很重要的一种思想，看上去很熟，其实是因为我们在学到的东西中都有涉及\n，尽管有时我们并不知道，其实在Java本身的设计之中处处都有体现，像AWT、JDBC、集合类、IO管\n道或者是Web框架，里面设计模式无处不在。因为我们篇幅有限，很难讲每一个设计模式都讲的很详\n细，不过我会尽我所能，尽量在有限的空间和篇幅内，把意思写清楚了，更好让大家明白。本章不出\n意外的话，应该是设计模式最后一讲了，首先还是上一下上篇开头的那个图:\n![](/images/post_images/20171225_13.png)\n\n本章讲讲第三类和第四类。\n\n## 19. 备忘录模式（Memento）\n\n主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象，个人觉得叫备份模式更形象些，\n通俗的讲下：假设有原始类A，A中有各种属性，A可以决定需要备份的属性，备忘录类B是用来存储A\n的一些内部状态，类C呢，就是一个用来存储备忘录的，且只能存储，不能修改等操作。做个图来分\n析一下:\n ![](/images/post_images/20171225_20.png)\nOriginal类是原始类，里面有需要保存的属性value及创建一个备忘录类，用来保存value值。\nMemento类是备忘录类，Storage类是存储备忘录的类，持有Memento类的实例，该模式很好理解。\n直接看源码:\n\n```java\npublic class Original {  \n\n    private String value;  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n\n    public Original(String value) {  \n        this.value = value;  \n    }  \n\n    public Memento createMemento(){  \n        return new Memento(value);  \n    }  \n\n    public void restoreMemento(Memento memento){  \n        this.value = memento.getValue();  \n    }  \n}  \n```\n```java\npublic class Memento {  \n\n    private String value;  \n\n    public Memento(String value) {  \n        this.value = value;  \n    }  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n}\n```\n\n```java\npublic class Storage {  \n\n    private Memento memento;  \n\n    public Storage(Memento memento) {  \n        this.memento = memento;  \n    }  \n\n    public Memento getMemento() {  \n        return memento;  \n    }  \n\n    public void setMemento(Memento memento) {  \n        this.memento = memento;  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        // 创建原始类  \n        Original origi = new Original(\"egg\");  \n\n        // 创建备忘录  \n        Storage storage = new Storage(origi.createMemento());  \n\n        // 修改原始类的状态  \n        System.out.println(\"初始化状态为:\" + origi.getValue());  \n        origi.setValue(\"niu\");  \n        System.out.println(\"修改后的状态为:\" + origi.getValue());  \n\n        // 回复原始类的状态  \n        origi.restoreMemento(storage.getMemento());  \n        System.out.println(\"恢复后的状态为:\" + origi.getValue());  \n    }  \n}  \n```\n\n输出：\n`初始化状态为:egg\n修改后的状态为:niu\n恢复后的状态为:egg`\n## 20. 状态模式(State)\n核心思想就是：当对象的状态改变时，同时改变其行为，很好理解！就拿QQ来说，有几种状态，在\n线、隐身、忙碌等，每个状态对应不同的操作，而且你的好友也能看到你的状态，\n所以，状态模式就两点:\n1. 可以通过改变状态来获得不同的行为。\n2. 你的好友能同时看到你的变化。看图:\n![](/images/post_images/20171225_21.png)\n\nState类是个状态类，Context类可以实现切换，我们来看看代码:\n```java\npackage com.xtfggef.dp.state;  \n\n/**\n * 状态类的核心类\n * 2012-12-1\n * @author erqing\n *\n */  \npublic class State {  \n\n    private String value;  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n\n    public void method1(){  \n        System.out.println(\"execute the first opt!\");  \n    }  \n\n    public void method2(){  \n        System.out.println(\"execute the second opt!\");  \n    }  \n}  \n```\n\n```java\npackage com.xtfggef.dp.state;  \n\n/**\n * 状态模式的切换类   2012-12-1\n * @author erqing\n *  \n */  \npublic class Context {  \n\n    private State state;  \n\n    public Context(State state) {  \n        this.state = state;  \n    }  \n\n    public State getState() {  \n        return state;  \n    }  \n\n    public void setState(State state) {  \n        this.state = state;  \n    }  \n\n    public void method() {  \n        if (state.getValue().equals(\"state1\")) {  \n            state.method1();  \n        } else if (state.getValue().equals(\"state2\")) {  \n            state.method2();  \n        }  \n    }  \n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        State state = new State();  \n        Context context = new Context(state);  \n\n        //设置第一种状态  \n        state.setValue(\"state1\");  \n        context.method();  \n\n        //设置第二种状态  \n        state.setValue(\"state2\");  \n        context.method();  \n    }  \n}  \n```\n输出:\n`execute the first opt!\nexecute the second opt!`\n\n根据这个特性，状态模式在日常开发中用的挺多的，尤其是做网站的时候，我们有时希望根据对象\n的某一属性，区别开他们的一些功能，比如说简单的权限控制等。\n## 21. 访问者模式（Visitor）\n访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模\n式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若\n系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。访问者模\n式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到\n一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From\n百科\n简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被\n访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：\n![](/images/post_images/20171225_22.png)\n来看看原码:\n一个Visitor类，存放要访问的对象，\n```java\npublic interface Visitor {  \n    public void visit(Subject sub);  \n}  \n```\n```java\npublic class MyVisitor implements Visitor {  \n\n    @Override  \n    public void visit(Subject sub) {  \n        System.out.println(\"visit the subject:\"+sub.getSubject());  \n    }  \n}  \n```\nSubject类，accept方法，接受将要访问它的对象，getSubject()获取将要被访问的属性，\n```java\npublic interface Subject {  \n    public void accept(Visitor visitor);  \n    public String getSubject();  \n}  \n```\n```java\npublic class MySubject implements Subject {  \n\n    @Override  \n    public void accept(Visitor visitor) {  \n        visitor.visit(this);  \n    }  \n\n    @Override  \n    public String getSubject() {  \n        return \"love\";  \n    }  \n}  \n```\n测试:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        Visitor visitor = new MyVisitor();  \n        Subject sub = new MySubject();  \n        sub.accept(visitor);      \n    }  \n}  \n```\n输出: `visit the subject:love`\n该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：1、新功能会不会\n与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对\n这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把\n数据结构和算法解耦.\n\n## 22. 中介者模式(Mediator)\n中介者模式也是用来降低类类之间的耦合的，因为如果类类之间有依赖关系的话，不利于功能的拓\n展和维护，因为只要修改一个对象，其它关联的对象都得进行修改。如果使用中介者模式，只需关\n心和Mediator类的关系，具体类类之间的关系及调度交给Mediator就行，这有点像spring容器的\n作用。先看看图:\n![](/images/post_images/20171225_23.png)\nUser类统一接口，User1和User2分别是不同的对象，二者之间有关联，如果不采用中介者模式，则\n需要二者相互持有引用，这样二者的耦合度很高，为了解耦，引入了Mediator类，提供统一接口\n，MyMediator为其实现类，里面持有User1和User2的实例，用来实现对User1和User2的控制。这\n样User1和User2两个对象相互独立，他们只需要保持好和Mediator之间的关系就行，剩下的全\n由MyMediator类来维护！基本实现:\n```java\npublic interface Mediator {  \n    public void createMediator();  \n    public void workAll();  \n}\n```\n```java\npublic class MyMediator implements Mediator {  \n\n    private User user1;  \n    private User user2;  \n\n    public User getUser1() {  \n        return user1;  \n    }  \n\n    public User getUser2() {  \n        return user2;  \n    }  \n\n    @Override  \n    public void createMediator() {  \n        user1 = new User1(this);  \n        user2 = new User2(this);  \n    }  \n\n    @Override  \n    public void workAll() {  \n        user1.work();  \n        user2.work();  \n    }  \n}  \n```\n```java\npublic abstract class User {  \n\n    private Mediator mediator;  \n\n    public Mediator getMediator(){  \n        return mediator;  \n    }  \n\n    public User(Mediator mediator) {  \n        this.mediator = mediator;  \n    }  \n\n    public abstract void work();  \n}  \n```\n```java\npublic class User1 extends User {  \n\n    public User1(Mediator mediator){  \n        super(mediator);  \n    }  \n\n    @Override  \n    public void work() {  \n        System.out.println(\"user1 exe!\");  \n    }  \n}  \n```\n```java\npublic class User2 extends User {  \n\n    public User2(Mediator mediator){  \n        super(mediator);  \n    }  \n\n    @Override  \n    public void work() {  \n        System.out.println(\"user2 exe!\");  \n    }  \n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Mediator mediator = new MyMediator();  \n        mediator.createMediator();  \n        mediator.workAll();  \n    }  \n}  \n```\n输出:\n`user1 exe!\nuser2 exe!`\n\n## 23. 解释器模式(Interpreter)\n解释器模式是我们暂时的最后一讲，一般主要应用在OOP开发中的编译器的开发中，所以适用面比较\n窄。\n ![](/images/post_images/20171225_24.png)\nContext类是一个上下文环境类，Plus和Minus分别是用来计算的实现，代码如下:\n```java\npublic interface Expression {  \n    public int interpret(Context context);  \n}  \n```\n```java\npublic class Plus implements Expression {  \n\n    @Override  \n    public int interpret(Context context) {  \n        return context.getNum1()+context.getNum2();  \n    }  \n}\n```\n```java\npublic class Minus implements Expression {  \n\n    @Override  \n    public int interpret(Context context) {  \n        return context.getNum1()-context.getNum2();  \n    }  \n}  \n```\n```java\npublic class Context {  \n\n    private int num1;  \n    private int num2;  \n\n    public Context(int num1, int num2) {  \n        this.num1 = num1;  \n        this.num2 = num2;  \n    }  \n\n    public int getNum1() {  \n        return num1;  \n    }  \n    public void setNum1(int num1) {  \n        this.num1 = num1;  \n    }  \n    public int getNum2() {  \n        return num2;  \n    }  \n    public void setNum2(int num2) {  \n        this.num2 = num2;  \n    }  \n\n\n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        // 计算9+2-8的值  \n        int result = new Minus().interpret((new Context(new Plus()  \n                .interpret(new Context(9, 2)), 8)));  \n        System.out.println(result);  \n    }  \n}  \n```\n最后输出正确的结果:`3`。\n\n\n基本就这样，解释器模式用来做各种各样的解释器，如正则表达式等的解释器等等！\n\n设计模式基本就这么大概讲完了，总体感觉有点简略，的确，这么点儿篇幅，不足以对整个23种设\n计模式做全面的阐述，此处读者可将它作为一个理论基础去学习，通过这四篇博文，先基本有个概\n念，虽然我讲的有些简单，但基本都能说明问题及他们的特点，如果对哪一个感兴趣，可以继续深\n入研究！\n","source":"_posts/Java中的23中设计模式-四.md","raw":"---\ntitle: 'Java中的23中设计模式-四'\ndate: 2017-12-25 18:41:56\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - Java\n  - 设计模式\ntype:\n  - Java\n  - 设计模式\n---\n\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n\t其实每个设计模式都是很重要的一种思想，看上去很熟，其实是因为我们在学到的东西中都有涉及\n，尽管有时我们并不知道，其实在Java本身的设计之中处处都有体现，像AWT、JDBC、集合类、IO管\n道或者是Web框架，里面设计模式无处不在。因为我们篇幅有限，很难讲每一个设计模式都讲的很详\n细，不过我会尽我所能，尽量在有限的空间和篇幅内，把意思写清楚了，更好让大家明白。本章不出\n意外的话，应该是设计模式最后一讲了，首先还是上一下上篇开头的那个图:\n![](/images/post_images/20171225_13.png)\n\n本章讲讲第三类和第四类。\n\n## 19. 备忘录模式（Memento）\n\n主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象，个人觉得叫备份模式更形象些，\n通俗的讲下：假设有原始类A，A中有各种属性，A可以决定需要备份的属性，备忘录类B是用来存储A\n的一些内部状态，类C呢，就是一个用来存储备忘录的，且只能存储，不能修改等操作。做个图来分\n析一下:\n ![](/images/post_images/20171225_20.png)\nOriginal类是原始类，里面有需要保存的属性value及创建一个备忘录类，用来保存value值。\nMemento类是备忘录类，Storage类是存储备忘录的类，持有Memento类的实例，该模式很好理解。\n直接看源码:\n\n```java\npublic class Original {  \n\n    private String value;  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n\n    public Original(String value) {  \n        this.value = value;  \n    }  \n\n    public Memento createMemento(){  \n        return new Memento(value);  \n    }  \n\n    public void restoreMemento(Memento memento){  \n        this.value = memento.getValue();  \n    }  \n}  \n```\n```java\npublic class Memento {  \n\n    private String value;  \n\n    public Memento(String value) {  \n        this.value = value;  \n    }  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n}\n```\n\n```java\npublic class Storage {  \n\n    private Memento memento;  \n\n    public Storage(Memento memento) {  \n        this.memento = memento;  \n    }  \n\n    public Memento getMemento() {  \n        return memento;  \n    }  \n\n    public void setMemento(Memento memento) {  \n        this.memento = memento;  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        // 创建原始类  \n        Original origi = new Original(\"egg\");  \n\n        // 创建备忘录  \n        Storage storage = new Storage(origi.createMemento());  \n\n        // 修改原始类的状态  \n        System.out.println(\"初始化状态为:\" + origi.getValue());  \n        origi.setValue(\"niu\");  \n        System.out.println(\"修改后的状态为:\" + origi.getValue());  \n\n        // 回复原始类的状态  \n        origi.restoreMemento(storage.getMemento());  \n        System.out.println(\"恢复后的状态为:\" + origi.getValue());  \n    }  \n}  \n```\n\n输出：\n`初始化状态为:egg\n修改后的状态为:niu\n恢复后的状态为:egg`\n## 20. 状态模式(State)\n核心思想就是：当对象的状态改变时，同时改变其行为，很好理解！就拿QQ来说，有几种状态，在\n线、隐身、忙碌等，每个状态对应不同的操作，而且你的好友也能看到你的状态，\n所以，状态模式就两点:\n1. 可以通过改变状态来获得不同的行为。\n2. 你的好友能同时看到你的变化。看图:\n![](/images/post_images/20171225_21.png)\n\nState类是个状态类，Context类可以实现切换，我们来看看代码:\n```java\npackage com.xtfggef.dp.state;  \n\n/**\n * 状态类的核心类\n * 2012-12-1\n * @author erqing\n *\n */  \npublic class State {  \n\n    private String value;  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n\n    public void method1(){  \n        System.out.println(\"execute the first opt!\");  \n    }  \n\n    public void method2(){  \n        System.out.println(\"execute the second opt!\");  \n    }  \n}  \n```\n\n```java\npackage com.xtfggef.dp.state;  \n\n/**\n * 状态模式的切换类   2012-12-1\n * @author erqing\n *  \n */  \npublic class Context {  \n\n    private State state;  \n\n    public Context(State state) {  \n        this.state = state;  \n    }  \n\n    public State getState() {  \n        return state;  \n    }  \n\n    public void setState(State state) {  \n        this.state = state;  \n    }  \n\n    public void method() {  \n        if (state.getValue().equals(\"state1\")) {  \n            state.method1();  \n        } else if (state.getValue().equals(\"state2\")) {  \n            state.method2();  \n        }  \n    }  \n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        State state = new State();  \n        Context context = new Context(state);  \n\n        //设置第一种状态  \n        state.setValue(\"state1\");  \n        context.method();  \n\n        //设置第二种状态  \n        state.setValue(\"state2\");  \n        context.method();  \n    }  \n}  \n```\n输出:\n`execute the first opt!\nexecute the second opt!`\n\n根据这个特性，状态模式在日常开发中用的挺多的，尤其是做网站的时候，我们有时希望根据对象\n的某一属性，区别开他们的一些功能，比如说简单的权限控制等。\n## 21. 访问者模式（Visitor）\n访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模\n式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若\n系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。访问者模\n式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到\n一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From\n百科\n简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被\n访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：\n![](/images/post_images/20171225_22.png)\n来看看原码:\n一个Visitor类，存放要访问的对象，\n```java\npublic interface Visitor {  \n    public void visit(Subject sub);  \n}  \n```\n```java\npublic class MyVisitor implements Visitor {  \n\n    @Override  \n    public void visit(Subject sub) {  \n        System.out.println(\"visit the subject:\"+sub.getSubject());  \n    }  \n}  \n```\nSubject类，accept方法，接受将要访问它的对象，getSubject()获取将要被访问的属性，\n```java\npublic interface Subject {  \n    public void accept(Visitor visitor);  \n    public String getSubject();  \n}  \n```\n```java\npublic class MySubject implements Subject {  \n\n    @Override  \n    public void accept(Visitor visitor) {  \n        visitor.visit(this);  \n    }  \n\n    @Override  \n    public String getSubject() {  \n        return \"love\";  \n    }  \n}  \n```\n测试:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        Visitor visitor = new MyVisitor();  \n        Subject sub = new MySubject();  \n        sub.accept(visitor);      \n    }  \n}  \n```\n输出: `visit the subject:love`\n该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：1、新功能会不会\n与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对\n这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把\n数据结构和算法解耦.\n\n## 22. 中介者模式(Mediator)\n中介者模式也是用来降低类类之间的耦合的，因为如果类类之间有依赖关系的话，不利于功能的拓\n展和维护，因为只要修改一个对象，其它关联的对象都得进行修改。如果使用中介者模式，只需关\n心和Mediator类的关系，具体类类之间的关系及调度交给Mediator就行，这有点像spring容器的\n作用。先看看图:\n![](/images/post_images/20171225_23.png)\nUser类统一接口，User1和User2分别是不同的对象，二者之间有关联，如果不采用中介者模式，则\n需要二者相互持有引用，这样二者的耦合度很高，为了解耦，引入了Mediator类，提供统一接口\n，MyMediator为其实现类，里面持有User1和User2的实例，用来实现对User1和User2的控制。这\n样User1和User2两个对象相互独立，他们只需要保持好和Mediator之间的关系就行，剩下的全\n由MyMediator类来维护！基本实现:\n```java\npublic interface Mediator {  \n    public void createMediator();  \n    public void workAll();  \n}\n```\n```java\npublic class MyMediator implements Mediator {  \n\n    private User user1;  \n    private User user2;  \n\n    public User getUser1() {  \n        return user1;  \n    }  \n\n    public User getUser2() {  \n        return user2;  \n    }  \n\n    @Override  \n    public void createMediator() {  \n        user1 = new User1(this);  \n        user2 = new User2(this);  \n    }  \n\n    @Override  \n    public void workAll() {  \n        user1.work();  \n        user2.work();  \n    }  \n}  \n```\n```java\npublic abstract class User {  \n\n    private Mediator mediator;  \n\n    public Mediator getMediator(){  \n        return mediator;  \n    }  \n\n    public User(Mediator mediator) {  \n        this.mediator = mediator;  \n    }  \n\n    public abstract void work();  \n}  \n```\n```java\npublic class User1 extends User {  \n\n    public User1(Mediator mediator){  \n        super(mediator);  \n    }  \n\n    @Override  \n    public void work() {  \n        System.out.println(\"user1 exe!\");  \n    }  \n}  \n```\n```java\npublic class User2 extends User {  \n\n    public User2(Mediator mediator){  \n        super(mediator);  \n    }  \n\n    @Override  \n    public void work() {  \n        System.out.println(\"user2 exe!\");  \n    }  \n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Mediator mediator = new MyMediator();  \n        mediator.createMediator();  \n        mediator.workAll();  \n    }  \n}  \n```\n输出:\n`user1 exe!\nuser2 exe!`\n\n## 23. 解释器模式(Interpreter)\n解释器模式是我们暂时的最后一讲，一般主要应用在OOP开发中的编译器的开发中，所以适用面比较\n窄。\n ![](/images/post_images/20171225_24.png)\nContext类是一个上下文环境类，Plus和Minus分别是用来计算的实现，代码如下:\n```java\npublic interface Expression {  \n    public int interpret(Context context);  \n}  \n```\n```java\npublic class Plus implements Expression {  \n\n    @Override  \n    public int interpret(Context context) {  \n        return context.getNum1()+context.getNum2();  \n    }  \n}\n```\n```java\npublic class Minus implements Expression {  \n\n    @Override  \n    public int interpret(Context context) {  \n        return context.getNum1()-context.getNum2();  \n    }  \n}  \n```\n```java\npublic class Context {  \n\n    private int num1;  \n    private int num2;  \n\n    public Context(int num1, int num2) {  \n        this.num1 = num1;  \n        this.num2 = num2;  \n    }  \n\n    public int getNum1() {  \n        return num1;  \n    }  \n    public void setNum1(int num1) {  \n        this.num1 = num1;  \n    }  \n    public int getNum2() {  \n        return num2;  \n    }  \n    public void setNum2(int num2) {  \n        this.num2 = num2;  \n    }  \n\n\n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        // 计算9+2-8的值  \n        int result = new Minus().interpret((new Context(new Plus()  \n                .interpret(new Context(9, 2)), 8)));  \n        System.out.println(result);  \n    }  \n}  \n```\n最后输出正确的结果:`3`。\n\n\n基本就这样，解释器模式用来做各种各样的解释器，如正则表达式等的解释器等等！\n\n设计模式基本就这么大概讲完了，总体感觉有点简略，的确，这么点儿篇幅，不足以对整个23种设\n计模式做全面的阐述，此处读者可将它作为一个理论基础去学习，通过这四篇博文，先基本有个概\n念，虽然我讲的有些简单，但基本都能说明问题及他们的特点，如果对哪一个感兴趣，可以继续深\n入研究！\n","slug":"Java中的23中设计模式-四","published":1,"updated":"2017-12-25T11:05:19.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz69000pfkkxr714zr19","content":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<pre><code>其实每个设计模式都是很重要的一种思想，看上去很熟，其实是因为我们在学到的东西中都有涉及\n</code></pre><p>，尽管有时我们并不知道，其实在Java本身的设计之中处处都有体现，像AWT、JDBC、集合类、IO管<br>道或者是Web框架，里面设计模式无处不在。因为我们篇幅有限，很难讲每一个设计模式都讲的很详<br>细，不过我会尽我所能，尽量在有限的空间和篇幅内，把意思写清楚了，更好让大家明白。本章不出<br>意外的话，应该是设计模式最后一讲了，首先还是上一下上篇开头的那个图:<br><img src=\"/images/post_images/20171225_13.png\" alt=\"\"></p>\n<p>本章讲讲第三类和第四类。</p>\n<h2 id=\"19-备忘录模式（Memento）\"><a href=\"#19-备忘录模式（Memento）\" class=\"headerlink\" title=\"19. 备忘录模式（Memento）\"></a>19. 备忘录模式（Memento）</h2><p>主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象，个人觉得叫备份模式更形象些，<br>通俗的讲下：假设有原始类A，A中有各种属性，A可以决定需要备份的属性，备忘录类B是用来存储A<br>的一些内部状态，类C呢，就是一个用来存储备忘录的，且只能存储，不能修改等操作。做个图来分<br>析一下:<br> <img src=\"/images/post_images/20171225_20.png\" alt=\"\"><br>Original类是原始类，里面有需要保存的属性value及创建一个备忘录类，用来保存value值。<br>Memento类是备忘录类，Storage类是存储备忘录的类，持有Memento类的实例，该模式很好理解。<br>直接看源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Original</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Original</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">createMemento</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Memento(value);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreMemento</span><span class=\"params\">(Memento memento)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = memento.getValue();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memento</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Memento</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Storage</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memento memento;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Storage</span><span class=\"params\">(Memento memento)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memento = memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">getMemento</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMemento</span><span class=\"params\">(Memento memento)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memento = memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建原始类  </span></span><br><span class=\"line\">        Original origi = <span class=\"keyword\">new</span> Original(<span class=\"string\">\"egg\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建备忘录  </span></span><br><span class=\"line\">        Storage storage = <span class=\"keyword\">new</span> Storage(origi.createMemento());  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 修改原始类的状态  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\">        origi.setValue(<span class=\"string\">\"niu\"</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改后的状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回复原始类的状态  </span></span><br><span class=\"line\">        origi.restoreMemento(storage.getMemento());  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"恢复后的状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br><code>初始化状态为:egg\n修改后的状态为:niu\n恢复后的状态为:egg</code></p>\n<h2 id=\"20-状态模式-State\"><a href=\"#20-状态模式-State\" class=\"headerlink\" title=\"20. 状态模式(State)\"></a>20. 状态模式(State)</h2><p>核心思想就是：当对象的状态改变时，同时改变其行为，很好理解！就拿QQ来说，有几种状态，在<br>线、隐身、忙碌等，每个状态对应不同的操作，而且你的好友也能看到你的状态，<br>所以，状态模式就两点:</p>\n<ol>\n<li>可以通过改变状态来获得不同的行为。</li>\n<li>你的好友能同时看到你的变化。看图:<br><img src=\"/images/post_images/20171225_21.png\" alt=\"\"></li>\n</ol>\n<p>State类是个状态类，Context类可以实现切换，我们来看看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xtfggef.dp.state;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态类的核心类</span></span><br><span class=\"line\"><span class=\"comment\"> * 2012-12-1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> erqing</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"execute the first opt!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"execute the second opt!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xtfggef.dp.state;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态模式的切换类   2012-12-1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> erqing</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State state;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(State state)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getState</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(State state)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state.getValue().equals(<span class=\"string\">\"state1\"</span>)) &#123;  </span><br><span class=\"line\">            state.method1();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state.getValue().equals(<span class=\"string\">\"state2\"</span>)) &#123;  </span><br><span class=\"line\">            state.method2();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        State state = <span class=\"keyword\">new</span> State();  </span><br><span class=\"line\">        Context context = <span class=\"keyword\">new</span> Context(state);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置第一种状态  </span></span><br><span class=\"line\">        state.setValue(<span class=\"string\">\"state1\"</span>);  </span><br><span class=\"line\">        context.method();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置第二种状态  </span></span><br><span class=\"line\">        state.setValue(<span class=\"string\">\"state2\"</span>);  </span><br><span class=\"line\">        context.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>execute the first opt!\nexecute the second opt!</code></p>\n<p>根据这个特性，状态模式在日常开发中用的挺多的，尤其是做网站的时候，我们有时希望根据对象<br>的某一属性，区别开他们的一些功能，比如说简单的权限控制等。</p>\n<h2 id=\"21-访问者模式（Visitor）\"><a href=\"#21-访问者模式（Visitor）\" class=\"headerlink\" title=\"21. 访问者模式（Visitor）\"></a>21. 访问者模式（Visitor）</h2><p>访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模<br>式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若<br>系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。访问者模<br>式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到<br>一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From<br>百科<br>简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被<br>访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：<br><img src=\"/images/post_images/20171225_22.png\" alt=\"\"><br>来看看原码:<br>一个Visitor类，存放要访问的对象，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Subject sub)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Subject sub)</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"visit the subject:\"</span>+sub.getSubject());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Subject类，accept方法，接受将要访问它的对象，getSubject()获取将要被访问的属性，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;  </span><br><span class=\"line\">        visitor.visit(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"love\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        Visitor visitor = <span class=\"keyword\">new</span> MyVisitor();  </span><br><span class=\"line\">        Subject sub = <span class=\"keyword\">new</span> MySubject();  </span><br><span class=\"line\">        sub.accept(visitor);      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>visit the subject:love</code><br>该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：1、新功能会不会<br>与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对<br>这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把<br>数据结构和算法解耦.</p>\n<h2 id=\"22-中介者模式-Mediator\"><a href=\"#22-中介者模式-Mediator\" class=\"headerlink\" title=\"22. 中介者模式(Mediator)\"></a>22. 中介者模式(Mediator)</h2><p>中介者模式也是用来降低类类之间的耦合的，因为如果类类之间有依赖关系的话，不利于功能的拓<br>展和维护，因为只要修改一个对象，其它关联的对象都得进行修改。如果使用中介者模式，只需关<br>心和Mediator类的关系，具体类类之间的关系及调度交给Mediator就行，这有点像spring容器的<br>作用。先看看图:<br><img src=\"/images/post_images/20171225_23.png\" alt=\"\"><br>User类统一接口，User1和User2分别是不同的对象，二者之间有关联，如果不采用中介者模式，则<br>需要二者相互持有引用，这样二者的耦合度很高，为了解耦，引入了Mediator类，提供统一接口<br>，MyMediator为其实现类，里面持有User1和User2的实例，用来实现对User1和User2的控制。这<br>样User1和User2两个对象相互独立，他们只需要保持好和Mediator之间的关系就行，剩下的全<br>由MyMediator类来维护！基本实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mediator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMediator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">workAll</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMediator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mediator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user1;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user2;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMediator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        user1 = <span class=\"keyword\">new</span> User1(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        user2 = <span class=\"keyword\">new</span> User2(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">workAll</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        user1.work();  </span><br><span class=\"line\">        user2.work();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Mediator mediator;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mediator <span class=\"title\">getMediator</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> mediator;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User1</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User1</span><span class=\"params\">(Mediator mediator)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1 exe!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User2</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User2</span><span class=\"params\">(Mediator mediator)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2 exe!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Mediator mediator = <span class=\"keyword\">new</span> MyMediator();  </span><br><span class=\"line\">        mediator.createMediator();  </span><br><span class=\"line\">        mediator.workAll();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>user1 exe!\nuser2 exe!</code></p>\n<h2 id=\"23-解释器模式-Interpreter\"><a href=\"#23-解释器模式-Interpreter\" class=\"headerlink\" title=\"23. 解释器模式(Interpreter)\"></a>23. 解释器模式(Interpreter)</h2><p>解释器模式是我们暂时的最后一讲，一般主要应用在OOP开发中的编译器的开发中，所以适用面比较<br>窄。<br> <img src=\"/images/post_images/20171225_24.png\" alt=\"\"><br>Context类是一个上下文环境类，Plus和Minus分别是用来计算的实现，代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.getNum1()+context.getNum2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Minus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.getNum1()-context.getNum2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num1;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num2;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num1 = num1;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num2 = num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNum1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum1</span><span class=\"params\">(<span class=\"keyword\">int</span> num1)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num1 = num1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNum2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum2</span><span class=\"params\">(<span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num2 = num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算9+2-8的值  </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"keyword\">new</span> Minus().interpret((<span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> Plus()  </span><br><span class=\"line\">                .interpret(<span class=\"keyword\">new</span> Context(<span class=\"number\">9</span>, <span class=\"number\">2</span>)), <span class=\"number\">8</span>)));  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后输出正确的结果:<code>3</code>。</p>\n<p>基本就这样，解释器模式用来做各种各样的解释器，如正则表达式等的解释器等等！</p>\n<p>设计模式基本就这么大概讲完了，总体感觉有点简略，的确，这么点儿篇幅，不足以对整个23种设<br>计模式做全面的阐述，此处读者可将它作为一个理论基础去学习，通过这四篇博文，先基本有个概<br>念，虽然我讲的有些简单，但基本都能说明问题及他们的特点，如果对哪一个感兴趣，可以继续深<br>入研究！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<pre><code>其实每个设计模式都是很重要的一种思想，看上去很熟，其实是因为我们在学到的东西中都有涉及\n</code></pre><p>，尽管有时我们并不知道，其实在Java本身的设计之中处处都有体现，像AWT、JDBC、集合类、IO管<br>道或者是Web框架，里面设计模式无处不在。因为我们篇幅有限，很难讲每一个设计模式都讲的很详<br>细，不过我会尽我所能，尽量在有限的空间和篇幅内，把意思写清楚了，更好让大家明白。本章不出<br>意外的话，应该是设计模式最后一讲了，首先还是上一下上篇开头的那个图:<br><img src=\"/images/post_images/20171225_13.png\" alt=\"\"></p>\n<p>本章讲讲第三类和第四类。</p>\n<h2 id=\"19-备忘录模式（Memento）\"><a href=\"#19-备忘录模式（Memento）\" class=\"headerlink\" title=\"19. 备忘录模式（Memento）\"></a>19. 备忘录模式（Memento）</h2><p>主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象，个人觉得叫备份模式更形象些，<br>通俗的讲下：假设有原始类A，A中有各种属性，A可以决定需要备份的属性，备忘录类B是用来存储A<br>的一些内部状态，类C呢，就是一个用来存储备忘录的，且只能存储，不能修改等操作。做个图来分<br>析一下:<br> <img src=\"/images/post_images/20171225_20.png\" alt=\"\"><br>Original类是原始类，里面有需要保存的属性value及创建一个备忘录类，用来保存value值。<br>Memento类是备忘录类，Storage类是存储备忘录的类，持有Memento类的实例，该模式很好理解。<br>直接看源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Original</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Original</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">createMemento</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Memento(value);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreMemento</span><span class=\"params\">(Memento memento)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = memento.getValue();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memento</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Memento</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Storage</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memento memento;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Storage</span><span class=\"params\">(Memento memento)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memento = memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">getMemento</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMemento</span><span class=\"params\">(Memento memento)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memento = memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建原始类  </span></span><br><span class=\"line\">        Original origi = <span class=\"keyword\">new</span> Original(<span class=\"string\">\"egg\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建备忘录  </span></span><br><span class=\"line\">        Storage storage = <span class=\"keyword\">new</span> Storage(origi.createMemento());  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 修改原始类的状态  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\">        origi.setValue(<span class=\"string\">\"niu\"</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改后的状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回复原始类的状态  </span></span><br><span class=\"line\">        origi.restoreMemento(storage.getMemento());  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"恢复后的状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br><code>初始化状态为:egg\n修改后的状态为:niu\n恢复后的状态为:egg</code></p>\n<h2 id=\"20-状态模式-State\"><a href=\"#20-状态模式-State\" class=\"headerlink\" title=\"20. 状态模式(State)\"></a>20. 状态模式(State)</h2><p>核心思想就是：当对象的状态改变时，同时改变其行为，很好理解！就拿QQ来说，有几种状态，在<br>线、隐身、忙碌等，每个状态对应不同的操作，而且你的好友也能看到你的状态，<br>所以，状态模式就两点:</p>\n<ol>\n<li>可以通过改变状态来获得不同的行为。</li>\n<li>你的好友能同时看到你的变化。看图:<br><img src=\"/images/post_images/20171225_21.png\" alt=\"\"></li>\n</ol>\n<p>State类是个状态类，Context类可以实现切换，我们来看看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xtfggef.dp.state;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态类的核心类</span></span><br><span class=\"line\"><span class=\"comment\"> * 2012-12-1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> erqing</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"execute the first opt!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"execute the second opt!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xtfggef.dp.state;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态模式的切换类   2012-12-1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> erqing</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State state;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(State state)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getState</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(State state)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state.getValue().equals(<span class=\"string\">\"state1\"</span>)) &#123;  </span><br><span class=\"line\">            state.method1();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state.getValue().equals(<span class=\"string\">\"state2\"</span>)) &#123;  </span><br><span class=\"line\">            state.method2();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        State state = <span class=\"keyword\">new</span> State();  </span><br><span class=\"line\">        Context context = <span class=\"keyword\">new</span> Context(state);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置第一种状态  </span></span><br><span class=\"line\">        state.setValue(<span class=\"string\">\"state1\"</span>);  </span><br><span class=\"line\">        context.method();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置第二种状态  </span></span><br><span class=\"line\">        state.setValue(<span class=\"string\">\"state2\"</span>);  </span><br><span class=\"line\">        context.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>execute the first opt!\nexecute the second opt!</code></p>\n<p>根据这个特性，状态模式在日常开发中用的挺多的，尤其是做网站的时候，我们有时希望根据对象<br>的某一属性，区别开他们的一些功能，比如说简单的权限控制等。</p>\n<h2 id=\"21-访问者模式（Visitor）\"><a href=\"#21-访问者模式（Visitor）\" class=\"headerlink\" title=\"21. 访问者模式（Visitor）\"></a>21. 访问者模式（Visitor）</h2><p>访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模<br>式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若<br>系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。访问者模<br>式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到<br>一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From<br>百科<br>简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被<br>访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：<br><img src=\"/images/post_images/20171225_22.png\" alt=\"\"><br>来看看原码:<br>一个Visitor类，存放要访问的对象，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Subject sub)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Subject sub)</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"visit the subject:\"</span>+sub.getSubject());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Subject类，accept方法，接受将要访问它的对象，getSubject()获取将要被访问的属性，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;  </span><br><span class=\"line\">        visitor.visit(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"love\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        Visitor visitor = <span class=\"keyword\">new</span> MyVisitor();  </span><br><span class=\"line\">        Subject sub = <span class=\"keyword\">new</span> MySubject();  </span><br><span class=\"line\">        sub.accept(visitor);      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>visit the subject:love</code><br>该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：1、新功能会不会<br>与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对<br>这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把<br>数据结构和算法解耦.</p>\n<h2 id=\"22-中介者模式-Mediator\"><a href=\"#22-中介者模式-Mediator\" class=\"headerlink\" title=\"22. 中介者模式(Mediator)\"></a>22. 中介者模式(Mediator)</h2><p>中介者模式也是用来降低类类之间的耦合的，因为如果类类之间有依赖关系的话，不利于功能的拓<br>展和维护，因为只要修改一个对象，其它关联的对象都得进行修改。如果使用中介者模式，只需关<br>心和Mediator类的关系，具体类类之间的关系及调度交给Mediator就行，这有点像spring容器的<br>作用。先看看图:<br><img src=\"/images/post_images/20171225_23.png\" alt=\"\"><br>User类统一接口，User1和User2分别是不同的对象，二者之间有关联，如果不采用中介者模式，则<br>需要二者相互持有引用，这样二者的耦合度很高，为了解耦，引入了Mediator类，提供统一接口<br>，MyMediator为其实现类，里面持有User1和User2的实例，用来实现对User1和User2的控制。这<br>样User1和User2两个对象相互独立，他们只需要保持好和Mediator之间的关系就行，剩下的全<br>由MyMediator类来维护！基本实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mediator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMediator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">workAll</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMediator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mediator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user1;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user2;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMediator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        user1 = <span class=\"keyword\">new</span> User1(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        user2 = <span class=\"keyword\">new</span> User2(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">workAll</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        user1.work();  </span><br><span class=\"line\">        user2.work();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Mediator mediator;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mediator <span class=\"title\">getMediator</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> mediator;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User1</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User1</span><span class=\"params\">(Mediator mediator)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1 exe!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User2</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User2</span><span class=\"params\">(Mediator mediator)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2 exe!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Mediator mediator = <span class=\"keyword\">new</span> MyMediator();  </span><br><span class=\"line\">        mediator.createMediator();  </span><br><span class=\"line\">        mediator.workAll();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>user1 exe!\nuser2 exe!</code></p>\n<h2 id=\"23-解释器模式-Interpreter\"><a href=\"#23-解释器模式-Interpreter\" class=\"headerlink\" title=\"23. 解释器模式(Interpreter)\"></a>23. 解释器模式(Interpreter)</h2><p>解释器模式是我们暂时的最后一讲，一般主要应用在OOP开发中的编译器的开发中，所以适用面比较<br>窄。<br> <img src=\"/images/post_images/20171225_24.png\" alt=\"\"><br>Context类是一个上下文环境类，Plus和Minus分别是用来计算的实现，代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.getNum1()+context.getNum2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Minus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.getNum1()-context.getNum2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num1;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num2;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num1 = num1;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num2 = num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNum1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum1</span><span class=\"params\">(<span class=\"keyword\">int</span> num1)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num1 = num1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNum2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum2</span><span class=\"params\">(<span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num2 = num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算9+2-8的值  </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"keyword\">new</span> Minus().interpret((<span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> Plus()  </span><br><span class=\"line\">                .interpret(<span class=\"keyword\">new</span> Context(<span class=\"number\">9</span>, <span class=\"number\">2</span>)), <span class=\"number\">8</span>)));  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后输出正确的结果:<code>3</code>。</p>\n<p>基本就这样，解释器模式用来做各种各样的解释器，如正则表达式等的解释器等等！</p>\n<p>设计模式基本就这么大概讲完了，总体感觉有点简略，的确，这么点儿篇幅，不足以对整个23种设<br>计模式做全面的阐述，此处读者可将它作为一个理论基础去学习，通过这四篇博文，先基本有个概<br>念，虽然我讲的有些简单，但基本都能说明问题及他们的特点，如果对哪一个感兴趣，可以继续深<br>入研究！</p>\n"},{"title":"Hello World","type":"default","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n      - Welcome\ntype: \"default\"\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-11-28T05:36:15.086Z","updated":"2017-11-28T08:25:43.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz6c000rfkkxoa8vs9in","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Java中的23种设计模式(一)","date":"2017-12-23T09:32:21.000Z","type":["Java","设计模式"],"_content":"\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n# 设计模式（Design Patterns）\n\n设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验\n的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问\n，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的\n基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式\n在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及\n该问题的核心解决方案，这也是它能被广泛应用的原因\n\n\n## 设计模式的分类\n总体来说设计模式分为三大类：\n\n| 创建型模式5种 | 结构型模式7种 | 行为型模式11种 | 其他(2种) |\n|:-----:|:-----:|:-----:|:-----:|\n| 工厂方法模式  | 适配器模式    | 策略模式       | 并发型模式 |\n| 抽象工厂模式  | 装饰器模式    | 策略模式       | 线程池模式 |\n| 单例模式      | 代理模式      | 模板方法模式   |           |\n| 建造者模式    | 桥接模式      | 观察者模式     |            |\n| 原型模式      | 组合模式      | 迭代子模式     |           |\n|              | 享元模式      | 责任链模式     |            |\n|              |               | 命令模式       |           |\n|              |               | 备忘录模式     |            |\n|              |               | 状态模式       |           |\n|              |               | 访问者模式     |            |\n|              |               | 中介者模式     |            |\n|              |               | 解释器模式     |            ||\n\n用一个图片来整体描述一下：\n![](/images/post_images/20171223_Design_Patterns_1.jpg)\n\n## 设计模式的六大原则\n\n1. 开闭原则（Open Close Principle）\n开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实\n现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这\n样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\n2. 里氏代换原则（Liskov Substitution Principle）\n里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换\n原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可\n以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础\n上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。\n而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规\n范。—— From Baidu 百科\n3. 依赖倒转原则（Dependence Inversion Principle）\n这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。\n4. 接口隔离原则（Interface Segregation Principle）\n这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意\n思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维\n护方便。所以上文中多次出现：降低依赖，降低耦合。\n5. 迪米特法则（最少知道原则）（Demeter Principle）\n为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功\n能模块相对独立。\n6. 合成复用原则（Composite Reuse Principle）\n原则是尽量使用合成/聚合的方式，而不是使用继承。\n\n# Java的23中设计模式\n从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设\n计模式的原则进行分析。\n\n## 1. 工厂方法模式(Factory Method)\n就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：\n![](/images/post_images/20171223FactoryMethod.jpg)\n\n举例如下：（我们举一个发送邮件和短信的例子）\n首先，创建二者的共同接口:\n\n```java\n  public interface Sender {  \n      public void Send();  \n  }  \n```\n其次，创建实现类:\n\n```java\n  public class MailSender implements Sender {\n      @Override\n      public void Send() {\n          System.out.println(\"this is mailsender!\");\n      }\n  }\n```\n\n```java\n  public class SmsSender implements Sender {\n\n      @Override  \n      public void Send() {  \n          System.out.println(\"this is sms sender!\");  \n      }  \n  }  \n```\n\n最后，建工厂类:\n\n```java\npublic class SendFactory {  \n\n    public Sender produce(String type) {  \n        if (\"mail\".equals(type)) {  \n            return new MailSender();  \n        } else if (\"sms\".equals(type)) {  \n            return new SmsSender();  \n        } else {  \n            System.out.println(\"请输入正确的类型!\");  \n            return null;  \n        }  \n    }  \n}  \n```\n我们来测试下:\n```java\n  public class FactoryTest {  \n\n      public static void main(String[] args) {  \n          SendFactory factory = new SendFactory();  \n          Sender sender = factory.produce(\"sms\");  \n          sender.Send();  \n      }  \n  }  \n```\n输出: `this is sms sender!`\n\n### 2. 多个工厂方法模式\n  是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创\n建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：\n![](/images/post_images/20171224_Factory.png)\n\n将上面的代码做下修改，改动下SendFactory类就行，如下:\n```java\npublic class SendFactory {  \n\n    public Sender produceMail(){  \n        return new MailSender();  \n    }  \n\n    public Sender produceSms(){  \n        return new SmsSender();  \n    }  \n}  \n```\n测试类如下:\n```java\npublic class FactoryTest {  \n\n    public static void main(String[] args) {  \n        SendFactory factory = new SendFactory();  \n        Sender sender = factory.produceMail();  \n        sender.Send();  \n    }  \n}  \n```\n输出：`this is mailsender!`\n\n### 3. 静态工厂方法模式\n  将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\n\n```java\npublic class SendFactory {  \n\n    public static Sender produceMail(){  \n        return new MailSender();  \n    }  \n\n    public static Sender produceSms(){  \n        return new SmsSender();  \n    }  \n}  \n```\n```java\npublic class FactoryTest {  \n\n    public static void main(String[] args) {      \n        Sender sender = SendFactory.produceMail();  \n        sender.Send();  \n    }  \n}  \n```\n输出：`this is mailsender!`\n\n总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工\n厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，\n第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂\n方法模式。\n\n## 2. 抽象工厂模式（Abstract Factory）\n  工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工\n厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到\n抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不\n需要修改之前的代码。因为抽象工厂不太好理解，我们先看看图，然后就和代码，就比较容易理解\n。\n![](/images/post_images/20171224_Factory2.png)\n\n请看例子:\n\n```java\npublic interface Sender {  \n    public void Send();  \n}  \n```\n两个实现类:\n```java\npublic class MailSender implements Sender {  \n    @Override  \n    public void Send() {  \n        System.out.println(\"this is mailsender!\");  \n    }  \n}  \n```\n两个工厂类:\n```java\n  public class SendMailFactory implements Provider {  \n\n      @Override  \n      public Sender produce(){  \n          return new MailSender();  \n      }  \n  }  \n```\n\n```java\npublic class SendSmsFactory implements Provider{  \n\n    @Override  \n    public Sender produce() {  \n        return new SmsSender();  \n    }  \n}\n```\n在提供一个接口:\n```java\npublic interface Provider {  \n    public Sender produce();  \n}  \n```\n测试类:\n\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Provider provider = new SendMailFactory();  \n        Sender sender = provider.produce();  \n        sender.Send();  \n    }  \n}\n```\n其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实\n现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做\n，拓展性较好！\n\n## 3. 单例模式（Singleton）\n单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该\n对象只有一个实例存在。这样的模式有几个好处：\n1. 某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。\n2. 省去了new操作符，降低了系统内存的使用频率，减轻GC压力。\n3. 有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了\n。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能\n保证核心交易服务器独立控制整个流程。\n\n首先我们写一个简单的单例类：\n```java\npublic class Singleton {  \n\n    /* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */  \n    private static Singleton instance = null;  \n\n    /* 私有构造方法，防止被实例化 */  \n    private Singleton() {  \n    }  \n\n    /* 静态工程方法，创建实例 */  \n    public static Singleton getInstance() {  \n        if (instance == null) {  \n            instance = new Singleton();  \n        }  \n        return instance;  \n    }  \n\n    /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */  \n    public Object readResolve() {  \n        return instance;  \n    }  \n}  \n```\n\n这个类可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境\n下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字\n，如下:\n```java\npublic static synchronized Singleton getInstance() {  \n        if (instance == null) {  \n            instance = new Singleton();  \n        }  \n        return instance;  \n    }\n```\n\n但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调]\n用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不\n需要了，所以，这个地方需要改进。我们改成下面这个：\n\n```java\npublic static Singleton getInstance() {  \n        if (instance == null) {  \n            synchronized (instance) {  \n                if (instance == null) {  \n                    instance = new Singleton();  \n                }  \n            }  \n        }  \n        return instance;  \n    }  \n```\n\n似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要\n加锁的，只有在instance为null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样\n的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是分开进行的，\n也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先\n后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，然后直接赋值给instance成员，\n然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：\na>A、B线程同时进入了第一个if判断\nb>A首先进入synchronized块，由于instance为null，所以它执行instance = new\nSingleton();\nc>由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值\n给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。\nd>B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将\n结果返回给调用该方法的程序。\ne>此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。\n所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是\n在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：\n\n```java\nprivate static class SingletonFactory{           \n        private static Singleton instance = new Singleton();           \n    }           \n    public static Singleton getInstance(){           \n        return SingletonFactory.instance;           \n    }   \n```\n\n实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时\n候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们\n保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担\n心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。\n这样我们暂时总结一个完美的单例模式:\n\n```java\npublic class Singleton {  \n\n    /* 私有构造方法，防止被实例化 */  \n    private Singleton() {  \n    }  \n\n    /* 此处使用一个内部类来维护单例 */  \n    private static class SingletonFactory {  \n        private static Singleton instance = new Singleton();  \n    }  \n\n    /* 获取实例 */  \n    public static Singleton getInstance() {  \n        return SingletonFactory.instance;  \n    }  \n\n    /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */  \n    public Object readResolve() {  \n        return getInstance();  \n    }  \n}  \n```\n\n其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以\n说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。也\n有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开\n，单独为创建加synchronized关键字，也是可以的:\n```java\npublic class SingletonTest {  \n\n    private static SingletonTest instance = null;  \n\n    private SingletonTest() {  \n    }  \n\n    private static synchronized void syncInit() {  \n        if (instance == null) {  \n            instance = new SingletonTest();  \n        }  \n    }  \n\n    public static SingletonTest getInstance() {  \n        if (instance == null) {  \n            syncInit();  \n        }  \n        return instance;  \n    }  \n}\n```\n\n考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。\n<font color='red'>补充：采用\"影子实例\"的办法为单例对象的属性同步更新</font>\n\n```java\npublic class SingletonTest {  \n\n    private static SingletonTest instance = null;  \n    private Vector properties = null;  \n\n    public Vector getProperties() {  \n        return properties;  \n    }  \n\n    private SingletonTest() {  \n    }  \n\n    private static synchronized void syncInit() {  \n        if (instance == null) {  \n            instance = new SingletonTest();  \n        }  \n    }  \n\n    public static SingletonTest getInstance() {  \n        if (instance == null) {  \n            syncInit();  \n        }  \n        return instance;  \n    }  \n\n    public void updateProperties() {  \n        SingletonTest shadow = new SingletonTest();  \n        properties = shadow.getProperties();  \n    }  \n}\n```\n通过单例模式的学习告诉我们：\n1. 单例模式理解起来简单，但是具体实现起来还是有一定的难度。\n2. synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁\n的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。\n\n到这儿，单例模式基本已经讲完了，结尾处，笔者突然想到另一个问题，就是采用类的静态方法，\n实现单例模式的效果，也是可行的，此处二者有什么不同？\n首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不\n允许有static修饰的方法，所以即使实现了也是非静态的）\n其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些\n类比较庞大，所以延迟加载有助于提升性能。\n再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。\n最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你\n可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二\n者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实\n现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就\n出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用\n不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好\n的解决问题！\n\n## 4. 建造者模式(Builder)\n\n工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创\n建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式\n和最后的Test结合起来得到的。我们看一下代码：\n还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：\n\n```java\npublic class Builder {  \n\n    private List<Sender> list = new ArrayList<Sender>();  \n\n    public void produceMailSender(int count){  \n        for(int i=0; i<count; i++){  \n            list.add(new MailSender());  \n        }  \n    }  \n\n    public void produceSmsSender(int count){  \n        for(int i=0; i<count; i++){  \n            list.add(new SmsSender());  \n        }  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Builder builder = new Builder();  \n        builder.produceMailSender(10);  \n    }  \n}  \n```\n\n从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与\n工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个\n部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。\n\n### 5. 原型模式(Prototype)\n  原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是\n将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象\n的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：\n\n```java\npublic class Prototype implements Cloneable {  \n\n    public Object clone() throws CloneNotSupportedException {  \n        Prototype proto = (Prototype) super.clone();  \n        return proto;  \n    }  \n}  \n```\n很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意\n的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB\n，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而\n在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地\n方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对\n象深、浅复制的概念：\n- 浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对\n象所指向的。\n- 深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，\n就是深复制进行了完全彻底的复制，而浅复制不彻底。此处，写一个深浅复制的例子：\n\n```java\npublic class Prototype implements Cloneable, Serializable {  \n\n    private static final long serialVersionUID = 1L;  \n    private String string;  \n\n    private SerializableObject obj;  \n\n    /* 浅复制 */  \n    public Object clone() throws CloneNotSupportedException {  \n        Prototype proto = (Prototype) super.clone();  \n        return proto;  \n    }  \n\n    /* 深复制 */  \n    public Object deepClone() throws IOException, ClassNotFoundException {  \n\n        /* 写入当前对象的二进制流 */  \n        ByteArrayOutputStream bos = new ByteArrayOutputStream();  \n        ObjectOutputStream oos = new ObjectOutputStream(bos);  \n        oos.writeObject(this);  \n\n        /* 读出二进制流产生的新对象 */  \n        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());  \n        ObjectInputStream ois = new ObjectInputStream(bis);  \n        return ois.readObject();  \n    }  \n\n    public String getString() {  \n        return string;  \n    }  \n\n    public void setString(String string) {  \n        this.string = string;  \n    }  \n\n    public SerializableObject getObj() {  \n        return obj;  \n    }  \n\n    public void setObj(SerializableObject obj) {  \n        this.obj = obj;  \n    }  \n\n}  \n\nclass SerializableObject implements Serializable {  \n    private static final long serialVersionUID = 1L;  \n}  \n```\n要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。\n","source":"_posts/Java中的23种设计模式-一.md","raw":"---\ntitle: Java中的23种设计模式(一)\ndate: 2017-12-23 17:32:21\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - Java\n  - 设计模式\ntype:\n  - Java\n  - 设计模式\n---\n\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n# 设计模式（Design Patterns）\n\n设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验\n的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问\n，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的\n基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式\n在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及\n该问题的核心解决方案，这也是它能被广泛应用的原因\n\n\n## 设计模式的分类\n总体来说设计模式分为三大类：\n\n| 创建型模式5种 | 结构型模式7种 | 行为型模式11种 | 其他(2种) |\n|:-----:|:-----:|:-----:|:-----:|\n| 工厂方法模式  | 适配器模式    | 策略模式       | 并发型模式 |\n| 抽象工厂模式  | 装饰器模式    | 策略模式       | 线程池模式 |\n| 单例模式      | 代理模式      | 模板方法模式   |           |\n| 建造者模式    | 桥接模式      | 观察者模式     |            |\n| 原型模式      | 组合模式      | 迭代子模式     |           |\n|              | 享元模式      | 责任链模式     |            |\n|              |               | 命令模式       |           |\n|              |               | 备忘录模式     |            |\n|              |               | 状态模式       |           |\n|              |               | 访问者模式     |            |\n|              |               | 中介者模式     |            |\n|              |               | 解释器模式     |            ||\n\n用一个图片来整体描述一下：\n![](/images/post_images/20171223_Design_Patterns_1.jpg)\n\n## 设计模式的六大原则\n\n1. 开闭原则（Open Close Principle）\n开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实\n现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这\n样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\n2. 里氏代换原则（Liskov Substitution Principle）\n里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换\n原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可\n以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础\n上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。\n而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规\n范。—— From Baidu 百科\n3. 依赖倒转原则（Dependence Inversion Principle）\n这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。\n4. 接口隔离原则（Interface Segregation Principle）\n这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意\n思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维\n护方便。所以上文中多次出现：降低依赖，降低耦合。\n5. 迪米特法则（最少知道原则）（Demeter Principle）\n为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功\n能模块相对独立。\n6. 合成复用原则（Composite Reuse Principle）\n原则是尽量使用合成/聚合的方式，而不是使用继承。\n\n# Java的23中设计模式\n从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设\n计模式的原则进行分析。\n\n## 1. 工厂方法模式(Factory Method)\n就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：\n![](/images/post_images/20171223FactoryMethod.jpg)\n\n举例如下：（我们举一个发送邮件和短信的例子）\n首先，创建二者的共同接口:\n\n```java\n  public interface Sender {  \n      public void Send();  \n  }  \n```\n其次，创建实现类:\n\n```java\n  public class MailSender implements Sender {\n      @Override\n      public void Send() {\n          System.out.println(\"this is mailsender!\");\n      }\n  }\n```\n\n```java\n  public class SmsSender implements Sender {\n\n      @Override  \n      public void Send() {  \n          System.out.println(\"this is sms sender!\");  \n      }  \n  }  \n```\n\n最后，建工厂类:\n\n```java\npublic class SendFactory {  \n\n    public Sender produce(String type) {  \n        if (\"mail\".equals(type)) {  \n            return new MailSender();  \n        } else if (\"sms\".equals(type)) {  \n            return new SmsSender();  \n        } else {  \n            System.out.println(\"请输入正确的类型!\");  \n            return null;  \n        }  \n    }  \n}  \n```\n我们来测试下:\n```java\n  public class FactoryTest {  \n\n      public static void main(String[] args) {  \n          SendFactory factory = new SendFactory();  \n          Sender sender = factory.produce(\"sms\");  \n          sender.Send();  \n      }  \n  }  \n```\n输出: `this is sms sender!`\n\n### 2. 多个工厂方法模式\n  是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创\n建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：\n![](/images/post_images/20171224_Factory.png)\n\n将上面的代码做下修改，改动下SendFactory类就行，如下:\n```java\npublic class SendFactory {  \n\n    public Sender produceMail(){  \n        return new MailSender();  \n    }  \n\n    public Sender produceSms(){  \n        return new SmsSender();  \n    }  \n}  \n```\n测试类如下:\n```java\npublic class FactoryTest {  \n\n    public static void main(String[] args) {  \n        SendFactory factory = new SendFactory();  \n        Sender sender = factory.produceMail();  \n        sender.Send();  \n    }  \n}  \n```\n输出：`this is mailsender!`\n\n### 3. 静态工厂方法模式\n  将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\n\n```java\npublic class SendFactory {  \n\n    public static Sender produceMail(){  \n        return new MailSender();  \n    }  \n\n    public static Sender produceSms(){  \n        return new SmsSender();  \n    }  \n}  \n```\n```java\npublic class FactoryTest {  \n\n    public static void main(String[] args) {      \n        Sender sender = SendFactory.produceMail();  \n        sender.Send();  \n    }  \n}  \n```\n输出：`this is mailsender!`\n\n总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工\n厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，\n第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂\n方法模式。\n\n## 2. 抽象工厂模式（Abstract Factory）\n  工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工\n厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到\n抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不\n需要修改之前的代码。因为抽象工厂不太好理解，我们先看看图，然后就和代码，就比较容易理解\n。\n![](/images/post_images/20171224_Factory2.png)\n\n请看例子:\n\n```java\npublic interface Sender {  \n    public void Send();  \n}  \n```\n两个实现类:\n```java\npublic class MailSender implements Sender {  \n    @Override  \n    public void Send() {  \n        System.out.println(\"this is mailsender!\");  \n    }  \n}  \n```\n两个工厂类:\n```java\n  public class SendMailFactory implements Provider {  \n\n      @Override  \n      public Sender produce(){  \n          return new MailSender();  \n      }  \n  }  \n```\n\n```java\npublic class SendSmsFactory implements Provider{  \n\n    @Override  \n    public Sender produce() {  \n        return new SmsSender();  \n    }  \n}\n```\n在提供一个接口:\n```java\npublic interface Provider {  \n    public Sender produce();  \n}  \n```\n测试类:\n\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Provider provider = new SendMailFactory();  \n        Sender sender = provider.produce();  \n        sender.Send();  \n    }  \n}\n```\n其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实\n现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做\n，拓展性较好！\n\n## 3. 单例模式（Singleton）\n单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该\n对象只有一个实例存在。这样的模式有几个好处：\n1. 某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。\n2. 省去了new操作符，降低了系统内存的使用频率，减轻GC压力。\n3. 有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了\n。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能\n保证核心交易服务器独立控制整个流程。\n\n首先我们写一个简单的单例类：\n```java\npublic class Singleton {  \n\n    /* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */  \n    private static Singleton instance = null;  \n\n    /* 私有构造方法，防止被实例化 */  \n    private Singleton() {  \n    }  \n\n    /* 静态工程方法，创建实例 */  \n    public static Singleton getInstance() {  \n        if (instance == null) {  \n            instance = new Singleton();  \n        }  \n        return instance;  \n    }  \n\n    /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */  \n    public Object readResolve() {  \n        return instance;  \n    }  \n}  \n```\n\n这个类可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境\n下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字\n，如下:\n```java\npublic static synchronized Singleton getInstance() {  \n        if (instance == null) {  \n            instance = new Singleton();  \n        }  \n        return instance;  \n    }\n```\n\n但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调]\n用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不\n需要了，所以，这个地方需要改进。我们改成下面这个：\n\n```java\npublic static Singleton getInstance() {  \n        if (instance == null) {  \n            synchronized (instance) {  \n                if (instance == null) {  \n                    instance = new Singleton();  \n                }  \n            }  \n        }  \n        return instance;  \n    }  \n```\n\n似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要\n加锁的，只有在instance为null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样\n的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是分开进行的，\n也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先\n后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，然后直接赋值给instance成员，\n然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：\na>A、B线程同时进入了第一个if判断\nb>A首先进入synchronized块，由于instance为null，所以它执行instance = new\nSingleton();\nc>由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值\n给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。\nd>B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将\n结果返回给调用该方法的程序。\ne>此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。\n所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是\n在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：\n\n```java\nprivate static class SingletonFactory{           \n        private static Singleton instance = new Singleton();           \n    }           \n    public static Singleton getInstance(){           \n        return SingletonFactory.instance;           \n    }   \n```\n\n实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时\n候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们\n保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担\n心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。\n这样我们暂时总结一个完美的单例模式:\n\n```java\npublic class Singleton {  \n\n    /* 私有构造方法，防止被实例化 */  \n    private Singleton() {  \n    }  \n\n    /* 此处使用一个内部类来维护单例 */  \n    private static class SingletonFactory {  \n        private static Singleton instance = new Singleton();  \n    }  \n\n    /* 获取实例 */  \n    public static Singleton getInstance() {  \n        return SingletonFactory.instance;  \n    }  \n\n    /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */  \n    public Object readResolve() {  \n        return getInstance();  \n    }  \n}  \n```\n\n其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以\n说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。也\n有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开\n，单独为创建加synchronized关键字，也是可以的:\n```java\npublic class SingletonTest {  \n\n    private static SingletonTest instance = null;  \n\n    private SingletonTest() {  \n    }  \n\n    private static synchronized void syncInit() {  \n        if (instance == null) {  \n            instance = new SingletonTest();  \n        }  \n    }  \n\n    public static SingletonTest getInstance() {  \n        if (instance == null) {  \n            syncInit();  \n        }  \n        return instance;  \n    }  \n}\n```\n\n考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。\n<font color='red'>补充：采用\"影子实例\"的办法为单例对象的属性同步更新</font>\n\n```java\npublic class SingletonTest {  \n\n    private static SingletonTest instance = null;  \n    private Vector properties = null;  \n\n    public Vector getProperties() {  \n        return properties;  \n    }  \n\n    private SingletonTest() {  \n    }  \n\n    private static synchronized void syncInit() {  \n        if (instance == null) {  \n            instance = new SingletonTest();  \n        }  \n    }  \n\n    public static SingletonTest getInstance() {  \n        if (instance == null) {  \n            syncInit();  \n        }  \n        return instance;  \n    }  \n\n    public void updateProperties() {  \n        SingletonTest shadow = new SingletonTest();  \n        properties = shadow.getProperties();  \n    }  \n}\n```\n通过单例模式的学习告诉我们：\n1. 单例模式理解起来简单，但是具体实现起来还是有一定的难度。\n2. synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁\n的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。\n\n到这儿，单例模式基本已经讲完了，结尾处，笔者突然想到另一个问题，就是采用类的静态方法，\n实现单例模式的效果，也是可行的，此处二者有什么不同？\n首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不\n允许有static修饰的方法，所以即使实现了也是非静态的）\n其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些\n类比较庞大，所以延迟加载有助于提升性能。\n再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。\n最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你\n可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二\n者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实\n现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就\n出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用\n不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好\n的解决问题！\n\n## 4. 建造者模式(Builder)\n\n工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创\n建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式\n和最后的Test结合起来得到的。我们看一下代码：\n还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：\n\n```java\npublic class Builder {  \n\n    private List<Sender> list = new ArrayList<Sender>();  \n\n    public void produceMailSender(int count){  \n        for(int i=0; i<count; i++){  \n            list.add(new MailSender());  \n        }  \n    }  \n\n    public void produceSmsSender(int count){  \n        for(int i=0; i<count; i++){  \n            list.add(new SmsSender());  \n        }  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Builder builder = new Builder();  \n        builder.produceMailSender(10);  \n    }  \n}  \n```\n\n从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与\n工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个\n部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。\n\n### 5. 原型模式(Prototype)\n  原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是\n将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象\n的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：\n\n```java\npublic class Prototype implements Cloneable {  \n\n    public Object clone() throws CloneNotSupportedException {  \n        Prototype proto = (Prototype) super.clone();  \n        return proto;  \n    }  \n}  \n```\n很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意\n的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB\n，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而\n在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地\n方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对\n象深、浅复制的概念：\n- 浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对\n象所指向的。\n- 深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，\n就是深复制进行了完全彻底的复制，而浅复制不彻底。此处，写一个深浅复制的例子：\n\n```java\npublic class Prototype implements Cloneable, Serializable {  \n\n    private static final long serialVersionUID = 1L;  \n    private String string;  \n\n    private SerializableObject obj;  \n\n    /* 浅复制 */  \n    public Object clone() throws CloneNotSupportedException {  \n        Prototype proto = (Prototype) super.clone();  \n        return proto;  \n    }  \n\n    /* 深复制 */  \n    public Object deepClone() throws IOException, ClassNotFoundException {  \n\n        /* 写入当前对象的二进制流 */  \n        ByteArrayOutputStream bos = new ByteArrayOutputStream();  \n        ObjectOutputStream oos = new ObjectOutputStream(bos);  \n        oos.writeObject(this);  \n\n        /* 读出二进制流产生的新对象 */  \n        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());  \n        ObjectInputStream ois = new ObjectInputStream(bis);  \n        return ois.readObject();  \n    }  \n\n    public String getString() {  \n        return string;  \n    }  \n\n    public void setString(String string) {  \n        this.string = string;  \n    }  \n\n    public SerializableObject getObj() {  \n        return obj;  \n    }  \n\n    public void setObj(SerializableObject obj) {  \n        this.obj = obj;  \n    }  \n\n}  \n\nclass SerializableObject implements Serializable {  \n    private static final long serialVersionUID = 1L;  \n}  \n```\n要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。\n","slug":"Java中的23种设计模式-一","published":1,"updated":"2017-12-25T10:05:50.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jz6g000wfkkxcdnvpf62","content":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<h1 id=\"设计模式（Design-Patterns）\"><a href=\"#设计模式（Design-Patterns）\" class=\"headerlink\" title=\"设计模式（Design Patterns）\"></a>设计模式（Design Patterns）</h1><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验<br>的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问<br>，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的<br>基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式<br>在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及<br>该问题的核心解决方案，这也是它能被广泛应用的原因</p>\n<h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">创建型模式5种</th>\n<th style=\"text-align:center\">结构型模式7种</th>\n<th style=\"text-align:center\">行为型模式11种</th>\n<th style=\"text-align:center\">其他(2种)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">工厂方法模式</td>\n<td style=\"text-align:center\">适配器模式</td>\n<td style=\"text-align:center\">策略模式</td>\n<td style=\"text-align:center\">并发型模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">抽象工厂模式</td>\n<td style=\"text-align:center\">装饰器模式</td>\n<td style=\"text-align:center\">策略模式</td>\n<td style=\"text-align:center\">线程池模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">单例模式</td>\n<td style=\"text-align:center\">代理模式</td>\n<td style=\"text-align:center\">模板方法模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">建造者模式</td>\n<td style=\"text-align:center\">桥接模式</td>\n<td style=\"text-align:center\">观察者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">原型模式</td>\n<td style=\"text-align:center\">组合模式</td>\n<td style=\"text-align:center\">迭代子模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">享元模式</td>\n<td style=\"text-align:center\">责任链模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">命令模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">备忘录模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">状态模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">访问者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">中介者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">解释器模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>用一个图片来整体描述一下：<br><img src=\"/images/post_images/20171223_Design_Patterns_1.jpg\" alt=\"\"></p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><ol>\n<li>开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实<br>现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这<br>样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</li>\n<li>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换<br>原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可<br>以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础<br>上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。<br>而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规<br>范。—— From Baidu 百科</li>\n<li>依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</li>\n<li>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意<br>思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维<br>护方便。所以上文中多次出现：降低依赖，降低耦合。</li>\n<li>迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功<br>能模块相对独立。</li>\n<li>合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式，而不是使用继承。</li>\n</ol>\n<h1 id=\"Java的23中设计模式\"><a href=\"#Java的23中设计模式\" class=\"headerlink\" title=\"Java的23中设计模式\"></a>Java的23中设计模式</h1><p>从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设<br>计模式的原则进行分析。</p>\n<h2 id=\"1-工厂方法模式-Factory-Method\"><a href=\"#1-工厂方法模式-Factory-Method\" class=\"headerlink\" title=\"1. 工厂方法模式(Factory Method)\"></a>1. 工厂方法模式(Factory Method)</h2><p>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：<br><img src=\"/images/post_images/20171223FactoryMethod.jpg\" alt=\"\"></p>\n<p>举例如下：（我们举一个发送邮件和短信的例子）<br>首先，创建二者的共同接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其次，创建实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is mailsender!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is sms sender!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，建工厂类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">(String type)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"mail\"</span>.equals(type)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"sms\"</span>.equals(type)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请输入正确的类型!\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来测试下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        SendFactory factory = <span class=\"keyword\">new</span> SendFactory();  </span><br><span class=\"line\">        Sender sender = factory.produce(<span class=\"string\">\"sms\"</span>);  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>this is sms sender!</code></p>\n<h3 id=\"2-多个工厂方法模式\"><a href=\"#2-多个工厂方法模式\" class=\"headerlink\" title=\"2. 多个工厂方法模式\"></a>2. 多个工厂方法模式</h3><p>  是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创<br>建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：<br><img src=\"/images/post_images/20171224_Factory.png\" alt=\"\"></p>\n<p>将上面的代码做下修改，改动下SendFactory类就行，如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produceMail</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produceSms</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        SendFactory factory = <span class=\"keyword\">new</span> SendFactory();  </span><br><span class=\"line\">        Sender sender = factory.produceMail();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<code>this is mailsender!</code></p>\n<h3 id=\"3-静态工厂方法模式\"><a href=\"#3-静态工厂方法模式\" class=\"headerlink\" title=\"3. 静态工厂方法模式\"></a>3. 静态工厂方法模式</h3><p>  将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sender <span class=\"title\">produceMail</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sender <span class=\"title\">produceSms</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;      </span><br><span class=\"line\">        Sender sender = SendFactory.produceMail();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<code>this is mailsender!</code></p>\n<p>总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工<br>厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，<br>第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂<br>方法模式。</p>\n<h2 id=\"2-抽象工厂模式（Abstract-Factory）\"><a href=\"#2-抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"2. 抽象工厂模式（Abstract Factory）\"></a>2. 抽象工厂模式（Abstract Factory）</h2><p>  工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工<br>厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到<br>抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不<br>需要修改之前的代码。因为抽象工厂不太好理解，我们先看看图，然后就和代码，就比较容易理解<br>。<br><img src=\"/images/post_images/20171224_Factory2.png\" alt=\"\"></p>\n<p>请看例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is mailsender!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个工厂类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendMailFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendSmsFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span></span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在提供一个接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Provider</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Provider provider = <span class=\"keyword\">new</span> SendMailFactory();  </span><br><span class=\"line\">        Sender sender = provider.produce();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实<br>现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做<br>，拓展性较好！</p>\n<h2 id=\"3-单例模式（Singleton）\"><a href=\"#3-单例模式（Singleton）\" class=\"headerlink\" title=\"3. 单例模式（Singleton）\"></a>3. 单例模式（Singleton）</h2><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该<br>对象只有一个实例存在。这样的模式有几个好处：</p>\n<ol>\n<li>某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</li>\n<li>省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</li>\n<li>有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了<br>。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能<br>保证核心交易服务器独立控制整个流程。</li>\n</ol>\n<p>首先我们写一个简单的单例类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 私有构造方法，防止被实例化 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 静态工程方法，创建实例 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个类可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境<br>下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字<br>，如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调]<br>用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不<br>需要了，所以，这个地方需要改进。我们改成下面这个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (instance) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要<br>加锁的，只有在instance为null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样<br>的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是分开进行的，<br>也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先<br>后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，然后直接赋值给instance成员，<br>然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：<br>a&gt;A、B线程同时进入了第一个if判断<br>b&gt;A首先进入synchronized块，由于instance为null，所以它执行instance = new<br>Singleton();<br>c&gt;由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值<br>给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。<br>d&gt;B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将<br>结果返回给调用该方法的程序。<br>e&gt;此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。<br>所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是<br>在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFactory</span></span>&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();           </span><br><span class=\"line\">    &#125;           </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFactory.instance;           </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时<br>候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们<br>保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担<br>心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。<br>这样我们暂时总结一个完美的单例模式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 私有构造方法，防止被实例化 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 此处使用一个内部类来维护单例 */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFactory</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取实例 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFactory.instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> getInstance();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以<br>说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。也<br>有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开<br>，单独为创建加synchronized关键字，也是可以的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTest instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTest</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncInit</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTest <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            syncInit();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。</p>\n<font color=\"red\">补充：采用”影子实例”的办法为单例对象的属性同步更新</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTest instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector properties = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Vector <span class=\"title\">getProperties</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTest</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncInit</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTest <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            syncInit();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateProperties</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        SingletonTest shadow = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        properties = shadow.getProperties();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过单例模式的学习告诉我们：</p>\n<ol>\n<li>单例模式理解起来简单，但是具体实现起来还是有一定的难度。</li>\n<li>synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁<br>的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。</li>\n</ol>\n<p>到这儿，单例模式基本已经讲完了，结尾处，笔者突然想到另一个问题，就是采用类的静态方法，<br>实现单例模式的效果，也是可行的，此处二者有什么不同？<br>首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不<br>允许有static修饰的方法，所以即使实现了也是非静态的）<br>其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些<br>类比较庞大，所以延迟加载有助于提升性能。<br>再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。<br>最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你<br>可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二<br>者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实<br>现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就<br>出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用<br>不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好<br>的解决问题！</p>\n<h2 id=\"4-建造者模式-Builder\"><a href=\"#4-建造者模式-Builder\" class=\"headerlink\" title=\"4. 建造者模式(Builder)\"></a>4. 建造者模式(Builder)</h2><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创<br>建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式<br>和最后的Test结合起来得到的。我们看一下代码：<br>还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Sender&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Sender&gt;();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceMailSender</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++)&#123;  </span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> MailSender());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceSmsSender</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++)&#123;  </span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> SmsSender());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Builder builder = <span class=\"keyword\">new</span> Builder();  </span><br><span class=\"line\">        builder.produceMailSender(<span class=\"number\">10</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与<br>工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个<br>部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p>\n<h3 id=\"5-原型模式-Prototype\"><a href=\"#5-原型模式-Prototype\" class=\"headerlink\" title=\"5. 原型模式(Prototype)\"></a>5. 原型模式(Prototype)</h3><p>  原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是<br>将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象<br>的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class=\"line\">        Prototype proto = (Prototype) <span class=\"keyword\">super</span>.clone();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> proto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意<br>的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB<br>，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而<br>在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地<br>方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对<br>象深、浅复制的概念：</p>\n<ul>\n<li>浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对<br>象所指向的。</li>\n<li>深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，<br>就是深复制进行了完全彻底的复制，而浅复制不彻底。此处，写一个深浅复制的例子：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SerializableObject obj;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 浅复制 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class=\"line\">        Prototype proto = (Prototype) <span class=\"keyword\">super</span>.clone();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> proto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 深复制 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deepClone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 写入当前对象的二进制流 */</span>  </span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();  </span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);  </span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 读出二进制流产生的新对象 */</span>  </span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(bos.toByteArray());  </span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bis);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ois.readObject();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getString</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setString</span><span class=\"params\">(String string)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerializableObject <span class=\"title\">getObj</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObj</span><span class=\"params\">(SerializableObject obj)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerializableObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<h1 id=\"设计模式（Design-Patterns）\"><a href=\"#设计模式（Design-Patterns）\" class=\"headerlink\" title=\"设计模式（Design Patterns）\"></a>设计模式（Design Patterns）</h1><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验<br>的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问<br>，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的<br>基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式<br>在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及<br>该问题的核心解决方案，这也是它能被广泛应用的原因</p>\n<h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">创建型模式5种</th>\n<th style=\"text-align:center\">结构型模式7种</th>\n<th style=\"text-align:center\">行为型模式11种</th>\n<th style=\"text-align:center\">其他(2种)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">工厂方法模式</td>\n<td style=\"text-align:center\">适配器模式</td>\n<td style=\"text-align:center\">策略模式</td>\n<td style=\"text-align:center\">并发型模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">抽象工厂模式</td>\n<td style=\"text-align:center\">装饰器模式</td>\n<td style=\"text-align:center\">策略模式</td>\n<td style=\"text-align:center\">线程池模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">单例模式</td>\n<td style=\"text-align:center\">代理模式</td>\n<td style=\"text-align:center\">模板方法模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">建造者模式</td>\n<td style=\"text-align:center\">桥接模式</td>\n<td style=\"text-align:center\">观察者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">原型模式</td>\n<td style=\"text-align:center\">组合模式</td>\n<td style=\"text-align:center\">迭代子模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">享元模式</td>\n<td style=\"text-align:center\">责任链模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">命令模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">备忘录模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">状态模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">访问者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">中介者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">解释器模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>用一个图片来整体描述一下：<br><img src=\"/images/post_images/20171223_Design_Patterns_1.jpg\" alt=\"\"></p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><ol>\n<li>开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实<br>现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这<br>样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</li>\n<li>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换<br>原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可<br>以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础<br>上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。<br>而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规<br>范。—— From Baidu 百科</li>\n<li>依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</li>\n<li>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意<br>思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维<br>护方便。所以上文中多次出现：降低依赖，降低耦合。</li>\n<li>迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功<br>能模块相对独立。</li>\n<li>合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式，而不是使用继承。</li>\n</ol>\n<h1 id=\"Java的23中设计模式\"><a href=\"#Java的23中设计模式\" class=\"headerlink\" title=\"Java的23中设计模式\"></a>Java的23中设计模式</h1><p>从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设<br>计模式的原则进行分析。</p>\n<h2 id=\"1-工厂方法模式-Factory-Method\"><a href=\"#1-工厂方法模式-Factory-Method\" class=\"headerlink\" title=\"1. 工厂方法模式(Factory Method)\"></a>1. 工厂方法模式(Factory Method)</h2><p>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：<br><img src=\"/images/post_images/20171223FactoryMethod.jpg\" alt=\"\"></p>\n<p>举例如下：（我们举一个发送邮件和短信的例子）<br>首先，创建二者的共同接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其次，创建实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is mailsender!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is sms sender!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，建工厂类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">(String type)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"mail\"</span>.equals(type)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"sms\"</span>.equals(type)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请输入正确的类型!\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来测试下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        SendFactory factory = <span class=\"keyword\">new</span> SendFactory();  </span><br><span class=\"line\">        Sender sender = factory.produce(<span class=\"string\">\"sms\"</span>);  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>this is sms sender!</code></p>\n<h3 id=\"2-多个工厂方法模式\"><a href=\"#2-多个工厂方法模式\" class=\"headerlink\" title=\"2. 多个工厂方法模式\"></a>2. 多个工厂方法模式</h3><p>  是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创<br>建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：<br><img src=\"/images/post_images/20171224_Factory.png\" alt=\"\"></p>\n<p>将上面的代码做下修改，改动下SendFactory类就行，如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produceMail</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produceSms</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        SendFactory factory = <span class=\"keyword\">new</span> SendFactory();  </span><br><span class=\"line\">        Sender sender = factory.produceMail();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<code>this is mailsender!</code></p>\n<h3 id=\"3-静态工厂方法模式\"><a href=\"#3-静态工厂方法模式\" class=\"headerlink\" title=\"3. 静态工厂方法模式\"></a>3. 静态工厂方法模式</h3><p>  将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sender <span class=\"title\">produceMail</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sender <span class=\"title\">produceSms</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;      </span><br><span class=\"line\">        Sender sender = SendFactory.produceMail();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<code>this is mailsender!</code></p>\n<p>总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工<br>厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，<br>第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂<br>方法模式。</p>\n<h2 id=\"2-抽象工厂模式（Abstract-Factory）\"><a href=\"#2-抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"2. 抽象工厂模式（Abstract Factory）\"></a>2. 抽象工厂模式（Abstract Factory）</h2><p>  工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工<br>厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到<br>抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不<br>需要修改之前的代码。因为抽象工厂不太好理解，我们先看看图，然后就和代码，就比较容易理解<br>。<br><img src=\"/images/post_images/20171224_Factory2.png\" alt=\"\"></p>\n<p>请看例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is mailsender!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个工厂类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendMailFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendSmsFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span></span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在提供一个接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Provider</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Provider provider = <span class=\"keyword\">new</span> SendMailFactory();  </span><br><span class=\"line\">        Sender sender = provider.produce();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实<br>现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做<br>，拓展性较好！</p>\n<h2 id=\"3-单例模式（Singleton）\"><a href=\"#3-单例模式（Singleton）\" class=\"headerlink\" title=\"3. 单例模式（Singleton）\"></a>3. 单例模式（Singleton）</h2><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该<br>对象只有一个实例存在。这样的模式有几个好处：</p>\n<ol>\n<li>某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</li>\n<li>省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</li>\n<li>有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了<br>。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能<br>保证核心交易服务器独立控制整个流程。</li>\n</ol>\n<p>首先我们写一个简单的单例类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 私有构造方法，防止被实例化 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 静态工程方法，创建实例 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个类可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境<br>下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字<br>，如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调]<br>用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不<br>需要了，所以，这个地方需要改进。我们改成下面这个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (instance) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要<br>加锁的，只有在instance为null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样<br>的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是分开进行的，<br>也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先<br>后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，然后直接赋值给instance成员，<br>然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：<br>a&gt;A、B线程同时进入了第一个if判断<br>b&gt;A首先进入synchronized块，由于instance为null，所以它执行instance = new<br>Singleton();<br>c&gt;由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值<br>给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。<br>d&gt;B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将<br>结果返回给调用该方法的程序。<br>e&gt;此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。<br>所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是<br>在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFactory</span></span>&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();           </span><br><span class=\"line\">    &#125;           </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFactory.instance;           </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时<br>候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们<br>保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担<br>心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。<br>这样我们暂时总结一个完美的单例模式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 私有构造方法，防止被实例化 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 此处使用一个内部类来维护单例 */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFactory</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取实例 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFactory.instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> getInstance();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以<br>说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。也<br>有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开<br>，单独为创建加synchronized关键字，也是可以的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTest instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTest</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncInit</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTest <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            syncInit();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。</p>\n<font color=\"red\">补充：采用”影子实例”的办法为单例对象的属性同步更新</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTest instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector properties = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Vector <span class=\"title\">getProperties</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTest</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncInit</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTest <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            syncInit();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateProperties</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        SingletonTest shadow = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        properties = shadow.getProperties();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过单例模式的学习告诉我们：</p>\n<ol>\n<li>单例模式理解起来简单，但是具体实现起来还是有一定的难度。</li>\n<li>synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁<br>的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。</li>\n</ol>\n<p>到这儿，单例模式基本已经讲完了，结尾处，笔者突然想到另一个问题，就是采用类的静态方法，<br>实现单例模式的效果，也是可行的，此处二者有什么不同？<br>首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不<br>允许有static修饰的方法，所以即使实现了也是非静态的）<br>其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些<br>类比较庞大，所以延迟加载有助于提升性能。<br>再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。<br>最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你<br>可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二<br>者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实<br>现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就<br>出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用<br>不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好<br>的解决问题！</p>\n<h2 id=\"4-建造者模式-Builder\"><a href=\"#4-建造者模式-Builder\" class=\"headerlink\" title=\"4. 建造者模式(Builder)\"></a>4. 建造者模式(Builder)</h2><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创<br>建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式<br>和最后的Test结合起来得到的。我们看一下代码：<br>还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Sender&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Sender&gt;();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceMailSender</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++)&#123;  </span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> MailSender());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceSmsSender</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++)&#123;  </span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> SmsSender());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Builder builder = <span class=\"keyword\">new</span> Builder();  </span><br><span class=\"line\">        builder.produceMailSender(<span class=\"number\">10</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与<br>工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个<br>部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p>\n<h3 id=\"5-原型模式-Prototype\"><a href=\"#5-原型模式-Prototype\" class=\"headerlink\" title=\"5. 原型模式(Prototype)\"></a>5. 原型模式(Prototype)</h3><p>  原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是<br>将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象<br>的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class=\"line\">        Prototype proto = (Prototype) <span class=\"keyword\">super</span>.clone();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> proto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意<br>的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB<br>，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而<br>在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地<br>方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对<br>象深、浅复制的概念：</p>\n<ul>\n<li>浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对<br>象所指向的。</li>\n<li>深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，<br>就是深复制进行了完全彻底的复制，而浅复制不彻底。此处，写一个深浅复制的例子：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SerializableObject obj;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 浅复制 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class=\"line\">        Prototype proto = (Prototype) <span class=\"keyword\">super</span>.clone();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> proto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 深复制 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deepClone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 写入当前对象的二进制流 */</span>  </span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();  </span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);  </span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 读出二进制流产生的新对象 */</span>  </span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(bos.toByteArray());  </span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bis);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ois.readObject();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getString</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setString</span><span class=\"params\">(String string)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerializableObject <span class=\"title\">getObj</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObj</span><span class=\"params\">(SerializableObject obj)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerializableObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。</p>\n"},{"title":"记一次Redis连接用尽异常解决","date":"2017-12-01T03:04:30.000Z","type":["Redis","Jedis"],"_content":"\n> 不知怎么突然jedis出现 \"Could not get a resource from the pool\" 错误,错误原因是连接池中的链接用尽\n\n## 解决方法:\n\n```\nredis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  \n    at redis.clients.util.Pool.getResource(Pool.java:22)  \n    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  \n    at java.lang.Thread.run(Thread.java:662)  \nCaused by: java.util.NoSuchElementException: Timeout waiting for idle object  \n    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  \n    at redis.clients.util.Pool.getResource(Pool.java:20)  \n    ... 2 more\n```\n<!--more-->\n### 增加 Jedis 的活动连接数:\n\n\n```\n<bean id=\"jedisPoolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n\t\t<!-- 最大连接数 -->\n\t\t<property name=\"maxTotal\" value=\"300\" />\n\t\t<!-- 最大空闲连接数 -->\n\t\t<property name=\"maxIdle\" value=\"50\" />\n\t\t<!-- 每次释放连接的最大数目 -->\n\t\t<property name=\"numTestsPerEvictionRun\" value=\"1024\" />\n\t\t<!-- 释放连接的扫描间隔（毫秒） -->\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"30000\" />\n\t\t<!-- 连接最小空闲时间 -->\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"1800000\" />\n\t\t<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->\n\t\t<property name=\"softMinEvictableIdleTimeMillis\" value=\"10000\" />\n\t\t<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->\n\t\t<property name=\"maxWaitMillis\" value=\"1500\" />\n\t\t<!-- 在获取连接的时候检查有效性, 默认false -->\n\t\t<property name=\"testOnBorrow\" value=\"true\" />\n\t\t<!-- 在空闲时检查有效性, 默认false -->\n\t\t<property name=\"testWhileIdle\" value=\"true\" />\n\t\t<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->\n\t\t<property name=\"blockWhenExhausted\" value=\"false\" />\n\t</bean>\n```\n### 将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.\n\n- 使用 **jedis.close();** 释放资源后问题解决, 修改前的代码:\n```\npublic String get(String key) {\n     Jedis jedis = jedisPool.getResource();\n     String get = jedis.get(key);\n     return get;\n }\n```\n修改后的代码:\n```\npublic String get(String key) {\n     Jedis jedis = jedisPool.getResource();\n     String get = jedis.get(key);\n     jedis.close();\n     return get;\n }\n```\n","source":"_posts/记一次Redis连接用尽异常解决.md","raw":"---\ntitle: 记一次Redis连接用尽异常解决\ndate: 2017-12-01 11:04:30\ntags:\n  - Redis\n  - Java\n  - Jedis\ncategories:\n  - Exception\n\ntype:\n  - Redis\n  - Jedis\n---\n\n> 不知怎么突然jedis出现 \"Could not get a resource from the pool\" 错误,错误原因是连接池中的链接用尽\n\n## 解决方法:\n\n```\nredis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  \n    at redis.clients.util.Pool.getResource(Pool.java:22)  \n    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  \n    at java.lang.Thread.run(Thread.java:662)  \nCaused by: java.util.NoSuchElementException: Timeout waiting for idle object  \n    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  \n    at redis.clients.util.Pool.getResource(Pool.java:20)  \n    ... 2 more\n```\n<!--more-->\n### 增加 Jedis 的活动连接数:\n\n\n```\n<bean id=\"jedisPoolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n\t\t<!-- 最大连接数 -->\n\t\t<property name=\"maxTotal\" value=\"300\" />\n\t\t<!-- 最大空闲连接数 -->\n\t\t<property name=\"maxIdle\" value=\"50\" />\n\t\t<!-- 每次释放连接的最大数目 -->\n\t\t<property name=\"numTestsPerEvictionRun\" value=\"1024\" />\n\t\t<!-- 释放连接的扫描间隔（毫秒） -->\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"30000\" />\n\t\t<!-- 连接最小空闲时间 -->\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"1800000\" />\n\t\t<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->\n\t\t<property name=\"softMinEvictableIdleTimeMillis\" value=\"10000\" />\n\t\t<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->\n\t\t<property name=\"maxWaitMillis\" value=\"1500\" />\n\t\t<!-- 在获取连接的时候检查有效性, 默认false -->\n\t\t<property name=\"testOnBorrow\" value=\"true\" />\n\t\t<!-- 在空闲时检查有效性, 默认false -->\n\t\t<property name=\"testWhileIdle\" value=\"true\" />\n\t\t<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->\n\t\t<property name=\"blockWhenExhausted\" value=\"false\" />\n\t</bean>\n```\n### 将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.\n\n- 使用 **jedis.close();** 释放资源后问题解决, 修改前的代码:\n```\npublic String get(String key) {\n     Jedis jedis = jedisPool.getResource();\n     String get = jedis.get(key);\n     return get;\n }\n```\n修改后的代码:\n```\npublic String get(String key) {\n     Jedis jedis = jedisPool.getResource();\n     String get = jedis.get(key);\n     jedis.close();\n     return get;\n }\n```\n","slug":"记一次Redis连接用尽异常解决","published":1,"updated":"2017-12-16T15:29:40.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm3jzfl001wfkkxf1mhxzat","content":"<blockquote>\n<p>不知怎么突然jedis出现 “Could not get a resource from the pool” 错误,错误原因是连接池中的链接用尽</p>\n</blockquote>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  </span><br><span class=\"line\">    at redis.clients.util.Pool.getResource(Pool.java:22)  </span><br><span class=\"line\">    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  </span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:662)  </span><br><span class=\"line\">Caused by: java.util.NoSuchElementException: Timeout waiting for idle object  </span><br><span class=\"line\">    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  </span><br><span class=\"line\">    at redis.clients.util.Pool.getResource(Pool.java:20)  </span><br><span class=\"line\">    ... 2 more</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"增加-Jedis-的活动连接数\"><a href=\"#增加-Jedis-的活动连接数\" class=\"headerlink\" title=\"增加 Jedis 的活动连接数:\"></a>增加 Jedis 的活动连接数:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;jedisPoolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 最大连接数 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxTotal&quot; value=&quot;300&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 最大空闲连接数 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxIdle&quot; value=&quot;50&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 每次释放连接的最大数目 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;1024&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;30000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接最小空闲时间 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;1800000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;softMinEvictableIdleTimeMillis&quot; value=&quot;10000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxWaitMillis&quot; value=&quot;1500&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testOnBorrow&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;blockWhenExhausted&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放\"><a href=\"#将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放\" class=\"headerlink\" title=\"将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.\"></a>将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.</h3><ul>\n<li>使用 <strong>jedis.close();</strong> 释放资源后问题解决, 修改前的代码:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String get(String key) &#123;</span><br><span class=\"line\">     Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">     String get = jedis.get(key);</span><br><span class=\"line\">     return get;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改后的代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String get(String key) &#123;</span><br><span class=\"line\">     Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">     String get = jedis.get(key);</span><br><span class=\"line\">     jedis.close();</span><br><span class=\"line\">     return get;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>不知怎么突然jedis出现 “Could not get a resource from the pool” 错误,错误原因是连接池中的链接用尽</p>\n</blockquote>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  </span><br><span class=\"line\">    at redis.clients.util.Pool.getResource(Pool.java:22)  </span><br><span class=\"line\">    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  </span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:662)  </span><br><span class=\"line\">Caused by: java.util.NoSuchElementException: Timeout waiting for idle object  </span><br><span class=\"line\">    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  </span><br><span class=\"line\">    at redis.clients.util.Pool.getResource(Pool.java:20)  </span><br><span class=\"line\">    ... 2 more</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"增加-Jedis-的活动连接数\"><a href=\"#增加-Jedis-的活动连接数\" class=\"headerlink\" title=\"增加 Jedis 的活动连接数:\"></a>增加 Jedis 的活动连接数:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;jedisPoolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 最大连接数 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxTotal&quot; value=&quot;300&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 最大空闲连接数 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxIdle&quot; value=&quot;50&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 每次释放连接的最大数目 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;1024&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;30000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接最小空闲时间 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;1800000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;softMinEvictableIdleTimeMillis&quot; value=&quot;10000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxWaitMillis&quot; value=&quot;1500&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testOnBorrow&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;blockWhenExhausted&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放\"><a href=\"#将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放\" class=\"headerlink\" title=\"将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.\"></a>将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.</h3><ul>\n<li>使用 <strong>jedis.close();</strong> 释放资源后问题解决, 修改前的代码:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String get(String key) &#123;</span><br><span class=\"line\">     Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">     String get = jedis.get(key);</span><br><span class=\"line\">     return get;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改后的代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String get(String key) &#123;</span><br><span class=\"line\">     Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">     String get = jedis.get(key);</span><br><span class=\"line\">     jedis.close();</span><br><span class=\"line\">     return get;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjbm3jz4w0001fkkxfjyoph7y","category_id":"cjbm3jz550003fkkx0gwp2ki0","_id":"cjbm3jz5m000efkkxf4mutm9j"},{"post_id":"cjbm3jz520002fkkxx98frkvu","category_id":"cjbm3jz5f0008fkkxxwkbod7o","_id":"cjbm3jz5z000lfkkxl3zjfyny"},{"post_id":"cjbm3jz590005fkkx0l9p78hd","category_id":"cjbm3jz5m000ffkkxll4tdkd8","_id":"cjbm3jz6e000tfkkxf0806okt"},{"post_id":"cjbm3jz5c0006fkkxwgepzx0e","category_id":"cjbm3jz5m000ffkkxll4tdkd8","_id":"cjbm3jz6i000zfkkxyfg4zcrg"},{"post_id":"cjbm3jz5d0007fkkxdeohlssa","category_id":"cjbm3jz5m000ffkkxll4tdkd8","_id":"cjbm3jz6l0014fkkxjnrs6wm1"},{"post_id":"cjbm3jz5h000bfkkxz0nsv6g6","category_id":"cjbm3jz5m000ffkkxll4tdkd8","_id":"cjbm3jz6q0019fkkxkko7nmq4"},{"post_id":"cjbm3jz5k000dfkkxfh7xwmqj","category_id":"cjbm3jz5m000ffkkxll4tdkd8","_id":"cjbm3jz6r001dfkkxy0bwqoq8"},{"post_id":"cjbm3jz5q000ifkkxtx3unhg2","category_id":"cjbm3jz6p0018fkkx83h4en5q","_id":"cjbm3jz6y001nfkkxyvf91d3z"},{"post_id":"cjbm3jz5q000ifkkxtx3unhg2","category_id":"cjbm3jz6w001kfkkx052card9","_id":"cjbm3jz6y001ofkkx5mmd2dgu"},{"post_id":"cjbm3jz5u000kfkkxhuzspwex","category_id":"cjbm3jz6p0018fkkx83h4en5q","_id":"cjbm3jz6z001qfkkxec94rvoo"},{"post_id":"cjbm3jz5u000kfkkxhuzspwex","category_id":"cjbm3jz6w001kfkkx052card9","_id":"cjbm3jz70001rfkkxzvqhq6ub"},{"post_id":"cjbm3jz69000pfkkxr714zr19","category_id":"cjbm3jz6p0018fkkx83h4en5q","_id":"cjbm3jz70001sfkkxbx5e7t47"},{"post_id":"cjbm3jz69000pfkkxr714zr19","category_id":"cjbm3jz6w001kfkkx052card9","_id":"cjbm3jz71001tfkkxokpqj5n6"},{"post_id":"cjbm3jz6g000wfkkxcdnvpf62","category_id":"cjbm3jz6p0018fkkx83h4en5q","_id":"cjbm3jz71001ufkkxomcjv212"},{"post_id":"cjbm3jz6g000wfkkxcdnvpf62","category_id":"cjbm3jz6w001kfkkx052card9","_id":"cjbm3jz71001vfkkxsd9psxik"},{"post_id":"cjbm3jzfl001wfkkxf1mhxzat","category_id":"cjbm3jz550003fkkx0gwp2ki0","_id":"cjbm3jzfy0021fkkxpt3nau6n"}],"PostTag":[{"post_id":"cjbm3jz5c0006fkkxwgepzx0e","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz5g000afkkx02xr88q8"},{"post_id":"cjbm3jz5d0007fkkxdeohlssa","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz5j000cfkkxrryrpdtt"},{"post_id":"cjbm3jz5h000bfkkxz0nsv6g6","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz5q000hfkkx5iy200p4"},{"post_id":"cjbm3jz4w0001fkkxfjyoph7y","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz5u000jfkkxqjmc4ost"},{"post_id":"cjbm3jz4w0001fkkxfjyoph7y","tag_id":"cjbm3jz5f0009fkkxys5kjt7w","_id":"cjbm3jz62000ofkkxnvaef5i1"},{"post_id":"cjbm3jz5k000dfkkxfh7xwmqj","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz6c000qfkkxpetontbh"},{"post_id":"cjbm3jz520002fkkxx98frkvu","tag_id":"cjbm3jz5n000gfkkxbl84fllg","_id":"cjbm3jz6f000vfkkxhukwdy2p"},{"post_id":"cjbm3jz590005fkkx0l9p78hd","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz6h000xfkkxswfwijrm"},{"post_id":"cjbm3jz6g000wfkkxcdnvpf62","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz6j0010fkkxf0106fnz"},{"post_id":"cjbm3jz6g000wfkkxcdnvpf62","tag_id":"cjbm3jz6f000ufkkxcltoi9jw","_id":"cjbm3jz6k0012fkkxd9ifb9xl"},{"post_id":"cjbm3jz5q000ifkkxtx3unhg2","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz6l0015fkkx9ijayzae"},{"post_id":"cjbm3jz5q000ifkkxtx3unhg2","tag_id":"cjbm3jz6f000ufkkxcltoi9jw","_id":"cjbm3jz6o0017fkkxu9esinkd"},{"post_id":"cjbm3jz5u000kfkkxhuzspwex","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz6q001afkkx3m3vytlh"},{"post_id":"cjbm3jz5u000kfkkxhuzspwex","tag_id":"cjbm3jz6f000ufkkxcltoi9jw","_id":"cjbm3jz6r001cfkkxkk339t08"},{"post_id":"cjbm3jz69000pfkkxr714zr19","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jz6s001efkkx39wi0u9g"},{"post_id":"cjbm3jz69000pfkkxr714zr19","tag_id":"cjbm3jz6f000ufkkxcltoi9jw","_id":"cjbm3jz6u001gfkkxyjp1k0mr"},{"post_id":"cjbm3jz6c000rfkkxoa8vs9in","tag_id":"cjbm3jz6q001bfkkx87h20dtz","_id":"cjbm3jz6u001hfkkxwbxi3430"},{"post_id":"cjbm3jzfl001wfkkxf1mhxzat","tag_id":"cjbm3jzft001zfkkx9edlz4uh","_id":"cjbm3jzg20023fkkxzkrnwx28"},{"post_id":"cjbm3jzfl001wfkkxf1mhxzat","tag_id":"cjbm3jz570004fkkxficc71ks","_id":"cjbm3jzg30024fkkxjy50x6o2"},{"post_id":"cjbm3jzfl001wfkkxf1mhxzat","tag_id":"cjbm3jzg00022fkkxbghahk0n","_id":"cjbm3jzg40025fkkxziye8mpe"}],"Tag":[{"name":"Java","_id":"cjbm3jz570004fkkxficc71ks"},{"name":"FTP","_id":"cjbm3jz5f0009fkkxys5kjt7w"},{"name":"Blog","_id":"cjbm3jz5n000gfkkxbl84fllg"},{"name":"设计模式","_id":"cjbm3jz6f000ufkkxcltoi9jw"},{"name":"Welcome","_id":"cjbm3jz6q001bfkkx87h20dtz"},{"name":"Redis","_id":"cjbm3jzft001zfkkx9edlz4uh"},{"name":"Jedis","_id":"cjbm3jzg00022fkkxbghahk0n"}]}}