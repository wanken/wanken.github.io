{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/head.jpg","path":"images/head.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wave.png","path":"images/wave.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wave1.png","path":"images/wave1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wave_full.png","path":"images/wave_full.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3c55461fd7ebfdd3d61a183baf6957ed474a4a39","modified":1513485623149},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1511847375090},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1511847375091},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1511847375093},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1511847375095},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1511847375096},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1511847375097},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1511847375099},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1511847375100},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1511847375101},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1511847375103},{"_id":"themes/next/README.cn.md","hash":"419b60d064a4ac66565ddeec1be55802acf68c8b","modified":1511847375104},{"_id":"themes/next/README.md","hash":"631d68e9cbced2f11cd976bf883b7d8b08b9b365","modified":1511847375105},{"_id":"themes/next/_config.yml","hash":"717b3ba0079e544cfe9dbf41044bb35152c4b989","modified":1517290129900},{"_id":"themes/next/bower.json","hash":"47471a8f13528dc4052b746db5b4be2375682173","modified":1511847375108},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1511847375109},{"_id":"themes/next/package.json","hash":"39370e2aadf1f9a7c105edff064c6e47682b3932","modified":1511847375229},{"_id":"source/_posts/FTPClient.storFile返回false-解决方法.md","hash":"5cf2dcfe74df868672058863a0d768bd99b1d990","modified":1512972117223},{"_id":"source/_posts/GitHub Pages绑定域名.md","hash":"2408d1a508e4fa365dab64c578e61475abecfff2","modified":1513511729617},{"_id":"source/_posts/JavaReview-day03-基础语法.md","hash":"1791032896352f64c7a1c1eacb7ea896a9c97d95","modified":1516621284084},{"_id":"source/_posts/JavaReview-day04-数组.md","hash":"d43f7ad6b394348c838cd22fc0e2e6ea5b666a70","modified":1516621270632},{"_id":"source/_posts/JavaReview-day06-静态.md","hash":"aca37a9201b325ccf1991a2441e5dd51db7b26be","modified":1516620960173},{"_id":"source/_posts/JavaReview-day07-继承.md","hash":"139d0caafc04ed3ae4d79b28be6b1609fc89c43d","modified":1516620925918},{"_id":"source/_posts/JavaReview-day08-多态.md","hash":"034ec4bebf946d147d73f91d7bc688fd85e0fc0c","modified":1516620918214},{"_id":"source/_posts/JavaReview-day09-内部类.md","hash":"8c621c64e97398cb57b68f424456e5afff6f9586","modified":1516620889576},{"_id":"source/_posts/JavaReview-day10-异常.md","hash":"bf8389099b7e830ed2bb30b8354e5a9c53e3ba8e","modified":1516620868473},{"_id":"source/_posts/JavaReview-day11-线程.md","hash":"3a5e2e97b62e28989845dedd5e5c0d98a9302057","modified":1516620842701},{"_id":"source/_posts/JavaReview-day12-线程通信.md","hash":"45284d72abc0e7539555b49e5824d0709be5b2ea","modified":1516620197773},{"_id":"source/_posts/JavaReview-day13-String.md","hash":"2e17601d1576ca4605c37d2e1743974ba470328c","modified":1517034426518},{"_id":"source/_posts/JavaReview-day14-集合框架[1].md","hash":"02fa3bef5ce9c6c64ba91f779e577b760fc8116e","modified":1517132697950},{"_id":"source/_posts/Javareview-day05-封装.md","hash":"f5bf51017eb48b3c79b700d7464b9357f8c88fae","modified":1516620985730},{"_id":"source/_posts/Java中的23中设计模式-三.md","hash":"94e700fef0061f34a7b27dab963100fa6c6ec923","modified":1516614354893},{"_id":"source/_posts/Java中的23中设计模式-二.md","hash":"34899a186d5984cac3f901c1306164b6e4442ecf","modified":1516620197828},{"_id":"source/_posts/Java中的23中设计模式-四.md","hash":"d191ef58d7886ec81d2ad95a21e3ffa130e10a9d","modified":1516620197808},{"_id":"source/_posts/Java中的23种设计模式-一.md","hash":"bd59b04e0a5fd5d8b146674f1ffdfff728681b6e","modified":1516614354794},{"_id":"source/_posts/Result Maps collection already contains value for xxx.xxx.Mapper.BaseResultMap.md","hash":"463f381fbdd935d3dfc1e5f9044527929e3ee5d5","modified":1514951680061},{"_id":"source/_posts/Struts2-1.md","hash":"915e8c641d756dafe97d7e59be078fc763da0166","modified":1515221940118},{"_id":"source/_posts/hello-world.md","hash":"70bbec37e0054afbe9a9c430c84ca3680ea1d48b","modified":1516616003930},{"_id":"source/_posts/maven管理SSM时xml和properties文件丢失异常.md","hash":"5ff1e99520eb5c79b96ff24723b417a3ef2af638","modified":1514459502537},{"_id":"source/_posts/工具推荐-第一期-AutoHotKey.md","hash":"3741bf638f50f185f4eaafabb6c0b87a753ef511","modified":1517135106731},{"_id":"source/_posts/微信跳一跳高分攻-外-略-挂.md","hash":"f183f2607cf8c899176163db45aac572a1964dce","modified":1514872706790},{"_id":"source/_posts/记一次Redis连接用尽异常解决.md","hash":"e92cf11298a21a1204b1154881255a445db30063","modified":1516614356126},{"_id":"source/categories/index.md","hash":"7a9b86244cd0d64a50e27219c42cb8c6fb80c7d7","modified":1511959410883},{"_id":"source/about/index.md","hash":"ecab55c7793f999f05708d53b45cbfeae5a89fae","modified":1511855313343},{"_id":"source/photos/index.md","hash":"04eeec4254e0d1fb0de9ee34356de3370c7534ae","modified":1517287041545},{"_id":"source/schedule/index.md","hash":"25624e46c4156830d1d7966407b786e9e70041d6","modified":1512992357317},{"_id":"source/tags/index.md","hash":"a46234ad1cc6ffeb68e1bc93119bbc1a1871a6eb","modified":1511855528794},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1511847375111},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1511847375113},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1511847375114},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1511847375116},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1511847375117},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1511847375120},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1511847375122},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1511847375123},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1511847375124},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1511847375125},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1511847375126},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1511847375128},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1511847375129},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1511847375130},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1511847375132},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1511847375135},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1511847375221},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1511847375222},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1511847375223},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1511847375224},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1511847375225},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1511847375226},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1511847375228},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1511847375230},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1511847375232},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1511847375624},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1511847375626},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1511847375625},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375406},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1511847375133},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1511847375134},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1511847375136},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1511847375137},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1511847375138},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1511847375140},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b9f9959225876fb56fb3fba96306d19396e704d4","modified":1511847375142},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1511847375143},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1511847375144},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1511847375145},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1511847375147},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1511847375151},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1511847375152},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1511847375153},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1511847375154},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1511847375166},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1511847375167},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1511847375174},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1511847375204},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1511847375205},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1511847375207},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1511847375208},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1511847375209},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1511847375210},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1511847375211},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1511847375234},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1511847375236},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1511847375237},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1511847375238},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1511847375240},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1511847375241},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1511847375242},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1511847375243},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1511847375244},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1511847375406},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1511847375408},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1511847375409},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1511847375410},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1511847375412},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1511847375413},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1511847375414},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1511847375415},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1511847375417},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1511847375418},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1511847375419},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"282ddfad637413c58d09ba6fc41c84bac1f65d1c","modified":1511846828381},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"a93596e8de150c8a82fa7a59d8212ac0119a81fa","modified":1511847532516},{"_id":"themes/next/source/images/head.jpg","hash":"037c34b9ae8c9b1682c612a392b519e0129f0b42","modified":1511083685478},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511847375423},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1511847375424},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511847375426},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1511847375427},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1511847375428},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1511847375429},{"_id":"themes/next/source/images/wave.png","hash":"405fcb4e8a6819bf6562fcd7d8643179ab5dec93","modified":1511081665000},{"_id":"themes/next/source/images/wave1.png","hash":"8c7683bb139e407faa425647fd9948a2e09d329a","modified":1511081916000},{"_id":"themes/next/source/images/wave_full.png","hash":"832ce139a6c77cb97e705ade7fba6745d328c9bd","modified":1511081916000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375170},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375171},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375361},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375361},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375364},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375401},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511847375404},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1511847375149},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1511847375150},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1511847375156},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1511847375157},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1511847375158},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1511847375160},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1511847375162},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1511847375163},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1511847375164},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1511847375169},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1511847375170},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1511847375172},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1511847375176},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1511847375177},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1511847375179},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1511847375180},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1511847375181},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1511847375182},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1511847375184},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1511847375185},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1511847375186},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1511847375187},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1511847375189},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1511847375190},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1511847375191},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1511847375192},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1511847375193},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1511847375195},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1511847375196},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1511847375198},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1511847375199},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1511847375201},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1511847375202},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1511847375203},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1511847375215},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1511847375217},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1511847375218},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1511847375219},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"9305ac5644191f7539dbabb28f99d93fbe7f3313","modified":1513587099903},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1511847375360},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1511847375363},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1511847375364},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1511847375399},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1511847375400},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1511847375402},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1511847375403},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1511847375432},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1511847375433},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1511847375434},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1511847375435},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1511847375437},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1511847375439},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1511847375440},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1511847375442},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1511847375444},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1511847375446},{"_id":"themes/next/source/js/src/utils.js","hash":"b7ddc240208d57596a67c78a04a11b0f0bdecc97","modified":1511847375447},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1511847375469},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1511847375476},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1511847375478},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1511847375504},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1511847375505},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1511847375507},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1511847375509},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1511847375514},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1511847375516},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1511847375518},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1511847375519},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1511847375521},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1511847375551},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1511847375555},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1511847375557},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1511847375558},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1511847375560},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1511847375562},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1511847375563},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1511847375567},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1511847375569},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1511847375572},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1511847375574},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1511847375575},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1511847375577},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1511847375579},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1511847375581},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1511847375583},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1511847375584},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1511847375586},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1511847375587},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1511847375588},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1511847375590},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1511847375591},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1511847375593},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1511847375594},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1511847375596},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1511847375597},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1511847375599},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1511847375611},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1511847375612},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1511847375619},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1511847375621},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1511847375623},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1511847375553},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1511847375213},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1511847375214},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1511847375247},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1511847375248},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1511847375249},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1511847375251},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1511847375252},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1511847375276},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1511847375317},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1511847375348},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1511847375349},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1511847375351},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1511847375353},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1511847375354},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1511847375355},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1511847375357},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1511847375367},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1511847375369},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1511847375370},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1511847375372},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1511847375375},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1511847375377},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1511847375374},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1511847375378},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1511847375383},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1511847375385},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1511847375386},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1511847375387},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1511847375388},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1511847375391},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1511847375392},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1511847375393},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1511847375395},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"30561ed60fc64f3e4ce85143bdb55faa814743a6","modified":1511847375396},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1511847375397},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1511847375443},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1511847375461},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1511847375464},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1511847375468},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1511847375480},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1511847375482},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1511847375483},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1511847375485},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1511847375486},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1511847375488},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1511847375498},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1511847375501},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1511847375502},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1511847375511},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1511847375512},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1511847375523},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1511847375524},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1511847375526},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1511847375608},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1511847375609},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1511847375463},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1511847375547},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1511847375549},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1511847375616},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1511847375254},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1511847375256},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1511847375257},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1511847375258},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1511847375260},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1511847375261},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1511847375263},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1511847375264},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1511847375266},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1511847375268},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1511847375269},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1511847375271},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1511847375273},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1511847375275},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1511847375278},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1511847375279},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1511847375281},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1511847375283},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1511847375284},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1511847375286},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1511847375287},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1511847375289},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1511847375290},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1511847375292},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1511847375293},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1511847375295},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1511847375296},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1511847375298},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1511847375299},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1511847375301},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1511856075208},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1511847375304},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1511847375306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1511847375307},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1511847375310},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1511847375309},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1511847375312},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1511847375314},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1511847375315},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1511847375318},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1511847375320},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1511847375321},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1511847375324},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1511847375323},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1511847375326},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1511847375327},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1511847375329},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1511847375330},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1511847375332},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1511847375334},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1511847375336},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1511847375337},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1511847375339},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1511847375340},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1511847375342},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1511847375343},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1511847375344},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1511847375346},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1511847375379},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1511847375382},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1511847375390},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1511847375452},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1511847375455},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1511847375456},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1511847375457},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1511847375459},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1511847375489},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1511847375491},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1511847375493},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1511847375494},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1511847375495},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1511847375497},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1511847375531},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1511847375535},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1511847375545},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1511847375475},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1511847375606},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1511847375541},{"_id":"public/atom.xml","hash":"0e9d2a5368a8249a755fa466b772e8f5fee87179","modified":1517291064366},{"_id":"public/search.xml","hash":"46fc301413555cd1b86898e27172e7152dfc9554","modified":1517291064399},{"_id":"public/sitemap.xml","hash":"6956635e359c049facbbdb921e184522058018e7","modified":1517291064400},{"_id":"public/categories/index.html","hash":"16f066a74bd73a160a6e22b0e5497c28e2ef06f8","modified":1517291064406},{"_id":"public/about/index.html","hash":"a20882574075f3936a83dd9d72dec7fde1c6195f","modified":1517291064406},{"_id":"public/photos/index.html","hash":"882116ec8654ff2291fc8f4ada168eee80aa91b4","modified":1517291064406},{"_id":"public/schedule/index.html","hash":"db7103447c9ca1b47e33dcb6e10a753f1bab29d0","modified":1517291064406},{"_id":"public/tags/index.html","hash":"ad14731a89692d1af4a756d93ebbcd48bb49d8ea","modified":1517291064406},{"_id":"public/2018/01/28/工具推荐-第一期-AutoHotKey/index.html","hash":"36df4316425a8cb59d630681f497f5e2934bcc8c","modified":1517291064407},{"_id":"public/2018/01/22/JavaReview-day14-集合框架[1]/index.html","hash":"99ee293bd6ed3f67783d0481da3c1b2b1cee1406","modified":1517291064407},{"_id":"public/2018/01/21/JavaReview-day13-String/index.html","hash":"25cfb86e843e0cb9b14d7b9e4b2d633c78e45f3a","modified":1517291064407},{"_id":"public/2018/01/20/JavaReview-day12-线程通信/index.html","hash":"8c7775e2528b7eb94bc19efed502fa8d45ce618c","modified":1517291064407},{"_id":"public/2018/01/19/JavaReview-day11-线程/index.html","hash":"64d2eac91b6decee71a808d7cdabc8f00aa56f1a","modified":1517291064407},{"_id":"public/2018/01/17/JavaReview-day10-异常/index.html","hash":"63cce9e1be7519505efee96454d3e5ae9a615bac","modified":1517291064407},{"_id":"public/2018/01/08/JavaReview-day09-内部类/index.html","hash":"213345743967eac6c43a11b9b125a874c70de9a9","modified":1517291064407},{"_id":"public/2018/01/06/Struts2-1/index.html","hash":"7e1d8a2da731193e5ea86f1dc5f9044e8cc92148","modified":1517291064407},{"_id":"public/2018/01/02/微信跳一跳高分攻-外-略-挂/index.html","hash":"e67894add0afde5c974c15db626dc966e91e6a78","modified":1517291064407},{"_id":"public/2017/12/29/Result Maps collection already contains value for xxx.xxx.Mapper.BaseResultMap/index.html","hash":"060ae4f9cd5c57132155e9d45f730346ee3deb70","modified":1517291064407},{"_id":"public/2017/12/28/maven管理SSM时xml和properties文件丢失异常/index.html","hash":"d746f5851542f74ccd407b0f233da82b6756b520","modified":1517291064408},{"_id":"public/2017/12/26/JavaReview-day08-多态/index.html","hash":"cb067613d26c4fde5b11670fa17013039d179113","modified":1517291064408},{"_id":"public/2017/12/25/Java中的23中设计模式-四/index.html","hash":"ea51dc4a320efb900d5ba8e1de19140f038afa1c","modified":1517291064408},{"_id":"public/2017/12/25/Java中的23中设计模式-三/index.html","hash":"357bef91e3f4476270da484d6d2d852b43766af1","modified":1517291064408},{"_id":"public/2017/12/25/Java中的23中设计模式-二/index.html","hash":"2bc7f980fb7dac8e1f1ad2a0078401f3c111acd9","modified":1517291064408},{"_id":"public/2017/12/23/Java中的23种设计模式-一/index.html","hash":"8307354e89270494d7f196c395e58bdb4936c5c0","modified":1517291064408},{"_id":"public/2017/12/18/JavaReview-day07-继承/index.html","hash":"21fde035aa696497c138056bf052ddfae24eb0c2","modified":1517291064408},{"_id":"public/2017/12/17/GitHub Pages绑定域名/index.html","hash":"4fc6d0386e4d08d31cbfdf75806a090bcc173978","modified":1517291064408},{"_id":"public/2017/12/04/FTPClient.storFile返回false-解决方法/index.html","hash":"fc67822c1eb9a166613f5d028be5ec88dd1b54a3","modified":1517291064408},{"_id":"public/2017/12/01/记一次Redis连接用尽异常解决/index.html","hash":"559d6ac57a64ef653871a9f53e6f2712ea2f3602","modified":1517291064408},{"_id":"public/2017/11/30/JavaReview-day06-静态/index.html","hash":"e408eebf2d6313705b5dd3eb855bdc29ba594564","modified":1517291064408},{"_id":"public/2017/11/29/Javareview-day05-封装/index.html","hash":"2e5ee9b11f67c656c6518827fe184df0b32e05ae","modified":1517291064409},{"_id":"public/2017/11/28/JavaReview-day04-数组/index.html","hash":"e9f2cc6e0d086dd24c91a9b07f4f4291b5f99b19","modified":1517291064409},{"_id":"public/2017/11/28/JavaReview-day03-基础语法/index.html","hash":"ee73a96e335b0b83b89f215f534ec82e39598453","modified":1517291064409},{"_id":"public/2017/11/17/hello-world/index.html","hash":"df9c2182542f2790b2cf0f7c973bab600b88629a","modified":1517291064409},{"_id":"public/archives/index.html","hash":"288b10ac3b686bfb50b7af5d992ce1c99a4e150c","modified":1517291064409},{"_id":"public/archives/page/2/index.html","hash":"94772c25fb17da0e10decd80e3419a270e5a7078","modified":1517291064410},{"_id":"public/archives/page/3/index.html","hash":"28b26275cf5f8a9f4dccabf5cf68d86557080635","modified":1517291064410},{"_id":"public/archives/2017/index.html","hash":"333d223f3617ce49c2ba0bfaa287ac33eb0e44b1","modified":1517291064410},{"_id":"public/archives/2017/page/2/index.html","hash":"6e02968cc60dfbe90a22ffecaea84bc8a56b944e","modified":1517291064410},{"_id":"public/archives/2017/11/index.html","hash":"2870df77d8d522423c851c26bb727e1f39618cd3","modified":1517291064410},{"_id":"public/archives/2017/12/index.html","hash":"f7773ebb04b8f603d4f46b7ee4e94d18d2bba140","modified":1517291064410},{"_id":"public/archives/2017/12/page/2/index.html","hash":"267b9607eb55d3052b3b185fb3b37610f2e710ab","modified":1517291064410},{"_id":"public/archives/2018/index.html","hash":"8ff85960e6ac24004822614be7e198b307ceddc4","modified":1517291064411},{"_id":"public/archives/2018/01/index.html","hash":"c9417a8b16728bfc5f72d8ca96281b652d698364","modified":1517291064411},{"_id":"public/categories/Blog/index.html","hash":"1b7a9ca0a769e33486e698b4dd747523392ed622","modified":1517291064411},{"_id":"public/categories/JavaReview/index.html","hash":"cc491c3d71eeac7dceaaef7afb4ed5a236afb769","modified":1517291064411},{"_id":"public/categories/JavaReview/page/2/index.html","hash":"5d711d146c7202cdb6b1ed89c450c205e8a778ad","modified":1517291064411},{"_id":"public/categories/Exception/index.html","hash":"d67bd4a99778e08c50df494b6093c9088c606e97","modified":1517291064411},{"_id":"public/categories/Java/index.html","hash":"cfa5136685b4195be590656f9d925aef12340400","modified":1517291064411},{"_id":"public/categories/Java/设计模式/index.html","hash":"025a5625bba946c8a59d8d3813c6075420fac336","modified":1517291064411},{"_id":"public/categories/程序人生/index.html","hash":"7f871c6bca0a96f98204c4f3b6adf39960722d1b","modified":1517291064411},{"_id":"public/categories/Python/index.html","hash":"e0eb165ef3de46f7c52496a87dbc4ac9510023c3","modified":1517291064411},{"_id":"public/categories/Python/外挂/index.html","hash":"807636acdf4e075d8d747afa3942cce9c08eca46","modified":1517291064411},{"_id":"public/index.html","hash":"a3ef8890c1dfe1a745d2fe38cb522b90a4a1425f","modified":1517291064411},{"_id":"public/page/2/index.html","hash":"4b907b86f6d9baa0773846aa1c5de0adb2517e3d","modified":1517291064412},{"_id":"public/page/3/index.html","hash":"a707f1d7b515657b38377ac24d9db60505d94136","modified":1517291064412},{"_id":"public/tags/Blog/index.html","hash":"40afd16e81f34e90d52c03981b3276bfcc8b6876","modified":1517291064412},{"_id":"public/tags/Java/index.html","hash":"28eede21538e393b96c3112de31b1c710de930bf","modified":1517291064412},{"_id":"public/tags/Java/page/2/index.html","hash":"51d58584b3f719f1ab04b81f84b430f135d98172","modified":1517291064412},{"_id":"public/tags/FTP/index.html","hash":"0d1e0c8ee20593bce0f5f08f5f03ad25ba53320b","modified":1517291064412},{"_id":"public/tags/设计模式/index.html","hash":"e0c36c53c68741fd8bf55d1b5ff88e49a47586ef","modified":1517291064412},{"_id":"public/tags/Exception/index.html","hash":"c6efb41b787cae4059ba39b1bc08ce0e36c7ee27","modified":1517291064412},{"_id":"public/tags/Welcome/index.html","hash":"c05e1716ed5084d0bb99d940361ce71cae1de8a2","modified":1517291064412},{"_id":"public/tags/Spring/index.html","hash":"6af596b63a5c3b951bebf57f7e7bfd11c97ce8b9","modified":1517291064412},{"_id":"public/tags/工具推荐/index.html","hash":"7b91986bc91733848a0336e14b8f3caa592e6a7b","modified":1517291064412},{"_id":"public/tags/工作效率/index.html","hash":"2dfed07d229412132e1da728b94370943395df35","modified":1517291064413},{"_id":"public/tags/Android/index.html","hash":"81f4090fe070f8ec2618d717f4dd71163836de6f","modified":1517291064413},{"_id":"public/tags/Python/index.html","hash":"b51e90871b4710a3b1c5738ecdfb0e26e8aadeef","modified":1517291064413},{"_id":"public/tags/Redis/index.html","hash":"ed7552efdca7cd2506fea752f07b7831b2b56cc6","modified":1517291064413},{"_id":"public/tags/Jedis/index.html","hash":"d974693a0a1d40641a942324fbc72e0b6e3d027e","modified":1517291064413}],"Category":[{"name":"Blog","_id":"cjd15m0520002q8kx0f2h7qij"},{"name":"JavaReview","_id":"cjd15m05d0007q8kxg6ykoxix"},{"name":"Exception","_id":"cjd15m05j000dq8kxwt9rdf43"},{"name":"Java","_id":"cjd15m06c001aq8kxa48i29dj"},{"name":"设计模式","parent":"cjd15m06c001aq8kxa48i29dj","_id":"cjd15m06t0020q8kx28p4e39u"},{"name":"程序人生","_id":"cjd15m074002lq8kxnkqm6yo1"},{"name":"Python","_id":"cjd15m0e70031q8kx8ote7l4r"},{"name":"外挂","parent":"cjd15m0e70031q8kx8ote7l4r","_id":"cjd15m0ee0038q8kxi7sjyajg"}],"Data":[],"Page":[{"title":"categories","date":"2017-11-28T07:27:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-11-28 15:27:54\ntype: \"categories\"\n---\n","updated":"2017-11-29T12:43:30.883Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjd15m0e0002yq8kxjkh3jzt5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-11-28T07:48:33.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-11-28 15:48:33\n---\n","updated":"2017-11-28T07:48:33.343Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjd15m0e40030q8kx5nxb457w","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"photos","date":"2018-01-30T04:36:39.000Z","type":"photos","_content":"","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2018-01-30 12:36:39\ntype: photos\n---\n","updated":"2018-01-30T04:37:21.545Z","path":"photos/index.html","comments":1,"layout":"page","_id":"cjd15m0e90033q8kxfsrjebn6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2017-12-11T11:39:17.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2017-12-11 19:39:17\n---\n","updated":"2017-12-11T11:39:17.317Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjd15m0eb0034q8kxv1hx0bk1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-11-28T07:44:28.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-11-28 15:44:28\ntype: \"tags\"\n---\n","updated":"2017-11-28T07:52:08.794Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjd15m0ed0037q8kx27bc5dio","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"GitHub Pages绑定域名","date":"2017-12-17T05:11:03.000Z","type":["Blog"],"_content":"\n本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述\n\n## 购买域名\n如果嫌麻烦可以在[Godaddy](https://www.godaddy.com/) 购买\n也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程\n\n### 选购域名\n  可以在[此页面](https://sg.godaddy.com/zh/domains/domain-name-search)搜索你喜欢的\n域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考[知乎答案](https://www.zhihu.com/question/19610337) 推荐使用`.me`\n\n### 域名解析\n#### 更换域名服务器\n  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用[DNSPot](https://www.dnspod.cn/)\n解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到\nGodaddy 的域名服务器\n![图1](/images/post_images/20171217_DNSPot.jpg)\n![图2](/images/post_images/20171217_GoDaddy_DNS.jpg)\n注意: 在GoDaddy中配置的为\"f1g1ns1.dnspod.net\", 为没有\"f1g1ns1.dnspod.net.\"要去掉最\n后的 `.`\n\n#### GitHub中的域名支持\n  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地\n址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示\n\n现在github的服务器地址为：\n  - 192.30.252.153\n  - 192.30.252.154\n\n## 添加CNAME文件\n在你的博客仓库中下的 `/source` 目录中添加名为 `CNAME`的文件, 在文件中写入你在GoDaddy\n注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!\n","source":"_posts/GitHub Pages绑定域名.md","raw":"---\ntitle: GitHub Pages绑定域名\ndate: 2017-12-17 13:11:03\ncategories:\n  - Blog\ntags:\n  - Blog\ntype:\n  - Blog\n---\n\n本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述\n\n## 购买域名\n如果嫌麻烦可以在[Godaddy](https://www.godaddy.com/) 购买\n也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程\n\n### 选购域名\n  可以在[此页面](https://sg.godaddy.com/zh/domains/domain-name-search)搜索你喜欢的\n域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考[知乎答案](https://www.zhihu.com/question/19610337) 推荐使用`.me`\n\n### 域名解析\n#### 更换域名服务器\n  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用[DNSPot](https://www.dnspod.cn/)\n解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到\nGodaddy 的域名服务器\n![图1](/images/post_images/20171217_DNSPot.jpg)\n![图2](/images/post_images/20171217_GoDaddy_DNS.jpg)\n注意: 在GoDaddy中配置的为\"f1g1ns1.dnspod.net\", 为没有\"f1g1ns1.dnspod.net.\"要去掉最\n后的 `.`\n\n#### GitHub中的域名支持\n  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地\n址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示\n\n现在github的服务器地址为：\n  - 192.30.252.153\n  - 192.30.252.154\n\n## 添加CNAME文件\n在你的博客仓库中下的 `/source` 目录中添加名为 `CNAME`的文件, 在文件中写入你在GoDaddy\n注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!\n","slug":"GitHub Pages绑定域名","published":1,"updated":"2017-12-17T11:55:29.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m04s0000q8kxyt8enpw5","content":"<p>本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>如果嫌麻烦可以在<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">Godaddy</a> 购买<br>也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程</p>\n<h3 id=\"选购域名\"><a href=\"#选购域名\" class=\"headerlink\" title=\"选购域名\"></a>选购域名</h3><p>  可以在<a href=\"https://sg.godaddy.com/zh/domains/domain-name-search\" target=\"_blank\" rel=\"noopener\">此页面</a>搜索你喜欢的<br>域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考<a href=\"https://www.zhihu.com/question/19610337\" target=\"_blank\" rel=\"noopener\">知乎答案</a> 推荐使用<code>.me</code></p>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><h4 id=\"更换域名服务器\"><a href=\"#更换域名服务器\" class=\"headerlink\" title=\"更换域名服务器\"></a>更换域名服务器</h4><p>  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">DNSPot</a><br>解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到<br>Godaddy 的域名服务器<br><img src=\"/images/post_images/20171217_DNSPot.jpg\" alt=\"图1\"><br><img src=\"/images/post_images/20171217_GoDaddy_DNS.jpg\" alt=\"图2\"><br>注意: 在GoDaddy中配置的为”f1g1ns1.dnspod.net”, 为没有”f1g1ns1.dnspod.net.”要去掉最<br>后的 <code>.</code></p>\n<h4 id=\"GitHub中的域名支持\"><a href=\"#GitHub中的域名支持\" class=\"headerlink\" title=\"GitHub中的域名支持\"></a>GitHub中的域名支持</h4><p>  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地<br>址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示</p>\n<p>现在github的服务器地址为：</p>\n<ul>\n<li>192.30.252.153</li>\n<li>192.30.252.154</li>\n</ul>\n<h2 id=\"添加CNAME文件\"><a href=\"#添加CNAME文件\" class=\"headerlink\" title=\"添加CNAME文件\"></a>添加CNAME文件</h2><p>在你的博客仓库中下的 <code>/source</code> 目录中添加名为 <code>CNAME</code>的文件, 在文件中写入你在GoDaddy<br>注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要讲述博客选购和绑定域名, 博客搭建部分不再赘述</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>如果嫌麻烦可以在<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">Godaddy</a> 购买<br>也可以在国内阿里云或腾讯云等购买, 本文主要介绍在 Godaddy 购买并绑定教程</p>\n<h3 id=\"选购域名\"><a href=\"#选购域名\" class=\"headerlink\" title=\"选购域名\"></a>选购域名</h3><p>  可以在<a href=\"https://sg.godaddy.com/zh/domains/domain-name-search\" target=\"_blank\" rel=\"noopener\">此页面</a>搜索你喜欢的<br>域名是否被占用, 如果未被占用, 即可购买, 至于域名后缀选择, 可参考<a href=\"https://www.zhihu.com/question/19610337\" target=\"_blank\" rel=\"noopener\">知乎答案</a> 推荐使用<code>.me</code></p>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><h4 id=\"更换域名服务器\"><a href=\"#更换域名服务器\" class=\"headerlink\" title=\"更换域名服务器\"></a>更换域名服务器</h4><p>  Godaddy 的默认 DNS 解析在国内不是很稳定, 推荐使用<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">DNSPot</a><br>解析域名, 在 DNSPot 注册账户后绑定在Godaddy注册的域名, 然后将图1中的红色区域设置到<br>Godaddy 的域名服务器<br><img src=\"/images/post_images/20171217_DNSPot.jpg\" alt=\"图1\"><br><img src=\"/images/post_images/20171217_GoDaddy_DNS.jpg\" alt=\"图2\"><br>注意: 在GoDaddy中配置的为”f1g1ns1.dnspod.net”, 为没有”f1g1ns1.dnspod.net.”要去掉最<br>后的 <code>.</code></p>\n<h4 id=\"GitHub中的域名支持\"><a href=\"#GitHub中的域名支持\" class=\"headerlink\" title=\"GitHub中的域名支持\"></a>GitHub中的域名支持</h4><p>  GitHub的服务器域名是个固定IP。所以，当我们需要将申请的域名给予一个自己的github.io的地<br>址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。如图2第一条记录所示</p>\n<p>现在github的服务器地址为：</p>\n<ul>\n<li>192.30.252.153</li>\n<li>192.30.252.154</li>\n</ul>\n<h2 id=\"添加CNAME文件\"><a href=\"#添加CNAME文件\" class=\"headerlink\" title=\"添加CNAME文件\"></a>添加CNAME文件</h2><p>在你的博客仓库中下的 <code>/source</code> 目录中添加名为 <code>CNAME</code>的文件, 在文件中写入你在GoDaddy<br>注册的域名, 至此, 所有 GitHub Pages 的域名的工作就完成了, Enjoy you blog!</p>\n"},{"title":"JavaReview-day03-基础语法","date":"2017-11-28T07:04:34.000Z","type":["JavaReview"],"_content":"\n> Java\n\n## 运算符\n\n### 位运算符:\n\n1.\"<<\": 左位移 2.\">>\": 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 << 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.\"<<<\":无符号左移 4.\">>>\":无符号右移\n\n异或(^)可以用于加密 '&', '|', '^'的运算\n\n使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换\n\n三元运算符 三元运算符会改变所运算元素的数据类型\n\n### 语句\n\nif...else:\n\n三元运算符 对比 if...else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if...else 简单, 可以简化 if...else\n\n二. switch 语句:\n\n1) switch可以中可以接收 byte, short, int char 类型的数据;\n\n2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;\n\n3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;\n\n\n#### 结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;\n\n#### 如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,\n  直到遇到 break 或程序结束;\n\n4) if ... else 和 switch 语句的对比:\n\n#### switch 性能比 if...else 更高(if ... else 只能顺序执行)\n\n#### 对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广\n\n##  while 语句\n\n### do..while 和 while 的区别\n\n\n#### do...while 先执行循环体, 再判断条件(循环体至少执行一次);\n#### while 先判断再执行\n\n\n## for语句\n\n格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }\n\n\nfor 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);\n\n\n### for 循环中的变量初始化语句只执行一次\n\n### for 循环中的语句不只是一句,多条语句可用 \",\" 隔开,如下:\n\n```\n  for(int x = 0, y = 0, z = 0; x < 4; x ++, y ++,z ++){\n    System.out.println(x+y+z);\n  }\n```\n\n### for 和 while 的无限循环的表达形式\n\n```\n for:\n  for(;;){\n    System.out.println(\"for无限循环\");\n  }\n```\n### 如果 for 循环的条件不声明, 默认为 true;\n\n### while\n```\nwhile(true){\n  System.out.println(\" while 无限循环\");\n}\n```\n\n## break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下\n\n\n```\n    public void testBreak() {\n      w:\n      for (int x = 1; x < 4; x++) {\n          System.out.println(\"out\\t\");\n          q:\n          for (int m = 0; m < 3; m++){\n              if (m == 2){\n                  break w;\n              }\n              System.out.print(\"in\\t\");\n          }\n      }\n      }\n```\n\n  输出结果为: out    in    in\n\n  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in\n\n\n  2). continue\n    作用:结束本次循环,继续下一次循环\n    # 如下代码可以打印 0~10 以内的 2 的倍数:\n```\n        public void testContinue(){\n            for (int i = 0; i < 11; i ++){\n                if (i%2 == 1){\n                    continue;\n                }\n            System.out.println(i);\n            }\n        }\n```\n\n### 1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下\n```\n        public void testContinue() {\n          w:\n          for (int i = 0; i < 3; i++) {\n            q:\n            for (int k = 0; k < 4; k++) {\n              System.out.println(\"i = \" + i);\n              continue w;\n              }\n          }\n        }\n```\n\n输出结果为:\n    ```\n               i = 0\n               i = 1\n               i = 2\n    ```\n### break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);\n\n### break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内\n\n### 输出等腰三角形\n```\npublic void testTriangle() {\nfor (int x = 1; x <= 5; x++) {\n    for (int y = x; y < 5; y++) {\n      System.out.print(\" \");\n    }\n    for (int z = 0; z < x; z ++ ){\n      System.out.print(\"* \");\n      }\n      System.out.println();\n  }\n\n}\n\n```\n\n  结果如下:\n\n```\n      *\n     * *\n    * * *\n   * * * *\n  * * * * *\n```\n## 重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;\n","source":"_posts/JavaReview-day03-基础语法.md","raw":"---\ntitle: JavaReview-day03-基础语法\ndate: 2017-11-28T15:04:34.000Z\n\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n> Java\n\n## 运算符\n\n### 位运算符:\n\n1.\"<<\": 左位移 2.\">>\": 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 << 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.\"<<<\":无符号左移 4.\">>>\":无符号右移\n\n异或(^)可以用于加密 '&', '|', '^'的运算\n\n使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换\n\n三元运算符 三元运算符会改变所运算元素的数据类型\n\n### 语句\n\nif...else:\n\n三元运算符 对比 if...else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if...else 简单, 可以简化 if...else\n\n二. switch 语句:\n\n1) switch可以中可以接收 byte, short, int char 类型的数据;\n\n2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;\n\n3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;\n\n\n#### 结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;\n\n#### 如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,\n  直到遇到 break 或程序结束;\n\n4) if ... else 和 switch 语句的对比:\n\n#### switch 性能比 if...else 更高(if ... else 只能顺序执行)\n\n#### 对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广\n\n##  while 语句\n\n### do..while 和 while 的区别\n\n\n#### do...while 先执行循环体, 再判断条件(循环体至少执行一次);\n#### while 先判断再执行\n\n\n## for语句\n\n格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }\n\n\nfor 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);\n\n\n### for 循环中的变量初始化语句只执行一次\n\n### for 循环中的语句不只是一句,多条语句可用 \",\" 隔开,如下:\n\n```\n  for(int x = 0, y = 0, z = 0; x < 4; x ++, y ++,z ++){\n    System.out.println(x+y+z);\n  }\n```\n\n### for 和 while 的无限循环的表达形式\n\n```\n for:\n  for(;;){\n    System.out.println(\"for无限循环\");\n  }\n```\n### 如果 for 循环的条件不声明, 默认为 true;\n\n### while\n```\nwhile(true){\n  System.out.println(\" while 无限循环\");\n}\n```\n\n## break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下\n\n\n```\n    public void testBreak() {\n      w:\n      for (int x = 1; x < 4; x++) {\n          System.out.println(\"out\\t\");\n          q:\n          for (int m = 0; m < 3; m++){\n              if (m == 2){\n                  break w;\n              }\n              System.out.print(\"in\\t\");\n          }\n      }\n      }\n```\n\n  输出结果为: out    in    in\n\n  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in\n\n\n  2). continue\n    作用:结束本次循环,继续下一次循环\n    # 如下代码可以打印 0~10 以内的 2 的倍数:\n```\n        public void testContinue(){\n            for (int i = 0; i < 11; i ++){\n                if (i%2 == 1){\n                    continue;\n                }\n            System.out.println(i);\n            }\n        }\n```\n\n### 1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下\n```\n        public void testContinue() {\n          w:\n          for (int i = 0; i < 3; i++) {\n            q:\n            for (int k = 0; k < 4; k++) {\n              System.out.println(\"i = \" + i);\n              continue w;\n              }\n          }\n        }\n```\n\n输出结果为:\n    ```\n               i = 0\n               i = 1\n               i = 2\n    ```\n### break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);\n\n### break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内\n\n### 输出等腰三角形\n```\npublic void testTriangle() {\nfor (int x = 1; x <= 5; x++) {\n    for (int y = x; y < 5; y++) {\n      System.out.print(\" \");\n    }\n    for (int z = 0; z < x; z ++ ){\n      System.out.print(\"* \");\n      }\n      System.out.println();\n  }\n\n}\n\n```\n\n  结果如下:\n\n```\n      *\n     * *\n    * * *\n   * * * *\n  * * * * *\n```\n## 重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;\n","slug":"JavaReview-day03-基础语法","published":1,"updated":"2018-01-22T11:41:24.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m04z0001q8kxfsaxsdsk","content":"<blockquote>\n<p>Java</p>\n</blockquote>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符:\"></a>位运算符:</h3><p>1.”&lt;&lt;”: 左位移 2.”&gt;&gt;”: 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 &lt;&lt; 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.”&lt;&lt;&lt;”:无符号左移 4.”&gt;&gt;&gt;”:无符号右移</p>\n<p>异或(^)可以用于加密 ‘&amp;’, ‘|’, ‘^’的运算</p>\n<p>使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换</p>\n<p>三元运算符 三元运算符会改变所运算元素的数据类型</p>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><p>if…else:</p>\n<p>三元运算符 对比 if…else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if…else 简单, 可以简化 if…else</p>\n<p>二. switch 语句:</p>\n<p>1) switch可以中可以接收 byte, short, int char 类型的数据;</p>\n<p>2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;</p>\n<p>3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;</p>\n<h4 id=\"结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束\"><a href=\"#结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束\" class=\"headerlink\" title=\"结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;\"></a>结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;</h4><h4 id=\"如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句\"><a href=\"#如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句\" class=\"headerlink\" title=\"如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,\"></a>如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,</h4><p>  直到遇到 break 或程序结束;</p>\n<p>4) if … else 和 switch 语句的对比:</p>\n<h4 id=\"switch-性能比-if…else-更高-if-…-else-只能顺序执行\"><a href=\"#switch-性能比-if…else-更高-if-…-else-只能顺序执行\" class=\"headerlink\" title=\"switch 性能比 if…else 更高(if … else 只能顺序执行)\"></a>switch 性能比 if…else 更高(if … else 只能顺序执行)</h4><h4 id=\"对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广\"><a href=\"#对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广\" class=\"headerlink\" title=\"对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广\"></a>对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广</h4><h2 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h2><h3 id=\"do-while-和-while-的区别\"><a href=\"#do-while-和-while-的区别\" class=\"headerlink\" title=\"do..while 和 while 的区别\"></a>do..while 和 while 的区别</h3><h4 id=\"do…while-先执行循环体-再判断条件-循环体至少执行一次\"><a href=\"#do…while-先执行循环体-再判断条件-循环体至少执行一次\" class=\"headerlink\" title=\"do…while 先执行循环体, 再判断条件(循环体至少执行一次);\"></a>do…while 先执行循环体, 再判断条件(循环体至少执行一次);</h4><h4 id=\"while-先判断再执行\"><a href=\"#while-先判断再执行\" class=\"headerlink\" title=\"while 先判断再执行\"></a>while 先判断再执行</h4><h2 id=\"for语句\"><a href=\"#for语句\" class=\"headerlink\" title=\"for语句\"></a>for语句</h2><p>格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }</p>\n<p>for 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);</p>\n<h3 id=\"for-循环中的变量初始化语句只执行一次\"><a href=\"#for-循环中的变量初始化语句只执行一次\" class=\"headerlink\" title=\"for 循环中的变量初始化语句只执行一次\"></a>for 循环中的变量初始化语句只执行一次</h3><h3 id=\"for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下\"><a href=\"#for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下\" class=\"headerlink\" title=\"for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:\"></a>for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int x = 0, y = 0, z = 0; x &lt; 4; x ++, y ++,z ++)&#123;</span><br><span class=\"line\">  System.out.println(x+y+z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for-和-while-的无限循环的表达形式\"><a href=\"#for-和-while-的无限循环的表达形式\" class=\"headerlink\" title=\"for 和 while 的无限循环的表达形式\"></a>for 和 while 的无限循环的表达形式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for:</span><br><span class=\"line\"> for(;;)&#123;</span><br><span class=\"line\">   System.out.println(&quot;for无限循环&quot;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果-for-循环的条件不声明-默认为-true\"><a href=\"#如果-for-循环的条件不声明-默认为-true\" class=\"headerlink\" title=\"如果 for 循环的条件不声明, 默认为 true;\"></a>如果 for 循环的条件不声明, 默认为 true;</h3><h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(true)&#123;</span><br><span class=\"line\">  System.out.println(&quot; while 无限循环&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下\"><a href=\"#break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下\" class=\"headerlink\" title=\"break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下\"></a>break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testBreak() &#123;</span><br><span class=\"line\">  w:</span><br><span class=\"line\">  for (int x = 1; x &lt; 4; x++) &#123;</span><br><span class=\"line\">      System.out.println(&quot;out\\t&quot;);</span><br><span class=\"line\">      q:</span><br><span class=\"line\">      for (int m = 0; m &lt; 3; m++)&#123;</span><br><span class=\"line\">          if (m == 2)&#123;</span><br><span class=\"line\">              break w;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          System.out.print(&quot;in\\t&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>  输出结果为: out    in    in</p>\n<p>  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in</p>\n<p>  2). continue<br>    作用:结束本次循环,继续下一次循环</p>\n<pre><code># 如下代码可以打印 0~10 以内的 2 的倍数:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testContinue()&#123;</span><br><span class=\"line\">    for (int i = 0; i &lt; 11; i ++)&#123;</span><br><span class=\"line\">        if (i%2 == 1)&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下\"><a href=\"#1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下\" class=\"headerlink\" title=\"1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下\"></a>1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testContinue() &#123;</span><br><span class=\"line\">  w:</span><br><span class=\"line\">  for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">    q:</span><br><span class=\"line\">    for (int k = 0; k &lt; 4; k++) &#123;</span><br><span class=\"line\">      System.out.println(&quot;i = &quot; + i);</span><br><span class=\"line\">      continue w;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 0</span><br><span class=\"line\">i = 1</span><br><span class=\"line\">i = 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错\"><a href=\"#break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错\" class=\"headerlink\" title=\"break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);\"></a>break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);</h3><h3 id=\"break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内\"><a href=\"#break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内\" class=\"headerlink\" title=\"break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内\"></a>break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内</h3><h3 id=\"输出等腰三角形\"><a href=\"#输出等腰三角形\" class=\"headerlink\" title=\"输出等腰三角形\"></a>输出等腰三角形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testTriangle() &#123;</span><br><span class=\"line\">for (int x = 1; x &lt;= 5; x++) &#123;</span><br><span class=\"line\">    for (int y = x; y &lt; 5; y++) &#123;</span><br><span class=\"line\">      System.out.print(&quot; &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int z = 0; z &lt; x; z ++ )&#123;</span><br><span class=\"line\">      System.out.print(&quot;* &quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    *</span><br><span class=\"line\">   * *</span><br><span class=\"line\">  * * *</span><br><span class=\"line\"> * * * *</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure>\n<h2 id=\"重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中\"><a href=\"#重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中\" class=\"headerlink\" title=\"重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;\"></a>重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Java</p>\n</blockquote>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符:\"></a>位运算符:</h3><p>1.”&lt;&lt;”: 左位移 2.”&gt;&gt;”: 右位移: 左右为数值的二进制进行左右移动, 其结果等于原值 或 / 2的所以为数的次幂 即 3 &lt;&lt; 3 = 3_ 2的三次幂 = 3 * 8 = 24; 3.”&lt;&lt;&lt;”:无符号左移 4.”&gt;&gt;&gt;”:无符号右移</p>\n<p>异或(^)可以用于加密 ‘&amp;’, ‘|’, ‘^’的运算</p>\n<p>使两个变量互换值 m = 3; n = 8; n = n ^ m; m = n ^ m; n = n ^ m;即可完成值互换而不引用第三方变量完成两个变量的值互换</p>\n<p>三元运算符 三元运算符会改变所运算元素的数据类型</p>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><p>if…else:</p>\n<p>三元运算符 对比 if…else 的优缺点 缺点: 三元运算符必须有结果 优点: 三元运算符比 if…else 简单, 可以简化 if…else</p>\n<p>二. switch 语句:</p>\n<p>1) switch可以中可以接收 byte, short, int char 类型的数据;</p>\n<p>2) jdk1.5 加入对枚举类型的支持, jdk1.7 加入了对 String类型的支持;</p>\n<p>3) switch 的各个 case 之间和 default 没有顺序,先执行第一个 case, 没有匹配的 case 执行default;</p>\n<h4 id=\"结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束\"><a href=\"#结束-switch-语句的两种情况-1-遇到-break-2-执行到-switch-语句结束\" class=\"headerlink\" title=\"结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;\"></a>结束 switch 语句的两种情况: (1).遇到 break; (2). 执行到 switch 语句结束;</h4><h4 id=\"如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句\"><a href=\"#如果匹配的-case-没有对应的-break-那么程序会继续向下执行-运行可以执行的语句\" class=\"headerlink\" title=\"如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,\"></a>如果匹配的 case  没有对应的 break, 那么程序会继续向下执行, 运行可以执行的语句,</h4><p>  直到遇到 break 或程序结束;</p>\n<p>4) if … else 和 switch 语句的对比:</p>\n<h4 id=\"switch-性能比-if…else-更高-if-…-else-只能顺序执行\"><a href=\"#switch-性能比-if…else-更高-if-…-else-只能顺序执行\" class=\"headerlink\" title=\"switch 性能比 if…else 更高(if … else 只能顺序执行)\"></a>switch 性能比 if…else 更高(if … else 只能顺序执行)</h4><h4 id=\"对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广\"><a href=\"#对区间判断可以或对结果为-boolean-类型的判断使用-if-if-的使用范围更广\" class=\"headerlink\" title=\"对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广\"></a>对区间判断可以或对结果为 boolean 类型的判断使用 if, if 的使用范围更广</h4><h2 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h2><h3 id=\"do-while-和-while-的区别\"><a href=\"#do-while-和-while-的区别\" class=\"headerlink\" title=\"do..while 和 while 的区别\"></a>do..while 和 while 的区别</h3><h4 id=\"do…while-先执行循环体-再判断条件-循环体至少执行一次\"><a href=\"#do…while-先执行循环体-再判断条件-循环体至少执行一次\" class=\"headerlink\" title=\"do…while 先执行循环体, 再判断条件(循环体至少执行一次);\"></a>do…while 先执行循环体, 再判断条件(循环体至少执行一次);</h4><h4 id=\"while-先判断再执行\"><a href=\"#while-先判断再执行\" class=\"headerlink\" title=\"while 先判断再执行\"></a>while 先判断再执行</h4><h2 id=\"for语句\"><a href=\"#for语句\" class=\"headerlink\" title=\"for语句\"></a>for语句</h2><p>格式: for(初始化表达式; 循环条件表达式; 循环后表达式){ 执行语句; }</p>\n<p>for 循环中的表达式只要为合法的表达式即可运行(循环表达式要有真或假的计算结果);</p>\n<h3 id=\"for-循环中的变量初始化语句只执行一次\"><a href=\"#for-循环中的变量初始化语句只执行一次\" class=\"headerlink\" title=\"for 循环中的变量初始化语句只执行一次\"></a>for 循环中的变量初始化语句只执行一次</h3><h3 id=\"for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下\"><a href=\"#for-循环中的语句不只是一句-多条语句可用-“-”-隔开-如下\" class=\"headerlink\" title=\"for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:\"></a>for 循环中的语句不只是一句,多条语句可用 “,” 隔开,如下:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int x = 0, y = 0, z = 0; x &lt; 4; x ++, y ++,z ++)&#123;</span><br><span class=\"line\">  System.out.println(x+y+z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for-和-while-的无限循环的表达形式\"><a href=\"#for-和-while-的无限循环的表达形式\" class=\"headerlink\" title=\"for 和 while 的无限循环的表达形式\"></a>for 和 while 的无限循环的表达形式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for:</span><br><span class=\"line\"> for(;;)&#123;</span><br><span class=\"line\">   System.out.println(&quot;for无限循环&quot;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果-for-循环的条件不声明-默认为-true\"><a href=\"#如果-for-循环的条件不声明-默认为-true\" class=\"headerlink\" title=\"如果 for 循环的条件不声明, 默认为 true;\"></a>如果 for 循环的条件不声明, 默认为 true;</h3><h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(true)&#123;</span><br><span class=\"line\">  System.out.println(&quot; while 无限循环&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下\"><a href=\"#break-和-continue-1-break-可以跳出指定循环-只需要将循环命名即可-具体实现如下\" class=\"headerlink\" title=\"break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下\"></a>break 和 continue 1) break 可以跳出指定循环, 只需要将循环命名即可,具体实现如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testBreak() &#123;</span><br><span class=\"line\">  w:</span><br><span class=\"line\">  for (int x = 1; x &lt; 4; x++) &#123;</span><br><span class=\"line\">      System.out.println(&quot;out\\t&quot;);</span><br><span class=\"line\">      q:</span><br><span class=\"line\">      for (int m = 0; m &lt; 3; m++)&#123;</span><br><span class=\"line\">          if (m == 2)&#123;</span><br><span class=\"line\">              break w;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          System.out.print(&quot;in\\t&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>  输出结果为: out    in    in</p>\n<p>  若将 break 后的 w 删掉,结果为: out    in    in    out    in    in    out    in    in</p>\n<p>  2). continue<br>    作用:结束本次循环,继续下一次循环</p>\n<pre><code># 如下代码可以打印 0~10 以内的 2 的倍数:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testContinue()&#123;</span><br><span class=\"line\">    for (int i = 0; i &lt; 11; i ++)&#123;</span><br><span class=\"line\">        if (i%2 == 1)&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下\"><a href=\"#1-continue可以继续指定循环-只需要将循环命名即可-具体实现如下\" class=\"headerlink\" title=\"1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下\"></a>1)  continue可以继续指定循环, 只需要将循环命名即可,具体实现如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testContinue() &#123;</span><br><span class=\"line\">  w:</span><br><span class=\"line\">  for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">    q:</span><br><span class=\"line\">    for (int k = 0; k &lt; 4; k++) &#123;</span><br><span class=\"line\">      System.out.println(&quot;i = &quot; + i);</span><br><span class=\"line\">      continue w;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 0</span><br><span class=\"line\">i = 1</span><br><span class=\"line\">i = 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错\"><a href=\"#break-和-continue语句单独存在时-下面不可以有任何语句-因为执行不到-编译报错\" class=\"headerlink\" title=\"break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);\"></a>break 和 continue语句单独存在时, 下面不可以有任何语句, 因为执行不到(编译报错);</h3><h3 id=\"break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内\"><a href=\"#break-必须在-switch-或-loop-循环-语句内-continue必须在-loop-语句内\" class=\"headerlink\" title=\"break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内\"></a>break 必须在 switch 或 loop(循环)语句内, continue必须在 loop 语句内</h3><h3 id=\"输出等腰三角形\"><a href=\"#输出等腰三角形\" class=\"headerlink\" title=\"输出等腰三角形\"></a>输出等腰三角形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testTriangle() &#123;</span><br><span class=\"line\">for (int x = 1; x &lt;= 5; x++) &#123;</span><br><span class=\"line\">    for (int y = x; y &lt; 5; y++) &#123;</span><br><span class=\"line\">      System.out.print(&quot; &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int z = 0; z &lt; x; z ++ )&#123;</span><br><span class=\"line\">      System.out.print(&quot;* &quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    *</span><br><span class=\"line\">   * *</span><br><span class=\"line\">  * * *</span><br><span class=\"line\"> * * * *</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure>\n<h2 id=\"重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中\"><a href=\"#重载-方法名一致-但参数列表不同的函数为重载-名称相同-参数列表相同-但返回值类型不同的两个函数不是重载函数-不能同时存在于一个类中\" class=\"headerlink\" title=\"重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;\"></a>重载 方法名一致, 但参数列表不同的函数为重载; 名称相同, 参数列表相同, 但返回值类型不同的两个函数不是重载函数, 不能同时存在于一个类中;</h2>"},{"title":"FTP storFile返回false 解决方法","date":"2017-12-04T11:59:29.000Z","type":["Java","FTP"],"_content":"\n[本文参考地址](https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined)\n\n## 错误描述\n\n- 自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false\n\n\n## 解决方法\n\n- 添加以下代码即可\n\n  ```\n    ftpClient.setControlEncoding(\"UTF-8\");\n  ```\n","source":"_posts/FTPClient.storFile返回false-解决方法.md","raw":"---\ntitle: FTP storFile返回false 解决方法\ndate: 2017-12-04T19:59:29.000Z\ntags:\n  - Java\n  - FTP\ncategories:\n  - Exception\ntype:\n  - Java\n  - FTP\n---\n\n[本文参考地址](https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined)\n\n## 错误描述\n\n- 自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false\n\n\n## 解决方法\n\n- 添加以下代码即可\n\n  ```\n    ftpClient.setControlEncoding(\"UTF-8\");\n  ```\n","slug":"FTPClient.storFile返回false-解决方法","published":1,"updated":"2017-12-11T06:01:57.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m0550004q8kxjj37u5yy","content":"<p><a href=\"https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined\" target=\"_blank\" rel=\"noopener\">本文参考地址</a></p>\n<h2 id=\"错误描述\"><a href=\"#错误描述\" class=\"headerlink\" title=\"错误描述\"></a>错误描述</h2><ul>\n<li>自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false</li>\n</ul>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>添加以下代码即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftpClient.setControlEncoding(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/xiangpiaopiao2011/archive/2012/02/28/2371679.html#undefined\" target=\"_blank\" rel=\"noopener\">本文参考地址</a></p>\n<h2 id=\"错误描述\"><a href=\"#错误描述\" class=\"headerlink\" title=\"错误描述\"></a>错误描述</h2><ul>\n<li>自己搭建的FTP服务器总是在执行FTPClient.storFile(); 方法时返回 false</li>\n</ul>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>添加以下代码即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftpClient.setControlEncoding(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"JavaReview-day04-数组","date":"2017-11-28T08:14:34.000Z","type":["JavaReview"],"_content":"\n### 数组\n\n      1. 数据类型分类: 基本数据类型, 引用数据类型\n      2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器\n\n    - 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放;\n    - 堆内存:\n      1. 数组和对象,通过 new 建立的实例都存放在堆内存中;\n      2. 每一个实体都有内存地址值;\n      3. 实体中的变量都有默认的初始化值\n      4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收\n\n### 数组的定义方式\n\n        1. int[] arr = new int[5]; (推荐写法)\n        2. int arr[] = new int[5]; (与第一种意义相同)\n        3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)\n        4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)\n\n#### 数组排序\n##### 选择排序\n\n```java\n        public void selectSort(int[] arr){\n            for(int x = 0; x < arr.length-1; x++){\n                for(int y = x + 1; y < arr.length; y++){\n                    if(arr[x] > arr[y]){\n                        int temp = arr[x];\n                        arr[x] = arr[y];\n                        arr[y] = temp;\n                    }\n                }\n            }\n        }\n```\n> 说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置\n\n##### 冒泡排序\n```java\n        public void bubbleSort(int[] arr){\n            for(int x = 0; x < arr.length; x ++){\n                for(int y = 0; y < arr.length - x - 1; y ++){\n                    if(arr[y] > arr[y + 1]){\n                        int temp = arr[y];\n                        arr[y] = arr[y + 1];\n                        arr[y + 1] = temp;\n\n                    }\n                }\n            }\n        }\n```\n##### 说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置\n##### 使用 java.util包中的 Array.sort(arr); 可以进行排序数组\n\n- 将数组交换的方法进行封装\n```java\n        public void swap(int[] arr, int a, int b){\n            int temp = arr[a];\n            arr[b] = arr[a];\n            arr[b] = temp;\n        }\n```\n##### 使用异或方式实现\n\n```java\n        public void swap1(int arr, int a, int b){\n            arr[b] = arr[b] ^ arr[a];\n            arr[a] = arr[b] ^ arr[a];\n            arr[b] = arr[b] ^ arr[a];\n        }\n```\n\n#### 折半查找\n##### 第一种方式\n```java\n     public int halfSearch (int[] arr, int key){\n       int min = 0;\n       int max = arr.length - 1;\n       int mid = (min + max)/2;\n       while(arr[mid] != key){\n         if(key < arr[mid]){\n           max = mid - 1;\n         }else if(key > arr[mid]){\n           min = mid + 1;\n         }\n         mid = (min + max)/2;\n       }\n       return mid;\n     }\n```\n##### 第二种方式\n```java\n     public int halfSearch2(int arr[], int key){\n       int min = 0;\n       int max = arr.length;\n       while(min <= max){\n          mid = (min + max) >> 1;\n          if(key > arr[mid]){\n            min = mid + 1;\n          }else if(key < arr[mid]){\n            max = mid -1;\n          }else{\n            return mid;\n          }\n          return -1;\n\n       }\n\n     }\n```\n\n\n> 面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;\n\n- 思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入\n\n##### 十进制转二进制\n  ```java\n    public void decimalToBinary() {\n            int num = 8;\n            StringBuffer sb = new StringBuffer();\n            while (num > 0) {\n                sb.append(num % 2);\n                num = num / 2;\n            }\n            System.out.println(sb.reverse());\n        }\n  ```\n\n##### 十进制转十六进制\n - 第一种方式\n\n```java\n  public void decimalToHexadecimal() {\n        int num = 60;\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int x = 0; x < 8; x++) {\n            int temp = num & 15;\n            if (temp > 9) {\n                stringBuffer.append((char) (temp - 10 + 'A'));\n            } else {\n                stringBuffer.append(temp);\n            }\n            num = num >>> 4;\n        }\n        System.out.println(stringBuffer.reverse());\n    }\n```\n**二维数组的定义方法**\n\n```java\nint[][] array = {{1,2},{34,5,7}};\nint[][] array1 = new int[][]{{10,20,30},{40,50},{60}};\nshort[][] array3 = new short[5][8];\nfloat[][] array4;\narray4 = new float[5][5];\n\n```\n","source":"_posts/JavaReview-day04-数组.md","raw":"---\ntitle: JavaReview-day04-数组\ndate: 2017-11-28 16:14:34\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n\n---\n\n### 数组\n\n      1. 数据类型分类: 基本数据类型, 引用数据类型\n      2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器\n\n    - 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放;\n    - 堆内存:\n      1. 数组和对象,通过 new 建立的实例都存放在堆内存中;\n      2. 每一个实体都有内存地址值;\n      3. 实体中的变量都有默认的初始化值\n      4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收\n\n### 数组的定义方式\n\n        1. int[] arr = new int[5]; (推荐写法)\n        2. int arr[] = new int[5]; (与第一种意义相同)\n        3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)\n        4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)\n\n#### 数组排序\n##### 选择排序\n\n```java\n        public void selectSort(int[] arr){\n            for(int x = 0; x < arr.length-1; x++){\n                for(int y = x + 1; y < arr.length; y++){\n                    if(arr[x] > arr[y]){\n                        int temp = arr[x];\n                        arr[x] = arr[y];\n                        arr[y] = temp;\n                    }\n                }\n            }\n        }\n```\n> 说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置\n\n##### 冒泡排序\n```java\n        public void bubbleSort(int[] arr){\n            for(int x = 0; x < arr.length; x ++){\n                for(int y = 0; y < arr.length - x - 1; y ++){\n                    if(arr[y] > arr[y + 1]){\n                        int temp = arr[y];\n                        arr[y] = arr[y + 1];\n                        arr[y + 1] = temp;\n\n                    }\n                }\n            }\n        }\n```\n##### 说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置\n##### 使用 java.util包中的 Array.sort(arr); 可以进行排序数组\n\n- 将数组交换的方法进行封装\n```java\n        public void swap(int[] arr, int a, int b){\n            int temp = arr[a];\n            arr[b] = arr[a];\n            arr[b] = temp;\n        }\n```\n##### 使用异或方式实现\n\n```java\n        public void swap1(int arr, int a, int b){\n            arr[b] = arr[b] ^ arr[a];\n            arr[a] = arr[b] ^ arr[a];\n            arr[b] = arr[b] ^ arr[a];\n        }\n```\n\n#### 折半查找\n##### 第一种方式\n```java\n     public int halfSearch (int[] arr, int key){\n       int min = 0;\n       int max = arr.length - 1;\n       int mid = (min + max)/2;\n       while(arr[mid] != key){\n         if(key < arr[mid]){\n           max = mid - 1;\n         }else if(key > arr[mid]){\n           min = mid + 1;\n         }\n         mid = (min + max)/2;\n       }\n       return mid;\n     }\n```\n##### 第二种方式\n```java\n     public int halfSearch2(int arr[], int key){\n       int min = 0;\n       int max = arr.length;\n       while(min <= max){\n          mid = (min + max) >> 1;\n          if(key > arr[mid]){\n            min = mid + 1;\n          }else if(key < arr[mid]){\n            max = mid -1;\n          }else{\n            return mid;\n          }\n          return -1;\n\n       }\n\n     }\n```\n\n\n> 面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;\n\n- 思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入\n\n##### 十进制转二进制\n  ```java\n    public void decimalToBinary() {\n            int num = 8;\n            StringBuffer sb = new StringBuffer();\n            while (num > 0) {\n                sb.append(num % 2);\n                num = num / 2;\n            }\n            System.out.println(sb.reverse());\n        }\n  ```\n\n##### 十进制转十六进制\n - 第一种方式\n\n```java\n  public void decimalToHexadecimal() {\n        int num = 60;\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int x = 0; x < 8; x++) {\n            int temp = num & 15;\n            if (temp > 9) {\n                stringBuffer.append((char) (temp - 10 + 'A'));\n            } else {\n                stringBuffer.append(temp);\n            }\n            num = num >>> 4;\n        }\n        System.out.println(stringBuffer.reverse());\n    }\n```\n**二维数组的定义方法**\n\n```java\nint[][] array = {{1,2},{34,5,7}};\nint[][] array1 = new int[][]{{10,20,30},{40,50},{60}};\nshort[][] array3 = new short[5][8];\nfloat[][] array4;\narray4 = new float[5][5];\n\n```\n","slug":"JavaReview-day04-数组","published":1,"updated":"2018-01-22T11:41:10.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m0590005q8kx6j17jr77","content":"<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><pre><code>  1. 数据类型分类: 基本数据类型, 引用数据类型\n  2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器\n\n- 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放;\n- 堆内存:\n  1. 数组和对象,通过 new 建立的实例都存放在堆内存中;\n  2. 每一个实体都有内存地址值;\n  3. 实体中的变量都有默认的初始化值\n  4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收\n</code></pre><h3 id=\"数组的定义方式\"><a href=\"#数组的定义方式\" class=\"headerlink\" title=\"数组的定义方式\"></a>数组的定义方式</h3><pre><code>1. int[] arr = new int[5]; (推荐写法)\n2. int arr[] = new int[5]; (与第一种意义相同)\n3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)\n4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)\n</code></pre><h4 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h4><h5 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length-<span class=\"number\">1</span>; x++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = x + <span class=\"number\">1</span>; y &lt; arr.length; y++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[x] &gt; arr[y])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[x];</span><br><span class=\"line\">                arr[x] = arr[y];</span><br><span class=\"line\">                arr[y] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置</p>\n</blockquote>\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length; x ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; arr.length - x - <span class=\"number\">1</span>; y ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[y] &gt; arr[y + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[y];</span><br><span class=\"line\">                arr[y] = arr[y + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[y + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置\"><a href=\"#说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置\" class=\"headerlink\" title=\"说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置\"></a>说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置</h5><h5 id=\"使用-java-util包中的-Array-sort-arr-可以进行排序数组\"><a href=\"#使用-java-util包中的-Array-sort-arr-可以进行排序数组\" class=\"headerlink\" title=\"使用 java.util包中的 Array.sort(arr); 可以进行排序数组\"></a>使用 java.util包中的 Array.sort(arr); 可以进行排序数组</h5><ul>\n<li>将数组交换的方法进行封装<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = arr[a];</span><br><span class=\"line\">    arr[b] = arr[a];</span><br><span class=\"line\">    arr[b] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"使用异或方式实现\"><a href=\"#使用异或方式实现\" class=\"headerlink\" title=\"使用异或方式实现\"></a>使用异或方式实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap1</span><span class=\"params\">(<span class=\"keyword\">int</span> arr, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    arr[b] = arr[b] ^ arr[a];</span><br><span class=\"line\">    arr[a] = arr[b] ^ arr[a];</span><br><span class=\"line\">    arr[b] = arr[b] ^ arr[a];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h4><h5 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">halfSearch</span> <span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (min + max)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(arr[mid] != key)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">      max = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">      min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mid = (min + max)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">halfSearch2</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(min &lt;= max)&#123;</span><br><span class=\"line\">     mid = (min + max) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">       min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">       max = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;</p>\n</blockquote>\n<ul>\n<li>思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入</li>\n</ul>\n<h5 id=\"十进制转二进制\"><a href=\"#十进制转二进制\" class=\"headerlink\" title=\"十进制转二进制\"></a>十进制转二进制</h5>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decimalToBinary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">8</span>;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sb.append(num % <span class=\"number\">2</span>);</span><br><span class=\"line\">            num = num / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.reverse());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"十进制转十六进制\"><a href=\"#十进制转十六进制\" class=\"headerlink\" title=\"十进制转十六进制\"></a>十进制转十六进制</h5><ul>\n<li>第一种方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decimalToHexadecimal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> num = <span class=\"number\">60</span>;</span><br><span class=\"line\">      StringBuffer stringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">8</span>; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> temp = num &amp; <span class=\"number\">15</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (temp &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">              stringBuffer.append((<span class=\"keyword\">char</span>) (temp - <span class=\"number\">10</span> + <span class=\"string\">'A'</span>));</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              stringBuffer.append(temp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          num = num &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(stringBuffer.reverse());</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>二维数组的定义方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[][] array = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,&#123;<span class=\"number\">34</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;,&#123;<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;,&#123;<span class=\"number\">60</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">short</span>[][] array3 = <span class=\"keyword\">new</span> <span class=\"keyword\">short</span>[<span class=\"number\">5</span>][<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">float</span>[][] array4;</span><br><span class=\"line\">array4 = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><pre><code>  1. 数据类型分类: 基本数据类型, 引用数据类型\n  2. Java 程序在运行时,需要在内存中分配空间, 为了提高运算效率, 又对空间进行了不同区域的划分 因为每一片区域都有特定的处理数据的方式和内存管理方式 共分为五个区域: 栈内存, 堆内存, 方法区, 本地方法区, 寄存器\n\n- 栈内存:用于存储局部变量, 当数据使用完, 所占空间会自动释放;\n- 堆内存:\n  1. 数组和对象,通过 new 建立的实例都存放在堆内存中;\n  2. 每一个实体都有内存地址值;\n  3. 实体中的变量都有默认的初始化值\n  4. 实体不再被使用时, 会在不确定的时间内被垃圾回收器回收\n</code></pre><h3 id=\"数组的定义方式\"><a href=\"#数组的定义方式\" class=\"headerlink\" title=\"数组的定义方式\"></a>数组的定义方式</h3><pre><code>1. int[] arr = new int[5]; (推荐写法)\n2. int arr[] = new int[5]; (与第一种意义相同)\n3. int[] arr = new int[]{1, 2, 3, 4, 5}; (静态初始化方式)\n4. int[] arr = {1, 2, 3, 4, 5} (第三种的简化格式)\n</code></pre><h4 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h4><h5 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length-<span class=\"number\">1</span>; x++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = x + <span class=\"number\">1</span>; y &lt; arr.length; y++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[x] &gt; arr[y])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[x];</span><br><span class=\"line\">                arr[x] = arr[y];</span><br><span class=\"line\">                arr[y] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>说明: 选择排序是用当前元素与其他所有元素比较, 如果符合条件,就交换位置</p>\n</blockquote>\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length; x ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; arr.length - x - <span class=\"number\">1</span>; y ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[y] &gt; arr[y + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[y];</span><br><span class=\"line\">                arr[y] = arr[y + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[y + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置\"><a href=\"#说明-冒泡排序是用相邻的元素进行比较-如果符合条件-就交换位置\" class=\"headerlink\" title=\"说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置\"></a>说明: 冒泡排序是用相邻的元素进行比较, 如果符合条件,就交换位置</h5><h5 id=\"使用-java-util包中的-Array-sort-arr-可以进行排序数组\"><a href=\"#使用-java-util包中的-Array-sort-arr-可以进行排序数组\" class=\"headerlink\" title=\"使用 java.util包中的 Array.sort(arr); 可以进行排序数组\"></a>使用 java.util包中的 Array.sort(arr); 可以进行排序数组</h5><ul>\n<li>将数组交换的方法进行封装<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = arr[a];</span><br><span class=\"line\">    arr[b] = arr[a];</span><br><span class=\"line\">    arr[b] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"使用异或方式实现\"><a href=\"#使用异或方式实现\" class=\"headerlink\" title=\"使用异或方式实现\"></a>使用异或方式实现</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap1</span><span class=\"params\">(<span class=\"keyword\">int</span> arr, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    arr[b] = arr[b] ^ arr[a];</span><br><span class=\"line\">    arr[a] = arr[b] ^ arr[a];</span><br><span class=\"line\">    arr[b] = arr[b] ^ arr[a];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h4><h5 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">halfSearch</span> <span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (min + max)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(arr[mid] != key)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">      max = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">      min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mid = (min + max)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">halfSearch2</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(min &lt;= max)&#123;</span><br><span class=\"line\">     mid = (min + max) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(key &gt; arr[mid])&#123;</span><br><span class=\"line\">       min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">       max = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>面试题:将一个数字插入一个有序数组, 插入后,保证数组有序;</p>\n</blockquote>\n<ul>\n<li>思路: 通过折半查找, 找到所插入数组的下标, 如果数组中存在与插入值相同的值,则在该元素之前插入</li>\n</ul>\n<h5 id=\"十进制转二进制\"><a href=\"#十进制转二进制\" class=\"headerlink\" title=\"十进制转二进制\"></a>十进制转二进制</h5>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decimalToBinary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">8</span>;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sb.append(num % <span class=\"number\">2</span>);</span><br><span class=\"line\">            num = num / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.reverse());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"十进制转十六进制\"><a href=\"#十进制转十六进制\" class=\"headerlink\" title=\"十进制转十六进制\"></a>十进制转十六进制</h5><ul>\n<li>第一种方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decimalToHexadecimal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> num = <span class=\"number\">60</span>;</span><br><span class=\"line\">      StringBuffer stringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">8</span>; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> temp = num &amp; <span class=\"number\">15</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (temp &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">              stringBuffer.append((<span class=\"keyword\">char</span>) (temp - <span class=\"number\">10</span> + <span class=\"string\">'A'</span>));</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              stringBuffer.append(temp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          num = num &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(stringBuffer.reverse());</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>二维数组的定义方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[][] array = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,&#123;<span class=\"number\">34</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;,&#123;<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;,&#123;<span class=\"number\">60</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">short</span>[][] array3 = <span class=\"keyword\">new</span> <span class=\"keyword\">short</span>[<span class=\"number\">5</span>][<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">float</span>[][] array4;</span><br><span class=\"line\">array4 = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaReview-day06-静态","date":"2017-11-30T11:49:08.000Z","type":["JavaReview"],"_content":"\n# Java复习第6天\n\n## static 关键字\n\n### static 的特点:\n\n1. 内存特点\n\n  - 存储位置: data segment(数据区 [也叫 共享区/方法区]);\n  - 可以通过 \"类名.静态成员\" 的方式调用;\n  - 随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长);\n  - 优先于对象存在(加载);\n  - 被所有对象所共享\n  - 只有数据被多个对象共享是才适合定义静态\n  - 可以直接被类名调用\n\n### 静态变量和非静态变量的举例\n\n```java\n    class Person{\n         String name;//成员变量，实例变量\n       static String country = \"CN\";//静态变量。类变量\n       public  void show(){\n\n         System.out.println(Person.country+\":\"+this.name);\n\n        }\n      }\n```\n\n- 静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量\n\n- 静态变量和非静态变量的访问权限的不同\n\n  - static方法只能访问static的变量，没有权限访问非static变量。\n  - static方法中声明的变量可以与非static变量并且是类的属性重名\n  - 方法中声明的变量可以与非static变量并且是类的属性重名\n  - 非static方法中可以方访问static变量。\n  - static方法可以访问static属性\n\n### 实例变量(静态变量)和类变量(非静态变量)的区别\n\n1. 存放位置:\n\n  - 类变量随着类的加载而存在于方法区中;\n  - 实例变量随着对象的建立而存在于堆内存中;\n\n2. 生命周期:\n\n  - 类变量的生命周期最长,随着类的消失而消失;\n  - 实例变量随着对象的消失而消失;\n\n### 静态使用注意事项\n\n- 静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员;\n- 静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this;\n- 主函数(main) 也是静态的;\n\n## main()函数\n\n1. 主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用;\n2. 主函数的定义:\n\n  - public: 代表着该函数访问权限是最大的;\n  - static: 代表主函数随着类的加载就已经存在了;\n  - void: 主函数没有具体的返回值;\n  - main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别;\n  - (String[] args): 函数的参数,参数类型是一个字符串类型的数组;\n\n3. 主函数的格式是固定的: JVM 可以识别的;\n\n4. JVM 在调用主函数时, 传入的参数是 new String[0];\n\n5. 可以在通过命令行运行时使用以下方式向 main 函数中传入参数:\n\n  ```bash\n  $java MainDemo hehe enen oo\n  ```\n\n  PS: 向 main 函数中传入 \"hehe\" \"enen\" \"oo\" 三个参数\n\n```java\n  class MainDemo\n  {\n      public static void main(String[] args) {\n        String[] arr = {\"hehe\", \"haha\", \"oo\", \"enen\"}\n        TestMain.main(arr);\n      }\n  }\n  class TestMain{\n    public static void main(String[] args) {\n      for(int x=0; x<args.length; x++){\n          System.out.println(args[x]);\n      }\n    }\n  }\n```\n\n### 静态的使用条件\n\n#### 可以分为两部分(因为静态修饰的内容有成员变量和函数):\n\n1. 什么时候定义静态变量:\n\n  - 当对象中出现共享的数据时, 该数据被静态所修饰;\n  - 对象中的特有数据要定义成非静态, 存在于堆内存中;\n\n2. 什么时候定义静态方法:\n\n  - 当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的;\n\n### JVM的编译特点\n\n- JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 **class文件**,如果没有, 再查找与其同名的 **java文件**,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错;\n\n### 类加载的特点\n\n- 只有用到类中的内容是, 类才被加载\n\n```java\nclass Demo{\n  System.out.println(\"a\");\n}\nclass TestDemo{\n  public static void main(String[] args) {\n    Demo demo = null;\n  }\n\n}\n```\n\n以上代码执行后没有运行结果, 因为 `TestDemo` 中并没有实际用到 `Demo` 中的内容\n\n## Java 帮助文档\n\n### Java注释常用标签实例\n\n- @see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。\n- @link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用\"label\"作为超链接文本而不用\"See Also\"\n- @docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接\n- @inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中\n- @version 该标签格式如下： @version version-information 其中，\"version-information\"可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了\"-version\"标记，那么久可以从生成的HTML文档中提取出版本信息\n- @author 该标签的格式如下： @author author-information 其中，\"author-information\",望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息\n- @since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本\n- @param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符\n- @throws 异常\n- @deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。\n\n### Java注释的使用顺序\n\n1. @author (classes and interfaces only, required)\n2. @version (classes and interfaces only, required. See footnote 1)\n3. @param (methods and constructors only)\n4. @return (methods only)\n5. @exception (@throws is a synonym added in Javadoc 1.2)\n6. @see\n7. @since\n8. @serial (or @serialField or @serialData)\n9. @deprecated (see How and When To Deprecate APIs)\n\n### 注意\n\n- 一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致;\n- 默认构造函数的权限是随着类的权限变化而变化的;\n\n### 静态代码块\n\n- 格式:\n\n  ```java\n  class{\n    static{\n        //静态代码块中的执行语句\n    }\n  }\n  ```\n\n- 特点: 随着类的加载而执行, **且只执行一次**;\n\n- 作用: 用于给类初始化\n\n### 应用: 类中各个代码块之间的执行顺序\n\n```java\n\n  class StaticCode{\n\n    StaticCode(){\n      System.out.print(\"b \");\n    }\n\n    static{\n      System.out.print(\"a \");\n    }\n\n    {\n      System.out.print(\"c \");\n    }\n\n    StaticCode(int x){\n      System.out.print(\"d \");\n    }\n  }\nclass StaticCodeDemo{\n  public static void main(String[] args) {\n    new StaticCode(4);\n  }\n}\n```\n\n- 以上代码的输出结果是: `a c d`\n\n#### 原因:\n\n  - 静态代码块的作用是给<font color=\"#005792\">**类**</font>初始化的, 随着类的加载而执行, **且只执行一次**;\n  - 构造代码块的作用是给<font color=\"#005792\">**对象(所有对象)**</font>初始化的,对象一建立就运行, 而且优先于构造函数执行;\n  - 构造函数的作用是给<font color=\"#005792\">**对应对象**</font>初始化\n\n参考链接: [Java中普通代码块，构造代码块，静态代码块区别及代码示例](https://www.cnblogs.com/sophine/p/3531282.html)\n\n### 总结\n\n1. 虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化\n2. 只有在调用new方法时才会创建类的实例\n3. 类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法\n4. 类实例销毁时候，首先销毁子类部分，再销毁父类部分\n\n## 对象的初始化过程\n\n```java\nclass class Person\n{\n    private int age;\n    private String name = \"Jack\";\n    private static String country = \"CN\";\n\n    Person(String name, int age){\n      this.name = name;\n      this.age = age;\n    }\n\n    public void speak()\n    {\n        System.out.println(\"name=\" + this.name + \", age=\"+age);\n    }\n}\n\nclass  PersonDemo\n{\n    public static void main(String[] args)\n    {\n        Person p = new Person(\"Tom\", 20);\n    }\n\n}\n```\n以上代码中 `Person p = new Person(\"Tom\", 20)`执行时 Java 所完成的工作:\n1. 在栈内存中创建变量 'p';\n2. 因为 \"new\" 用到了 <font color=\"red\">\"**Person.class**\"</font>, 所以先找到<font color=\"red\">\"**Person.class**\"</font>文件并加载到\n   内存中\n3. 执行该类中的 <font color=\"red\">**static 代码块**</font>, 给 <font color=\"red\">\"**Person 类**\"</font>进行初始化\n4. 在堆内存中开辟空间, 并分配内存地址\n5. 在内存中建立对象的特有属性, 并进行默认初始化\n6. 对属性进行显示初始化\n7. 对对象进行构造代码块初始化\n8. 对对象进行对应的构造函数初始化\n9. 将内存地址赋给栈内存中的 'p' 变量\n\n### 对象调用成员过程\n\n\n\n### 单例设计模式\n\n#### 例子\n\n下面是一个简单的单例设计模式的例子\n```java\n\n  class Single{\n\n    private Single(){}\n    private static Single s = new Single();\n    private static Single getInstance(){\n      return s;\n    }\n  }\n\n  class SingleDemo{\n    public static void main(String[] args) {\n      Single s = Single.getInstance();\n    }\n  }\n```\n#### 饿汉式\n\n```java\n\n  class Single{\n    private Single(){}\n    private static Single single = new Single();\n    public static Single getInstance(){\n      return single;\n    }\n  }\n\n```\n\n### 懒汉式\n\n```java\n\n  class Single{\n    private Single(){}\n    private static Single single = null;\n    public static Single getInstance(){\n      if (single == null) {\n        //如果在此卡住, 则会出现多个对象\n        single = new Single();\n      }\n      return single;\n    }\n\n  }\n\n```\n\n##### 懒汉式和饿汉式的区别\n\n- 饿汉式不管调不调用, 都会先加载对象, 而懒汉式则会在需要时才会进行加载对象\n\n##### 懒汉式最终解决方案\n```java\n  class Single{\n    private Single(){}\n    private static Single single = null;\n    public static Single getInstance(){\n      if (single == null) {\n        synchronized(Single.class){\n          if (single == null) {\n            single = new Single();\n          }\n        }\n\n      }\n      return single;\n    }\n\n  }\n```\n\n##### 注意!\n- 懒汉式加载会有安全性问题: 如果同时被多个对象同时调用, 则会出现多个对象\n- 开发用饿汉式\n","source":"_posts/JavaReview-day06-静态.md","raw":"---\ntitle: JavaReview-day06-静态\ndate: 2017-11-30T19:49:08.000Z\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n# Java复习第6天\n\n## static 关键字\n\n### static 的特点:\n\n1. 内存特点\n\n  - 存储位置: data segment(数据区 [也叫 共享区/方法区]);\n  - 可以通过 \"类名.静态成员\" 的方式调用;\n  - 随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长);\n  - 优先于对象存在(加载);\n  - 被所有对象所共享\n  - 只有数据被多个对象共享是才适合定义静态\n  - 可以直接被类名调用\n\n### 静态变量和非静态变量的举例\n\n```java\n    class Person{\n         String name;//成员变量，实例变量\n       static String country = \"CN\";//静态变量。类变量\n       public  void show(){\n\n         System.out.println(Person.country+\":\"+this.name);\n\n        }\n      }\n```\n\n- 静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量\n\n- 静态变量和非静态变量的访问权限的不同\n\n  - static方法只能访问static的变量，没有权限访问非static变量。\n  - static方法中声明的变量可以与非static变量并且是类的属性重名\n  - 方法中声明的变量可以与非static变量并且是类的属性重名\n  - 非static方法中可以方访问static变量。\n  - static方法可以访问static属性\n\n### 实例变量(静态变量)和类变量(非静态变量)的区别\n\n1. 存放位置:\n\n  - 类变量随着类的加载而存在于方法区中;\n  - 实例变量随着对象的建立而存在于堆内存中;\n\n2. 生命周期:\n\n  - 类变量的生命周期最长,随着类的消失而消失;\n  - 实例变量随着对象的消失而消失;\n\n### 静态使用注意事项\n\n- 静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员;\n- 静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this;\n- 主函数(main) 也是静态的;\n\n## main()函数\n\n1. 主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用;\n2. 主函数的定义:\n\n  - public: 代表着该函数访问权限是最大的;\n  - static: 代表主函数随着类的加载就已经存在了;\n  - void: 主函数没有具体的返回值;\n  - main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别;\n  - (String[] args): 函数的参数,参数类型是一个字符串类型的数组;\n\n3. 主函数的格式是固定的: JVM 可以识别的;\n\n4. JVM 在调用主函数时, 传入的参数是 new String[0];\n\n5. 可以在通过命令行运行时使用以下方式向 main 函数中传入参数:\n\n  ```bash\n  $java MainDemo hehe enen oo\n  ```\n\n  PS: 向 main 函数中传入 \"hehe\" \"enen\" \"oo\" 三个参数\n\n```java\n  class MainDemo\n  {\n      public static void main(String[] args) {\n        String[] arr = {\"hehe\", \"haha\", \"oo\", \"enen\"}\n        TestMain.main(arr);\n      }\n  }\n  class TestMain{\n    public static void main(String[] args) {\n      for(int x=0; x<args.length; x++){\n          System.out.println(args[x]);\n      }\n    }\n  }\n```\n\n### 静态的使用条件\n\n#### 可以分为两部分(因为静态修饰的内容有成员变量和函数):\n\n1. 什么时候定义静态变量:\n\n  - 当对象中出现共享的数据时, 该数据被静态所修饰;\n  - 对象中的特有数据要定义成非静态, 存在于堆内存中;\n\n2. 什么时候定义静态方法:\n\n  - 当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的;\n\n### JVM的编译特点\n\n- JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 **class文件**,如果没有, 再查找与其同名的 **java文件**,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错;\n\n### 类加载的特点\n\n- 只有用到类中的内容是, 类才被加载\n\n```java\nclass Demo{\n  System.out.println(\"a\");\n}\nclass TestDemo{\n  public static void main(String[] args) {\n    Demo demo = null;\n  }\n\n}\n```\n\n以上代码执行后没有运行结果, 因为 `TestDemo` 中并没有实际用到 `Demo` 中的内容\n\n## Java 帮助文档\n\n### Java注释常用标签实例\n\n- @see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。\n- @link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用\"label\"作为超链接文本而不用\"See Also\"\n- @docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接\n- @inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中\n- @version 该标签格式如下： @version version-information 其中，\"version-information\"可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了\"-version\"标记，那么久可以从生成的HTML文档中提取出版本信息\n- @author 该标签的格式如下： @author author-information 其中，\"author-information\",望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息\n- @since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本\n- @param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符\n- @throws 异常\n- @deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。\n\n### Java注释的使用顺序\n\n1. @author (classes and interfaces only, required)\n2. @version (classes and interfaces only, required. See footnote 1)\n3. @param (methods and constructors only)\n4. @return (methods only)\n5. @exception (@throws is a synonym added in Javadoc 1.2)\n6. @see\n7. @since\n8. @serial (or @serialField or @serialData)\n9. @deprecated (see How and When To Deprecate APIs)\n\n### 注意\n\n- 一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致;\n- 默认构造函数的权限是随着类的权限变化而变化的;\n\n### 静态代码块\n\n- 格式:\n\n  ```java\n  class{\n    static{\n        //静态代码块中的执行语句\n    }\n  }\n  ```\n\n- 特点: 随着类的加载而执行, **且只执行一次**;\n\n- 作用: 用于给类初始化\n\n### 应用: 类中各个代码块之间的执行顺序\n\n```java\n\n  class StaticCode{\n\n    StaticCode(){\n      System.out.print(\"b \");\n    }\n\n    static{\n      System.out.print(\"a \");\n    }\n\n    {\n      System.out.print(\"c \");\n    }\n\n    StaticCode(int x){\n      System.out.print(\"d \");\n    }\n  }\nclass StaticCodeDemo{\n  public static void main(String[] args) {\n    new StaticCode(4);\n  }\n}\n```\n\n- 以上代码的输出结果是: `a c d`\n\n#### 原因:\n\n  - 静态代码块的作用是给<font color=\"#005792\">**类**</font>初始化的, 随着类的加载而执行, **且只执行一次**;\n  - 构造代码块的作用是给<font color=\"#005792\">**对象(所有对象)**</font>初始化的,对象一建立就运行, 而且优先于构造函数执行;\n  - 构造函数的作用是给<font color=\"#005792\">**对应对象**</font>初始化\n\n参考链接: [Java中普通代码块，构造代码块，静态代码块区别及代码示例](https://www.cnblogs.com/sophine/p/3531282.html)\n\n### 总结\n\n1. 虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化\n2. 只有在调用new方法时才会创建类的实例\n3. 类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法\n4. 类实例销毁时候，首先销毁子类部分，再销毁父类部分\n\n## 对象的初始化过程\n\n```java\nclass class Person\n{\n    private int age;\n    private String name = \"Jack\";\n    private static String country = \"CN\";\n\n    Person(String name, int age){\n      this.name = name;\n      this.age = age;\n    }\n\n    public void speak()\n    {\n        System.out.println(\"name=\" + this.name + \", age=\"+age);\n    }\n}\n\nclass  PersonDemo\n{\n    public static void main(String[] args)\n    {\n        Person p = new Person(\"Tom\", 20);\n    }\n\n}\n```\n以上代码中 `Person p = new Person(\"Tom\", 20)`执行时 Java 所完成的工作:\n1. 在栈内存中创建变量 'p';\n2. 因为 \"new\" 用到了 <font color=\"red\">\"**Person.class**\"</font>, 所以先找到<font color=\"red\">\"**Person.class**\"</font>文件并加载到\n   内存中\n3. 执行该类中的 <font color=\"red\">**static 代码块**</font>, 给 <font color=\"red\">\"**Person 类**\"</font>进行初始化\n4. 在堆内存中开辟空间, 并分配内存地址\n5. 在内存中建立对象的特有属性, 并进行默认初始化\n6. 对属性进行显示初始化\n7. 对对象进行构造代码块初始化\n8. 对对象进行对应的构造函数初始化\n9. 将内存地址赋给栈内存中的 'p' 变量\n\n### 对象调用成员过程\n\n\n\n### 单例设计模式\n\n#### 例子\n\n下面是一个简单的单例设计模式的例子\n```java\n\n  class Single{\n\n    private Single(){}\n    private static Single s = new Single();\n    private static Single getInstance(){\n      return s;\n    }\n  }\n\n  class SingleDemo{\n    public static void main(String[] args) {\n      Single s = Single.getInstance();\n    }\n  }\n```\n#### 饿汉式\n\n```java\n\n  class Single{\n    private Single(){}\n    private static Single single = new Single();\n    public static Single getInstance(){\n      return single;\n    }\n  }\n\n```\n\n### 懒汉式\n\n```java\n\n  class Single{\n    private Single(){}\n    private static Single single = null;\n    public static Single getInstance(){\n      if (single == null) {\n        //如果在此卡住, 则会出现多个对象\n        single = new Single();\n      }\n      return single;\n    }\n\n  }\n\n```\n\n##### 懒汉式和饿汉式的区别\n\n- 饿汉式不管调不调用, 都会先加载对象, 而懒汉式则会在需要时才会进行加载对象\n\n##### 懒汉式最终解决方案\n```java\n  class Single{\n    private Single(){}\n    private static Single single = null;\n    public static Single getInstance(){\n      if (single == null) {\n        synchronized(Single.class){\n          if (single == null) {\n            single = new Single();\n          }\n        }\n\n      }\n      return single;\n    }\n\n  }\n```\n\n##### 注意!\n- 懒汉式加载会有安全性问题: 如果同时被多个对象同时调用, 则会出现多个对象\n- 开发用饿汉式\n","slug":"JavaReview-day06-静态","published":1,"updated":"2018-01-22T11:36:00.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m05b0006q8kxymzpf3vl","content":"<h1 id=\"Java复习第6天\"><a href=\"#Java复习第6天\" class=\"headerlink\" title=\"Java复习第6天\"></a>Java复习第6天</h1><h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"static-的特点\"><a href=\"#static-的特点\" class=\"headerlink\" title=\"static 的特点:\"></a>static 的特点:</h3><ol>\n<li><p>内存特点</p>\n<ul>\n<li>存储位置: data segment(数据区 [也叫 共享区/方法区]);</li>\n<li>可以通过 “类名.静态成员” 的方式调用;</li>\n<li>随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长);</li>\n<li>优先于对象存在(加载);</li>\n<li>被所有对象所共享</li>\n<li>只有数据被多个对象共享是才适合定义静态</li>\n<li>可以直接被类名调用</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"静态变量和非静态变量的举例\"><a href=\"#静态变量和非静态变量的举例\" class=\"headerlink\" title=\"静态变量和非静态变量的举例\"></a>静态变量和非静态变量的举例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">     String name;<span class=\"comment\">//成员变量，实例变量</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> String country = <span class=\"string\">\"CN\"</span>;<span class=\"comment\">//静态变量。类变量</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(Person.country+<span class=\"string\">\":\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量</p>\n</li>\n<li><p>静态变量和非静态变量的访问权限的不同</p>\n<ul>\n<li>static方法只能访问static的变量，没有权限访问非static变量。</li>\n<li>static方法中声明的变量可以与非static变量并且是类的属性重名</li>\n<li>方法中声明的变量可以与非static变量并且是类的属性重名</li>\n<li>非static方法中可以方访问static变量。</li>\n<li>static方法可以访问static属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实例变量-静态变量-和类变量-非静态变量-的区别\"><a href=\"#实例变量-静态变量-和类变量-非静态变量-的区别\" class=\"headerlink\" title=\"实例变量(静态变量)和类变量(非静态变量)的区别\"></a>实例变量(静态变量)和类变量(非静态变量)的区别</h3><ol>\n<li><p>存放位置:</p>\n<ul>\n<li>类变量随着类的加载而存在于方法区中;</li>\n<li>实例变量随着对象的建立而存在于堆内存中;</li>\n</ul>\n</li>\n<li><p>生命周期:</p>\n<ul>\n<li>类变量的生命周期最长,随着类的消失而消失;</li>\n<li>实例变量随着对象的消失而消失;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"静态使用注意事项\"><a href=\"#静态使用注意事项\" class=\"headerlink\" title=\"静态使用注意事项\"></a>静态使用注意事项</h3><ul>\n<li>静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员;</li>\n<li>静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this;</li>\n<li>主函数(main) 也是静态的;</li>\n</ul>\n<h2 id=\"main-函数\"><a href=\"#main-函数\" class=\"headerlink\" title=\"main()函数\"></a>main()函数</h2><ol>\n<li>主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用;</li>\n<li><p>主函数的定义:</p>\n<ul>\n<li>public: 代表着该函数访问权限是最大的;</li>\n<li>static: 代表主函数随着类的加载就已经存在了;</li>\n<li>void: 主函数没有具体的返回值;</li>\n<li>main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别;</li>\n<li>(String[] args): 函数的参数,参数类型是一个字符串类型的数组;</li>\n</ul>\n</li>\n<li><p>主函数的格式是固定的: JVM 可以识别的;</p>\n</li>\n<li><p>JVM 在调用主函数时, 传入的参数是 new String[0];</p>\n</li>\n<li><p>可以在通过命令行运行时使用以下方式向 main 函数中传入参数:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$java</span> MainDemo hehe enen oo</span><br></pre></td></tr></table></figure>\n<p>PS: 向 main 函数中传入 “hehe” “enen” “oo” 三个参数</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      String[] arr = &#123;<span class=\"string\">\"hehe\"</span>, <span class=\"string\">\"haha\"</span>, <span class=\"string\">\"oo\"</span>, <span class=\"string\">\"enen\"</span>&#125;</span><br><span class=\"line\">      TestMain.main(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMain</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;args.length; x++)&#123;</span><br><span class=\"line\">        System.out.println(args[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态的使用条件\"><a href=\"#静态的使用条件\" class=\"headerlink\" title=\"静态的使用条件\"></a>静态的使用条件</h3><h4 id=\"可以分为两部分-因为静态修饰的内容有成员变量和函数\"><a href=\"#可以分为两部分-因为静态修饰的内容有成员变量和函数\" class=\"headerlink\" title=\"可以分为两部分(因为静态修饰的内容有成员变量和函数):\"></a>可以分为两部分(因为静态修饰的内容有成员变量和函数):</h4><ol>\n<li><p>什么时候定义静态变量:</p>\n<ul>\n<li>当对象中出现共享的数据时, 该数据被静态所修饰;</li>\n<li>对象中的特有数据要定义成非静态, 存在于堆内存中;</li>\n</ul>\n</li>\n<li><p>什么时候定义静态方法:</p>\n<ul>\n<li>当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"JVM的编译特点\"><a href=\"#JVM的编译特点\" class=\"headerlink\" title=\"JVM的编译特点\"></a>JVM的编译特点</h3><ul>\n<li>JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 <strong>class文件</strong>,如果没有, 再查找与其同名的 <strong>java文件</strong>,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错;</li>\n</ul>\n<h3 id=\"类加载的特点\"><a href=\"#类加载的特点\" class=\"headerlink\" title=\"类加载的特点\"></a>类加载的特点</h3><ul>\n<li>只有用到类中的内容是, 类才被加载</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Demo demo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码执行后没有运行结果, 因为 <code>TestDemo</code> 中并没有实际用到 <code>Demo</code> 中的内容</p>\n<h2 id=\"Java-帮助文档\"><a href=\"#Java-帮助文档\" class=\"headerlink\" title=\"Java 帮助文档\"></a>Java 帮助文档</h2><h3 id=\"Java注释常用标签实例\"><a href=\"#Java注释常用标签实例\" class=\"headerlink\" title=\"Java注释常用标签实例\"></a>Java注释常用标签实例</h3><ul>\n<li>@see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。</li>\n<li>@link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用”label”作为超链接文本而不用”See Also”</li>\n<li>@docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接</li>\n<li>@inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中</li>\n<li>@version 该标签格式如下： @version version-information 其中，”version-information”可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了”-version”标记，那么久可以从生成的HTML文档中提取出版本信息</li>\n<li>@author 该标签的格式如下： @author author-information 其中，”author-information”,望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息</li>\n<li>@since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本</li>\n<li>@param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符</li>\n<li>@throws 异常</li>\n<li>@deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。</li>\n</ul>\n<h3 id=\"Java注释的使用顺序\"><a href=\"#Java注释的使用顺序\" class=\"headerlink\" title=\"Java注释的使用顺序\"></a>Java注释的使用顺序</h3><ol>\n<li>@author (classes and interfaces only, required)</li>\n<li>@version (classes and interfaces only, required. See footnote 1)</li>\n<li>@param (methods and constructors only)</li>\n<li>@return (methods only)</li>\n<li>@exception (@throws is a synonym added in Javadoc 1.2)</li>\n<li>@see</li>\n<li>@since</li>\n<li>@serial (or @serialField or @serialData)</li>\n<li>@deprecated (see How and When To Deprecate APIs)</li>\n</ol>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致;</li>\n<li>默认构造函数的权限是随着类的权限变化而变化的;</li>\n</ul>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><ul>\n<li><p>格式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//静态代码块中的执行语句</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特点: 随着类的加载而执行, <strong>且只执行一次</strong>;</p>\n</li>\n<li><p>作用: 用于给类初始化</p>\n</li>\n</ul>\n<h3 id=\"应用-类中各个代码块之间的执行顺序\"><a href=\"#应用-类中各个代码块之间的执行顺序\" class=\"headerlink\" title=\"应用: 类中各个代码块之间的执行顺序\"></a>应用: 类中各个代码块之间的执行顺序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticCode</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    StaticCode()&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"b \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"a \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"c \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    StaticCode(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"d \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticCodeDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> StaticCode(<span class=\"number\">4</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以上代码的输出结果是: <code>a c d</code></li>\n</ul>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因:\"></a>原因:</h4><ul>\n<li>静态代码块的作用是给<font color=\"#005792\"><strong>类</strong></font>初始化的, 随着类的加载而执行, <strong>且只执行一次</strong>;</li>\n<li>构造代码块的作用是给<font color=\"#005792\"><strong>对象(所有对象)</strong></font>初始化的,对象一建立就运行, 而且优先于构造函数执行;</li>\n<li>构造函数的作用是给<font color=\"#005792\"><strong>对应对象</strong></font>初始化</li>\n</ul>\n<p>参考链接: <a href=\"https://www.cnblogs.com/sophine/p/3531282.html\" target=\"_blank\" rel=\"noopener\">Java中普通代码块，构造代码块，静态代码块区别及代码示例</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化</li>\n<li>只有在调用new方法时才会创建类的实例</li>\n<li>类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法</li>\n<li>类实例销毁时候，首先销毁子类部分，再销毁父类部分</li>\n</ol>\n<h2 id=\"对象的初始化过程\"><a href=\"#对象的初始化过程\" class=\"headerlink\" title=\"对象的初始化过程\"></a>对象的初始化过程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = <span class=\"string\">\"Jack\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String country = <span class=\"string\">\"CN\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"name=\"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\", age=\"</span>+age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">PersonDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中 <code>Person p = new Person(&quot;Tom&quot;, 20)</code>执行时 Java 所完成的工作:</p>\n<ol>\n<li>在栈内存中创建变量 ‘p’;</li>\n<li>因为 “new” 用到了 <font color=\"red\">“<strong>Person.class</strong>“</font>, 所以先找到<font color=\"red\">“<strong>Person.class</strong>“</font>文件并加载到<br>内存中</li>\n<li>执行该类中的 <font color=\"red\"><strong>static 代码块</strong></font>, 给 <font color=\"red\">“<strong>Person 类</strong>“</font>进行初始化</li>\n<li>在堆内存中开辟空间, 并分配内存地址</li>\n<li>在内存中建立对象的特有属性, 并进行默认初始化</li>\n<li>对属性进行显示初始化</li>\n<li>对对象进行构造代码块初始化</li>\n<li>对对象进行对应的构造函数初始化</li>\n<li>将内存地址赋给栈内存中的 ‘p’ 变量</li>\n</ol>\n<h3 id=\"对象调用成员过程\"><a href=\"#对象调用成员过程\" class=\"headerlink\" title=\"对象调用成员过程\"></a>对象调用成员过程</h3><h3 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h3><h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>下面是一个简单的单例设计模式的例子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single s = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Single s = Single.getInstance();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果在此卡住, 则会出现多个对象</span></span><br><span class=\"line\">      single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"懒汉式和饿汉式的区别\"><a href=\"#懒汉式和饿汉式的区别\" class=\"headerlink\" title=\"懒汉式和饿汉式的区别\"></a>懒汉式和饿汉式的区别</h5><ul>\n<li>饿汉式不管调不调用, 都会先加载对象, 而懒汉式则会在需要时才会进行加载对象</li>\n</ul>\n<h5 id=\"懒汉式最终解决方案\"><a href=\"#懒汉式最终解决方案\" class=\"headerlink\" title=\"懒汉式最终解决方案\"></a>懒汉式最终解决方案</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span>(Single.class)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意!\"></a>注意!</h5><ul>\n<li>懒汉式加载会有安全性问题: 如果同时被多个对象同时调用, 则会出现多个对象</li>\n<li>开发用饿汉式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java复习第6天\"><a href=\"#Java复习第6天\" class=\"headerlink\" title=\"Java复习第6天\"></a>Java复习第6天</h1><h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"static-的特点\"><a href=\"#static-的特点\" class=\"headerlink\" title=\"static 的特点:\"></a>static 的特点:</h3><ol>\n<li><p>内存特点</p>\n<ul>\n<li>存储位置: data segment(数据区 [也叫 共享区/方法区]);</li>\n<li>可以通过 “类名.静态成员” 的方式调用;</li>\n<li>随着类的加载而加载, 随着类的消失而消失(说明它的生命周期最长);</li>\n<li>优先于对象存在(加载);</li>\n<li>被所有对象所共享</li>\n<li>只有数据被多个对象共享是才适合定义静态</li>\n<li>可以直接被类名调用</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"静态变量和非静态变量的举例\"><a href=\"#静态变量和非静态变量的举例\" class=\"headerlink\" title=\"静态变量和非静态变量的举例\"></a>静态变量和非静态变量的举例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">     String name;<span class=\"comment\">//成员变量，实例变量</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> String country = <span class=\"string\">\"CN\"</span>;<span class=\"comment\">//静态变量。类变量</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(Person.country+<span class=\"string\">\":\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>静态变量又叫类变量或静态成员变量, 非静态变量也叫成员变量或实例变量</p>\n</li>\n<li><p>静态变量和非静态变量的访问权限的不同</p>\n<ul>\n<li>static方法只能访问static的变量，没有权限访问非static变量。</li>\n<li>static方法中声明的变量可以与非static变量并且是类的属性重名</li>\n<li>方法中声明的变量可以与非static变量并且是类的属性重名</li>\n<li>非static方法中可以方访问static变量。</li>\n<li>static方法可以访问static属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实例变量-静态变量-和类变量-非静态变量-的区别\"><a href=\"#实例变量-静态变量-和类变量-非静态变量-的区别\" class=\"headerlink\" title=\"实例变量(静态变量)和类变量(非静态变量)的区别\"></a>实例变量(静态变量)和类变量(非静态变量)的区别</h3><ol>\n<li><p>存放位置:</p>\n<ul>\n<li>类变量随着类的加载而存在于方法区中;</li>\n<li>实例变量随着对象的建立而存在于堆内存中;</li>\n</ul>\n</li>\n<li><p>生命周期:</p>\n<ul>\n<li>类变量的生命周期最长,随着类的消失而消失;</li>\n<li>实例变量随着对象的消失而消失;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"静态使用注意事项\"><a href=\"#静态使用注意事项\" class=\"headerlink\" title=\"静态使用注意事项\"></a>静态使用注意事项</h3><ul>\n<li>静态方法只能访问静态变量成员, 非静态方法既可以访问静态成员也可以访问非静态成员;</li>\n<li>静态方法中不可以定义 this, super 关键字, 因为静态成员优先于对象存在, 所以静态 方法中不可能存在this;</li>\n<li>主函数(main) 也是静态的;</li>\n</ul>\n<h2 id=\"main-函数\"><a href=\"#main-函数\" class=\"headerlink\" title=\"main()函数\"></a>main()函数</h2><ol>\n<li>主函数: 是一个特殊的函数; 作为程序的入口, 可以被 JVM 调用;</li>\n<li><p>主函数的定义:</p>\n<ul>\n<li>public: 代表着该函数访问权限是最大的;</li>\n<li>static: 代表主函数随着类的加载就已经存在了;</li>\n<li>void: 主函数没有具体的返回值;</li>\n<li>main: 不是关键字, 但是是一个特殊的单词, 可以被 JVM 识别;</li>\n<li>(String[] args): 函数的参数,参数类型是一个字符串类型的数组;</li>\n</ul>\n</li>\n<li><p>主函数的格式是固定的: JVM 可以识别的;</p>\n</li>\n<li><p>JVM 在调用主函数时, 传入的参数是 new String[0];</p>\n</li>\n<li><p>可以在通过命令行运行时使用以下方式向 main 函数中传入参数:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$java</span> MainDemo hehe enen oo</span><br></pre></td></tr></table></figure>\n<p>PS: 向 main 函数中传入 “hehe” “enen” “oo” 三个参数</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      String[] arr = &#123;<span class=\"string\">\"hehe\"</span>, <span class=\"string\">\"haha\"</span>, <span class=\"string\">\"oo\"</span>, <span class=\"string\">\"enen\"</span>&#125;</span><br><span class=\"line\">      TestMain.main(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMain</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;args.length; x++)&#123;</span><br><span class=\"line\">        System.out.println(args[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态的使用条件\"><a href=\"#静态的使用条件\" class=\"headerlink\" title=\"静态的使用条件\"></a>静态的使用条件</h3><h4 id=\"可以分为两部分-因为静态修饰的内容有成员变量和函数\"><a href=\"#可以分为两部分-因为静态修饰的内容有成员变量和函数\" class=\"headerlink\" title=\"可以分为两部分(因为静态修饰的内容有成员变量和函数):\"></a>可以分为两部分(因为静态修饰的内容有成员变量和函数):</h4><ol>\n<li><p>什么时候定义静态变量:</p>\n<ul>\n<li>当对象中出现共享的数据时, 该数据被静态所修饰;</li>\n<li>对象中的特有数据要定义成非静态, 存在于堆内存中;</li>\n</ul>\n</li>\n<li><p>什么时候定义静态方法:</p>\n<ul>\n<li>当功能内部没有访问到非静态数据(对象特有数据)时, 那么该功能可以定义成静态的;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"JVM的编译特点\"><a href=\"#JVM的编译特点\" class=\"headerlink\" title=\"JVM的编译特点\"></a>JVM的编译特点</h3><ul>\n<li>JVM编译文件时会先查找当前类中对其他类的引用, 如果有其引用的 <strong>class文件</strong>,如果没有, 再查找与其同名的 <strong>java文件</strong>,如果有, 先编译其 java 文件, 然后在编译当前文件, 没有则报错;</li>\n</ul>\n<h3 id=\"类加载的特点\"><a href=\"#类加载的特点\" class=\"headerlink\" title=\"类加载的特点\"></a>类加载的特点</h3><ul>\n<li>只有用到类中的内容是, 类才被加载</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Demo demo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码执行后没有运行结果, 因为 <code>TestDemo</code> 中并没有实际用到 <code>Demo</code> 中的内容</p>\n<h2 id=\"Java-帮助文档\"><a href=\"#Java-帮助文档\" class=\"headerlink\" title=\"Java 帮助文档\"></a>Java 帮助文档</h2><h3 id=\"Java注释常用标签实例\"><a href=\"#Java注释常用标签实例\" class=\"headerlink\" title=\"Java注释常用标签实例\"></a>Java注释常用标签实例</h3><ul>\n<li>@see 引用其他类: @see标签允许你引用其他类的文档。javadoc会在其生成的HTML文件中，用@see标签链接到其他文档。</li>\n<li>@link package. class#member label 该标签与@see及其相似，只是它可以用于行内，并且是用”label”作为超链接文本而不用”See Also”</li>\n<li>@docRoot 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接</li>\n<li>@inheritDoc 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中</li>\n<li>@version 该标签格式如下： @version version-information 其中，”version-information”可以是任何你认为适合作为版本说明的重要信息，如果javadoc命令行使用了”-version”标记，那么久可以从生成的HTML文档中提取出版本信息</li>\n<li>@author 该标签的格式如下： @author author-information 其中，”author-information”,望文生义你也知道，应该是你的名字，也可以包括电子邮件地址或者其他任何适宜的信息</li>\n<li>@since 该标签允许你指定程序代码最早使用的版本，你将会在HTML java文档中看到他被用来指定所用的JDK版本</li>\n<li>@param 该标签用于方法文档中，形式如下： @param parameter-name description 其中，parameter-name是方法的参数列表中标识符</li>\n<li>@throws 异常</li>\n<li>@deprecated 该标签用于指出一些旧特性已由改进的新特性所取代，建议用户不要使用这些旧特征。</li>\n</ul>\n<h3 id=\"Java注释的使用顺序\"><a href=\"#Java注释的使用顺序\" class=\"headerlink\" title=\"Java注释的使用顺序\"></a>Java注释的使用顺序</h3><ol>\n<li>@author (classes and interfaces only, required)</li>\n<li>@version (classes and interfaces only, required. See footnote 1)</li>\n<li>@param (methods and constructors only)</li>\n<li>@return (methods only)</li>\n<li>@exception (@throws is a synonym added in Javadoc 1.2)</li>\n<li>@see</li>\n<li>@since</li>\n<li>@serial (or @serialField or @serialData)</li>\n<li>@deprecated (see How and When To Deprecate APIs)</li>\n</ol>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>一个类中默认会有一个空参数的构造函数, 这个默认构造函数的权限和所属类一致;</li>\n<li>默认构造函数的权限是随着类的权限变化而变化的;</li>\n</ul>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><ul>\n<li><p>格式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//静态代码块中的执行语句</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特点: 随着类的加载而执行, <strong>且只执行一次</strong>;</p>\n</li>\n<li><p>作用: 用于给类初始化</p>\n</li>\n</ul>\n<h3 id=\"应用-类中各个代码块之间的执行顺序\"><a href=\"#应用-类中各个代码块之间的执行顺序\" class=\"headerlink\" title=\"应用: 类中各个代码块之间的执行顺序\"></a>应用: 类中各个代码块之间的执行顺序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticCode</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    StaticCode()&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"b \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"a \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"c \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    StaticCode(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"d \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticCodeDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> StaticCode(<span class=\"number\">4</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以上代码的输出结果是: <code>a c d</code></li>\n</ul>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因:\"></a>原因:</h4><ul>\n<li>静态代码块的作用是给<font color=\"#005792\"><strong>类</strong></font>初始化的, 随着类的加载而执行, <strong>且只执行一次</strong>;</li>\n<li>构造代码块的作用是给<font color=\"#005792\"><strong>对象(所有对象)</strong></font>初始化的,对象一建立就运行, 而且优先于构造函数执行;</li>\n<li>构造函数的作用是给<font color=\"#005792\"><strong>对应对象</strong></font>初始化</li>\n</ul>\n<p>参考链接: <a href=\"https://www.cnblogs.com/sophine/p/3531282.html\" target=\"_blank\" rel=\"noopener\">Java中普通代码块，构造代码块，静态代码块区别及代码示例</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>虚拟机在首次加载Java类时，会对静态初始化块、静态成员变量、静态方法进行一次初始化</li>\n<li>只有在调用new方法时才会创建类的实例</li>\n<li>类实例创建过程：按照父子继承关系进行初始化，首先执行父类的初始化块部分，然后是父类的构造方法；再执行本类继承的子类的初始化块，最后是子类的构造方法</li>\n<li>类实例销毁时候，首先销毁子类部分，再销毁父类部分</li>\n</ol>\n<h2 id=\"对象的初始化过程\"><a href=\"#对象的初始化过程\" class=\"headerlink\" title=\"对象的初始化过程\"></a>对象的初始化过程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = <span class=\"string\">\"Jack\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String country = <span class=\"string\">\"CN\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person(String name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"name=\"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\", age=\"</span>+age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">PersonDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中 <code>Person p = new Person(&quot;Tom&quot;, 20)</code>执行时 Java 所完成的工作:</p>\n<ol>\n<li>在栈内存中创建变量 ‘p’;</li>\n<li>因为 “new” 用到了 <font color=\"red\">“<strong>Person.class</strong>“</font>, 所以先找到<font color=\"red\">“<strong>Person.class</strong>“</font>文件并加载到<br>内存中</li>\n<li>执行该类中的 <font color=\"red\"><strong>static 代码块</strong></font>, 给 <font color=\"red\">“<strong>Person 类</strong>“</font>进行初始化</li>\n<li>在堆内存中开辟空间, 并分配内存地址</li>\n<li>在内存中建立对象的特有属性, 并进行默认初始化</li>\n<li>对属性进行显示初始化</li>\n<li>对对象进行构造代码块初始化</li>\n<li>对对象进行对应的构造函数初始化</li>\n<li>将内存地址赋给栈内存中的 ‘p’ 变量</li>\n</ol>\n<h3 id=\"对象调用成员过程\"><a href=\"#对象调用成员过程\" class=\"headerlink\" title=\"对象调用成员过程\"></a>对象调用成员过程</h3><h3 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h3><h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>下面是一个简单的单例设计模式的例子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single s = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Single s = Single.getInstance();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果在此卡住, 则会出现多个对象</span></span><br><span class=\"line\">      single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"懒汉式和饿汉式的区别\"><a href=\"#懒汉式和饿汉式的区别\" class=\"headerlink\" title=\"懒汉式和饿汉式的区别\"></a>懒汉式和饿汉式的区别</h5><ul>\n<li>饿汉式不管调不调用, 都会先加载对象, 而懒汉式则会在需要时才会进行加载对象</li>\n</ul>\n<h5 id=\"懒汉式最终解决方案\"><a href=\"#懒汉式最终解决方案\" class=\"headerlink\" title=\"懒汉式最终解决方案\"></a>懒汉式最终解决方案</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single single = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span>(Single.class)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (single == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          single = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意!\"></a>注意!</h5><ul>\n<li>懒汉式加载会有安全性问题: 如果同时被多个对象同时调用, 则会出现多个对象</li>\n<li>开发用饿汉式</li>\n</ul>\n"},{"title":"JavaReview-day07-继承","date":"2017-12-18T11:14:57.000Z","type":["JavaReview"],"_content":"\n## 继承\n\n特点:\n - 提高了代码的复用性;\n - 让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;\n - Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患\n\n\n### 重写(覆盖)\n\n- 当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父\n类的函数被覆盖一样.\n- 当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类\n不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容.\n\n1. 子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败.\n2. 静态只能覆盖静态\n3. 如果父类中的方法权限为`private`, 则子类无法重写该方法.\n\n\n### 重写和重载的区别\n\n- 重载: 只看同名函数的参数列表\n- 重写: 子父类方法要一模一样\n\n### 子父类中构造函数的特点\n\n``` java\n  class Father{\n    Father(){\n      System.out.println(\"Father run |\");\n    }\n  }\n  class Son extends Parent {\n    Sun(){\n      // super();\n      System.out.println(\"Son run |\");\n    }\n  }\n  class Demo{\n    public static void main(String[] args) {\n      Son s = new Son();\n    }\n  }\n\n```\n以上程序的运行结果为 `Father run | Son run |` ;\n\n- 子类中的构造函数第一行会隐式的存在一句 `super()` 默认调用父类中默认的构造方法;\n- 如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 `super(xxx)`\n手动的来指定父类中特定的构造函数;\n\n#### 注意\n\n- `super()` 语句一定是在子类构造函数的第一行\n\n``` java\n  public class TestExtend {\n\n    public static void main(String[] args) {\n        Son s = new Son(4);\n    }\n  }\n  class Father{\n    public int m;\n    Father(){\n        m = 2;\n        System.out.println(\"Father Run\");\n    }\n    Father(int x){\n        m = 6;\n        System.out.println(\"TTTT\");\n    }\n  }\n  class Son extends Father{\n    Son(){\n      this(4);\n      System.out.println(this.m);\n      System.out.println(\"Son run\");\n    }\n    Son(int x){\n      this();\n      System.out.println(\"MMMM\");\n    }\n}\n\n```\n\n- 以上代码会出现编译错误, 错误原因为 `recursive constructor invocation`意思为\n'<font color='red'>构造器中出现了递归调用, 这是不被允许的</font>';\n\n### final 关键字\n\n- final: 最终. 作为一个修饰符;\n\n#### 作用及特点\n\n1. 可以修饰类, 函数, 变量;\n2. 被 `final` 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能;\n3. 被 `final` 修饰的方法不可以被复写;\n4. 被 `final` 修饰的变量是一个常量且只能赋值一次; `final` 既可以修饰成员变量, 又可以\n修饰局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值\n起个名字, 方便与阅读;\n5. 内部类定义在类中的局部位置上时, 只能访问局部被 `final` 修饰的局部变量;\n\n\n### 抽象类(abstract)\n\n- 特点:\n  1. 抽象方法一定定义在抽象类中;\n  2. 抽象方法和抽象类都必须被 `abstract` 关键字修饰;\n  3. 抽象类不可以用 `new` 创建对象, 因为调用抽象方法没有意义;\n  4. 抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, **如\n  果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类**\n\n- 抽象类和一般类的区别:\n  1. 抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法;\n  2. 抽象类不可以实例化;\n\n- 特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象;\n- `abstract` 只可以修饰类和方法, 不能修饰变量;\n\n### 接口\n\n **接口定义时的格式特点**:\n- 接口转中常见定义: 常量, 抽象方法;\n- 接口中的成员变量都有固定修饰符:\n\t1. 常量:`public static final`\n\t2. 方法:`public abstract`  \n- 接口是不可以创建对象的, 因为接口中有抽象方法\n- 接口需要被子类实现子类对接口的抽象方法全部覆盖后, 子类才可以实例化\n- 接口可以被类多实现, 也是对不支持多继承的转换形式, Java支持多实现;\n\n**接口与接口之间可以实现多继承**\n``` java\ninterface A{\n\tvoid showA();\n}\ninterface B extends A {\n\tvoid showB();\n}\n\ninterface C extends B {\n\tvoid showC();\n}\n\nclass D implements C {\n\tpublic void showA(){};\n\tpublic void showB(){};\n\tpublic void showC(){};\n\n}\n```\n\n<font color='red'>**注意**:</font>\n接口与接口之间的继承中, 被继承的接口中不能含有名字相同, 返回值不同的方法;\n``` java\n``` java\ninterface A{\n\tvoid showA();\n\tint test();\n}\ninterface B {\n\tvoid showB();\n\t//void test();//错误的写法\n}\n\ninterface C extends A, B {\n\tvoid showC();\n}\n\nclass D implements C {\n\tpublic void showA(){};\n\tpublic void showB(){};\n\tpublic void showC(){};\n\n}\n```\n","source":"_posts/JavaReview-day07-继承.md","raw":"---\ntitle: JavaReview-day07-继承\ndate: 2017-12-18 19:14:57\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n## 继承\n\n特点:\n - 提高了代码的复用性;\n - 让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;\n - Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患\n\n\n### 重写(覆盖)\n\n- 当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父\n类的函数被覆盖一样.\n- 当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类\n不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容.\n\n1. 子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败.\n2. 静态只能覆盖静态\n3. 如果父类中的方法权限为`private`, 则子类无法重写该方法.\n\n\n### 重写和重载的区别\n\n- 重载: 只看同名函数的参数列表\n- 重写: 子父类方法要一模一样\n\n### 子父类中构造函数的特点\n\n``` java\n  class Father{\n    Father(){\n      System.out.println(\"Father run |\");\n    }\n  }\n  class Son extends Parent {\n    Sun(){\n      // super();\n      System.out.println(\"Son run |\");\n    }\n  }\n  class Demo{\n    public static void main(String[] args) {\n      Son s = new Son();\n    }\n  }\n\n```\n以上程序的运行结果为 `Father run | Son run |` ;\n\n- 子类中的构造函数第一行会隐式的存在一句 `super()` 默认调用父类中默认的构造方法;\n- 如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 `super(xxx)`\n手动的来指定父类中特定的构造函数;\n\n#### 注意\n\n- `super()` 语句一定是在子类构造函数的第一行\n\n``` java\n  public class TestExtend {\n\n    public static void main(String[] args) {\n        Son s = new Son(4);\n    }\n  }\n  class Father{\n    public int m;\n    Father(){\n        m = 2;\n        System.out.println(\"Father Run\");\n    }\n    Father(int x){\n        m = 6;\n        System.out.println(\"TTTT\");\n    }\n  }\n  class Son extends Father{\n    Son(){\n      this(4);\n      System.out.println(this.m);\n      System.out.println(\"Son run\");\n    }\n    Son(int x){\n      this();\n      System.out.println(\"MMMM\");\n    }\n}\n\n```\n\n- 以上代码会出现编译错误, 错误原因为 `recursive constructor invocation`意思为\n'<font color='red'>构造器中出现了递归调用, 这是不被允许的</font>';\n\n### final 关键字\n\n- final: 最终. 作为一个修饰符;\n\n#### 作用及特点\n\n1. 可以修饰类, 函数, 变量;\n2. 被 `final` 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能;\n3. 被 `final` 修饰的方法不可以被复写;\n4. 被 `final` 修饰的变量是一个常量且只能赋值一次; `final` 既可以修饰成员变量, 又可以\n修饰局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值\n起个名字, 方便与阅读;\n5. 内部类定义在类中的局部位置上时, 只能访问局部被 `final` 修饰的局部变量;\n\n\n### 抽象类(abstract)\n\n- 特点:\n  1. 抽象方法一定定义在抽象类中;\n  2. 抽象方法和抽象类都必须被 `abstract` 关键字修饰;\n  3. 抽象类不可以用 `new` 创建对象, 因为调用抽象方法没有意义;\n  4. 抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, **如\n  果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类**\n\n- 抽象类和一般类的区别:\n  1. 抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法;\n  2. 抽象类不可以实例化;\n\n- 特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象;\n- `abstract` 只可以修饰类和方法, 不能修饰变量;\n\n### 接口\n\n **接口定义时的格式特点**:\n- 接口转中常见定义: 常量, 抽象方法;\n- 接口中的成员变量都有固定修饰符:\n\t1. 常量:`public static final`\n\t2. 方法:`public abstract`  \n- 接口是不可以创建对象的, 因为接口中有抽象方法\n- 接口需要被子类实现子类对接口的抽象方法全部覆盖后, 子类才可以实例化\n- 接口可以被类多实现, 也是对不支持多继承的转换形式, Java支持多实现;\n\n**接口与接口之间可以实现多继承**\n``` java\ninterface A{\n\tvoid showA();\n}\ninterface B extends A {\n\tvoid showB();\n}\n\ninterface C extends B {\n\tvoid showC();\n}\n\nclass D implements C {\n\tpublic void showA(){};\n\tpublic void showB(){};\n\tpublic void showC(){};\n\n}\n```\n\n<font color='red'>**注意**:</font>\n接口与接口之间的继承中, 被继承的接口中不能含有名字相同, 返回值不同的方法;\n``` java\n``` java\ninterface A{\n\tvoid showA();\n\tint test();\n}\ninterface B {\n\tvoid showB();\n\t//void test();//错误的写法\n}\n\ninterface C extends A, B {\n\tvoid showC();\n}\n\nclass D implements C {\n\tpublic void showA(){};\n\tpublic void showB(){};\n\tpublic void showC(){};\n\n}\n```\n","slug":"JavaReview-day07-继承","published":1,"updated":"2018-01-22T11:35:25.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m05e000aq8kxhb77fhkp","content":"<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>特点:</p>\n<ul>\n<li>提高了代码的复用性;</li>\n<li>让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;</li>\n<li>Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患</li>\n</ul>\n<h3 id=\"重写-覆盖\"><a href=\"#重写-覆盖\" class=\"headerlink\" title=\"重写(覆盖)\"></a>重写(覆盖)</h3><ul>\n<li>当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父<br>类的函数被覆盖一样.</li>\n<li>当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类<br>不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容.</li>\n</ul>\n<ol>\n<li>子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败.</li>\n<li>静态只能覆盖静态</li>\n<li>如果父类中的方法权限为<code>private</code>, 则子类无法重写该方法.</li>\n</ol>\n<h3 id=\"重写和重载的区别\"><a href=\"#重写和重载的区别\" class=\"headerlink\" title=\"重写和重载的区别\"></a>重写和重载的区别</h3><ul>\n<li>重载: 只看同名函数的参数列表</li>\n<li>重写: 子父类方法要一模一样</li>\n</ul>\n<h3 id=\"子父类中构造函数的特点\"><a href=\"#子父类中构造函数的特点\" class=\"headerlink\" title=\"子父类中构造函数的特点\"></a>子父类中构造函数的特点</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">  Father()&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Father run |\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  Sun()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// super();</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Son run |\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Son s = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序的运行结果为 <code>Father run | Son run |</code> ;</p>\n<ul>\n<li>子类中的构造函数第一行会隐式的存在一句 <code>super()</code> 默认调用父类中默认的构造方法;</li>\n<li>如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 <code>super(xxx)</code><br>手动的来指定父类中特定的构造函数;</li>\n</ul>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li><code>super()</code> 语句一定是在子类构造函数的第一行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestExtend</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Son s = <span class=\"keyword\">new</span> Son(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    Father()&#123;</span><br><span class=\"line\">        m = <span class=\"number\">2</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Father Run\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Father(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">        m = <span class=\"number\">6</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"TTTT\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    Son()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"keyword\">this</span>.m);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Son run\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Son(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"MMMM\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以上代码会出现编译错误, 错误原因为 <code>recursive constructor invocation</code>意思为<br>‘<font color=\"red\">构造器中出现了递归调用, 这是不被允许的</font>‘;</li>\n</ul>\n<h3 id=\"final-关键字\"><a href=\"#final-关键字\" class=\"headerlink\" title=\"final 关键字\"></a>final 关键字</h3><ul>\n<li>final: 最终. 作为一个修饰符;</li>\n</ul>\n<h4 id=\"作用及特点\"><a href=\"#作用及特点\" class=\"headerlink\" title=\"作用及特点\"></a>作用及特点</h4><ol>\n<li>可以修饰类, 函数, 变量;</li>\n<li>被 <code>final</code> 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能;</li>\n<li>被 <code>final</code> 修饰的方法不可以被复写;</li>\n<li>被 <code>final</code> 修饰的变量是一个常量且只能赋值一次; <code>final</code> 既可以修饰成员变量, 又可以<br>修饰局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值<br>起个名字, 方便与阅读;</li>\n<li>内部类定义在类中的局部位置上时, 只能访问局部被 <code>final</code> 修饰的局部变量;</li>\n</ol>\n<h3 id=\"抽象类-abstract\"><a href=\"#抽象类-abstract\" class=\"headerlink\" title=\"抽象类(abstract)\"></a>抽象类(abstract)</h3><ul>\n<li><p>特点:</p>\n<ol>\n<li>抽象方法一定定义在抽象类中;</li>\n<li>抽象方法和抽象类都必须被 <code>abstract</code> 关键字修饰;</li>\n<li>抽象类不可以用 <code>new</code> 创建对象, 因为调用抽象方法没有意义;</li>\n<li>抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, <strong>如<br>果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类</strong></li>\n</ol>\n</li>\n<li><p>抽象类和一般类的区别:</p>\n<ol>\n<li>抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法;</li>\n<li>抽象类不可以实例化;</li>\n</ol>\n</li>\n<li><p>特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象;</p>\n</li>\n<li><code>abstract</code> 只可以修饰类和方法, 不能修饰变量;</li>\n</ul>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p> <strong>接口定义时的格式特点</strong>:</p>\n<ul>\n<li>接口转中常见定义: 常量, 抽象方法;</li>\n<li>接口中的成员变量都有固定修饰符:<ol>\n<li>常量:<code>public static final</code></li>\n<li>方法:<code>public abstract</code>  </li>\n</ol>\n</li>\n<li>接口是不可以创建对象的, 因为接口中有抽象方法</li>\n<li>接口需要被子类实现子类对接口的抽象方法全部覆盖后, 子类才可以实例化</li>\n<li>接口可以被类多实现, 也是对不支持多继承的转换形式, Java支持多实现;</li>\n</ul>\n<p><strong>接口与接口之间可以实现多继承</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showC</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showA</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showB</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showC</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><font color=\"red\"><strong>注意</strong>:</font><br>接口与接口之间的继承中, 被继承的接口中不能含有名字相同, 返回值不同的方法;<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//void test();//错误的写法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span>, <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showC</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showA</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showB</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showC</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>特点:</p>\n<ul>\n<li>提高了代码的复用性;</li>\n<li>让类与类之间产生了关系. 有了这个关系, 才有了多态的特性;</li>\n<li>Java中只支持单继承, 不支持多继承, 因为继承容易带来安全隐患</li>\n</ul>\n<h3 id=\"重写-覆盖\"><a href=\"#重写-覆盖\" class=\"headerlink\" title=\"重写(覆盖)\"></a>重写(覆盖)</h3><ul>\n<li>当子类中出现和父类一模一样的函数时, 当子类对象调用该函数, 会运行子类函数的内容, 如同父<br>类的函数被覆盖一样.</li>\n<li>当子类继承父类, 沿袭了父类的功能, 到子类中, 但是子类具备该功能, 但是功能的内容却和父类<br>不一致, 这时没有必要定义新功能, 而是使用覆盖, 只保留父类的功能定义, 并重写功能内容.</li>\n</ul>\n<ol>\n<li>子类覆盖父类, 必须保证子类权限大于等于父类权限, 才可以覆盖, 否则编译失败.</li>\n<li>静态只能覆盖静态</li>\n<li>如果父类中的方法权限为<code>private</code>, 则子类无法重写该方法.</li>\n</ol>\n<h3 id=\"重写和重载的区别\"><a href=\"#重写和重载的区别\" class=\"headerlink\" title=\"重写和重载的区别\"></a>重写和重载的区别</h3><ul>\n<li>重载: 只看同名函数的参数列表</li>\n<li>重写: 子父类方法要一模一样</li>\n</ul>\n<h3 id=\"子父类中构造函数的特点\"><a href=\"#子父类中构造函数的特点\" class=\"headerlink\" title=\"子父类中构造函数的特点\"></a>子父类中构造函数的特点</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">  Father()&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Father run |\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  Sun()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// super();</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Son run |\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Son s = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序的运行结果为 <code>Father run | Son run |</code> ;</p>\n<ul>\n<li>子类中的构造函数第一行会隐式的存在一句 <code>super()</code> 默认调用父类中默认的构造方法;</li>\n<li>如果父类中没有默认的构造方法, 可以在子类构造方法中的第一行通过 <code>super(xxx)</code><br>手动的来指定父类中特定的构造函数;</li>\n</ul>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li><code>super()</code> 语句一定是在子类构造函数的第一行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestExtend</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Son s = <span class=\"keyword\">new</span> Son(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    Father()&#123;</span><br><span class=\"line\">        m = <span class=\"number\">2</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Father Run\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Father(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">        m = <span class=\"number\">6</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"TTTT\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">    Son()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"keyword\">this</span>.m);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Son run\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Son(<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"MMMM\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以上代码会出现编译错误, 错误原因为 <code>recursive constructor invocation</code>意思为<br>‘<font color=\"red\">构造器中出现了递归调用, 这是不被允许的</font>‘;</li>\n</ul>\n<h3 id=\"final-关键字\"><a href=\"#final-关键字\" class=\"headerlink\" title=\"final 关键字\"></a>final 关键字</h3><ul>\n<li>final: 最终. 作为一个修饰符;</li>\n</ul>\n<h4 id=\"作用及特点\"><a href=\"#作用及特点\" class=\"headerlink\" title=\"作用及特点\"></a>作用及特点</h4><ol>\n<li>可以修饰类, 函数, 变量;</li>\n<li>被 <code>final</code> 修饰的类不可以被继承; 为了避免被继承, 被子类复写功能;</li>\n<li>被 <code>final</code> 修饰的方法不可以被复写;</li>\n<li>被 <code>final</code> 修饰的变量是一个常量且只能赋值一次; <code>final</code> 既可以修饰成员变量, 又可以<br>修饰局部变量, 当在描述事物时, 一些数据的值是固定的, 那么这时为了增强阅读性, 都给这些值<br>起个名字, 方便与阅读;</li>\n<li>内部类定义在类中的局部位置上时, 只能访问局部被 <code>final</code> 修饰的局部变量;</li>\n</ol>\n<h3 id=\"抽象类-abstract\"><a href=\"#抽象类-abstract\" class=\"headerlink\" title=\"抽象类(abstract)\"></a>抽象类(abstract)</h3><ul>\n<li><p>特点:</p>\n<ol>\n<li>抽象方法一定定义在抽象类中;</li>\n<li>抽象方法和抽象类都必须被 <code>abstract</code> 关键字修饰;</li>\n<li>抽象类不可以用 <code>new</code> 创建对象, 因为调用抽象方法没有意义;</li>\n<li>抽象类中的方法要被使用, 必须由子类复写其所有的抽象方法后, 建立子类对象调用, <strong>如<br>果子类只覆盖了部分抽象方法, 那么该子类还是一个抽象类</strong></li>\n</ol>\n</li>\n<li><p>抽象类和一般类的区别:</p>\n<ol>\n<li>抽象类比一般类多了个抽象函数, 就是在类中可以定义抽象方法;</li>\n<li>抽象类不可以实例化;</li>\n</ol>\n</li>\n<li><p>特殊: 抽象类中可以不定义抽象方法, 可以使该类不创建对象;</p>\n</li>\n<li><code>abstract</code> 只可以修饰类和方法, 不能修饰变量;</li>\n</ul>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p> <strong>接口定义时的格式特点</strong>:</p>\n<ul>\n<li>接口转中常见定义: 常量, 抽象方法;</li>\n<li>接口中的成员变量都有固定修饰符:<ol>\n<li>常量:<code>public static final</code></li>\n<li>方法:<code>public abstract</code>  </li>\n</ol>\n</li>\n<li>接口是不可以创建对象的, 因为接口中有抽象方法</li>\n<li>接口需要被子类实现子类对接口的抽象方法全部覆盖后, 子类才可以实例化</li>\n<li>接口可以被类多实现, 也是对不支持多继承的转换形式, Java支持多实现;</li>\n</ul>\n<p><strong>接口与接口之间可以实现多继承</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showC</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showA</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showB</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showC</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><font color=\"red\"><strong>注意</strong>:</font><br>接口与接口之间的继承中, 被继承的接口中不能含有名字相同, 返回值不同的方法;<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//void test();//错误的写法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span>, <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showC</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showA</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showB</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showC</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"JavaReview-day08-多态","date":"2017-12-26T05:30:58.000Z","type":["JavaReview"],"_content":"\n## 多态\n\n### 多态的特点\n\n1. 在多态中, 成员函数的特点:\n  - 在编译时期: 参阅引用型变量所属的类中是否有调用的方法. 如果有, 编译通过; 如果没有, 编译失败\n  - 在运行时期: 参阅对象所属类的中是否有调用的方法\n  - **简单总结就是:** <font color='red'>成员函数在多态调用时, 编译看左边, 运行看右边;</font> 因为成员函数存在覆盖特性。\n\n2. 在多态中, 成员变量的特点:\n  - 无论编译和运行, 都参考左边(引用型变量所属的类);\n\n3. 在多态中, 静态成员函数的特点:\n  - 无论编译和运行, 都参考左边(引用型变量所属的类);\n  - 其实对于静态方法，是不需要对象的。直接用类名调用即可。\n``` java\nclass Fu\n{\n//\tint num = 3;\n\tvoid show()\n\t{\n\t\tSystem.out.println(\"fu show\");\n\t}\n\n\tstatic void method()\n\t{\n\t\tSystem.out.println(\"fu static method\");\n\t}\n}\n\nclass Zi extends Fu\n{\n//\tint num = 4;\n\tvoid show()\n\t{\n\t\tSystem.out.println(\"zi show\");\n\t}\n\n\tstatic void method()\n\t{\n\t\tSystem.out.println(\"zi static method\");\n\t}\n}\n\n\n\nclass  DuoTaiDemo3\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tFu.method();\n\t\tZi.method();\n\t\tFu f = new Zi();//\n//\t\tf.method();\n//\t\tf.show();\n//\t\tSystem.out.println(f.num);\n\n\n//\t\tZi z = new Zi();\n//\t\tSystem.out.println(z.num);\n\t}\n}\n\n\n```\n","source":"_posts/JavaReview-day08-多态.md","raw":"---\ntitle: JavaReview-day08-多态\ndate: 2017-12-26 13:30:58\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n## 多态\n\n### 多态的特点\n\n1. 在多态中, 成员函数的特点:\n  - 在编译时期: 参阅引用型变量所属的类中是否有调用的方法. 如果有, 编译通过; 如果没有, 编译失败\n  - 在运行时期: 参阅对象所属类的中是否有调用的方法\n  - **简单总结就是:** <font color='red'>成员函数在多态调用时, 编译看左边, 运行看右边;</font> 因为成员函数存在覆盖特性。\n\n2. 在多态中, 成员变量的特点:\n  - 无论编译和运行, 都参考左边(引用型变量所属的类);\n\n3. 在多态中, 静态成员函数的特点:\n  - 无论编译和运行, 都参考左边(引用型变量所属的类);\n  - 其实对于静态方法，是不需要对象的。直接用类名调用即可。\n``` java\nclass Fu\n{\n//\tint num = 3;\n\tvoid show()\n\t{\n\t\tSystem.out.println(\"fu show\");\n\t}\n\n\tstatic void method()\n\t{\n\t\tSystem.out.println(\"fu static method\");\n\t}\n}\n\nclass Zi extends Fu\n{\n//\tint num = 4;\n\tvoid show()\n\t{\n\t\tSystem.out.println(\"zi show\");\n\t}\n\n\tstatic void method()\n\t{\n\t\tSystem.out.println(\"zi static method\");\n\t}\n}\n\n\n\nclass  DuoTaiDemo3\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tFu.method();\n\t\tZi.method();\n\t\tFu f = new Zi();//\n//\t\tf.method();\n//\t\tf.show();\n//\t\tSystem.out.println(f.num);\n\n\n//\t\tZi z = new Zi();\n//\t\tSystem.out.println(z.num);\n\t}\n}\n\n\n```\n","slug":"JavaReview-day08-多态","published":1,"updated":"2018-01-22T11:35:18.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m05h000bq8kxdt2tcodf","content":"<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><h3 id=\"多态的特点\"><a href=\"#多态的特点\" class=\"headerlink\" title=\"多态的特点\"></a>多态的特点</h3><ol>\n<li><p>在多态中, 成员函数的特点:</p>\n<ul>\n<li>在编译时期: 参阅引用型变量所属的类中是否有调用的方法. 如果有, 编译通过; 如果没有, 编译失败</li>\n<li>在运行时期: 参阅对象所属类的中是否有调用的方法</li>\n<li><strong>简单总结就是:</strong> <font color=\"red\">成员函数在多态调用时, 编译看左边, 运行看右边;</font> 因为成员函数存在覆盖特性。</li>\n</ul>\n</li>\n<li><p>在多态中, 成员变量的特点:</p>\n<ul>\n<li>无论编译和运行, 都参考左边(引用型变量所属的类);</li>\n</ul>\n</li>\n<li><p>在多态中, 静态成员函数的特点:</p>\n<ul>\n<li>无论编译和运行, 都参考左边(引用型变量所属的类);</li>\n<li>其实对于静态方法，是不需要对象的。直接用类名调用即可。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\tint num = 3;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"fu show\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"fu static method\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\tint num = 4;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zi show\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zi static method\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">DuoTaiDemo3</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tFu.method();</span><br><span class=\"line\">\t\tZi.method();</span><br><span class=\"line\">\t\tFu f = <span class=\"keyword\">new</span> Zi();<span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tf.method();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tf.show();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(f.num);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tZi z = new Zi();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(z.num);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><h3 id=\"多态的特点\"><a href=\"#多态的特点\" class=\"headerlink\" title=\"多态的特点\"></a>多态的特点</h3><ol>\n<li><p>在多态中, 成员函数的特点:</p>\n<ul>\n<li>在编译时期: 参阅引用型变量所属的类中是否有调用的方法. 如果有, 编译通过; 如果没有, 编译失败</li>\n<li>在运行时期: 参阅对象所属类的中是否有调用的方法</li>\n<li><strong>简单总结就是:</strong> <font color=\"red\">成员函数在多态调用时, 编译看左边, 运行看右边;</font> 因为成员函数存在覆盖特性。</li>\n</ul>\n</li>\n<li><p>在多态中, 成员变量的特点:</p>\n<ul>\n<li>无论编译和运行, 都参考左边(引用型变量所属的类);</li>\n</ul>\n</li>\n<li><p>在多态中, 静态成员函数的特点:</p>\n<ul>\n<li>无论编译和运行, 都参考左边(引用型变量所属的类);</li>\n<li>其实对于静态方法，是不需要对象的。直接用类名调用即可。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\tint num = 3;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"fu show\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"fu static method\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\tint num = 4;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zi show\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"zi static method\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">DuoTaiDemo3</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tFu.method();</span><br><span class=\"line\">\t\tZi.method();</span><br><span class=\"line\">\t\tFu f = <span class=\"keyword\">new</span> Zi();<span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tf.method();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tf.show();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(f.num);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tZi z = new Zi();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(z.num);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"JavaReview-day09-内部类","date":"2018-01-08T13:43:07.000Z","type":["JavaReview"],"_content":"\n# 内部类\n\n内部类简介:\n内部类是指在一个外部类的内部再定义一个类。类名不需要和文件夹相同。\n*内部类可以是静态static的，也可用public，default，protected和private修饰。（而外部顶级类即类名和文件名相同的只能使用public和default）。*\n\n**注意**：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。所以内部类的成员变量/方法名可以和外部类的相同。\n\n```java\npublic class Outer {\n    static int mun = 6;\n\n    class Inner//内部类。\n    {\n        void show() {\n            System.out.println(\"show run...\" + mun);\n        }\n        //static void function()//如果内部类中定义了静态成员，该内部类也必须是静态的。\n        //{\n        //    System.out.println(\"function run ....\"+num);\n        //}\n    }\n\n    public void method() {\n        Inner in = new Inner();\n        in.show();\n    }\n}\n\n\nclass InnerClassDemo {\n    public static void main(String[] args) {\n    //Outer out = new Outer();\n    //out.method();\n    //直接访问外部类中的内部类中的成员。\n    //Outer.Inner in = new Outer().new Inner();\n    //in.show();\n\n    //如果内部类是静态的。 相当于一个外部类\n    //Outer.Inner in = new Outer.Inner();\n    //in.show();\n\n    //如果内部类是静态的，成员是静态的。\n    //Outer.Inner.function();\n    }\n}\n```\n\n## 内部类的访问规则\n\n1. 内部类可以直接访问外部类中的成员, 包括私有, 这是因为内部类中持有一个外部类的引用, 格式 `外部类名.this`\n2. 外部类要访问内部类, 必须建立内部类的对象\n\n## 访问格式:\n\n1. 当内部类定义在外部类的成员位置上, 而且非私有, 可以在 **外部其他类** 中, 可以直接建立内部类对象\n\n  - 格式: `外部类名.内部类名 变量名 = 外部类对象.内部类对象;`\n  - 代码: `Outer.Inner inner = new Outer(). new Inner();`\n  2.\n  ```java\n  public class day09 {\n\n    public static void main(String[] args) {\n      Outer.Inner inner = new Outer(). new Inner();\n      inner.function();\n     }\n    }\n\nclass Outer{\n  public int x = 3; class Inner{\n    int x = 4;\n    void function(){\n      int x = 6;\n      System.out.println(\"X value:\" + x);\n      System.out.println(\"X value:\" + this.x);\n      System.out.println(\"X value:\" + Outer.this.x);\n    }\n  }\n\n}\n\n```\n\n输出结果为:\n`\n6\n3\n4\n`\n\n## 局部中的内部类\n\n内部类定义在局部时:\n- 不可以被成员修饰符修饰;\n- 可以直接访问外部类中的成员, 因为还持有外部类中的引用\n  但是不可以访问它所在的局部中的变量. 只能访问被 `final` 修饰的局部变量;\n\n```java\npublic class Outer {\n  int x = 3;\n  void method(){\n    final int y = 4;\n    class Inner{\n      void function(){\n        System.out.println(y);\n      }\n      new Inner.function();\n    }\n  }\n\nclass InnerClassDemo3{\n    public static void main(String[] args) {\n      Outer out = new Outer().method();\n      out.method(7);\n      out.method(8);\n    }\n}\n\n}\n```\n\n## 匿名内部类\n\n1. 匿名内部类就是内部类的简写格式\n2. 定义匿名内部类的前提:\n  - 内部类必须是继承一个类或实现接口\n3. 匿名内部类的格式: new 父类对象或接口(){定义子类的内容}\n4. 其实匿名内部类就是一个匿名子类对象. 而且这个对象有点胖. 可以理解为带内容的对象;\n\n```java\n\nabstract class AbsDemo{\n  abstract void show();\n}\n\nclass Outer{\n  int x = 3;\n  AbsDemo d = new AbsDemo(){\n    void show(){\n      System.out.println(\"x==\" + x);\n    }\n    void abc(){\n      System.out.println(\"haha\");\n    }\n  };\n}\nd.show();\n//d.abc();//编译失败 因为只能使用父类的引用,无法调用\n\n```\n\n## 异常\n1. 异常:就是程序在运行时出现不正常情况.\n异常的由来: 问题也是现实生活中一个具体的事物, 也可以通过java的类的形式进行描述. 并封装成对象.\n2. 对于问题的划分为两种:\n 一种是严重的问题, 一种非严重的问题;\n\n- 对于严重的, java 通过`Error`类进行描述:\n    对于`Error`一般不编写针对性的代码对其进行处理;\n- 对于非严重的, java 通过`Exception`类进行描述.\n  对于`Exception`可以使用针对性的处理方式进行处理;\n\n\n异常：是在运行时期发生的不正常情况\n在java中用类的形式对不正常情况进行了描述和封装对象。\n描述不正常的情况的类，就称为异常类。\n以前正常流程代码和问题处理代码相结合，\n现在将正常流程代码和问题处理代码分离。提高阅读性.\n其实异常就是java通过面向对象的思想将问题封装成了对象.\n用异常类对其进行描述。\n不同的问题用不同的类进行具体的描述。 比如角标越界。空指针等等。\n问题很多，意味着描述的类也很多，\n将其共性进行向上抽取，形成了异常体系。\n最终问题（不正常情况）就分成了两大类。\nThrowable:无论是error，还是异常，问题，问题发生就应该可以抛出，让调用者知道并处理。\n\t//该体系的特点就在于Throwable及其所有的子类都具有可抛性。\n\t可抛性到底指的是什么呢？怎么体现可抛性呢？\n\t其实是通过两个关键字来体现的。\n\tthrows throw ,凡是可以被这两个关键字所操作的类和对象都具备可抛性.\n\t- 一般不可处理的。Error\n\t\t\t特点：是由jvm抛出的严重性的问题。\n\t\t\t\t 这种问题发生一般不针对性处理。直接修改程序\n\t- 可以处理的。Exception\n\n\n  - 该体系的特点：\n\t 子类的后缀名都是用其父类名作为后缀，阅读性很想。\n\n```java\nclass ExceptionDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tint[] arr = new int[1024*1024*800];//java.lang.OutOfMemoryError: Java heap space\n//\t\tarr = null;\n//\t\tSystem.out.println(arr[3]);\n//\n//\n//\t\tsleep(-5);\n\t}\n\n\n\tpublic static void sleep2(int time)\n\t{\n\t\tif(time<0)\n\t\t{\n      //处理办法。\n      //处理办法。\n      //处理办法。\n      //处理办法。\n      //处理办法。\n\t\t}\n\t\tif(time>100000)\n\t\t{\n    //处理办法。\n    //处理办法。\n    //处理办法。\n    //处理办法。\n    //处理办法。\n    //处理办法。\n\t\t}\n\t\tSystem.out.println(\"我睡。。。\"+time);\n\n//\t\tsleep(-5);\n\t}\n\tpublic static void sleep(int time)\n\t{\n\t\tif(time<0)\n\t\t{\n//\t\t\t抛出 new FuTime();//就代码着时间为负的情况，这个对象中会包含着问题的名称，信息，位置等信息。\n\t\t}\n\t\tif(time>100000)\n\t\t{\n//\t\t\t抛出 new BigTime();\n\t\t}\n\t\tSystem.out.println(\"我睡。。。\"+time);\n\t}\n}\n/*\nclass FuTime\n{\n}\nclass BigTime\n{\n}\n*/\n```\n\n### 运行时异常\n\n对于角标是整数不存在，可以用角标越界表示，\n对于负数为角标的情况，准备用负数角标异常来表示。\n\n负数角标这种异常在java中并没有定义过。\n那就按照java异常的创建思想，面向对象，将负数角标进行自定义描述。并封装成对象。\n\n这种自定义的问题描述成为自定义异常。\n\n注意：如果让一个类称为异常类，必须要继承异常体系，因为只有称为异常体系的子类才有资格具备可抛性。\n才可以被两个关键字所操作，throws throw\n\n\n\n\n### 异常的分类：\n1. 编译时被检测异常:只要是Exception和其子类都是，除了特殊子类RuntimeException体系。\n  这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式。\n  这样的问题都可以针对性的处理。\n\n\n2. 编译时不检测异常(运行时异常):就是Exception中的RuntimeException和其子类。\n这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的而或者引发了内部状态的改变导致的。\n那么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止,让调用者对代码进行修正。\n\n所以自定义异常时，要么继承Exception。要么继承RuntimeException。\n\n### throws 和 throw 的区别。\n\n1. throws使用在函数上。\n   throw使用在函数内。\n2. throws抛出的是异常类，可以抛出多个，用逗号隔开。\n   throw抛出的是异常对象。\n\n\n   异常处理的捕捉形式：\n   这是可以对异常进行针对性处理的方式。\n\n   具体格式是：\n\n```java\n   try\n   {\n   \t//需要被检测异常的代码。\n   }\n   catch(异常类 变量)//该变量用于接收发生的异常对象\n   {\n   \t//处理异常的代码。\n   }\n   finally\n   {\n   \t//一定会被执行的代码。\n     }\n```\n\n### 异常处理的原则：\n1. 函数内容如果抛出需要检测的异常，那么函数上必须要声明。\n否则必须在函数内用trycatch捕捉，否则编译失败。\n\n2. 如果调用到了声明异常的函数，要么trycatch要么throws，否则编译失败。\n\n3. 什么时候catch，什么时候throws 呢？\n功能内容可以解决，用catch。\n解决不了，用throws告诉调用者，由调用者解决 。\n\n4. 一个功能如果抛出了多个异常，那么调用时，必须有对应多个catch进行针对性的处理。\n内部又几个需要检测的异常，就抛几个异常，抛出几个，就catch几个。\n\n\n### 异常的注意事项\n\n1. 子类在覆盖父类方法时，父类的方法如果抛出了异常，\n那么子类的方法只能抛出父类的异常或者该异常的子类。\n\n2. 如果父类抛出多个异常，那么子类只能抛出父类异常的子集。\n简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集。\n\n注意：如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛，就只能try .\n\n```java\ninterface  Inter\n{\n\tvoid function();\n}\n\nclass D implements Inter\n{\n\tpublic void function()//throws Exception\n\t{}\n}\n\nclass A extends Exception\n{\n}\n\nclass B extends A\n{\n}\nclass C extends Exception\n{\n}\n\n\nclass Fu\n{\n\tvoid show()throws A\n\t{}\n}\n\n\nclass Test\n{\n\tvoid method(Fu f)//Fu f  = new Zi();\n\t{\n\t\ttry\n\t\t{\n\t\t\tf.show();\n\n\t\t}\n\t\tcatch (A  a)\n\t\t{\n\t\t}\n\t}\n}\n\n\nclass Zi extends Fu\n{\n\tvoid show()throws C\n\t{\n\n\t}\n}\n```\n","source":"_posts/JavaReview-day09-内部类.md","raw":"---\ntitle: JavaReview-day09-内部类\ndate: 2018-01-08T21:43:07.000Z\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n# 内部类\n\n内部类简介:\n内部类是指在一个外部类的内部再定义一个类。类名不需要和文件夹相同。\n*内部类可以是静态static的，也可用public，default，protected和private修饰。（而外部顶级类即类名和文件名相同的只能使用public和default）。*\n\n**注意**：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。所以内部类的成员变量/方法名可以和外部类的相同。\n\n```java\npublic class Outer {\n    static int mun = 6;\n\n    class Inner//内部类。\n    {\n        void show() {\n            System.out.println(\"show run...\" + mun);\n        }\n        //static void function()//如果内部类中定义了静态成员，该内部类也必须是静态的。\n        //{\n        //    System.out.println(\"function run ....\"+num);\n        //}\n    }\n\n    public void method() {\n        Inner in = new Inner();\n        in.show();\n    }\n}\n\n\nclass InnerClassDemo {\n    public static void main(String[] args) {\n    //Outer out = new Outer();\n    //out.method();\n    //直接访问外部类中的内部类中的成员。\n    //Outer.Inner in = new Outer().new Inner();\n    //in.show();\n\n    //如果内部类是静态的。 相当于一个外部类\n    //Outer.Inner in = new Outer.Inner();\n    //in.show();\n\n    //如果内部类是静态的，成员是静态的。\n    //Outer.Inner.function();\n    }\n}\n```\n\n## 内部类的访问规则\n\n1. 内部类可以直接访问外部类中的成员, 包括私有, 这是因为内部类中持有一个外部类的引用, 格式 `外部类名.this`\n2. 外部类要访问内部类, 必须建立内部类的对象\n\n## 访问格式:\n\n1. 当内部类定义在外部类的成员位置上, 而且非私有, 可以在 **外部其他类** 中, 可以直接建立内部类对象\n\n  - 格式: `外部类名.内部类名 变量名 = 外部类对象.内部类对象;`\n  - 代码: `Outer.Inner inner = new Outer(). new Inner();`\n  2.\n  ```java\n  public class day09 {\n\n    public static void main(String[] args) {\n      Outer.Inner inner = new Outer(). new Inner();\n      inner.function();\n     }\n    }\n\nclass Outer{\n  public int x = 3; class Inner{\n    int x = 4;\n    void function(){\n      int x = 6;\n      System.out.println(\"X value:\" + x);\n      System.out.println(\"X value:\" + this.x);\n      System.out.println(\"X value:\" + Outer.this.x);\n    }\n  }\n\n}\n\n```\n\n输出结果为:\n`\n6\n3\n4\n`\n\n## 局部中的内部类\n\n内部类定义在局部时:\n- 不可以被成员修饰符修饰;\n- 可以直接访问外部类中的成员, 因为还持有外部类中的引用\n  但是不可以访问它所在的局部中的变量. 只能访问被 `final` 修饰的局部变量;\n\n```java\npublic class Outer {\n  int x = 3;\n  void method(){\n    final int y = 4;\n    class Inner{\n      void function(){\n        System.out.println(y);\n      }\n      new Inner.function();\n    }\n  }\n\nclass InnerClassDemo3{\n    public static void main(String[] args) {\n      Outer out = new Outer().method();\n      out.method(7);\n      out.method(8);\n    }\n}\n\n}\n```\n\n## 匿名内部类\n\n1. 匿名内部类就是内部类的简写格式\n2. 定义匿名内部类的前提:\n  - 内部类必须是继承一个类或实现接口\n3. 匿名内部类的格式: new 父类对象或接口(){定义子类的内容}\n4. 其实匿名内部类就是一个匿名子类对象. 而且这个对象有点胖. 可以理解为带内容的对象;\n\n```java\n\nabstract class AbsDemo{\n  abstract void show();\n}\n\nclass Outer{\n  int x = 3;\n  AbsDemo d = new AbsDemo(){\n    void show(){\n      System.out.println(\"x==\" + x);\n    }\n    void abc(){\n      System.out.println(\"haha\");\n    }\n  };\n}\nd.show();\n//d.abc();//编译失败 因为只能使用父类的引用,无法调用\n\n```\n\n## 异常\n1. 异常:就是程序在运行时出现不正常情况.\n异常的由来: 问题也是现实生活中一个具体的事物, 也可以通过java的类的形式进行描述. 并封装成对象.\n2. 对于问题的划分为两种:\n 一种是严重的问题, 一种非严重的问题;\n\n- 对于严重的, java 通过`Error`类进行描述:\n    对于`Error`一般不编写针对性的代码对其进行处理;\n- 对于非严重的, java 通过`Exception`类进行描述.\n  对于`Exception`可以使用针对性的处理方式进行处理;\n\n\n异常：是在运行时期发生的不正常情况\n在java中用类的形式对不正常情况进行了描述和封装对象。\n描述不正常的情况的类，就称为异常类。\n以前正常流程代码和问题处理代码相结合，\n现在将正常流程代码和问题处理代码分离。提高阅读性.\n其实异常就是java通过面向对象的思想将问题封装成了对象.\n用异常类对其进行描述。\n不同的问题用不同的类进行具体的描述。 比如角标越界。空指针等等。\n问题很多，意味着描述的类也很多，\n将其共性进行向上抽取，形成了异常体系。\n最终问题（不正常情况）就分成了两大类。\nThrowable:无论是error，还是异常，问题，问题发生就应该可以抛出，让调用者知道并处理。\n\t//该体系的特点就在于Throwable及其所有的子类都具有可抛性。\n\t可抛性到底指的是什么呢？怎么体现可抛性呢？\n\t其实是通过两个关键字来体现的。\n\tthrows throw ,凡是可以被这两个关键字所操作的类和对象都具备可抛性.\n\t- 一般不可处理的。Error\n\t\t\t特点：是由jvm抛出的严重性的问题。\n\t\t\t\t 这种问题发生一般不针对性处理。直接修改程序\n\t- 可以处理的。Exception\n\n\n  - 该体系的特点：\n\t 子类的后缀名都是用其父类名作为后缀，阅读性很想。\n\n```java\nclass ExceptionDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tint[] arr = new int[1024*1024*800];//java.lang.OutOfMemoryError: Java heap space\n//\t\tarr = null;\n//\t\tSystem.out.println(arr[3]);\n//\n//\n//\t\tsleep(-5);\n\t}\n\n\n\tpublic static void sleep2(int time)\n\t{\n\t\tif(time<0)\n\t\t{\n      //处理办法。\n      //处理办法。\n      //处理办法。\n      //处理办法。\n      //处理办法。\n\t\t}\n\t\tif(time>100000)\n\t\t{\n    //处理办法。\n    //处理办法。\n    //处理办法。\n    //处理办法。\n    //处理办法。\n    //处理办法。\n\t\t}\n\t\tSystem.out.println(\"我睡。。。\"+time);\n\n//\t\tsleep(-5);\n\t}\n\tpublic static void sleep(int time)\n\t{\n\t\tif(time<0)\n\t\t{\n//\t\t\t抛出 new FuTime();//就代码着时间为负的情况，这个对象中会包含着问题的名称，信息，位置等信息。\n\t\t}\n\t\tif(time>100000)\n\t\t{\n//\t\t\t抛出 new BigTime();\n\t\t}\n\t\tSystem.out.println(\"我睡。。。\"+time);\n\t}\n}\n/*\nclass FuTime\n{\n}\nclass BigTime\n{\n}\n*/\n```\n\n### 运行时异常\n\n对于角标是整数不存在，可以用角标越界表示，\n对于负数为角标的情况，准备用负数角标异常来表示。\n\n负数角标这种异常在java中并没有定义过。\n那就按照java异常的创建思想，面向对象，将负数角标进行自定义描述。并封装成对象。\n\n这种自定义的问题描述成为自定义异常。\n\n注意：如果让一个类称为异常类，必须要继承异常体系，因为只有称为异常体系的子类才有资格具备可抛性。\n才可以被两个关键字所操作，throws throw\n\n\n\n\n### 异常的分类：\n1. 编译时被检测异常:只要是Exception和其子类都是，除了特殊子类RuntimeException体系。\n  这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式。\n  这样的问题都可以针对性的处理。\n\n\n2. 编译时不检测异常(运行时异常):就是Exception中的RuntimeException和其子类。\n这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的而或者引发了内部状态的改变导致的。\n那么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止,让调用者对代码进行修正。\n\n所以自定义异常时，要么继承Exception。要么继承RuntimeException。\n\n### throws 和 throw 的区别。\n\n1. throws使用在函数上。\n   throw使用在函数内。\n2. throws抛出的是异常类，可以抛出多个，用逗号隔开。\n   throw抛出的是异常对象。\n\n\n   异常处理的捕捉形式：\n   这是可以对异常进行针对性处理的方式。\n\n   具体格式是：\n\n```java\n   try\n   {\n   \t//需要被检测异常的代码。\n   }\n   catch(异常类 变量)//该变量用于接收发生的异常对象\n   {\n   \t//处理异常的代码。\n   }\n   finally\n   {\n   \t//一定会被执行的代码。\n     }\n```\n\n### 异常处理的原则：\n1. 函数内容如果抛出需要检测的异常，那么函数上必须要声明。\n否则必须在函数内用trycatch捕捉，否则编译失败。\n\n2. 如果调用到了声明异常的函数，要么trycatch要么throws，否则编译失败。\n\n3. 什么时候catch，什么时候throws 呢？\n功能内容可以解决，用catch。\n解决不了，用throws告诉调用者，由调用者解决 。\n\n4. 一个功能如果抛出了多个异常，那么调用时，必须有对应多个catch进行针对性的处理。\n内部又几个需要检测的异常，就抛几个异常，抛出几个，就catch几个。\n\n\n### 异常的注意事项\n\n1. 子类在覆盖父类方法时，父类的方法如果抛出了异常，\n那么子类的方法只能抛出父类的异常或者该异常的子类。\n\n2. 如果父类抛出多个异常，那么子类只能抛出父类异常的子集。\n简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集。\n\n注意：如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛，就只能try .\n\n```java\ninterface  Inter\n{\n\tvoid function();\n}\n\nclass D implements Inter\n{\n\tpublic void function()//throws Exception\n\t{}\n}\n\nclass A extends Exception\n{\n}\n\nclass B extends A\n{\n}\nclass C extends Exception\n{\n}\n\n\nclass Fu\n{\n\tvoid show()throws A\n\t{}\n}\n\n\nclass Test\n{\n\tvoid method(Fu f)//Fu f  = new Zi();\n\t{\n\t\ttry\n\t\t{\n\t\t\tf.show();\n\n\t\t}\n\t\tcatch (A  a)\n\t\t{\n\t\t}\n\t}\n}\n\n\nclass Zi extends Fu\n{\n\tvoid show()throws C\n\t{\n\n\t}\n}\n```\n","slug":"JavaReview-day09-内部类","published":1,"updated":"2018-01-22T11:34:49.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m05m000gq8kxj4veifuz","content":"<h1 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h1><p>内部类简介:<br>内部类是指在一个外部类的内部再定义一个类。类名不需要和文件夹相同。<br><em>内部类可以是静态static的，也可用public，default，protected和private修饰。（而外部顶级类即类名和文件名相同的只能使用public和default）。</em></p>\n<p><strong>注意</strong>：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。所以内部类的成员变量/方法名可以和外部类的相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mun = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span>//内部类。</span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"show run...\"</span> + mun);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//static void function()//如果内部类中定义了静态成员，该内部类也必须是静态的。</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    System.out.println(\"function run ....\"+num);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Inner in = <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">        in.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Outer out = new Outer();</span></span><br><span class=\"line\">    <span class=\"comment\">//out.method();</span></span><br><span class=\"line\">    <span class=\"comment\">//直接访问外部类中的内部类中的成员。</span></span><br><span class=\"line\">    <span class=\"comment\">//Outer.Inner in = new Outer().new Inner();</span></span><br><span class=\"line\">    <span class=\"comment\">//in.show();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果内部类是静态的。 相当于一个外部类</span></span><br><span class=\"line\">    <span class=\"comment\">//Outer.Inner in = new Outer.Inner();</span></span><br><span class=\"line\">    <span class=\"comment\">//in.show();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果内部类是静态的，成员是静态的。</span></span><br><span class=\"line\">    <span class=\"comment\">//Outer.Inner.function();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内部类的访问规则\"><a href=\"#内部类的访问规则\" class=\"headerlink\" title=\"内部类的访问规则\"></a>内部类的访问规则</h2><ol>\n<li>内部类可以直接访问外部类中的成员, 包括私有, 这是因为内部类中持有一个外部类的引用, 格式 <code>外部类名.this</code></li>\n<li>外部类要访问内部类, 必须建立内部类的对象</li>\n</ol>\n<h2 id=\"访问格式\"><a href=\"#访问格式\" class=\"headerlink\" title=\"访问格式:\"></a>访问格式:</h2><ol>\n<li><p>当内部类定义在外部类的成员位置上, 而且非私有, 可以在 <strong>外部其他类</strong> 中, 可以直接建立内部类对象</p>\n<ul>\n<li>格式: <code>外部类名.内部类名 变量名 = 外部类对象.内部类对象;</code></li>\n<li>代码: <code>Outer.Inner inner = new Outer(). new Inner();</code><br>2.<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">day09</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Outer.Inner inner = <span class=\"keyword\">new</span> Outer(). <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">      inner.function();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x = <span class=\"number\">3</span>; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> x = <span class=\"number\">6</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"X value:\"</span> + x);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"X value:\"</span> + <span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"X value:\"</span> + Outer.<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>输出结果为:<br><code>6\n3\n4</code></p>\n<h2 id=\"局部中的内部类\"><a href=\"#局部中的内部类\" class=\"headerlink\" title=\"局部中的内部类\"></a>局部中的内部类</h2><p>内部类定义在局部时:</p>\n<ul>\n<li>不可以被成员修饰符修饰;</li>\n<li>可以直接访问外部类中的成员, 因为还持有外部类中的引用<br>但是不可以访问它所在的局部中的变量. 只能访问被 <code>final</code> 修饰的局部变量;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(y);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Inner.function();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo3</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Outer out = <span class=\"keyword\">new</span> Outer().method();</span><br><span class=\"line\">      out.method(<span class=\"number\">7</span>);</span><br><span class=\"line\">      out.method(<span class=\"number\">8</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><ol>\n<li>匿名内部类就是内部类的简写格式</li>\n<li>定义匿名内部类的前提:<ul>\n<li>内部类必须是继承一个类或实现接口</li>\n</ul>\n</li>\n<li>匿名内部类的格式: new 父类对象或接口(){定义子类的内容}</li>\n<li>其实匿名内部类就是一个匿名子类对象. 而且这个对象有点胖. 可以理解为带内容的对象;</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbsDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\">  AbsDemo d = <span class=\"keyword\">new</span> AbsDemo()&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"x==\"</span> + x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"haha\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">d.show();</span><br><span class=\"line\"><span class=\"comment\">//d.abc();//编译失败 因为只能使用父类的引用,无法调用</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><ol>\n<li>异常:就是程序在运行时出现不正常情况.<br>异常的由来: 问题也是现实生活中一个具体的事物, 也可以通过java的类的形式进行描述. 并封装成对象.</li>\n<li>对于问题的划分为两种:<br>一种是严重的问题, 一种非严重的问题;</li>\n</ol>\n<ul>\n<li>对于严重的, java 通过<code>Error</code>类进行描述:<br>  对于<code>Error</code>一般不编写针对性的代码对其进行处理;</li>\n<li>对于非严重的, java 通过<code>Exception</code>类进行描述.<br>对于<code>Exception</code>可以使用针对性的处理方式进行处理;</li>\n</ul>\n<p>异常：是在运行时期发生的不正常情况<br>在java中用类的形式对不正常情况进行了描述和封装对象。<br>描述不正常的情况的类，就称为异常类。<br>以前正常流程代码和问题处理代码相结合，<br>现在将正常流程代码和问题处理代码分离。提高阅读性.<br>其实异常就是java通过面向对象的思想将问题封装成了对象.<br>用异常类对其进行描述。<br>不同的问题用不同的类进行具体的描述。 比如角标越界。空指针等等。<br>问题很多，意味着描述的类也很多，<br>将其共性进行向上抽取，形成了异常体系。<br>最终问题（不正常情况）就分成了两大类。<br>Throwable:无论是error，还是异常，问题，问题发生就应该可以抛出，让调用者知道并处理。<br>    //该体系的特点就在于Throwable及其所有的子类都具有可抛性。<br>    可抛性到底指的是什么呢？怎么体现可抛性呢？<br>    其实是通过两个关键字来体现的。<br>    throws throw ,凡是可以被这两个关键字所操作的类和对象都具备可抛性.</p>\n<pre><code>- 一般不可处理的。Error\n        特点：是由jvm抛出的严重性的问题。\n             这种问题发生一般不针对性处理。直接修改程序\n- 可以处理的。Exception\n</code></pre><ul>\n<li>该体系的特点：<br> 子类的后缀名都是用其父类名作为后缀，阅读性很想。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">800</span>];<span class=\"comment\">//java.lang.OutOfMemoryError: Java heap space</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tarr = null;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(arr[3]);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tsleep(-5);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep2</span><span class=\"params\">(<span class=\"keyword\">int</span> time)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(time&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(time&gt;<span class=\"number\">100000</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"我睡。。。\"</span>+time);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tsleep(-5);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(<span class=\"keyword\">int</span> time)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(time&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t抛出 new FuTime();//就代码着时间为负的情况，这个对象中会包含着问题的名称，信息，位置等信息。</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(time&gt;<span class=\"number\">100000</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t抛出 new BigTime();</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"我睡。。。\"</span>+time);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">class FuTime</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">class BigTime</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行时异常\"><a href=\"#运行时异常\" class=\"headerlink\" title=\"运行时异常\"></a>运行时异常</h3><p>对于角标是整数不存在，可以用角标越界表示，<br>对于负数为角标的情况，准备用负数角标异常来表示。</p>\n<p>负数角标这种异常在java中并没有定义过。<br>那就按照java异常的创建思想，面向对象，将负数角标进行自定义描述。并封装成对象。</p>\n<p>这种自定义的问题描述成为自定义异常。</p>\n<p>注意：如果让一个类称为异常类，必须要继承异常体系，因为只有称为异常体系的子类才有资格具备可抛性。<br>才可以被两个关键字所操作，throws throw</p>\n<h3 id=\"异常的分类：\"><a href=\"#异常的分类：\" class=\"headerlink\" title=\"异常的分类：\"></a>异常的分类：</h3><ol>\n<li>编译时被检测异常:只要是Exception和其子类都是，除了特殊子类RuntimeException体系。<br>这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式。<br>这样的问题都可以针对性的处理。</li>\n</ol>\n<ol>\n<li>编译时不检测异常(运行时异常):就是Exception中的RuntimeException和其子类。<br>这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的而或者引发了内部状态的改变导致的。<br>那么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止,让调用者对代码进行修正。</li>\n</ol>\n<p>所以自定义异常时，要么继承Exception。要么继承RuntimeException。</p>\n<h3 id=\"throws-和-throw-的区别。\"><a href=\"#throws-和-throw-的区别。\" class=\"headerlink\" title=\"throws 和 throw 的区别。\"></a>throws 和 throw 的区别。</h3><ol>\n<li>throws使用在函数上。<br>throw使用在函数内。</li>\n<li>throws抛出的是异常类，可以抛出多个，用逗号隔开。<br>throw抛出的是异常对象。</li>\n</ol>\n<p>   异常处理的捕捉形式：<br>   这是可以对异常进行针对性处理的方式。</p>\n<p>   具体格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//需要被检测异常的代码。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(异常类 变量)<span class=\"comment\">//该变量用于接收发生的异常对象</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//处理异常的代码。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//一定会被执行的代码。</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异常处理的原则：\"><a href=\"#异常处理的原则：\" class=\"headerlink\" title=\"异常处理的原则：\"></a>异常处理的原则：</h3><ol>\n<li><p>函数内容如果抛出需要检测的异常，那么函数上必须要声明。<br>否则必须在函数内用trycatch捕捉，否则编译失败。</p>\n</li>\n<li><p>如果调用到了声明异常的函数，要么trycatch要么throws，否则编译失败。</p>\n</li>\n<li><p>什么时候catch，什么时候throws 呢？<br>功能内容可以解决，用catch。<br>解决不了，用throws告诉调用者，由调用者解决 。</p>\n</li>\n<li><p>一个功能如果抛出了多个异常，那么调用时，必须有对应多个catch进行针对性的处理。<br>内部又几个需要检测的异常，就抛几个异常，抛出几个，就catch几个。</p>\n</li>\n</ol>\n<h3 id=\"异常的注意事项\"><a href=\"#异常的注意事项\" class=\"headerlink\" title=\"异常的注意事项\"></a>异常的注意事项</h3><ol>\n<li><p>子类在覆盖父类方法时，父类的方法如果抛出了异常，<br>那么子类的方法只能抛出父类的异常或者该异常的子类。</p>\n</li>\n<li><p>如果父类抛出多个异常，那么子类只能抛出父类异常的子集。<br>简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集。</p>\n</li>\n</ol>\n<p>注意：如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛，就只能try .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span>  <span class=\"title\">Inter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Inter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span><span class=\"comment\">//throws Exception</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> A</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(Fu f)</span><span class=\"comment\">//Fu f  = new Zi();</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tf.show();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (A  a)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> C</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h1><p>内部类简介:<br>内部类是指在一个外部类的内部再定义一个类。类名不需要和文件夹相同。<br><em>内部类可以是静态static的，也可用public，default，protected和private修饰。（而外部顶级类即类名和文件名相同的只能使用public和default）。</em></p>\n<p><strong>注意</strong>：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。所以内部类的成员变量/方法名可以和外部类的相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mun = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span>//内部类。</span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"show run...\"</span> + mun);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//static void function()//如果内部类中定义了静态成员，该内部类也必须是静态的。</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    System.out.println(\"function run ....\"+num);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Inner in = <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">        in.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Outer out = new Outer();</span></span><br><span class=\"line\">    <span class=\"comment\">//out.method();</span></span><br><span class=\"line\">    <span class=\"comment\">//直接访问外部类中的内部类中的成员。</span></span><br><span class=\"line\">    <span class=\"comment\">//Outer.Inner in = new Outer().new Inner();</span></span><br><span class=\"line\">    <span class=\"comment\">//in.show();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果内部类是静态的。 相当于一个外部类</span></span><br><span class=\"line\">    <span class=\"comment\">//Outer.Inner in = new Outer.Inner();</span></span><br><span class=\"line\">    <span class=\"comment\">//in.show();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果内部类是静态的，成员是静态的。</span></span><br><span class=\"line\">    <span class=\"comment\">//Outer.Inner.function();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内部类的访问规则\"><a href=\"#内部类的访问规则\" class=\"headerlink\" title=\"内部类的访问规则\"></a>内部类的访问规则</h2><ol>\n<li>内部类可以直接访问外部类中的成员, 包括私有, 这是因为内部类中持有一个外部类的引用, 格式 <code>外部类名.this</code></li>\n<li>外部类要访问内部类, 必须建立内部类的对象</li>\n</ol>\n<h2 id=\"访问格式\"><a href=\"#访问格式\" class=\"headerlink\" title=\"访问格式:\"></a>访问格式:</h2><ol>\n<li><p>当内部类定义在外部类的成员位置上, 而且非私有, 可以在 <strong>外部其他类</strong> 中, 可以直接建立内部类对象</p>\n<ul>\n<li>格式: <code>外部类名.内部类名 变量名 = 外部类对象.内部类对象;</code></li>\n<li>代码: <code>Outer.Inner inner = new Outer(). new Inner();</code><br>2.<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">day09</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Outer.Inner inner = <span class=\"keyword\">new</span> Outer(). <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">      inner.function();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x = <span class=\"number\">3</span>; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> x = <span class=\"number\">6</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"X value:\"</span> + x);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"X value:\"</span> + <span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"X value:\"</span> + Outer.<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>输出结果为:<br><code>6\n3\n4</code></p>\n<h2 id=\"局部中的内部类\"><a href=\"#局部中的内部类\" class=\"headerlink\" title=\"局部中的内部类\"></a>局部中的内部类</h2><p>内部类定义在局部时:</p>\n<ul>\n<li>不可以被成员修饰符修饰;</li>\n<li>可以直接访问外部类中的成员, 因为还持有外部类中的引用<br>但是不可以访问它所在的局部中的变量. 只能访问被 <code>final</code> 修饰的局部变量;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(y);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Inner.function();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassDemo3</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Outer out = <span class=\"keyword\">new</span> Outer().method();</span><br><span class=\"line\">      out.method(<span class=\"number\">7</span>);</span><br><span class=\"line\">      out.method(<span class=\"number\">8</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><ol>\n<li>匿名内部类就是内部类的简写格式</li>\n<li>定义匿名内部类的前提:<ul>\n<li>内部类必须是继承一个类或实现接口</li>\n</ul>\n</li>\n<li>匿名内部类的格式: new 父类对象或接口(){定义子类的内容}</li>\n<li>其实匿名内部类就是一个匿名子类对象. 而且这个对象有点胖. 可以理解为带内容的对象;</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbsDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\">  AbsDemo d = <span class=\"keyword\">new</span> AbsDemo()&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"x==\"</span> + x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">abc</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"haha\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">d.show();</span><br><span class=\"line\"><span class=\"comment\">//d.abc();//编译失败 因为只能使用父类的引用,无法调用</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><ol>\n<li>异常:就是程序在运行时出现不正常情况.<br>异常的由来: 问题也是现实生活中一个具体的事物, 也可以通过java的类的形式进行描述. 并封装成对象.</li>\n<li>对于问题的划分为两种:<br>一种是严重的问题, 一种非严重的问题;</li>\n</ol>\n<ul>\n<li>对于严重的, java 通过<code>Error</code>类进行描述:<br>  对于<code>Error</code>一般不编写针对性的代码对其进行处理;</li>\n<li>对于非严重的, java 通过<code>Exception</code>类进行描述.<br>对于<code>Exception</code>可以使用针对性的处理方式进行处理;</li>\n</ul>\n<p>异常：是在运行时期发生的不正常情况<br>在java中用类的形式对不正常情况进行了描述和封装对象。<br>描述不正常的情况的类，就称为异常类。<br>以前正常流程代码和问题处理代码相结合，<br>现在将正常流程代码和问题处理代码分离。提高阅读性.<br>其实异常就是java通过面向对象的思想将问题封装成了对象.<br>用异常类对其进行描述。<br>不同的问题用不同的类进行具体的描述。 比如角标越界。空指针等等。<br>问题很多，意味着描述的类也很多，<br>将其共性进行向上抽取，形成了异常体系。<br>最终问题（不正常情况）就分成了两大类。<br>Throwable:无论是error，还是异常，问题，问题发生就应该可以抛出，让调用者知道并处理。<br>    //该体系的特点就在于Throwable及其所有的子类都具有可抛性。<br>    可抛性到底指的是什么呢？怎么体现可抛性呢？<br>    其实是通过两个关键字来体现的。<br>    throws throw ,凡是可以被这两个关键字所操作的类和对象都具备可抛性.</p>\n<pre><code>- 一般不可处理的。Error\n        特点：是由jvm抛出的严重性的问题。\n             这种问题发生一般不针对性处理。直接修改程序\n- 可以处理的。Exception\n</code></pre><ul>\n<li>该体系的特点：<br> 子类的后缀名都是用其父类名作为后缀，阅读性很想。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">800</span>];<span class=\"comment\">//java.lang.OutOfMemoryError: Java heap space</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tarr = null;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(arr[3]);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tsleep(-5);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep2</span><span class=\"params\">(<span class=\"keyword\">int</span> time)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(time&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">      <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(time&gt;<span class=\"number\">100000</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">    <span class=\"comment\">//处理办法。</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"我睡。。。\"</span>+time);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tsleep(-5);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(<span class=\"keyword\">int</span> time)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(time&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t抛出 new FuTime();//就代码着时间为负的情况，这个对象中会包含着问题的名称，信息，位置等信息。</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(time&gt;<span class=\"number\">100000</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t抛出 new BigTime();</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"我睡。。。\"</span>+time);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">class FuTime</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">class BigTime</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行时异常\"><a href=\"#运行时异常\" class=\"headerlink\" title=\"运行时异常\"></a>运行时异常</h3><p>对于角标是整数不存在，可以用角标越界表示，<br>对于负数为角标的情况，准备用负数角标异常来表示。</p>\n<p>负数角标这种异常在java中并没有定义过。<br>那就按照java异常的创建思想，面向对象，将负数角标进行自定义描述。并封装成对象。</p>\n<p>这种自定义的问题描述成为自定义异常。</p>\n<p>注意：如果让一个类称为异常类，必须要继承异常体系，因为只有称为异常体系的子类才有资格具备可抛性。<br>才可以被两个关键字所操作，throws throw</p>\n<h3 id=\"异常的分类：\"><a href=\"#异常的分类：\" class=\"headerlink\" title=\"异常的分类：\"></a>异常的分类：</h3><ol>\n<li>编译时被检测异常:只要是Exception和其子类都是，除了特殊子类RuntimeException体系。<br>这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式。<br>这样的问题都可以针对性的处理。</li>\n</ol>\n<ol>\n<li>编译时不检测异常(运行时异常):就是Exception中的RuntimeException和其子类。<br>这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因导致的而或者引发了内部状态的改变导致的。<br>那么这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止,让调用者对代码进行修正。</li>\n</ol>\n<p>所以自定义异常时，要么继承Exception。要么继承RuntimeException。</p>\n<h3 id=\"throws-和-throw-的区别。\"><a href=\"#throws-和-throw-的区别。\" class=\"headerlink\" title=\"throws 和 throw 的区别。\"></a>throws 和 throw 的区别。</h3><ol>\n<li>throws使用在函数上。<br>throw使用在函数内。</li>\n<li>throws抛出的是异常类，可以抛出多个，用逗号隔开。<br>throw抛出的是异常对象。</li>\n</ol>\n<p>   异常处理的捕捉形式：<br>   这是可以对异常进行针对性处理的方式。</p>\n<p>   具体格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//需要被检测异常的代码。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(异常类 变量)<span class=\"comment\">//该变量用于接收发生的异常对象</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//处理异常的代码。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//一定会被执行的代码。</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异常处理的原则：\"><a href=\"#异常处理的原则：\" class=\"headerlink\" title=\"异常处理的原则：\"></a>异常处理的原则：</h3><ol>\n<li><p>函数内容如果抛出需要检测的异常，那么函数上必须要声明。<br>否则必须在函数内用trycatch捕捉，否则编译失败。</p>\n</li>\n<li><p>如果调用到了声明异常的函数，要么trycatch要么throws，否则编译失败。</p>\n</li>\n<li><p>什么时候catch，什么时候throws 呢？<br>功能内容可以解决，用catch。<br>解决不了，用throws告诉调用者，由调用者解决 。</p>\n</li>\n<li><p>一个功能如果抛出了多个异常，那么调用时，必须有对应多个catch进行针对性的处理。<br>内部又几个需要检测的异常，就抛几个异常，抛出几个，就catch几个。</p>\n</li>\n</ol>\n<h3 id=\"异常的注意事项\"><a href=\"#异常的注意事项\" class=\"headerlink\" title=\"异常的注意事项\"></a>异常的注意事项</h3><ol>\n<li><p>子类在覆盖父类方法时，父类的方法如果抛出了异常，<br>那么子类的方法只能抛出父类的异常或者该异常的子类。</p>\n</li>\n<li><p>如果父类抛出多个异常，那么子类只能抛出父类异常的子集。<br>简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集。</p>\n</li>\n</ol>\n<p>注意：如果父类的方法没有抛出异常，那么子类覆盖时绝对不能抛，就只能try .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span>  <span class=\"title\">Inter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Inter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span><span class=\"comment\">//throws Exception</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> A</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(Fu f)</span><span class=\"comment\">//Fu f  = new Zi();</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tf.show();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (A  a)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> C</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaReview-day10-异常","date":"2018-01-17T03:54:27.000Z","type":["JavaReview"],"_content":"\n\n## 异常的格式\n\n1. 第一种:\n\n经典格式\n\n```java\ntry{\n\n}catch(Exception e){\n\n}\n\n```\n\n2. 第二种:\n\n带有 finally的格式\n```java\ntry{\n\n}catch(Exception e){\n\n}finally{\n\n}\n```\n3. 第三种:\n\n特殊格式\n\n```java\ntry{\n\n}finally{\n\n}\n```\n- 第三种格式的特点及作用\n\n```java\nclass ExceptionDemo{\n  public void function(){\n    throw new Exception();  \n  }\n}\n```\n以上代码会编译失败\n但添加`finally`语句后即可编译成功, 如下:\n\n```java\nclass ExceptionDemo{\n  public void function(){\n    try{\n    throw new Exception();  \n  }finally{\n\n  }\n  }\n}\n```\n### 异常在子父类覆盖中的体现\n\n1. 子类在覆盖父类时,如果父类的方法抛出异常, 那么子类的覆盖方法只能抛出父类的异常, 或该异常的子类;\n2. 如果父类方法抛出多个异常, 那么子类方法在覆盖该方法时, 只能抛出父类异常的子集;\n3. 如果父类或接口的方法中没有抛出异常, 那么子类在覆盖该方法时, 也不能抛出异常, 如果子类方法发生类异常, 就必须进行`try`处理, 绝对不能抛出;\n```java\ninterface  Inter\n{\n\tvoid function();\n}\n\nclass D implements Inter\n{\n\tpublic void function()//throws Exception\n  {\n\n  }\n}\n\nclass A extends Exception{\n\n}\n\nclass B extends A{\n\n}\nclass C extends Exception{\n\n}\n\n\n// Exception\n// \t|--A\n// \t\t|--B\n// \t|--C\n\n\nclass Fu\n{\n\tvoid show()throws A{\n\n  }\n}\n\n\nclass Test\n{\n\tvoid method(Fu f)//Fu f  = new Zi();\n\t{\n\t\ttry\n\t\t{\n\t\t\tf.show();\n\n\t\t}\n\t\tcatch (A  a)\n\t\t{\n\t\t}\n\t}\n}\n\n\nclass Zi extends Fu\n{\n\tvoid show()throws C\n\t{\n\n\t}\n}\n\nclass ExceptionDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tTest t = new Test();\n\t\tt.show(new Zi());\n\t}\n}\n\n```\n\n## 总结\n\n\n异常：\n是什么？是对问题的描述。将问题进行对象的封装。\n------------\n异常体系：\n\tThrowable\n\t\t|--Error\n\t\t|--Exception\n\t\t\t|--RuntimeException\n\n异常体系的特点：异常体系中的所有类以及建立的对象都具备可抛性。\n\t\t\t\t也就是说可以被throw和throws关键字所操作。\n\t\t\t\t只有异常体系具备这个特点。\n\n\n--------------\nthrow和throws的用法：\n\nthrow定义在函数内，用于抛出异常对象。\nthrows定义在函数上，用于抛出异常类，可以抛出多个用逗号隔开。\n\n\n当函数内容有throw抛出异常对象，并未进行try处理。必须要在函数上声明，都在编译失败。\n注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。\n--------------\n\n\n如果函数声明了异常，调用者需要进行处理。处理方法可以throws可以try。\n\n异常有两种：\n\t编译时被检测异常\n\t\t该异常在编译时，如果没有处理(没有抛也没有try)，编译失败。\n\t\t该异常被标识，代表这可以被处理。\n\t运行时异常(编译时不检测)\n\t\t在编译时，不需要处理，编译器不检查。\n\t\t该异常的发生，建议不处理，让程序停止。需要对代码进行修正。\n\n\n\n--------------\n异常处理语句：\ntry\n{\n\t需要被检测的代码；\n}\ncatch ()\n{\n\t处理异常的代码；\n}\nfinally\n{\n\t一定会执行的代码；\n}\n\n有三个结合格式：\n1. 第一种\n```java\ntry\n\t{\n\n\t}\n\tcatch ()\n\t{\n\t}\n```\n2. 第二种\n```java\ntry\n\t{\n\n\t}\n\tfinally\n\t{\n\n\t}\n```\n\n3. 第三种\n```java\ntry\n\t{\n\n\t}\n\tcatch ()\n\t{\n\t}\n\tfinally\n\t{\n\n\t}\n```\n\n\n\n## 注意:\n1. finally中定义的通常是 关闭资源代码。因为资源必须释放。\n2. finally只有一种情况不会执行。当执行到System.exit(0);fianlly不会执行。\n\n--------------\n\n### 自定义异常：\n\t定义类继承Exception或者RuntimeException\n\t1. 为了让该自定义类具备可抛性。\n\t2. 让该类具备操作异常的共性方法。\n\n\t当要定义自定义异常的信息时，可以使用父类已经定义好的功能。\n\t异常异常信息传递给父类的构造函数。\n```java\n\tclass MyException extends Exception\n\t{\n\t\tMyException(String message)\n\t\t{\n\t\t\tsuper(message);\n\t\t}\n\t}\n```\n\n## 自定义异常:\n  按照java的面向对象思想，将程序中出现的特有问题进行封装。\n--------------\n\n\n## 异常的好处：\n\t1. 将问题进行封装。\n\t2. 将正常流程代码和问题处理代码相分离，方便于阅读。\n\n\n## 异常的处理原则：\n\t1. 处理方式有两种：try 或者 throws。\n\t2. 调用到抛出异常的功能时，抛出几个，就处理几个。\n\t\t一个try对应多个catch。\n\t3. 多个catch，父类的catch放到最下面。\n\t4. catch内，需要定义针对性的处理方式。不要简单的定义printStackTrace，输出语句。\n\t\t也不要不写。\n\t\t当捕获到的异常，本功能处理不了时，可以继续在catch中抛出。\n```java\n  try\n  {\n  \tthrow new AException();\n  }\n  catch (AException e)\n  {\n  \tthrow e;\n  }\n```\n如果该异常处理不了，但并不属于该功能出现的异常。\n可以将异常转换后，在抛出和该功能相关的异常。\n\n或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，\n当调用者知道。并处理。也可以将捕获异常处理后，转换新的异常。\n```java\ntry\n{\n\tthrow new AException();\n}\ncatch (AException e)\n{\n\t// 对AException处理。\n\tthrow new BException();\n}\n```\n\t\t比如，汇款的例子。\n\n\n异常的注意事项：\n\t在子父类覆盖时：\n\t1，子类抛出的异常必须是父类的异常的子类或者子集。\n\t2，如果父类或者接口没有异常抛出时，子类覆盖出现异常，只能try不能抛。\n\n\n\n参阅\nExceptionTest.java 老师用电脑上课\nExceptionTest1.java 图形面积。\n```java\nclass  \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tint x = 0;\n\t\ttry\n\t\t{\n\t\t\tx = 4;\n\t\t}\n\t\tcatch ()\n\t\t{\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tSystem.out.println(\"x=\"+x);\n\t\t}\n\n\t}\n}\n```\n","source":"_posts/JavaReview-day10-异常.md","raw":"---\ntitle: JavaReview-day10-异常\ndate: 2018-01-17 11:54:27\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n\n## 异常的格式\n\n1. 第一种:\n\n经典格式\n\n```java\ntry{\n\n}catch(Exception e){\n\n}\n\n```\n\n2. 第二种:\n\n带有 finally的格式\n```java\ntry{\n\n}catch(Exception e){\n\n}finally{\n\n}\n```\n3. 第三种:\n\n特殊格式\n\n```java\ntry{\n\n}finally{\n\n}\n```\n- 第三种格式的特点及作用\n\n```java\nclass ExceptionDemo{\n  public void function(){\n    throw new Exception();  \n  }\n}\n```\n以上代码会编译失败\n但添加`finally`语句后即可编译成功, 如下:\n\n```java\nclass ExceptionDemo{\n  public void function(){\n    try{\n    throw new Exception();  \n  }finally{\n\n  }\n  }\n}\n```\n### 异常在子父类覆盖中的体现\n\n1. 子类在覆盖父类时,如果父类的方法抛出异常, 那么子类的覆盖方法只能抛出父类的异常, 或该异常的子类;\n2. 如果父类方法抛出多个异常, 那么子类方法在覆盖该方法时, 只能抛出父类异常的子集;\n3. 如果父类或接口的方法中没有抛出异常, 那么子类在覆盖该方法时, 也不能抛出异常, 如果子类方法发生类异常, 就必须进行`try`处理, 绝对不能抛出;\n```java\ninterface  Inter\n{\n\tvoid function();\n}\n\nclass D implements Inter\n{\n\tpublic void function()//throws Exception\n  {\n\n  }\n}\n\nclass A extends Exception{\n\n}\n\nclass B extends A{\n\n}\nclass C extends Exception{\n\n}\n\n\n// Exception\n// \t|--A\n// \t\t|--B\n// \t|--C\n\n\nclass Fu\n{\n\tvoid show()throws A{\n\n  }\n}\n\n\nclass Test\n{\n\tvoid method(Fu f)//Fu f  = new Zi();\n\t{\n\t\ttry\n\t\t{\n\t\t\tf.show();\n\n\t\t}\n\t\tcatch (A  a)\n\t\t{\n\t\t}\n\t}\n}\n\n\nclass Zi extends Fu\n{\n\tvoid show()throws C\n\t{\n\n\t}\n}\n\nclass ExceptionDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tTest t = new Test();\n\t\tt.show(new Zi());\n\t}\n}\n\n```\n\n## 总结\n\n\n异常：\n是什么？是对问题的描述。将问题进行对象的封装。\n------------\n异常体系：\n\tThrowable\n\t\t|--Error\n\t\t|--Exception\n\t\t\t|--RuntimeException\n\n异常体系的特点：异常体系中的所有类以及建立的对象都具备可抛性。\n\t\t\t\t也就是说可以被throw和throws关键字所操作。\n\t\t\t\t只有异常体系具备这个特点。\n\n\n--------------\nthrow和throws的用法：\n\nthrow定义在函数内，用于抛出异常对象。\nthrows定义在函数上，用于抛出异常类，可以抛出多个用逗号隔开。\n\n\n当函数内容有throw抛出异常对象，并未进行try处理。必须要在函数上声明，都在编译失败。\n注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。\n--------------\n\n\n如果函数声明了异常，调用者需要进行处理。处理方法可以throws可以try。\n\n异常有两种：\n\t编译时被检测异常\n\t\t该异常在编译时，如果没有处理(没有抛也没有try)，编译失败。\n\t\t该异常被标识，代表这可以被处理。\n\t运行时异常(编译时不检测)\n\t\t在编译时，不需要处理，编译器不检查。\n\t\t该异常的发生，建议不处理，让程序停止。需要对代码进行修正。\n\n\n\n--------------\n异常处理语句：\ntry\n{\n\t需要被检测的代码；\n}\ncatch ()\n{\n\t处理异常的代码；\n}\nfinally\n{\n\t一定会执行的代码；\n}\n\n有三个结合格式：\n1. 第一种\n```java\ntry\n\t{\n\n\t}\n\tcatch ()\n\t{\n\t}\n```\n2. 第二种\n```java\ntry\n\t{\n\n\t}\n\tfinally\n\t{\n\n\t}\n```\n\n3. 第三种\n```java\ntry\n\t{\n\n\t}\n\tcatch ()\n\t{\n\t}\n\tfinally\n\t{\n\n\t}\n```\n\n\n\n## 注意:\n1. finally中定义的通常是 关闭资源代码。因为资源必须释放。\n2. finally只有一种情况不会执行。当执行到System.exit(0);fianlly不会执行。\n\n--------------\n\n### 自定义异常：\n\t定义类继承Exception或者RuntimeException\n\t1. 为了让该自定义类具备可抛性。\n\t2. 让该类具备操作异常的共性方法。\n\n\t当要定义自定义异常的信息时，可以使用父类已经定义好的功能。\n\t异常异常信息传递给父类的构造函数。\n```java\n\tclass MyException extends Exception\n\t{\n\t\tMyException(String message)\n\t\t{\n\t\t\tsuper(message);\n\t\t}\n\t}\n```\n\n## 自定义异常:\n  按照java的面向对象思想，将程序中出现的特有问题进行封装。\n--------------\n\n\n## 异常的好处：\n\t1. 将问题进行封装。\n\t2. 将正常流程代码和问题处理代码相分离，方便于阅读。\n\n\n## 异常的处理原则：\n\t1. 处理方式有两种：try 或者 throws。\n\t2. 调用到抛出异常的功能时，抛出几个，就处理几个。\n\t\t一个try对应多个catch。\n\t3. 多个catch，父类的catch放到最下面。\n\t4. catch内，需要定义针对性的处理方式。不要简单的定义printStackTrace，输出语句。\n\t\t也不要不写。\n\t\t当捕获到的异常，本功能处理不了时，可以继续在catch中抛出。\n```java\n  try\n  {\n  \tthrow new AException();\n  }\n  catch (AException e)\n  {\n  \tthrow e;\n  }\n```\n如果该异常处理不了，但并不属于该功能出现的异常。\n可以将异常转换后，在抛出和该功能相关的异常。\n\n或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，\n当调用者知道。并处理。也可以将捕获异常处理后，转换新的异常。\n```java\ntry\n{\n\tthrow new AException();\n}\ncatch (AException e)\n{\n\t// 对AException处理。\n\tthrow new BException();\n}\n```\n\t\t比如，汇款的例子。\n\n\n异常的注意事项：\n\t在子父类覆盖时：\n\t1，子类抛出的异常必须是父类的异常的子类或者子集。\n\t2，如果父类或者接口没有异常抛出时，子类覆盖出现异常，只能try不能抛。\n\n\n\n参阅\nExceptionTest.java 老师用电脑上课\nExceptionTest1.java 图形面积。\n```java\nclass  \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tint x = 0;\n\t\ttry\n\t\t{\n\t\t\tx = 4;\n\t\t}\n\t\tcatch ()\n\t\t{\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tSystem.out.println(\"x=\"+x);\n\t\t}\n\n\t}\n}\n```\n","slug":"JavaReview-day10-异常","published":1,"updated":"2018-01-22T11:34:28.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m05o000iq8kx7to5y6py","content":"<h2 id=\"异常的格式\"><a href=\"#异常的格式\" class=\"headerlink\" title=\"异常的格式\"></a>异常的格式</h2><ol>\n<li>第一种:</li>\n</ol>\n<p>经典格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>第二种:</li>\n</ol>\n<p>带有 finally的格式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>第三种:</li>\n</ol>\n<p>特殊格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第三种格式的特点及作用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码会编译失败<br>但添加<code>finally</code>语句后即可编译成功, 如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();  </span><br><span class=\"line\">  &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异常在子父类覆盖中的体现\"><a href=\"#异常在子父类覆盖中的体现\" class=\"headerlink\" title=\"异常在子父类覆盖中的体现\"></a>异常在子父类覆盖中的体现</h3><ol>\n<li>子类在覆盖父类时,如果父类的方法抛出异常, 那么子类的覆盖方法只能抛出父类的异常, 或该异常的子类;</li>\n<li>如果父类方法抛出多个异常, 那么子类方法在覆盖该方法时, 只能抛出父类异常的子集;</li>\n<li>如果父类或接口的方法中没有抛出异常, 那么子类在覆盖该方法时, 也不能抛出异常, 如果子类方法发生类异常, 就必须进行<code>try</code>处理, 绝对不能抛出;<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span>  <span class=\"title\">Inter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Inter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span><span class=\"comment\">//throws Exception</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Exception</span></span><br><span class=\"line\"><span class=\"comment\">// \t|--A</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t|--B</span></span><br><span class=\"line\"><span class=\"comment\">// \t|--C</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> A</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(Fu f)</span><span class=\"comment\">//Fu f  = new Zi();</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tf.show();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (A  a)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> C</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tTest t = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">\t\tt.show(<span class=\"keyword\">new</span> Zi());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>异常：</p>\n<h2 id=\"是什么？是对问题的描述。将问题进行对象的封装。\"><a href=\"#是什么？是对问题的描述。将问题进行对象的封装。\" class=\"headerlink\" title=\"是什么？是对问题的描述。将问题进行对象的封装。\"></a>是什么？是对问题的描述。将问题进行对象的封装。</h2><p>异常体系：<br>    Throwable<br>        |–Error<br>        |–Exception<br>            |–RuntimeException</p>\n<p>异常体系的特点：异常体系中的所有类以及建立的对象都具备可抛性。<br>                也就是说可以被throw和throws关键字所操作。<br>                只有异常体系具备这个特点。</p>\n<hr>\n<p>throw和throws的用法：</p>\n<p>throw定义在函数内，用于抛出异常对象。<br>throws定义在函数上，用于抛出异常类，可以抛出多个用逗号隔开。</p>\n<p>当函数内容有throw抛出异常对象，并未进行try处理。必须要在函数上声明，都在编译失败。</p>\n<h2 id=\"注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。\"><a href=\"#注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。\" class=\"headerlink\" title=\"注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。\"></a>注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。</h2><p>如果函数声明了异常，调用者需要进行处理。处理方法可以throws可以try。</p>\n<p>异常有两种：<br>    编译时被检测异常<br>        该异常在编译时，如果没有处理(没有抛也没有try)，编译失败。<br>        该异常被标识，代表这可以被处理。<br>    运行时异常(编译时不检测)<br>        在编译时，不需要处理，编译器不检查。<br>        该异常的发生，建议不处理，让程序停止。需要对代码进行修正。</p>\n<hr>\n<p>异常处理语句：<br>try<br>{<br>    需要被检测的代码；<br>}<br>catch ()<br>{<br>    处理异常的代码；<br>}<br>finally<br>{<br>    一定会执行的代码；<br>}</p>\n<p>有三个结合格式：</p>\n<ol>\n<li><p>第一种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> ()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> ()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h2><ol>\n<li>finally中定义的通常是 关闭资源代码。因为资源必须释放。</li>\n<li>finally只有一种情况不会执行。当执行到System.exit(0);fianlly不会执行。</li>\n</ol>\n<hr>\n<h3 id=\"自定义异常：\"><a href=\"#自定义异常：\" class=\"headerlink\" title=\"自定义异常：\"></a>自定义异常：</h3><pre><code>定义类继承Exception或者RuntimeException\n1. 为了让该自定义类具备可抛性。\n2. 让该类具备操作异常的共性方法。\n\n当要定义自定义异常的信息时，可以使用父类已经定义好的功能。\n异常异常信息传递给父类的构造函数。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\tMyException(String message)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常:\"></a>自定义异常:</h2><h2 id=\"按照java的面向对象思想，将程序中出现的特有问题进行封装。\"><a href=\"#按照java的面向对象思想，将程序中出现的特有问题进行封装。\" class=\"headerlink\" title=\"  按照java的面向对象思想，将程序中出现的特有问题进行封装。\"></a>  按照java的面向对象思想，将程序中出现的特有问题进行封装。</h2><h2 id=\"异常的好处：\"><a href=\"#异常的好处：\" class=\"headerlink\" title=\"异常的好处：\"></a>异常的好处：</h2><pre><code>1. 将问题进行封装。\n2. 将正常流程代码和问题处理代码相分离，方便于阅读。\n</code></pre><h2 id=\"异常的处理原则：\"><a href=\"#异常的处理原则：\" class=\"headerlink\" title=\"异常的处理原则：\"></a>异常的处理原则：</h2><pre><code>1. 处理方式有两种：try 或者 throws。\n2. 调用到抛出异常的功能时，抛出几个，就处理几个。\n    一个try对应多个catch。\n3. 多个catch，父类的catch放到最下面。\n4. catch内，需要定义针对性的处理方式。不要简单的定义printStackTrace，输出语句。\n    也不要不写。\n    当捕获到的异常，本功能处理不了时，可以继续在catch中抛出。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (AException e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果该异常处理不了，但并不属于该功能出现的异常。<br>可以将异常转换后，在抛出和该功能相关的异常。</p>\n<p>或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，<br>当调用者知道。并处理。也可以将捕获异常处理后，转换新的异常。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (AException e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 对AException处理。</span></span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<pre><code>比如，汇款的例子。\n</code></pre><p>异常的注意事项：<br>    在子父类覆盖时：<br>    1，子类抛出的异常必须是父类的异常的子类或者子集。<br>    2，如果父类或者接口没有异常抛出时，子类覆盖出现异常，只能try不能抛。</p>\n<p>参阅<br>ExceptionTest.java 老师用电脑上课<br>ExceptionTest1.java 图形面积。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> ()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"x=\"</span>+x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"异常的格式\"><a href=\"#异常的格式\" class=\"headerlink\" title=\"异常的格式\"></a>异常的格式</h2><ol>\n<li>第一种:</li>\n</ol>\n<p>经典格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>第二种:</li>\n</ol>\n<p>带有 finally的格式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>第三种:</li>\n</ol>\n<p>特殊格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第三种格式的特点及作用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码会编译失败<br>但添加<code>finally</code>语句后即可编译成功, 如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();  </span><br><span class=\"line\">  &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异常在子父类覆盖中的体现\"><a href=\"#异常在子父类覆盖中的体现\" class=\"headerlink\" title=\"异常在子父类覆盖中的体现\"></a>异常在子父类覆盖中的体现</h3><ol>\n<li>子类在覆盖父类时,如果父类的方法抛出异常, 那么子类的覆盖方法只能抛出父类的异常, 或该异常的子类;</li>\n<li>如果父类方法抛出多个异常, 那么子类方法在覆盖该方法时, 只能抛出父类异常的子集;</li>\n<li>如果父类或接口的方法中没有抛出异常, 那么子类在覆盖该方法时, 也不能抛出异常, 如果子类方法发生类异常, 就必须进行<code>try</code>处理, 绝对不能抛出;<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span>  <span class=\"title\">Inter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Inter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span><span class=\"comment\">//throws Exception</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Exception</span></span><br><span class=\"line\"><span class=\"comment\">// \t|--A</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t|--B</span></span><br><span class=\"line\"><span class=\"comment\">// \t|--C</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> A</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(Fu f)</span><span class=\"comment\">//Fu f  = new Zi();</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tf.show();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (A  a)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fu</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> C</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tTest t = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">\t\tt.show(<span class=\"keyword\">new</span> Zi());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>异常：</p>\n<h2 id=\"是什么？是对问题的描述。将问题进行对象的封装。\"><a href=\"#是什么？是对问题的描述。将问题进行对象的封装。\" class=\"headerlink\" title=\"是什么？是对问题的描述。将问题进行对象的封装。\"></a>是什么？是对问题的描述。将问题进行对象的封装。</h2><p>异常体系：<br>    Throwable<br>        |–Error<br>        |–Exception<br>            |–RuntimeException</p>\n<p>异常体系的特点：异常体系中的所有类以及建立的对象都具备可抛性。<br>                也就是说可以被throw和throws关键字所操作。<br>                只有异常体系具备这个特点。</p>\n<hr>\n<p>throw和throws的用法：</p>\n<p>throw定义在函数内，用于抛出异常对象。<br>throws定义在函数上，用于抛出异常类，可以抛出多个用逗号隔开。</p>\n<p>当函数内容有throw抛出异常对象，并未进行try处理。必须要在函数上声明，都在编译失败。</p>\n<h2 id=\"注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。\"><a href=\"#注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。\" class=\"headerlink\" title=\"注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。\"></a>注意，RuntimeException除外。也就说，函数内如果抛出的RuntimeExcpetion异常，函数上可以不用声明。</h2><p>如果函数声明了异常，调用者需要进行处理。处理方法可以throws可以try。</p>\n<p>异常有两种：<br>    编译时被检测异常<br>        该异常在编译时，如果没有处理(没有抛也没有try)，编译失败。<br>        该异常被标识，代表这可以被处理。<br>    运行时异常(编译时不检测)<br>        在编译时，不需要处理，编译器不检查。<br>        该异常的发生，建议不处理，让程序停止。需要对代码进行修正。</p>\n<hr>\n<p>异常处理语句：<br>try<br>{<br>    需要被检测的代码；<br>}<br>catch ()<br>{<br>    处理异常的代码；<br>}<br>finally<br>{<br>    一定会执行的代码；<br>}</p>\n<p>有三个结合格式：</p>\n<ol>\n<li><p>第一种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> ()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> ()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h2><ol>\n<li>finally中定义的通常是 关闭资源代码。因为资源必须释放。</li>\n<li>finally只有一种情况不会执行。当执行到System.exit(0);fianlly不会执行。</li>\n</ol>\n<hr>\n<h3 id=\"自定义异常：\"><a href=\"#自定义异常：\" class=\"headerlink\" title=\"自定义异常：\"></a>自定义异常：</h3><pre><code>定义类继承Exception或者RuntimeException\n1. 为了让该自定义类具备可抛性。\n2. 让该类具备操作异常的共性方法。\n\n当要定义自定义异常的信息时，可以使用父类已经定义好的功能。\n异常异常信息传递给父类的构造函数。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\tMyException(String message)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常:\"></a>自定义异常:</h2><h2 id=\"按照java的面向对象思想，将程序中出现的特有问题进行封装。\"><a href=\"#按照java的面向对象思想，将程序中出现的特有问题进行封装。\" class=\"headerlink\" title=\"  按照java的面向对象思想，将程序中出现的特有问题进行封装。\"></a>  按照java的面向对象思想，将程序中出现的特有问题进行封装。</h2><h2 id=\"异常的好处：\"><a href=\"#异常的好处：\" class=\"headerlink\" title=\"异常的好处：\"></a>异常的好处：</h2><pre><code>1. 将问题进行封装。\n2. 将正常流程代码和问题处理代码相分离，方便于阅读。\n</code></pre><h2 id=\"异常的处理原则：\"><a href=\"#异常的处理原则：\" class=\"headerlink\" title=\"异常的处理原则：\"></a>异常的处理原则：</h2><pre><code>1. 处理方式有两种：try 或者 throws。\n2. 调用到抛出异常的功能时，抛出几个，就处理几个。\n    一个try对应多个catch。\n3. 多个catch，父类的catch放到最下面。\n4. catch内，需要定义针对性的处理方式。不要简单的定义printStackTrace，输出语句。\n    也不要不写。\n    当捕获到的异常，本功能处理不了时，可以继续在catch中抛出。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (AException e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果该异常处理不了，但并不属于该功能出现的异常。<br>可以将异常转换后，在抛出和该功能相关的异常。</p>\n<p>或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，<br>当调用者知道。并处理。也可以将捕获异常处理后，转换新的异常。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (AException e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 对AException处理。</span></span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<pre><code>比如，汇款的例子。\n</code></pre><p>异常的注意事项：<br>    在子父类覆盖时：<br>    1，子类抛出的异常必须是父类的异常的子类或者子集。<br>    2，如果父类或者接口没有异常抛出时，子类覆盖出现异常，只能try不能抛。</p>\n<p>参阅<br>ExceptionTest.java 老师用电脑上课<br>ExceptionTest1.java 图形面积。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> ()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"x=\"</span>+x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"JavaReview-day11-线程","date":"2018-01-19T04:01:06.000Z","type":["JavaReview"],"_content":"\n## 线程\n\n### 进程和线程的区别\n\n- 进程:\n  是一个正在执行中的程序。\n\t每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制元。\n\n- 线程：就是进程中的一个独立的控制单元。\n\t\t线程在控制着进程的执行。\n### 特点\n一个进程中至少有一个线程。\n\n\n### 举例:\n- Java VM  启动的时候会有一个进程java.exe.\n  该进程中至少一有个线程负责java程序的执行。而且这个线程运行的代码存在于main方法中。该线程称之为主线程。\n\n- 扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程。\n\n\n### 问题\n1. 如何在自定义的代码中，自定义一个线程呢？\n\n通过对api的查找，java已经提供了对线程这类事物的描述。就Thread类。\n\n创建线程的第一种方式：继承Thread类。\n- 步骤：\n  1. 定义类继承Thread。\n  2. 复写Thread类中的run方法。\n  目的: 将自定义代码存储在run方法。让线程运行。\n\n3. 调用线程的start方法，\n\t该方法两个作用：启动线程，调用run方法。\n\n### 结论\n发现运行结果每一次都不同。\n因为多个线程都获取 **cpu的执行权**。cpu执行到谁，谁就运行。\n明确一点，在某一个时刻，只能有一个程序在运行。(多核除外)\ncpu在做着快速的切换，以达到看上去是同时运行的效果。\n我们可以形象把多线程的运行行为在互相抢夺cpu的执行权。\n\n- 这就是多线程的一个特性：随机性。谁抢到谁执行，至于执行多长，cpu说的算。\n\n### 为什么要覆盖run方法呢？\nThread类用于描述线程。\n\n该类就定义了一个功能，用于存储线程要运行的代码。该存储功能就是run方法。\n\n也就是说Thread类中的run方法，用于存储线程要运行的代码。\n\n```java\nclass Demo extends Thread\n{\n\tpublic void run()\n\t{\n\t\tfor(int x=0; x<60; x++)\n\t\t\tSystem.out.println(\"demo run----\"+x);\n\t}\n}\n\nclass ThreadDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\t//for(int x=0; x<4000; x++)\n\t\t//System.out.println(\"Hello World!\");\n\n\t\tDemo d = new Demo();//创建好一个线程。\n\t\t//d.start();//开启线程并执行该线程的run方法。\n\t\td.run();//仅仅是对象调用方法。而线程创建了，并没有运行。\n\n\n\t\tfor(int x=0; x<60; x++)\n\t\t\tSystem.out.println(\"Hello World!--\"+x);\n\n\t}\n}\n```\n\n\n### 练习\n\n```java\n/*\n练习：\n创建两个线程，和主线程交替运行。\n\n原来线程都有自己默认的名称。\nThread-编号 该编号从0开始。\n\nstatic Thread currentThread():获取当前线程对象。\ngetName(): 获取线程名称。\n\n设置线程名称：setName或者构造函数。\n*/\n\nclass Test extends Thread\n{\n\t//private String name;\n\tTest(String name)\n\t{\n\t\t//this.name = name;\n\t\tsuper(name);\n\t}\n\tpublic void run()\n\t{\n\t\tfor(int x=0; x<60; x++)\n\t\t{\n\t\t\tSystem.out.println((Thread.currentThread()==this)+\"...\"+this.getName()+\" run...\"+x);\n\t\t}\n\t}\n\n}\n\n\nclass ThreadTest\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tTest t1 = new Test(\"one---\");\n\t\tTest t2 = new Test(\"two+++\");\n\t\tt1.start();\n\t\tt2.start();\n//\t\tt1.run();\n//\t\tt2.run();\n\n\t\tfor(int x=0; x<60; x++)\n\t\t{\n\t\t\tSystem.out.println(\"main.....\"+x);\n\t\t}\n\t}\n}\n```\n\n### 线程的状态图\n![](/images/post_images/javaReview_day11_img_01)\n\n```java\n/*\n需求：\n银行有一个金库。\n有两个储户分别存300元，每次存100，存3次。\n\n目的：该程序是否有安全问题，如果有，如何解决？\n\n\n如何找问题：\n1，明确哪些代码是多线程运行代码。\n2，明确共享数据。\n3，明确多线程运行代码中哪些语句是操作共享数据的。\n\n\n\n*/\n\n\nclass Bank\n{\n\tprivate int sum;\n\t//Object obj = new Object();\n\tpublic synchronized void add(int n)\n\t{\n\t\t//synchronized(obj)\n\t\t//{\n\t\t\tsum = sum + n;\n\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\tSystem.out.println(\"sum=\"+sum);\n\t\t//}\n\t}\n}\n\nclass Cus implements Runnable\n{\n\tprivate Bank b = new Bank();\n\tpublic void run()\n\t{\t\t\n\t\tfor(int x=0; x<3; x++)\n\t\t{\n\t\t\tb.add(100);\n\t\t}\n\t}\n}\n\n\nclass  BankDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tCus c = new Cus();\n\t\tThread t1 = new Thread(c);\n\t\tThread t2 = new Thread(c);\n\t\tt1.start();\n\t\tt2.start();\n\t}\n}\n```\n\n\n### 如果同步函数被静态修饰后, 使用的锁是什么呢？\n\n通过验证，发现不在是this。因为静态方法中也不可以定义this。\n\n静态进内存是，内存中没有本类对象，但是一定有该类对应的字节码文件对象。\n类名.class  该对象的类型是Class\n\n\n静态的同步方法，使用的锁是该方法所在类的字节码文件对象。 类名.class\n\n\n```java\n\nclass Ticket implements Runnable\n{\n\tprivate static  int tick = 100;\n\t//Object obj = new Object();\n\tboolean flag = true;\n\tpublic  void run()\n\t{\n\t\tif(flag)\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(Ticket.class)\n\t\t\t\t{\n\t\t\t\t\tif(tick>0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....code : \"+ tick--);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\twhile(true)\n\t\t\t\tshow();\n\t}\n\tpublic static synchronized void show()\n\t{\n\t\tif(tick>0)\n\t\t{\n\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....show.... : \"+ tick--);\n\t\t}\n\t}\n}\n\n\nclass  StaticMethodDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\n\t\tTicket t = new Ticket();\n\n\t\tThread t1 = new Thread(t);\n\t\tThread t2 = new Thread(t);\n\t\tt1.start();\n\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\tt.flag = false;\n\t\tt2.start();\n\n\n\t}\n}\n```\n\n### 买票小程序\n\n需求：简单的卖票程序。\n多个窗口同时买票。\n\n```java\nclass Ticket implements Runnable//extends Thread\n{\n\tprivate  int tick = 100;\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tif(tick>0)\n\t\t\t{\n\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....sale : \"+ tick--);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nclass  TicketDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\n\t\tTicket t = new Ticket();\n\n\t\tThread t1 = new Thread(t);//创建了一个线程；\n\t\tThread t2 = new Thread(t);//创建了一个线程；\n\t\tThread t3 = new Thread(t);//创建了一个线程；\n\t\tThread t4 = new Thread(t);//创建了一个线程；\n\t\tt1.start();\n\t\tt2.start();\n\t\tt3.start();\n\t\tt4.start();\n\n\n\t\t/*\n\t\tTicket t1 = new Ticket();\n\t\t//Ticket t2 = new Ticket();\n\t\t//Ticket t3 = new Ticket();\n\t\t//Ticket t4 = new Ticket();\n\n\t\tt1.start();\n\t\tt1.start();\n\t\tt1.start();\n\t\tt1.start();\n\t\t*/\n\n\t}\n}\n```\n\n### 创建线程的第二种方式：实现Runable接口\n\n步骤：\n1. 定义类实现Runnable接口\n2. 覆盖Runnable接口中的run方法。\n\t将线程要运行的代码存放在该run方法中。\n\n3. 通过Thread类建立线程对象。\n4. 将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。\n\t为什么要将Runnable接口的子类对象传递给Thread的构造函数。\n\t因为，自定义的run方法所属的对象是Runnable接口的子类对象。\n\t所以要让线程去执行指定对象的run方法。就必须明确该run方法所属对象。\n\n\n5. 调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。\n\n\n\n#### 实现方式和继承方式有什么区别呢？\n\n- 实现方式好处：避免了单继承的局限性。\n  在定义线程时，建意使用实现方式。\n\n- 两种方式区别：\n继承Thread:线程代码存放Thread子类run方法中。\n实现Runnable，线程代码存在接口的子类的run方法。\n\n\n## 线程同步(线程安全)\n### 问题: 同步函数用的是哪一个锁呢？\n函数需要被对象调用。那么函数都有一个所属对象引用。就是this。\n所以同步函数使用的锁是this。\n\n通过该程序进行验证。\n\n使用两个线程来买票。\n一个线程在同步代码块中。\n一个线程在同步函数中。\n都在执行买票动作。\n\n```java\nclass Ticket implements Runnable\n{\n\tprivate  int tick = 100;\n\tObject obj = new Object();\n\tboolean flag = true;\n\tpublic  void run()\n\t{\n\t\tif(flag)\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(this)\n\t\t\t\t{\n\t\t\t\t\tif(tick>0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....code : \"+ tick--);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\twhile(true)\n\t\t\t\tshow();\n\t}\n\tpublic synchronized void show()//this\n\t{\n\t\tif(tick>0)\n\t\t{\n\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....show.... : \"+ tick--);\n\t\t}\n\t}\n}\n\n\nclass  ThisLockDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\n\t\tTicket t = new Ticket();\n\n\t\tThread t1 = new Thread(t);\n\t\tThread t2 = new Thread(t);\n\t\tt1.start();\n\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\tt.flag = false;\n\t\tt2.start();\n//\t\tThread t3 = new Thread(t);\n//\t\tThread t4 = new Thread(t);\n//\t\tt3.start();\n//\t\tt4.start();\n\n\n\t}\n}\n\n```\n\n### 线程安全在单例设计模式中的应用\n\n- 饿汉式\n```java\nclass Single\n{\n\tprivate static final Single s = new Single();\n\tprivate Single(){}\n\tpublic static Single getInstance()\n\t{\n\t\treturn s;\n\t}\n}\n```\n\n- 懒汉式\n\n```java\n\n\nclass Single\n{\n\tprivate static Single s = null;\n\tprivate Single(){}\n\n\n\tpublic static  Single getInstance()\n\t{\n\t\tif(s==null)\n\t\t{\n\t\t\tsynchronized(Single.class)\n\t\t\t{\n\t\t\t\tif(s==null)\n\t\t\t\t\t//--->A;\n\t\t\t\t\ts = new Single();\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n}\n\nclass SingleDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tSystem.out.println(\"Hello World!\");\n\t}\n}\n```\n\n\n### 死锁\n\n死锁。\n同步中嵌套同步。\n\n```java\nclass Ticket implements Runnable\n{\n\tprivate  int tick = 1000;\n\tObject obj = new Object();\n\tboolean flag = true;\n\tpublic  void run()\n\t{\n\t\tif(flag)\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(obj)\n\t\t\t\t{\n\t\t\t\t\tshow();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\twhile(true)\n\t\t\t\tshow();\n\t}\n\tpublic synchronized void show()//this\n\t{\n\t\tsynchronized(obj)\n\t\t{\n\t\t\tif(tick>0)\n\t\t\t{\n\t\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....code : \"+ tick--);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nclass  DeadLockDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\n\t\tTicket t = new Ticket();\n\t\tThread t1 = new Thread(t);\n\t\tThread t2 = new Thread(t);\n\t\tt1.start();\n\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\tt.flag = false;\n\t\tt2.start();\n\t}\n}\n```\n\n#### 死锁练习\n```java\n\nclass Test implements Runnable\n{\n\tprivate boolean flag;\n\tTest(boolean flag)\n\t{\n\t\tthis.flag = flag;\n\t}\n\n\tpublic void run()\n\t{\n\t\tif(flag)\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(MyLock.locka)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"...if locka \");\n\t\t\t\t\tsynchronized(MyLock.lockb)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"..if lockb\");\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(MyLock.lockb)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"..else lockb\");\n\t\t\t\t\tsynchronized(MyLock.locka)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\".....else locka\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass MyLock\n{\n\tstatic Object locka = new Object();\n\tstatic Object lockb = new Object();\n}\n\nclass  DeadLockTest\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tThread t1 = new Thread(new Test(true));\n\t\tThread t2 = new Thread(new Test(false));\n\t\tt1.start();\n\t\tt2.start();\n\t}\n}\n```\n\n## 总结\n\n- 进程：正在执行的程序。\n\n- 线程：是进程中用于控制程序执行的控制单元(执行路径，执行情景)\n进程中至少有一个线程。\n\n- 对于JVM，启动时，只好有两个线程：jvm的主线程。jvm的垃圾回收线程。\n\n**如何在程序中自定义线程呢？**\n\nJava给我们提供了对象线程这类事物的描述。该类是Thread\n\n该类中定义了，\n创建线程对象的方法(构造函数).\n提供了要被线程执行的代码存储的位置(run())\n\n还定义了开启线程运行的方法(start()).\n同时还有一些其他的方法用于操作线程：\n\tstatic Thread currentThead():\n\tString getName():\n\tstatic void sleep(time)throws InterruptedException:\n\n\n要运行的代码都是后期定义的。\n所以创建线程的第一种方式是：继承Thread类。原因：要覆盖run方法，定义线程要运行的代码。\n\n步骤：\n1. 继承Thread类。\n2. 覆盖run方法。将线程要运行的代码定义其中。\n3. 建Thread类的子类对象，其实就是在创建线程，调用start方法。\n\n\n\n如果自定义的类中有多线程要运行的代码。但是该类有自己的父类。\n那么就不可以在继承Thread。怎么办呢？\n\nJava给我们提供了一个规则。Runnable接口。\n如果自定义类不继承Thread，也可以实现Runnable接口。并将多线程要运行的代码存放在Runnable的run方法中。\n这样多线程也可以帮助该类运行。\n这样的操作有一个好处：避免了单继承的局限性。\n\n创建线程的第二种方式：实现Runnable接口。\n\n步骤：\n1. 定义了实现Runnable接口。\n2. 覆盖接口的run方法。将多线程要运行的代码存入其中。\n3. 创建Thread类的对象(创建线程),并将Runnable接口的子类对象作为参数传递给Thread的构造函数。\n\t为什么要传递？因为线程要运行的代码都在Runnable子类的run方法中存储。所以要将该run方法所属的对象\n\t传递给Thread。让Thread线程去使用该对象调用其run方法。\n4. 调用Thread对象的start方法。开启线程。\n\n动手写代码。\n\n\n两种方式的特点：\n实现方式，因为避免了单继承的局限性，所以创建线程建议使用第二种方式。\n\n\n### 第一重点：创建线程的两种方式#\n\n\n\n作为了解：\n线程的状态。\n1. 被创建。\n2. 运行。\n3. 冻结。\n4. 消亡。\n\n其实还有一种特殊的状态：临时状态。\n\n该临时状态的特点：\n具备了执行资格，但不具备执行权。\n\n**冻结状态的特点**：\n- 放弃了执行资格。\n多线程具备随机性。因为是由cpu不断的快速切换造成的。\n就有可能会产生多线程的安全问题;\n\n#### 问题的产生的原因：\n几个关键点：\n1. 多线程代码中有操作共享数据。\n2. 多条语句操作该共享数据。\n\n当具备两个关键点时，\n有一个线程对多条操作共享数据的代码执行的一部分。还没有执行完，另一个线程开始参与执行。就会发生数据错误。\n\n#### 解决方法：\n当一个线程在执行多条操作共享数据代码时，其他线程即使获取了执行权，也不可以参与操作。\n\n\nJava就对这种解决方式提供了专业的代码。\n### 同步\n同步的原理：就是将部分操作功能数据的代码进行加锁。\n\n示例：火车上的卫生间。\n\n同步的表现形式：\n1. 同步代码块。\n2. 同步函数。\n两者有什么不同：\n同步代码块使用的锁是任意对象。\n同步函数使用的锁是this。\n\n\n注意：对于static的同步函数，使用的锁不是this。是 类名.class 是该类的字节码文件对象。\n\t涉及到了单例设计模式的懒汉式。\n\n\n#### 同步的好处：解决了线程的安全问题。\n\n- 弊端：\n\t较为消耗资源。\n\t同步嵌套后，容易死锁。\n\n**要记住**：同步使用的前提：\n\t1. 必须是两个或者两个以上的线程。\n\t2. 必须是多个线程使用同一个锁。\n\t这是才可以称为这些线程被同步了。\n\n**死锁代码一定会写。但开发时一定注意避免。**\n\n\n\n\n### 第二重点：同步的所有特性\n\n```java\n\nclass Thread\n{\n\tprivate Runnable target;\n\n\tThread()\n\t{\n\t}\n\tThread(Runnable target)\n\t{\n\t\tthis.target = target;\n\t}\n\n\tpublic void run()\n\t{\n\t\tif(target!=null)\n\t\t\ttarget.run();\n\t}\n}\n\nclass Test implements Runnable\n{\n\tpublic void run()\n\t{}\n}\n\n\nmain()\n{\n\tTest q = new Test();\n\tThread t = new Thread(q);\n}\n\n\nclass Demo extends Thread\n{\n\tpublic void run()\n\t{\n\t}\n}\nclass  \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tSystem.out.println(\"Hello World!\");\n\t}\n}\n```\n","source":"_posts/JavaReview-day11-线程.md","raw":"---\ntitle: JavaReview-day11-线程\ndate: 2018-01-19 12:01:06\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n## 线程\n\n### 进程和线程的区别\n\n- 进程:\n  是一个正在执行中的程序。\n\t每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制元。\n\n- 线程：就是进程中的一个独立的控制单元。\n\t\t线程在控制着进程的执行。\n### 特点\n一个进程中至少有一个线程。\n\n\n### 举例:\n- Java VM  启动的时候会有一个进程java.exe.\n  该进程中至少一有个线程负责java程序的执行。而且这个线程运行的代码存在于main方法中。该线程称之为主线程。\n\n- 扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程。\n\n\n### 问题\n1. 如何在自定义的代码中，自定义一个线程呢？\n\n通过对api的查找，java已经提供了对线程这类事物的描述。就Thread类。\n\n创建线程的第一种方式：继承Thread类。\n- 步骤：\n  1. 定义类继承Thread。\n  2. 复写Thread类中的run方法。\n  目的: 将自定义代码存储在run方法。让线程运行。\n\n3. 调用线程的start方法，\n\t该方法两个作用：启动线程，调用run方法。\n\n### 结论\n发现运行结果每一次都不同。\n因为多个线程都获取 **cpu的执行权**。cpu执行到谁，谁就运行。\n明确一点，在某一个时刻，只能有一个程序在运行。(多核除外)\ncpu在做着快速的切换，以达到看上去是同时运行的效果。\n我们可以形象把多线程的运行行为在互相抢夺cpu的执行权。\n\n- 这就是多线程的一个特性：随机性。谁抢到谁执行，至于执行多长，cpu说的算。\n\n### 为什么要覆盖run方法呢？\nThread类用于描述线程。\n\n该类就定义了一个功能，用于存储线程要运行的代码。该存储功能就是run方法。\n\n也就是说Thread类中的run方法，用于存储线程要运行的代码。\n\n```java\nclass Demo extends Thread\n{\n\tpublic void run()\n\t{\n\t\tfor(int x=0; x<60; x++)\n\t\t\tSystem.out.println(\"demo run----\"+x);\n\t}\n}\n\nclass ThreadDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\t//for(int x=0; x<4000; x++)\n\t\t//System.out.println(\"Hello World!\");\n\n\t\tDemo d = new Demo();//创建好一个线程。\n\t\t//d.start();//开启线程并执行该线程的run方法。\n\t\td.run();//仅仅是对象调用方法。而线程创建了，并没有运行。\n\n\n\t\tfor(int x=0; x<60; x++)\n\t\t\tSystem.out.println(\"Hello World!--\"+x);\n\n\t}\n}\n```\n\n\n### 练习\n\n```java\n/*\n练习：\n创建两个线程，和主线程交替运行。\n\n原来线程都有自己默认的名称。\nThread-编号 该编号从0开始。\n\nstatic Thread currentThread():获取当前线程对象。\ngetName(): 获取线程名称。\n\n设置线程名称：setName或者构造函数。\n*/\n\nclass Test extends Thread\n{\n\t//private String name;\n\tTest(String name)\n\t{\n\t\t//this.name = name;\n\t\tsuper(name);\n\t}\n\tpublic void run()\n\t{\n\t\tfor(int x=0; x<60; x++)\n\t\t{\n\t\t\tSystem.out.println((Thread.currentThread()==this)+\"...\"+this.getName()+\" run...\"+x);\n\t\t}\n\t}\n\n}\n\n\nclass ThreadTest\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tTest t1 = new Test(\"one---\");\n\t\tTest t2 = new Test(\"two+++\");\n\t\tt1.start();\n\t\tt2.start();\n//\t\tt1.run();\n//\t\tt2.run();\n\n\t\tfor(int x=0; x<60; x++)\n\t\t{\n\t\t\tSystem.out.println(\"main.....\"+x);\n\t\t}\n\t}\n}\n```\n\n### 线程的状态图\n![](/images/post_images/javaReview_day11_img_01)\n\n```java\n/*\n需求：\n银行有一个金库。\n有两个储户分别存300元，每次存100，存3次。\n\n目的：该程序是否有安全问题，如果有，如何解决？\n\n\n如何找问题：\n1，明确哪些代码是多线程运行代码。\n2，明确共享数据。\n3，明确多线程运行代码中哪些语句是操作共享数据的。\n\n\n\n*/\n\n\nclass Bank\n{\n\tprivate int sum;\n\t//Object obj = new Object();\n\tpublic synchronized void add(int n)\n\t{\n\t\t//synchronized(obj)\n\t\t//{\n\t\t\tsum = sum + n;\n\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\tSystem.out.println(\"sum=\"+sum);\n\t\t//}\n\t}\n}\n\nclass Cus implements Runnable\n{\n\tprivate Bank b = new Bank();\n\tpublic void run()\n\t{\t\t\n\t\tfor(int x=0; x<3; x++)\n\t\t{\n\t\t\tb.add(100);\n\t\t}\n\t}\n}\n\n\nclass  BankDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tCus c = new Cus();\n\t\tThread t1 = new Thread(c);\n\t\tThread t2 = new Thread(c);\n\t\tt1.start();\n\t\tt2.start();\n\t}\n}\n```\n\n\n### 如果同步函数被静态修饰后, 使用的锁是什么呢？\n\n通过验证，发现不在是this。因为静态方法中也不可以定义this。\n\n静态进内存是，内存中没有本类对象，但是一定有该类对应的字节码文件对象。\n类名.class  该对象的类型是Class\n\n\n静态的同步方法，使用的锁是该方法所在类的字节码文件对象。 类名.class\n\n\n```java\n\nclass Ticket implements Runnable\n{\n\tprivate static  int tick = 100;\n\t//Object obj = new Object();\n\tboolean flag = true;\n\tpublic  void run()\n\t{\n\t\tif(flag)\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(Ticket.class)\n\t\t\t\t{\n\t\t\t\t\tif(tick>0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....code : \"+ tick--);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\twhile(true)\n\t\t\t\tshow();\n\t}\n\tpublic static synchronized void show()\n\t{\n\t\tif(tick>0)\n\t\t{\n\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....show.... : \"+ tick--);\n\t\t}\n\t}\n}\n\n\nclass  StaticMethodDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\n\t\tTicket t = new Ticket();\n\n\t\tThread t1 = new Thread(t);\n\t\tThread t2 = new Thread(t);\n\t\tt1.start();\n\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\tt.flag = false;\n\t\tt2.start();\n\n\n\t}\n}\n```\n\n### 买票小程序\n\n需求：简单的卖票程序。\n多个窗口同时买票。\n\n```java\nclass Ticket implements Runnable//extends Thread\n{\n\tprivate  int tick = 100;\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tif(tick>0)\n\t\t\t{\n\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....sale : \"+ tick--);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nclass  TicketDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\n\t\tTicket t = new Ticket();\n\n\t\tThread t1 = new Thread(t);//创建了一个线程；\n\t\tThread t2 = new Thread(t);//创建了一个线程；\n\t\tThread t3 = new Thread(t);//创建了一个线程；\n\t\tThread t4 = new Thread(t);//创建了一个线程；\n\t\tt1.start();\n\t\tt2.start();\n\t\tt3.start();\n\t\tt4.start();\n\n\n\t\t/*\n\t\tTicket t1 = new Ticket();\n\t\t//Ticket t2 = new Ticket();\n\t\t//Ticket t3 = new Ticket();\n\t\t//Ticket t4 = new Ticket();\n\n\t\tt1.start();\n\t\tt1.start();\n\t\tt1.start();\n\t\tt1.start();\n\t\t*/\n\n\t}\n}\n```\n\n### 创建线程的第二种方式：实现Runable接口\n\n步骤：\n1. 定义类实现Runnable接口\n2. 覆盖Runnable接口中的run方法。\n\t将线程要运行的代码存放在该run方法中。\n\n3. 通过Thread类建立线程对象。\n4. 将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。\n\t为什么要将Runnable接口的子类对象传递给Thread的构造函数。\n\t因为，自定义的run方法所属的对象是Runnable接口的子类对象。\n\t所以要让线程去执行指定对象的run方法。就必须明确该run方法所属对象。\n\n\n5. 调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。\n\n\n\n#### 实现方式和继承方式有什么区别呢？\n\n- 实现方式好处：避免了单继承的局限性。\n  在定义线程时，建意使用实现方式。\n\n- 两种方式区别：\n继承Thread:线程代码存放Thread子类run方法中。\n实现Runnable，线程代码存在接口的子类的run方法。\n\n\n## 线程同步(线程安全)\n### 问题: 同步函数用的是哪一个锁呢？\n函数需要被对象调用。那么函数都有一个所属对象引用。就是this。\n所以同步函数使用的锁是this。\n\n通过该程序进行验证。\n\n使用两个线程来买票。\n一个线程在同步代码块中。\n一个线程在同步函数中。\n都在执行买票动作。\n\n```java\nclass Ticket implements Runnable\n{\n\tprivate  int tick = 100;\n\tObject obj = new Object();\n\tboolean flag = true;\n\tpublic  void run()\n\t{\n\t\tif(flag)\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(this)\n\t\t\t\t{\n\t\t\t\t\tif(tick>0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....code : \"+ tick--);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\twhile(true)\n\t\t\t\tshow();\n\t}\n\tpublic synchronized void show()//this\n\t{\n\t\tif(tick>0)\n\t\t{\n\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....show.... : \"+ tick--);\n\t\t}\n\t}\n}\n\n\nclass  ThisLockDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\n\t\tTicket t = new Ticket();\n\n\t\tThread t1 = new Thread(t);\n\t\tThread t2 = new Thread(t);\n\t\tt1.start();\n\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\tt.flag = false;\n\t\tt2.start();\n//\t\tThread t3 = new Thread(t);\n//\t\tThread t4 = new Thread(t);\n//\t\tt3.start();\n//\t\tt4.start();\n\n\n\t}\n}\n\n```\n\n### 线程安全在单例设计模式中的应用\n\n- 饿汉式\n```java\nclass Single\n{\n\tprivate static final Single s = new Single();\n\tprivate Single(){}\n\tpublic static Single getInstance()\n\t{\n\t\treturn s;\n\t}\n}\n```\n\n- 懒汉式\n\n```java\n\n\nclass Single\n{\n\tprivate static Single s = null;\n\tprivate Single(){}\n\n\n\tpublic static  Single getInstance()\n\t{\n\t\tif(s==null)\n\t\t{\n\t\t\tsynchronized(Single.class)\n\t\t\t{\n\t\t\t\tif(s==null)\n\t\t\t\t\t//--->A;\n\t\t\t\t\ts = new Single();\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n}\n\nclass SingleDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tSystem.out.println(\"Hello World!\");\n\t}\n}\n```\n\n\n### 死锁\n\n死锁。\n同步中嵌套同步。\n\n```java\nclass Ticket implements Runnable\n{\n\tprivate  int tick = 1000;\n\tObject obj = new Object();\n\tboolean flag = true;\n\tpublic  void run()\n\t{\n\t\tif(flag)\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(obj)\n\t\t\t\t{\n\t\t\t\t\tshow();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\twhile(true)\n\t\t\t\tshow();\n\t}\n\tpublic synchronized void show()//this\n\t{\n\t\tsynchronized(obj)\n\t\t{\n\t\t\tif(tick>0)\n\t\t\t{\n\t\t\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....code : \"+ tick--);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nclass  DeadLockDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\n\t\tTicket t = new Ticket();\n\t\tThread t1 = new Thread(t);\n\t\tThread t2 = new Thread(t);\n\t\tt1.start();\n\t\ttry{Thread.sleep(10);}catch(Exception e){}\n\t\tt.flag = false;\n\t\tt2.start();\n\t}\n}\n```\n\n#### 死锁练习\n```java\n\nclass Test implements Runnable\n{\n\tprivate boolean flag;\n\tTest(boolean flag)\n\t{\n\t\tthis.flag = flag;\n\t}\n\n\tpublic void run()\n\t{\n\t\tif(flag)\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(MyLock.locka)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"...if locka \");\n\t\t\t\t\tsynchronized(MyLock.lockb)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"..if lockb\");\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tsynchronized(MyLock.lockb)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\"..else lockb\");\n\t\t\t\t\tsynchronized(MyLock.locka)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\".....else locka\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass MyLock\n{\n\tstatic Object locka = new Object();\n\tstatic Object lockb = new Object();\n}\n\nclass  DeadLockTest\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tThread t1 = new Thread(new Test(true));\n\t\tThread t2 = new Thread(new Test(false));\n\t\tt1.start();\n\t\tt2.start();\n\t}\n}\n```\n\n## 总结\n\n- 进程：正在执行的程序。\n\n- 线程：是进程中用于控制程序执行的控制单元(执行路径，执行情景)\n进程中至少有一个线程。\n\n- 对于JVM，启动时，只好有两个线程：jvm的主线程。jvm的垃圾回收线程。\n\n**如何在程序中自定义线程呢？**\n\nJava给我们提供了对象线程这类事物的描述。该类是Thread\n\n该类中定义了，\n创建线程对象的方法(构造函数).\n提供了要被线程执行的代码存储的位置(run())\n\n还定义了开启线程运行的方法(start()).\n同时还有一些其他的方法用于操作线程：\n\tstatic Thread currentThead():\n\tString getName():\n\tstatic void sleep(time)throws InterruptedException:\n\n\n要运行的代码都是后期定义的。\n所以创建线程的第一种方式是：继承Thread类。原因：要覆盖run方法，定义线程要运行的代码。\n\n步骤：\n1. 继承Thread类。\n2. 覆盖run方法。将线程要运行的代码定义其中。\n3. 建Thread类的子类对象，其实就是在创建线程，调用start方法。\n\n\n\n如果自定义的类中有多线程要运行的代码。但是该类有自己的父类。\n那么就不可以在继承Thread。怎么办呢？\n\nJava给我们提供了一个规则。Runnable接口。\n如果自定义类不继承Thread，也可以实现Runnable接口。并将多线程要运行的代码存放在Runnable的run方法中。\n这样多线程也可以帮助该类运行。\n这样的操作有一个好处：避免了单继承的局限性。\n\n创建线程的第二种方式：实现Runnable接口。\n\n步骤：\n1. 定义了实现Runnable接口。\n2. 覆盖接口的run方法。将多线程要运行的代码存入其中。\n3. 创建Thread类的对象(创建线程),并将Runnable接口的子类对象作为参数传递给Thread的构造函数。\n\t为什么要传递？因为线程要运行的代码都在Runnable子类的run方法中存储。所以要将该run方法所属的对象\n\t传递给Thread。让Thread线程去使用该对象调用其run方法。\n4. 调用Thread对象的start方法。开启线程。\n\n动手写代码。\n\n\n两种方式的特点：\n实现方式，因为避免了单继承的局限性，所以创建线程建议使用第二种方式。\n\n\n### 第一重点：创建线程的两种方式#\n\n\n\n作为了解：\n线程的状态。\n1. 被创建。\n2. 运行。\n3. 冻结。\n4. 消亡。\n\n其实还有一种特殊的状态：临时状态。\n\n该临时状态的特点：\n具备了执行资格，但不具备执行权。\n\n**冻结状态的特点**：\n- 放弃了执行资格。\n多线程具备随机性。因为是由cpu不断的快速切换造成的。\n就有可能会产生多线程的安全问题;\n\n#### 问题的产生的原因：\n几个关键点：\n1. 多线程代码中有操作共享数据。\n2. 多条语句操作该共享数据。\n\n当具备两个关键点时，\n有一个线程对多条操作共享数据的代码执行的一部分。还没有执行完，另一个线程开始参与执行。就会发生数据错误。\n\n#### 解决方法：\n当一个线程在执行多条操作共享数据代码时，其他线程即使获取了执行权，也不可以参与操作。\n\n\nJava就对这种解决方式提供了专业的代码。\n### 同步\n同步的原理：就是将部分操作功能数据的代码进行加锁。\n\n示例：火车上的卫生间。\n\n同步的表现形式：\n1. 同步代码块。\n2. 同步函数。\n两者有什么不同：\n同步代码块使用的锁是任意对象。\n同步函数使用的锁是this。\n\n\n注意：对于static的同步函数，使用的锁不是this。是 类名.class 是该类的字节码文件对象。\n\t涉及到了单例设计模式的懒汉式。\n\n\n#### 同步的好处：解决了线程的安全问题。\n\n- 弊端：\n\t较为消耗资源。\n\t同步嵌套后，容易死锁。\n\n**要记住**：同步使用的前提：\n\t1. 必须是两个或者两个以上的线程。\n\t2. 必须是多个线程使用同一个锁。\n\t这是才可以称为这些线程被同步了。\n\n**死锁代码一定会写。但开发时一定注意避免。**\n\n\n\n\n### 第二重点：同步的所有特性\n\n```java\n\nclass Thread\n{\n\tprivate Runnable target;\n\n\tThread()\n\t{\n\t}\n\tThread(Runnable target)\n\t{\n\t\tthis.target = target;\n\t}\n\n\tpublic void run()\n\t{\n\t\tif(target!=null)\n\t\t\ttarget.run();\n\t}\n}\n\nclass Test implements Runnable\n{\n\tpublic void run()\n\t{}\n}\n\n\nmain()\n{\n\tTest q = new Test();\n\tThread t = new Thread(q);\n}\n\n\nclass Demo extends Thread\n{\n\tpublic void run()\n\t{\n\t}\n}\nclass  \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tSystem.out.println(\"Hello World!\");\n\t}\n}\n```\n","slug":"JavaReview-day11-线程","published":1,"updated":"2018-01-22T11:34:02.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m05t000nq8kx3b3wg6bf","content":"<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h3><ul>\n<li><p>进程:<br>是一个正在执行中的程序。<br>  每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制元。</p>\n</li>\n<li><p>线程：就是进程中的一个独立的控制单元。</p>\n<pre><code>线程在控制着进程的执行。\n</code></pre><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>一个进程中至少有一个线程。</p>\n</li>\n</ul>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例:\"></a>举例:</h3><ul>\n<li><p>Java VM  启动的时候会有一个进程java.exe.<br>该进程中至少一有个线程负责java程序的执行。而且这个线程运行的代码存在于main方法中。该线程称之为主线程。</p>\n</li>\n<li><p>扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程。</p>\n</li>\n</ul>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li>如何在自定义的代码中，自定义一个线程呢？</li>\n</ol>\n<p>通过对api的查找，java已经提供了对线程这类事物的描述。就Thread类。</p>\n<p>创建线程的第一种方式：继承Thread类。</p>\n<ul>\n<li>步骤：<ol>\n<li>定义类继承Thread。</li>\n<li>复写Thread类中的run方法。<br>目的: 将自定义代码存储在run方法。让线程运行。</li>\n</ol>\n</li>\n</ul>\n<ol>\n<li>调用线程的start方法，<br> 该方法两个作用：启动线程，调用run方法。</li>\n</ol>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>发现运行结果每一次都不同。<br>因为多个线程都获取 <strong>cpu的执行权</strong>。cpu执行到谁，谁就运行。<br>明确一点，在某一个时刻，只能有一个程序在运行。(多核除外)<br>cpu在做着快速的切换，以达到看上去是同时运行的效果。<br>我们可以形象把多线程的运行行为在互相抢夺cpu的执行权。</p>\n<ul>\n<li>这就是多线程的一个特性：随机性。谁抢到谁执行，至于执行多长，cpu说的算。</li>\n</ul>\n<h3 id=\"为什么要覆盖run方法呢？\"><a href=\"#为什么要覆盖run方法呢？\" class=\"headerlink\" title=\"为什么要覆盖run方法呢？\"></a>为什么要覆盖run方法呢？</h3><p>Thread类用于描述线程。</p>\n<p>该类就定义了一个功能，用于存储线程要运行的代码。该存储功能就是run方法。</p>\n<p>也就是说Thread类中的run方法，用于存储线程要运行的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">60</span>; x++)</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"demo run----\"</span>+x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for(int x=0; x&lt;4000; x++)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//System.out.println(\"Hello World!\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDemo d = <span class=\"keyword\">new</span> Demo();<span class=\"comment\">//创建好一个线程。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//d.start();//开启线程并执行该线程的run方法。</span></span><br><span class=\"line\">\t\td.run();<span class=\"comment\">//仅仅是对象调用方法。而线程创建了，并没有运行。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">60</span>; x++)</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Hello World!--\"</span>+x);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">练习：</span></span><br><span class=\"line\"><span class=\"comment\">创建两个线程，和主线程交替运行。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">原来线程都有自己默认的名称。</span></span><br><span class=\"line\"><span class=\"comment\">Thread-编号 该编号从0开始。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">static Thread currentThread():获取当前线程对象。</span></span><br><span class=\"line\"><span class=\"comment\">getName(): 获取线程名称。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">设置线程名称：setName或者构造函数。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//private String name;</span></span><br><span class=\"line\">\tTest(String name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//this.name = name;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">60</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println((Thread.currentThread()==<span class=\"keyword\">this</span>)+<span class=\"string\">\"...\"</span>+<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" run...\"</span>+x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tTest t1 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"one---\"</span>);</span><br><span class=\"line\">\t\tTest t2 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"two+++\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"><span class=\"comment\">//\t\tt1.run();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tt2.run();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">60</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"main.....\"</span>+x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程的状态图\"><a href=\"#线程的状态图\" class=\"headerlink\" title=\"线程的状态图\"></a>线程的状态图</h3><p><img src=\"/images/post_images/javaReview_day11_img_01\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">需求：</span></span><br><span class=\"line\"><span class=\"comment\">银行有一个金库。</span></span><br><span class=\"line\"><span class=\"comment\">有两个储户分别存300元，每次存100，存3次。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">目的：该程序是否有安全问题，如果有，如何解决？</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">如何找问题：</span></span><br><span class=\"line\"><span class=\"comment\">1，明确哪些代码是多线程运行代码。</span></span><br><span class=\"line\"><span class=\"comment\">2，明确共享数据。</span></span><br><span class=\"line\"><span class=\"comment\">3，明确多线程运行代码中哪些语句是操作共享数据的。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bank</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sum;</span><br><span class=\"line\">\t<span class=\"comment\">//Object obj = new Object();</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//synchronized(obj)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t\t\tsum = sum + n;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"sum=\"</span>+sum);</span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Bank b = <span class=\"keyword\">new</span> Bank();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">3</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tb.add(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">BankDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tCus c = <span class=\"keyword\">new</span> Cus();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(c);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(c);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果同步函数被静态修饰后-使用的锁是什么呢？\"><a href=\"#如果同步函数被静态修饰后-使用的锁是什么呢？\" class=\"headerlink\" title=\"如果同步函数被静态修饰后, 使用的锁是什么呢？\"></a>如果同步函数被静态修饰后, 使用的锁是什么呢？</h3><p>通过验证，发现不在是this。因为静态方法中也不可以定义this。</p>\n<p>静态进内存是，内存中没有本类对象，但是一定有该类对应的字节码文件对象。<br>类名.class  该对象的类型是Class</p>\n<p>静态的同步方法，使用的锁是该方法所在类的字节码文件对象。 类名.class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span>  <span class=\"keyword\">int</span> tick = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//Object obj = new Object();</span></span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(Ticket.class)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....code : \"</span>+ tick--);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t\tshow();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....show.... : \"</span>+ tick--);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StaticMethodDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = <span class=\"keyword\">new</span> Ticket();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\tt.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"买票小程序\"><a href=\"#买票小程序\" class=\"headerlink\" title=\"买票小程序\"></a>买票小程序</h3><p>需求：简单的卖票程序。<br>多个窗口同时买票。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span>//<span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>  <span class=\"keyword\">int</span> tick = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....sale : \"</span>+ tick--);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">TicketDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = <span class=\"keyword\">new</span> Ticket();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(t);<span class=\"comment\">//创建了一个线程；</span></span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(t);<span class=\"comment\">//创建了一个线程；</span></span><br><span class=\"line\">\t\tThread t3 = <span class=\"keyword\">new</span> Thread(t);<span class=\"comment\">//创建了一个线程；</span></span><br><span class=\"line\">\t\tThread t4 = <span class=\"keyword\">new</span> Thread(t);<span class=\"comment\">//创建了一个线程；</span></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t\tt4.start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tTicket t1 = new Ticket();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//Ticket t2 = new Ticket();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//Ticket t3 = new Ticket();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//Ticket t4 = new Ticket();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建线程的第二种方式：实现Runable接口\"><a href=\"#创建线程的第二种方式：实现Runable接口\" class=\"headerlink\" title=\"创建线程的第二种方式：实现Runable接口\"></a>创建线程的第二种方式：实现Runable接口</h3><p>步骤：</p>\n<ol>\n<li>定义类实现Runnable接口</li>\n<li><p>覆盖Runnable接口中的run方法。<br> 将线程要运行的代码存放在该run方法中。</p>\n</li>\n<li><p>通过Thread类建立线程对象。</p>\n</li>\n<li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。<br> 为什么要将Runnable接口的子类对象传递给Thread的构造函数。<br> 因为，自定义的run方法所属的对象是Runnable接口的子类对象。<br> 所以要让线程去执行指定对象的run方法。就必须明确该run方法所属对象。</li>\n</ol>\n<ol>\n<li>调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。</li>\n</ol>\n<h4 id=\"实现方式和继承方式有什么区别呢？\"><a href=\"#实现方式和继承方式有什么区别呢？\" class=\"headerlink\" title=\"实现方式和继承方式有什么区别呢？\"></a>实现方式和继承方式有什么区别呢？</h4><ul>\n<li><p>实现方式好处：避免了单继承的局限性。<br>在定义线程时，建意使用实现方式。</p>\n</li>\n<li><p>两种方式区别：<br>继承Thread:线程代码存放Thread子类run方法中。<br>实现Runnable，线程代码存在接口的子类的run方法。</p>\n</li>\n</ul>\n<h2 id=\"线程同步-线程安全\"><a href=\"#线程同步-线程安全\" class=\"headerlink\" title=\"线程同步(线程安全)\"></a>线程同步(线程安全)</h2><h3 id=\"问题-同步函数用的是哪一个锁呢？\"><a href=\"#问题-同步函数用的是哪一个锁呢？\" class=\"headerlink\" title=\"问题: 同步函数用的是哪一个锁呢？\"></a>问题: 同步函数用的是哪一个锁呢？</h3><p>函数需要被对象调用。那么函数都有一个所属对象引用。就是this。<br>所以同步函数使用的锁是this。</p>\n<p>通过该程序进行验证。</p>\n<p>使用两个线程来买票。<br>一个线程在同步代码块中。<br>一个线程在同步函数中。<br>都在执行买票动作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>  <span class=\"keyword\">int</span> tick = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tObject obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....code : \"</span>+ tick--);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t\tshow();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"comment\">//this</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....show.... : \"</span>+ tick--);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ThisLockDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = <span class=\"keyword\">new</span> Ticket();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\tt.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"><span class=\"comment\">//\t\tThread t3 = new Thread(t);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tThread t4 = new Thread(t);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tt3.start();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tt4.start();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程安全在单例设计模式中的应用\"><a href=\"#线程安全在单例设计模式中的应用\" class=\"headerlink\" title=\"线程安全在单例设计模式中的应用\"></a>线程安全在单例设计模式中的应用</h3><ul>\n<li><p>饿汉式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Single s = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>懒汉式</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span>(Single.class)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(s==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//---&gt;A;</span></span><br><span class=\"line\">\t\t\t\t\ts = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>死锁。<br>同步中嵌套同步。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>  <span class=\"keyword\">int</span> tick = <span class=\"number\">1000</span>;</span><br><span class=\"line\">\tObject obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(obj)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tshow();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t\tshow();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"comment\">//this</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(obj)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....code : \"</span>+ tick--);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">DeadLockDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = <span class=\"keyword\">new</span> Ticket();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\tt.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"死锁练习\"><a href=\"#死锁练习\" class=\"headerlink\" title=\"死锁练习\"></a>死锁练习</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag;</span><br><span class=\"line\">\tTest(<span class=\"keyword\">boolean</span> flag)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.flag = flag;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(MyLock.locka)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...if locka \"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">synchronized</span>(MyLock.lockb)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"..if lockb\"</span>);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(MyLock.lockb)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"..else lockb\"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">synchronized</span>(MyLock.locka)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\".....else locka\"</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLock</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Object locka = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Object lockb = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">DeadLockTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Test(<span class=\"keyword\">true</span>));</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Test(<span class=\"keyword\">false</span>));</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>进程：正在执行的程序。</p>\n</li>\n<li><p>线程：是进程中用于控制程序执行的控制单元(执行路径，执行情景)<br>进程中至少有一个线程。</p>\n</li>\n<li><p>对于JVM，启动时，只好有两个线程：jvm的主线程。jvm的垃圾回收线程。</p>\n</li>\n</ul>\n<p><strong>如何在程序中自定义线程呢？</strong></p>\n<p>Java给我们提供了对象线程这类事物的描述。该类是Thread</p>\n<p>该类中定义了，<br>创建线程对象的方法(构造函数).<br>提供了要被线程执行的代码存储的位置(run())</p>\n<p>还定义了开启线程运行的方法(start()).<br>同时还有一些其他的方法用于操作线程：<br>    static Thread currentThead():<br>    String getName():<br>    static void sleep(time)throws InterruptedException:</p>\n<p>要运行的代码都是后期定义的。<br>所以创建线程的第一种方式是：继承Thread类。原因：要覆盖run方法，定义线程要运行的代码。</p>\n<p>步骤：</p>\n<ol>\n<li>继承Thread类。</li>\n<li>覆盖run方法。将线程要运行的代码定义其中。</li>\n<li>建Thread类的子类对象，其实就是在创建线程，调用start方法。</li>\n</ol>\n<p>如果自定义的类中有多线程要运行的代码。但是该类有自己的父类。<br>那么就不可以在继承Thread。怎么办呢？</p>\n<p>Java给我们提供了一个规则。Runnable接口。<br>如果自定义类不继承Thread，也可以实现Runnable接口。并将多线程要运行的代码存放在Runnable的run方法中。<br>这样多线程也可以帮助该类运行。<br>这样的操作有一个好处：避免了单继承的局限性。</p>\n<p>创建线程的第二种方式：实现Runnable接口。</p>\n<p>步骤：</p>\n<ol>\n<li>定义了实现Runnable接口。</li>\n<li>覆盖接口的run方法。将多线程要运行的代码存入其中。</li>\n<li>创建Thread类的对象(创建线程),并将Runnable接口的子类对象作为参数传递给Thread的构造函数。<br> 为什么要传递？因为线程要运行的代码都在Runnable子类的run方法中存储。所以要将该run方法所属的对象<br> 传递给Thread。让Thread线程去使用该对象调用其run方法。</li>\n<li>调用Thread对象的start方法。开启线程。</li>\n</ol>\n<p>动手写代码。</p>\n<p>两种方式的特点：<br>实现方式，因为避免了单继承的局限性，所以创建线程建议使用第二种方式。</p>\n<h3 id=\"第一重点：创建线程的两种方式\"><a href=\"#第一重点：创建线程的两种方式\" class=\"headerlink\" title=\"第一重点：创建线程的两种方式\"></a>第一重点：创建线程的两种方式</h3><p>作为了解：<br>线程的状态。</p>\n<ol>\n<li>被创建。</li>\n<li>运行。</li>\n<li>冻结。</li>\n<li>消亡。</li>\n</ol>\n<p>其实还有一种特殊的状态：临时状态。</p>\n<p>该临时状态的特点：<br>具备了执行资格，但不具备执行权。</p>\n<p><strong>冻结状态的特点</strong>：</p>\n<ul>\n<li>放弃了执行资格。<br>多线程具备随机性。因为是由cpu不断的快速切换造成的。<br>就有可能会产生多线程的安全问题;</li>\n</ul>\n<h4 id=\"问题的产生的原因：\"><a href=\"#问题的产生的原因：\" class=\"headerlink\" title=\"问题的产生的原因：\"></a>问题的产生的原因：</h4><p>几个关键点：</p>\n<ol>\n<li>多线程代码中有操作共享数据。</li>\n<li>多条语句操作该共享数据。</li>\n</ol>\n<p>当具备两个关键点时，<br>有一个线程对多条操作共享数据的代码执行的一部分。还没有执行完，另一个线程开始参与执行。就会发生数据错误。</p>\n<h4 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h4><p>当一个线程在执行多条操作共享数据代码时，其他线程即使获取了执行权，也不可以参与操作。</p>\n<p>Java就对这种解决方式提供了专业的代码。</p>\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><p>同步的原理：就是将部分操作功能数据的代码进行加锁。</p>\n<p>示例：火车上的卫生间。</p>\n<p>同步的表现形式：</p>\n<ol>\n<li>同步代码块。</li>\n<li>同步函数。<br>两者有什么不同：<br>同步代码块使用的锁是任意对象。<br>同步函数使用的锁是this。</li>\n</ol>\n<p>注意：对于static的同步函数，使用的锁不是this。是 类名.class 是该类的字节码文件对象。<br>    涉及到了单例设计模式的懒汉式。</p>\n<h4 id=\"同步的好处：解决了线程的安全问题。\"><a href=\"#同步的好处：解决了线程的安全问题。\" class=\"headerlink\" title=\"同步的好处：解决了线程的安全问题。\"></a>同步的好处：解决了线程的安全问题。</h4><ul>\n<li>弊端：<br>  较为消耗资源。<br>  同步嵌套后，容易死锁。</li>\n</ul>\n<p><strong>要记住</strong>：同步使用的前提：</p>\n<pre><code>1. 必须是两个或者两个以上的线程。\n2. 必须是多个线程使用同一个锁。\n这是才可以称为这些线程被同步了。\n</code></pre><p><strong>死锁代码一定会写。但开发时一定注意避免。</strong></p>\n<h3 id=\"第二重点：同步的所有特性\"><a href=\"#第二重点：同步的所有特性\" class=\"headerlink\" title=\"第二重点：同步的所有特性\"></a>第二重点：同步的所有特性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Runnable target;</span><br><span class=\"line\"></span><br><span class=\"line\">\tThread()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tThread(Runnable target)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(target!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\ttarget.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTest q = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">\tThread t = <span class=\"keyword\">new</span> Thread(q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h3><ul>\n<li><p>进程:<br>是一个正在执行中的程序。<br>  每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制元。</p>\n</li>\n<li><p>线程：就是进程中的一个独立的控制单元。</p>\n<pre><code>线程在控制着进程的执行。\n</code></pre><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>一个进程中至少有一个线程。</p>\n</li>\n</ul>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例:\"></a>举例:</h3><ul>\n<li><p>Java VM  启动的时候会有一个进程java.exe.<br>该进程中至少一有个线程负责java程序的执行。而且这个线程运行的代码存在于main方法中。该线程称之为主线程。</p>\n</li>\n<li><p>扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程。</p>\n</li>\n</ul>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li>如何在自定义的代码中，自定义一个线程呢？</li>\n</ol>\n<p>通过对api的查找，java已经提供了对线程这类事物的描述。就Thread类。</p>\n<p>创建线程的第一种方式：继承Thread类。</p>\n<ul>\n<li>步骤：<ol>\n<li>定义类继承Thread。</li>\n<li>复写Thread类中的run方法。<br>目的: 将自定义代码存储在run方法。让线程运行。</li>\n</ol>\n</li>\n</ul>\n<ol>\n<li>调用线程的start方法，<br> 该方法两个作用：启动线程，调用run方法。</li>\n</ol>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>发现运行结果每一次都不同。<br>因为多个线程都获取 <strong>cpu的执行权</strong>。cpu执行到谁，谁就运行。<br>明确一点，在某一个时刻，只能有一个程序在运行。(多核除外)<br>cpu在做着快速的切换，以达到看上去是同时运行的效果。<br>我们可以形象把多线程的运行行为在互相抢夺cpu的执行权。</p>\n<ul>\n<li>这就是多线程的一个特性：随机性。谁抢到谁执行，至于执行多长，cpu说的算。</li>\n</ul>\n<h3 id=\"为什么要覆盖run方法呢？\"><a href=\"#为什么要覆盖run方法呢？\" class=\"headerlink\" title=\"为什么要覆盖run方法呢？\"></a>为什么要覆盖run方法呢？</h3><p>Thread类用于描述线程。</p>\n<p>该类就定义了一个功能，用于存储线程要运行的代码。该存储功能就是run方法。</p>\n<p>也就是说Thread类中的run方法，用于存储线程要运行的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">60</span>; x++)</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"demo run----\"</span>+x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for(int x=0; x&lt;4000; x++)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//System.out.println(\"Hello World!\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDemo d = <span class=\"keyword\">new</span> Demo();<span class=\"comment\">//创建好一个线程。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//d.start();//开启线程并执行该线程的run方法。</span></span><br><span class=\"line\">\t\td.run();<span class=\"comment\">//仅仅是对象调用方法。而线程创建了，并没有运行。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">60</span>; x++)</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Hello World!--\"</span>+x);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">练习：</span></span><br><span class=\"line\"><span class=\"comment\">创建两个线程，和主线程交替运行。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">原来线程都有自己默认的名称。</span></span><br><span class=\"line\"><span class=\"comment\">Thread-编号 该编号从0开始。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">static Thread currentThread():获取当前线程对象。</span></span><br><span class=\"line\"><span class=\"comment\">getName(): 获取线程名称。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">设置线程名称：setName或者构造函数。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//private String name;</span></span><br><span class=\"line\">\tTest(String name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//this.name = name;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">60</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println((Thread.currentThread()==<span class=\"keyword\">this</span>)+<span class=\"string\">\"...\"</span>+<span class=\"keyword\">this</span>.getName()+<span class=\"string\">\" run...\"</span>+x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tTest t1 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"one---\"</span>);</span><br><span class=\"line\">\t\tTest t2 = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"two+++\"</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"><span class=\"comment\">//\t\tt1.run();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tt2.run();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">60</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"main.....\"</span>+x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程的状态图\"><a href=\"#线程的状态图\" class=\"headerlink\" title=\"线程的状态图\"></a>线程的状态图</h3><p><img src=\"/images/post_images/javaReview_day11_img_01\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">需求：</span></span><br><span class=\"line\"><span class=\"comment\">银行有一个金库。</span></span><br><span class=\"line\"><span class=\"comment\">有两个储户分别存300元，每次存100，存3次。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">目的：该程序是否有安全问题，如果有，如何解决？</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">如何找问题：</span></span><br><span class=\"line\"><span class=\"comment\">1，明确哪些代码是多线程运行代码。</span></span><br><span class=\"line\"><span class=\"comment\">2，明确共享数据。</span></span><br><span class=\"line\"><span class=\"comment\">3，明确多线程运行代码中哪些语句是操作共享数据的。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bank</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sum;</span><br><span class=\"line\">\t<span class=\"comment\">//Object obj = new Object();</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//synchronized(obj)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t\t\tsum = sum + n;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"sum=\"</span>+sum);</span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Bank b = <span class=\"keyword\">new</span> Bank();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">3</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tb.add(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">BankDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tCus c = <span class=\"keyword\">new</span> Cus();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(c);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(c);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果同步函数被静态修饰后-使用的锁是什么呢？\"><a href=\"#如果同步函数被静态修饰后-使用的锁是什么呢？\" class=\"headerlink\" title=\"如果同步函数被静态修饰后, 使用的锁是什么呢？\"></a>如果同步函数被静态修饰后, 使用的锁是什么呢？</h3><p>通过验证，发现不在是this。因为静态方法中也不可以定义this。</p>\n<p>静态进内存是，内存中没有本类对象，但是一定有该类对应的字节码文件对象。<br>类名.class  该对象的类型是Class</p>\n<p>静态的同步方法，使用的锁是该方法所在类的字节码文件对象。 类名.class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span>  <span class=\"keyword\">int</span> tick = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//Object obj = new Object();</span></span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(Ticket.class)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....code : \"</span>+ tick--);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t\tshow();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....show.... : \"</span>+ tick--);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StaticMethodDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = <span class=\"keyword\">new</span> Ticket();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\tt.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"买票小程序\"><a href=\"#买票小程序\" class=\"headerlink\" title=\"买票小程序\"></a>买票小程序</h3><p>需求：简单的卖票程序。<br>多个窗口同时买票。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span>//<span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>  <span class=\"keyword\">int</span> tick = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....sale : \"</span>+ tick--);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">TicketDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = <span class=\"keyword\">new</span> Ticket();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(t);<span class=\"comment\">//创建了一个线程；</span></span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(t);<span class=\"comment\">//创建了一个线程；</span></span><br><span class=\"line\">\t\tThread t3 = <span class=\"keyword\">new</span> Thread(t);<span class=\"comment\">//创建了一个线程；</span></span><br><span class=\"line\">\t\tThread t4 = <span class=\"keyword\">new</span> Thread(t);<span class=\"comment\">//创建了一个线程；</span></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t\tt4.start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tTicket t1 = new Ticket();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//Ticket t2 = new Ticket();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//Ticket t3 = new Ticket();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//Ticket t4 = new Ticket();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建线程的第二种方式：实现Runable接口\"><a href=\"#创建线程的第二种方式：实现Runable接口\" class=\"headerlink\" title=\"创建线程的第二种方式：实现Runable接口\"></a>创建线程的第二种方式：实现Runable接口</h3><p>步骤：</p>\n<ol>\n<li>定义类实现Runnable接口</li>\n<li><p>覆盖Runnable接口中的run方法。<br> 将线程要运行的代码存放在该run方法中。</p>\n</li>\n<li><p>通过Thread类建立线程对象。</p>\n</li>\n<li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。<br> 为什么要将Runnable接口的子类对象传递给Thread的构造函数。<br> 因为，自定义的run方法所属的对象是Runnable接口的子类对象。<br> 所以要让线程去执行指定对象的run方法。就必须明确该run方法所属对象。</li>\n</ol>\n<ol>\n<li>调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。</li>\n</ol>\n<h4 id=\"实现方式和继承方式有什么区别呢？\"><a href=\"#实现方式和继承方式有什么区别呢？\" class=\"headerlink\" title=\"实现方式和继承方式有什么区别呢？\"></a>实现方式和继承方式有什么区别呢？</h4><ul>\n<li><p>实现方式好处：避免了单继承的局限性。<br>在定义线程时，建意使用实现方式。</p>\n</li>\n<li><p>两种方式区别：<br>继承Thread:线程代码存放Thread子类run方法中。<br>实现Runnable，线程代码存在接口的子类的run方法。</p>\n</li>\n</ul>\n<h2 id=\"线程同步-线程安全\"><a href=\"#线程同步-线程安全\" class=\"headerlink\" title=\"线程同步(线程安全)\"></a>线程同步(线程安全)</h2><h3 id=\"问题-同步函数用的是哪一个锁呢？\"><a href=\"#问题-同步函数用的是哪一个锁呢？\" class=\"headerlink\" title=\"问题: 同步函数用的是哪一个锁呢？\"></a>问题: 同步函数用的是哪一个锁呢？</h3><p>函数需要被对象调用。那么函数都有一个所属对象引用。就是this。<br>所以同步函数使用的锁是this。</p>\n<p>通过该程序进行验证。</p>\n<p>使用两个线程来买票。<br>一个线程在同步代码块中。<br>一个线程在同步函数中。<br>都在执行买票动作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>  <span class=\"keyword\">int</span> tick = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tObject obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....code : \"</span>+ tick--);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t\tshow();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"comment\">//this</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....show.... : \"</span>+ tick--);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ThisLockDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = <span class=\"keyword\">new</span> Ticket();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\tt.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"><span class=\"comment\">//\t\tThread t3 = new Thread(t);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tThread t4 = new Thread(t);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tt3.start();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tt4.start();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程安全在单例设计模式中的应用\"><a href=\"#线程安全在单例设计模式中的应用\" class=\"headerlink\" title=\"线程安全在单例设计模式中的应用\"></a>线程安全在单例设计模式中的应用</h3><ul>\n<li><p>饿汉式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Single s = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>懒汉式</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span>(Single.class)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(s==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//---&gt;A;</span></span><br><span class=\"line\">\t\t\t\t\ts = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>死锁。<br>同步中嵌套同步。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>  <span class=\"keyword\">int</span> tick = <span class=\"number\">1000</span>;</span><br><span class=\"line\">\tObject obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(obj)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tshow();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t\tshow();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span><span class=\"comment\">//this</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(obj)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tick&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....code : \"</span>+ tick--);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">DeadLockDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = <span class=\"keyword\">new</span> Ticket();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">10</span>);&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\tt.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"死锁练习\"><a href=\"#死锁练习\" class=\"headerlink\" title=\"死锁练习\"></a>死锁练习</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag;</span><br><span class=\"line\">\tTest(<span class=\"keyword\">boolean</span> flag)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.flag = flag;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(MyLock.locka)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...if locka \"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">synchronized</span>(MyLock.lockb)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"..if lockb\"</span>);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span>(MyLock.lockb)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"..else lockb\"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">synchronized</span>(MyLock.locka)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\".....else locka\"</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLock</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Object locka = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Object lockb = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">DeadLockTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Test(<span class=\"keyword\">true</span>));</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Test(<span class=\"keyword\">false</span>));</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>进程：正在执行的程序。</p>\n</li>\n<li><p>线程：是进程中用于控制程序执行的控制单元(执行路径，执行情景)<br>进程中至少有一个线程。</p>\n</li>\n<li><p>对于JVM，启动时，只好有两个线程：jvm的主线程。jvm的垃圾回收线程。</p>\n</li>\n</ul>\n<p><strong>如何在程序中自定义线程呢？</strong></p>\n<p>Java给我们提供了对象线程这类事物的描述。该类是Thread</p>\n<p>该类中定义了，<br>创建线程对象的方法(构造函数).<br>提供了要被线程执行的代码存储的位置(run())</p>\n<p>还定义了开启线程运行的方法(start()).<br>同时还有一些其他的方法用于操作线程：<br>    static Thread currentThead():<br>    String getName():<br>    static void sleep(time)throws InterruptedException:</p>\n<p>要运行的代码都是后期定义的。<br>所以创建线程的第一种方式是：继承Thread类。原因：要覆盖run方法，定义线程要运行的代码。</p>\n<p>步骤：</p>\n<ol>\n<li>继承Thread类。</li>\n<li>覆盖run方法。将线程要运行的代码定义其中。</li>\n<li>建Thread类的子类对象，其实就是在创建线程，调用start方法。</li>\n</ol>\n<p>如果自定义的类中有多线程要运行的代码。但是该类有自己的父类。<br>那么就不可以在继承Thread。怎么办呢？</p>\n<p>Java给我们提供了一个规则。Runnable接口。<br>如果自定义类不继承Thread，也可以实现Runnable接口。并将多线程要运行的代码存放在Runnable的run方法中。<br>这样多线程也可以帮助该类运行。<br>这样的操作有一个好处：避免了单继承的局限性。</p>\n<p>创建线程的第二种方式：实现Runnable接口。</p>\n<p>步骤：</p>\n<ol>\n<li>定义了实现Runnable接口。</li>\n<li>覆盖接口的run方法。将多线程要运行的代码存入其中。</li>\n<li>创建Thread类的对象(创建线程),并将Runnable接口的子类对象作为参数传递给Thread的构造函数。<br> 为什么要传递？因为线程要运行的代码都在Runnable子类的run方法中存储。所以要将该run方法所属的对象<br> 传递给Thread。让Thread线程去使用该对象调用其run方法。</li>\n<li>调用Thread对象的start方法。开启线程。</li>\n</ol>\n<p>动手写代码。</p>\n<p>两种方式的特点：<br>实现方式，因为避免了单继承的局限性，所以创建线程建议使用第二种方式。</p>\n<h3 id=\"第一重点：创建线程的两种方式\"><a href=\"#第一重点：创建线程的两种方式\" class=\"headerlink\" title=\"第一重点：创建线程的两种方式\"></a>第一重点：创建线程的两种方式</h3><p>作为了解：<br>线程的状态。</p>\n<ol>\n<li>被创建。</li>\n<li>运行。</li>\n<li>冻结。</li>\n<li>消亡。</li>\n</ol>\n<p>其实还有一种特殊的状态：临时状态。</p>\n<p>该临时状态的特点：<br>具备了执行资格，但不具备执行权。</p>\n<p><strong>冻结状态的特点</strong>：</p>\n<ul>\n<li>放弃了执行资格。<br>多线程具备随机性。因为是由cpu不断的快速切换造成的。<br>就有可能会产生多线程的安全问题;</li>\n</ul>\n<h4 id=\"问题的产生的原因：\"><a href=\"#问题的产生的原因：\" class=\"headerlink\" title=\"问题的产生的原因：\"></a>问题的产生的原因：</h4><p>几个关键点：</p>\n<ol>\n<li>多线程代码中有操作共享数据。</li>\n<li>多条语句操作该共享数据。</li>\n</ol>\n<p>当具备两个关键点时，<br>有一个线程对多条操作共享数据的代码执行的一部分。还没有执行完，另一个线程开始参与执行。就会发生数据错误。</p>\n<h4 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h4><p>当一个线程在执行多条操作共享数据代码时，其他线程即使获取了执行权，也不可以参与操作。</p>\n<p>Java就对这种解决方式提供了专业的代码。</p>\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><p>同步的原理：就是将部分操作功能数据的代码进行加锁。</p>\n<p>示例：火车上的卫生间。</p>\n<p>同步的表现形式：</p>\n<ol>\n<li>同步代码块。</li>\n<li>同步函数。<br>两者有什么不同：<br>同步代码块使用的锁是任意对象。<br>同步函数使用的锁是this。</li>\n</ol>\n<p>注意：对于static的同步函数，使用的锁不是this。是 类名.class 是该类的字节码文件对象。<br>    涉及到了单例设计模式的懒汉式。</p>\n<h4 id=\"同步的好处：解决了线程的安全问题。\"><a href=\"#同步的好处：解决了线程的安全问题。\" class=\"headerlink\" title=\"同步的好处：解决了线程的安全问题。\"></a>同步的好处：解决了线程的安全问题。</h4><ul>\n<li>弊端：<br>  较为消耗资源。<br>  同步嵌套后，容易死锁。</li>\n</ul>\n<p><strong>要记住</strong>：同步使用的前提：</p>\n<pre><code>1. 必须是两个或者两个以上的线程。\n2. 必须是多个线程使用同一个锁。\n这是才可以称为这些线程被同步了。\n</code></pre><p><strong>死锁代码一定会写。但开发时一定注意避免。</strong></p>\n<h3 id=\"第二重点：同步的所有特性\"><a href=\"#第二重点：同步的所有特性\" class=\"headerlink\" title=\"第二重点：同步的所有特性\"></a>第二重点：同步的所有特性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Runnable target;</span><br><span class=\"line\"></span><br><span class=\"line\">\tThread()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tThread(Runnable target)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(target!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\ttarget.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTest q = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">\tThread t = <span class=\"keyword\">new</span> Thread(q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaReview-day12-线程通信","date":"2018-01-20T07:20:31.000Z","type":["JavaReview"],"_content":"\n\n## 线程通信\n\n\n<font color='red'>线程间通讯：\n其实就是多个线程在操作同一个资源，\n但是操作的动作不同。</font>\n\n```java\nclass ProducerConsumerDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tResource r = new Resource();\n\n\t\tProducer pro = new Producer(r);\n\t\tConsumer con = new Consumer(r);\n\n\t\tThread t1 = new Thread(pro);\n\t\tThread t2 = new Thread(pro);\n\t\tThread t3 = new Thread(con);\n\t\tThread t4 = new Thread(con);\n\n\t\tt1.start();\n\t\tt2.start();\n\t\tt3.start();\n\t\tt4.start();\n\n\t}\n}\n```\n对于多个生产者和消费者。\n为什么要定义while判断标记。\n原因：让被唤醒的线程再一次判断标记。\n\n\n为什么定义`notifyAll`，\n因为需要唤醒对方线程。\n因为只用notify，容易出现只唤醒本方线程的情况。导致程序中的所有线程都等待。\n\n\n\n```java\nclass Resource\n{\n\tprivate String name;\n\tprivate int count = 1;\n\tprivate boolean flag = false;\n\t\t\t//  t1    t2\n\tpublic synchronized void set(String name)\n\t{\n\t\twhile(flag)\n\t\t\ttry{this.wait();}catch(Exception e){}//t1(放弃资格)  t2(获取资格)\n\t\tthis.name = name+\"--\"+count++;\n\n\t\tSystem.out.println(Thread.currentThread().getName()+\"...生产者..\"+this.name);\n\t\tflag = true;\n\t\tthis.notifyAll();\n\t}\n\n\n\t//  t3   t4  \n\tpublic synchronized void out()\n\t{\n\t\twhile(!flag)\n\t\t\ttry{wait();}catch(Exception e){}//t3(放弃资格) t4(放弃资格)\n\t\tSystem.out.println(Thread.currentThread().getName()+\"...消费者.........\"+this.name);\n\t\tflag = false;\n\t\tthis.notifyAll();\n\t}\n}\n\nclass Producer implements Runnable\n{\n\tprivate Resource res;\n\n\tProducer(Resource res)\n\t{\n\t\tthis.res = res;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tres.set(\"+商品+\");\n\t\t}\n\t}\n}\n\nclass Consumer implements Runnable\n{\n\tprivate Resource res;\n\n\tConsumer(Resource res)\n\t{\n\t\tthis.res = res;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tres.out();\n\t\t}\n\t}\n}\n```\n\n### 进程同步优化解决方案\n\n\nJDK1.5 中提供了多线程升级解决方案。\n将同步Synchronized替换成显式的Lock操作。\n将Object中的wait，notify notifyAll，替换了Condition对象。\n该对象可以Lock锁 进行获取。\n该示例中，实现了本方只唤醒对方操作。\n\n- Lock:替代了Synchronized\n  \tlock\n  \tunlock\n  \tnewCondition()\n\n- Condition：替代了Object wait notify notifyAll\n  \tawait();\n  \tsignal();\n  \tsignalAll();\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass ProducerConsumerDemo2\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tResource r = new Resource();\n\n\t\tProducer pro = new Producer(r);\n\t\tConsumer con = new Consumer(r);\n\n\t\tThread t1 = new Thread(pro);\n\t\tThread t2 = new Thread(pro);\n\t\tThread t3 = new Thread(con);\n\t\tThread t4 = new Thread(con);\n\n\t\tt1.start();\n\t\tt2.start();\n\t\tt3.start();\n\t\tt4.start();\n\n\t}\n}\n\nclass Resource\n{\n\tprivate String name;\n\tprivate int count = 1;\n\tprivate boolean flag = false;\n\t\t\t//  t1    t2\n\tprivate Lock lock = new ReentrantLock();\n\n\tprivate Condition condition_pro = lock.newCondition();\n\tprivate Condition condition_con = lock.newCondition();\n\n\n\n\tpublic  void set(String name)throws InterruptedException\n\t{\n\t\tlock.lock();\n\t\ttry\n\t\t{\n\t\t\twhile(flag)\n\t\t\t\tcondition_pro.await();//t1,t2\n\t\t\tthis.name = name+\"--\"+count++;\n\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"...生产者..\"+this.name);\n\t\t\tflag = true;\n\t\t\tcondition_con.signal();\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tlock.unlock();//释放锁的动作一定要执行。\n\t\t}\n\t}\n\n\n\t//  t3   t4  \n\tpublic  void out()throws InterruptedException\n\t{\n\t\tlock.lock();\n\t\ttry\n\t\t{\n\t\t\twhile(!flag)\n\t\t\t\tcondition_con.await();\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"...消费者.........\"+this.name);\n\t\t\tflag = false;\n\t\t\tcondition_pro.signal();\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tlock.unlock();\n\t\t}\n\n\t}\n}\n\nclass Producer implements Runnable\n{\n\tprivate Resource res;\n\n\tProducer(Resource res)\n\t{\n\t\tthis.res = res;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tres.set(\"+商品+\");\n\t\t\t}\n\t\t\tcatch (InterruptedException e)\n\t\t\t{\n\t\t\t}\n\n\t\t}\n\t}\n}\n\nclass Consumer implements Runnable\n{\n\tprivate Resource res;\n\n\tConsumer(Resource res)\n\t{\n\t\tthis.res = res;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tres.out();\n\t\t\t}\n\t\t\tcatch (InterruptedException e)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n```java\nclass Res\n{\n\tprivate String name;\n\tprivate String sex;\n\tprivate boolean flag = false;\n\n\tpublic synchronized void set(String name,String sex)\n\t{\n\t\tif(flag)\n\t\t\ttry{this.wait();}catch(Exception e){}\n\t\tthis.name = name;\n\n\t\tthis.sex = sex;\n\t\tflag = true;\n\t\tthis.notify();\n\t}\n\tpublic synchronized void out()\n\t{\n\t\tif(!flag)\n\t\t\ttry{this.wait();}catch(Exception e){}\n\t\tSystem.out.println(name+\"........\"+sex);\n\t\tflag = false;\n\t\tthis.notify();\n\t}\n}\n\nclass Input implements Runnable\n{\n\tprivate Res r ;\n\tInput(Res r)\n\t{\n\t\tthis.r = r;\n\t}\n\tpublic void run()\n\t{\n\t\tint x = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tif(x==0)\t\t\t\t\n\t\t\t\tr.set(\"mike\",\"man\");\t\t\t\t\n\t\t\telse\n\t\t\t\tr.set(\"丽丽\",\"女女女女女\");\t\t\t\t\n\t\t\tx = (x+1)%2;\n\t\t}\n\t}\n}\n\nclass Output implements Runnable\n{\n\tprivate Res r ;\n\n\tOutput(Res r)\n\t{\n\t\tthis.r = r;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tr.out();\n\t\t}\n\t}\n}\n\n\nclass  InputOutputDemo2\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tRes r = new Res();\n\n\t\tnew Thread(new Input(r)).start();\n\t\tnew Thread(new Output(r)).start();\n\t\t/*\n\t\tInput in = new Input(r);\n\t\tOutput out = new Output(r);\n\n\t\tThread t1 = new Thread(in);\n\t\tThread t2 = new Thread(out);\n\n\t\tt1.start();\n\t\tt2.start();\n\t\t*/\n\t}\n}\n\n```\n\n\n**等待的线程存放在线程池中**\n**最先唤醒的是最先被冻结的线程**\n\n\n### 停止线程\n\n\n**stop方法已经过时。**\n\n如何停止线程？\n只有一种，run方法结束。\n开启多线程运行，运行代码通常是循环结构。\n只要控制住循环，就可以让run方法结束，也就是线程结束。\n\n特殊情况：\n当线程处于了冻结状态。\n就不会读取到标记。那么线程就不会结束。\n\n当没有指定的方式让冻结的线程恢复到运行状态是，这时需要对冻结进行清除。\n强制让线程恢复到运行状态中来。这样就可以操作标记让线程结束。\n\nThread类提供该方法 `interrupt()`;\n\n```java\n\nclass StopThread implements Runnable\n{\n\tprivate boolean flag =true;\n\tpublic  void run()\n\t{\n\t\twhile(flag)\n\t\t{\n\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....run\");\n\t\t}\n\t}\n\tpublic void changeFlag()\n\t{\n\t\tflag = false;\n\t}\n}\n\n\n\n\nclass  StopThreadDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tStopThread st = new StopThread();\n\n\t\tThread t1 = new Thread(st);\n\t\tThread t2 = new Thread(st);\n\n\n\t\tt1.setDaemon(true);\n\t\tt2.setDaemon(true);\n\t\tt1.start();\n\t\tt2.start();\n\n\t\tint num = 0;\n\n\t\twhile(true)\n\t\t{\n\t\t\tif(num++ == 60)\n\t\t\t{\n\t\t\t\t//st.changeFlag();\n\t\t\t\t//t1.interrupt();\n\t\t\t\t//t2.interrupt();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\".......\"+num);\n\t\t}\n\t\tSystem.out.println(\"over\");\n\t}\n}\n```\n\n\n### 守护进程\n\njoin:\n当A线程执行到了B线程的.join()方法时，A就会等待。等B线程都执行完，A才会执行。\n\njoin可以用来临时加入线程执行。\n\n\n```java\n\nclass Demo implements Runnable\n{\n\tpublic void run()\n\t{\n\t\tfor(int x=0; x<70; x++)\n\t\t{\n\t\t\tSystem.out.println(Thread.currentThread().toString()+\".....\"+x);\n\t\t\tThread.yield();\n\t\t}\n\t}\n}\n\n\nclass  JoinDemo\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tDemo d = new Demo();\n\t\tThread t1 = new Thread(d);\n\t\tThread t2 = new Thread(d);\n\t\tt1.start();\n\n\t\t//t1.setPriority(Thread.MAX_PRIORITY);\n\n\t\tt2.start();\n\n\t\t//t1.join();\n\n\t\tfor(int x=0; x<80; x++)\n\t\t{\n\t\t\t//System.out.println(\"main.....\"+x);\n\t\t}\n\t\tSystem.out.println(\"over\");\n\t}\n}\n```\n\n### 练习\n\n```java\nclass MyThread extends Thread{\n\tpublic void run(){\n\t\ttry {\n\t\t\tThread.currentThread().sleep(3000);\n\t\t} catch (InterruptedException e) {\n\t\t}\n\t\tSystem.out.println(\"MyThread running\");\n\t}\n}\n\n\n\npublic class ThreadTest{\n\tpublic static void main(String argv[]) {\n\t\tMyThread t = new MyThread();\n\t\tt.run();\n\t\tt.start();\n\t\tSystem.out.println(\"Thread Test\");\n\t  }\n}\n```\n\n#### 代码分析过程：\n\n`MyThread t = new MyThread();`\n创建了一个线程。\n`t.run();`\n调用`MyThread`对象的`run()`方法。\n这是只有一个线程在运行就是主线程。\n当主线程执行到了`run()`方法中的`sleep(3000);`时。\n这是主线程处于冻结状态。程序并没有任何执行。\n当3秒过后，主线程打印了  `MyThread running`。 `run()`方法执行结束。\n\n`t.start();`\n开启了t线程。\n**有两种可能情况。**\n1. 第一种情况:\n主线程在只执行了`t.start()`后，还具有执行权，继续往下执行，\n打印了`Thread Test`。主线程结束。\nt线程获取执行权，调用自己的run方法。然后执行的`sleep(3000);`冻结3秒。\n3秒后，打印MyThread running t线程结束，整个程序结束。\n\n2. 第二种情况：\n主线程执行到`t.start();`开启了t线程，t线程就直接获取到了执行权。\n就调用自己的`run()`方法。\n指定到`sleep(3000)`.t线程冻结3秒，这是t线程就是释放了执行权。\n那么主线程开始执行打印了`Thread Test`，主线程结束。\n等到3秒后，t线程打印`MyThread running` ，然后t线程结束。\n程序结束。\n\n### 总结\n\n\n#### 线程间通信。\n\t等待/唤醒机制。\n\n\t也就是常见的生产者消费者问题。\n\n\t1. 当多个生产者消费者出现时，\n\t需要让获取执行权的线程判断标记。\n\t通过while完成。\n\n\t2. 需要将对方的线程唤醒。\n\t仅仅用notify，是不可以的。因为有可能出现只唤醒本方。\n\t有可能会导致，所有线程都等待。\n\t所以可以通过notifyAll的形式来完成 。\n\n*这个程序有一个bug。就是每次notifyAll。都会唤醒本方。\n可不可以只唤醒对方呢？*\n\n**JDK1.5版本提供了一些新的对象，优化了等待唤醒机制。**\n\n1. 将synchronized 替换成了Lock接口。\n\t将隐式锁，升级成了显示锁。\n\t**Lock**\n\t\t- 获取锁：lock();\n\t\t- 释放锁：unlock();注意：释放的动作一定要执行，所以通常定义在finally中。\n\t\t- 获取Condition对象：newCondition();\n2. 将Object中的wait，notify，notifyAll方法都替换成了Condition的await，signal，signalAll。\n\t和以前不同是：一个同步代码块具备一个锁，该所以具备自己的独立wait和notify方法。\n\t现在是将wait，notify等方法，封装进一个特有的对象Condition，而一个Lock锁上可以有多个Condition对象。\n\n```java\n\n\tLock lock = new ReentrantLock();\n\n\tCondition conA = lock.newCondition();\n\tCondition conB = lock.newCondition();\n\n\tcon.await();//生产，，消费\n\tcon.signal();生产\n\n\n\tset()\n\t{\n\t\tif(flag)\n\t\t\tconA.await();//生产者，\n\t\tcode......;\n\n\t\tflag = true;\n\t\tconB.signal();\n\t}\n\n\tout()\n\t{\n\t\tif(!flag)\n\t\t\tconB.await();//消费者\n\n\t\tcode....;\n\t\tflag = false;\n\t\tconA.signal();\n\t}\n\n\n```\n- wait和sleep的区别：\nwait:释放cpu执行权，释放同步中锁。\nsleep:释放cpu执行权，不释放同步中锁。\n\n`synchronized(锁)\n{\nwait();\n}`\n\n#### 停止线程：\n\t**stop过时。**\n\t原理：run方法结束。run方法中通常定义循环，指定控制住循环线程即可结束。\n\n\t1. 定义结束标记。\n\t2. 当线程处于了冻结状态，没有执行标记，程序一样无法结束。\n\t\t这时可以循环，正常退出冻结状态，或者强制结束冻结状态。\n\t\t强制结束冻结状态：interrupt();目的是线程强制从冻结状态恢复到运行状态。\n\t\t但是会发生InterruptedException异常。\n\n\n\n- 线程中一些常见方法：\n\tsetDaemon(boolean):将线程标记为后台线程，后台线程和前台线程一样，开启，一样抢执行权运行，\n\t只有在结束时，有区别，当前台线程都运行结束后，后台线程会自动结束。\n\n\tjoin():什么意思？等待该线程结束。当A线程执行到了B的.join方法时，A就会处于冻结状态。\n\t\t\tA什么时候运行呢？当B运行结束后，A就会具备运行资格，继续运行。\n\n\t加入线程，可以完成对某个线程的临时加入执行。\n\n\n\n\n**多线程重点:**\n1. 多线程的创建的两种方式，以及区别。\n\n2. 同步的特点。\n  \t同步的好处：\n  \t同步的弊端：\n  \t同步的前提：\n  \t同步的表现形式以及区别。\n  \t特例：static同步函数锁是哪一个。\n\n\t**死锁代码要求写的出来。**\n\n3. 线程间通信，看以上总结。\n\n\n4. wait和sleep，  `yield()`: 临时暂停，可以让线程是释放执行权。\n`yield()`方法API:\n`给调度程序的一个提示，当前线程愿意得到它当前的处理器的使用。调度程序可以自由地忽略这个提示。\n产量是一个启发式的尝试，以改善线程之间的相对进展，否则将过度使用一个中央处理器。它的使用应结合详细的分析和基准，以确保它实际上有所需的效果。\n\n使用这种方法是不恰当的。它可能是有用的调试或测试的目的，它可能有助于重现由于种族条件的错误。这也可能是有用的在设计并发控制结构如在java.util.concurrent.locks包的。\n`\n","source":"_posts/JavaReview-day12-线程通信.md","raw":"---\ntitle: JavaReview-day12-线程通信\ndate: 2018-01-20 15:20:31\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n\n## 线程通信\n\n\n<font color='red'>线程间通讯：\n其实就是多个线程在操作同一个资源，\n但是操作的动作不同。</font>\n\n```java\nclass ProducerConsumerDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tResource r = new Resource();\n\n\t\tProducer pro = new Producer(r);\n\t\tConsumer con = new Consumer(r);\n\n\t\tThread t1 = new Thread(pro);\n\t\tThread t2 = new Thread(pro);\n\t\tThread t3 = new Thread(con);\n\t\tThread t4 = new Thread(con);\n\n\t\tt1.start();\n\t\tt2.start();\n\t\tt3.start();\n\t\tt4.start();\n\n\t}\n}\n```\n对于多个生产者和消费者。\n为什么要定义while判断标记。\n原因：让被唤醒的线程再一次判断标记。\n\n\n为什么定义`notifyAll`，\n因为需要唤醒对方线程。\n因为只用notify，容易出现只唤醒本方线程的情况。导致程序中的所有线程都等待。\n\n\n\n```java\nclass Resource\n{\n\tprivate String name;\n\tprivate int count = 1;\n\tprivate boolean flag = false;\n\t\t\t//  t1    t2\n\tpublic synchronized void set(String name)\n\t{\n\t\twhile(flag)\n\t\t\ttry{this.wait();}catch(Exception e){}//t1(放弃资格)  t2(获取资格)\n\t\tthis.name = name+\"--\"+count++;\n\n\t\tSystem.out.println(Thread.currentThread().getName()+\"...生产者..\"+this.name);\n\t\tflag = true;\n\t\tthis.notifyAll();\n\t}\n\n\n\t//  t3   t4  \n\tpublic synchronized void out()\n\t{\n\t\twhile(!flag)\n\t\t\ttry{wait();}catch(Exception e){}//t3(放弃资格) t4(放弃资格)\n\t\tSystem.out.println(Thread.currentThread().getName()+\"...消费者.........\"+this.name);\n\t\tflag = false;\n\t\tthis.notifyAll();\n\t}\n}\n\nclass Producer implements Runnable\n{\n\tprivate Resource res;\n\n\tProducer(Resource res)\n\t{\n\t\tthis.res = res;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tres.set(\"+商品+\");\n\t\t}\n\t}\n}\n\nclass Consumer implements Runnable\n{\n\tprivate Resource res;\n\n\tConsumer(Resource res)\n\t{\n\t\tthis.res = res;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tres.out();\n\t\t}\n\t}\n}\n```\n\n### 进程同步优化解决方案\n\n\nJDK1.5 中提供了多线程升级解决方案。\n将同步Synchronized替换成显式的Lock操作。\n将Object中的wait，notify notifyAll，替换了Condition对象。\n该对象可以Lock锁 进行获取。\n该示例中，实现了本方只唤醒对方操作。\n\n- Lock:替代了Synchronized\n  \tlock\n  \tunlock\n  \tnewCondition()\n\n- Condition：替代了Object wait notify notifyAll\n  \tawait();\n  \tsignal();\n  \tsignalAll();\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass ProducerConsumerDemo2\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tResource r = new Resource();\n\n\t\tProducer pro = new Producer(r);\n\t\tConsumer con = new Consumer(r);\n\n\t\tThread t1 = new Thread(pro);\n\t\tThread t2 = new Thread(pro);\n\t\tThread t3 = new Thread(con);\n\t\tThread t4 = new Thread(con);\n\n\t\tt1.start();\n\t\tt2.start();\n\t\tt3.start();\n\t\tt4.start();\n\n\t}\n}\n\nclass Resource\n{\n\tprivate String name;\n\tprivate int count = 1;\n\tprivate boolean flag = false;\n\t\t\t//  t1    t2\n\tprivate Lock lock = new ReentrantLock();\n\n\tprivate Condition condition_pro = lock.newCondition();\n\tprivate Condition condition_con = lock.newCondition();\n\n\n\n\tpublic  void set(String name)throws InterruptedException\n\t{\n\t\tlock.lock();\n\t\ttry\n\t\t{\n\t\t\twhile(flag)\n\t\t\t\tcondition_pro.await();//t1,t2\n\t\t\tthis.name = name+\"--\"+count++;\n\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"...生产者..\"+this.name);\n\t\t\tflag = true;\n\t\t\tcondition_con.signal();\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tlock.unlock();//释放锁的动作一定要执行。\n\t\t}\n\t}\n\n\n\t//  t3   t4  \n\tpublic  void out()throws InterruptedException\n\t{\n\t\tlock.lock();\n\t\ttry\n\t\t{\n\t\t\twhile(!flag)\n\t\t\t\tcondition_con.await();\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"...消费者.........\"+this.name);\n\t\t\tflag = false;\n\t\t\tcondition_pro.signal();\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tlock.unlock();\n\t\t}\n\n\t}\n}\n\nclass Producer implements Runnable\n{\n\tprivate Resource res;\n\n\tProducer(Resource res)\n\t{\n\t\tthis.res = res;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tres.set(\"+商品+\");\n\t\t\t}\n\t\t\tcatch (InterruptedException e)\n\t\t\t{\n\t\t\t}\n\n\t\t}\n\t}\n}\n\nclass Consumer implements Runnable\n{\n\tprivate Resource res;\n\n\tConsumer(Resource res)\n\t{\n\t\tthis.res = res;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tres.out();\n\t\t\t}\n\t\t\tcatch (InterruptedException e)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n```java\nclass Res\n{\n\tprivate String name;\n\tprivate String sex;\n\tprivate boolean flag = false;\n\n\tpublic synchronized void set(String name,String sex)\n\t{\n\t\tif(flag)\n\t\t\ttry{this.wait();}catch(Exception e){}\n\t\tthis.name = name;\n\n\t\tthis.sex = sex;\n\t\tflag = true;\n\t\tthis.notify();\n\t}\n\tpublic synchronized void out()\n\t{\n\t\tif(!flag)\n\t\t\ttry{this.wait();}catch(Exception e){}\n\t\tSystem.out.println(name+\"........\"+sex);\n\t\tflag = false;\n\t\tthis.notify();\n\t}\n}\n\nclass Input implements Runnable\n{\n\tprivate Res r ;\n\tInput(Res r)\n\t{\n\t\tthis.r = r;\n\t}\n\tpublic void run()\n\t{\n\t\tint x = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tif(x==0)\t\t\t\t\n\t\t\t\tr.set(\"mike\",\"man\");\t\t\t\t\n\t\t\telse\n\t\t\t\tr.set(\"丽丽\",\"女女女女女\");\t\t\t\t\n\t\t\tx = (x+1)%2;\n\t\t}\n\t}\n}\n\nclass Output implements Runnable\n{\n\tprivate Res r ;\n\n\tOutput(Res r)\n\t{\n\t\tthis.r = r;\n\t}\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tr.out();\n\t\t}\n\t}\n}\n\n\nclass  InputOutputDemo2\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tRes r = new Res();\n\n\t\tnew Thread(new Input(r)).start();\n\t\tnew Thread(new Output(r)).start();\n\t\t/*\n\t\tInput in = new Input(r);\n\t\tOutput out = new Output(r);\n\n\t\tThread t1 = new Thread(in);\n\t\tThread t2 = new Thread(out);\n\n\t\tt1.start();\n\t\tt2.start();\n\t\t*/\n\t}\n}\n\n```\n\n\n**等待的线程存放在线程池中**\n**最先唤醒的是最先被冻结的线程**\n\n\n### 停止线程\n\n\n**stop方法已经过时。**\n\n如何停止线程？\n只有一种，run方法结束。\n开启多线程运行，运行代码通常是循环结构。\n只要控制住循环，就可以让run方法结束，也就是线程结束。\n\n特殊情况：\n当线程处于了冻结状态。\n就不会读取到标记。那么线程就不会结束。\n\n当没有指定的方式让冻结的线程恢复到运行状态是，这时需要对冻结进行清除。\n强制让线程恢复到运行状态中来。这样就可以操作标记让线程结束。\n\nThread类提供该方法 `interrupt()`;\n\n```java\n\nclass StopThread implements Runnable\n{\n\tprivate boolean flag =true;\n\tpublic  void run()\n\t{\n\t\twhile(flag)\n\t\t{\n\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\"....run\");\n\t\t}\n\t}\n\tpublic void changeFlag()\n\t{\n\t\tflag = false;\n\t}\n}\n\n\n\n\nclass  StopThreadDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tStopThread st = new StopThread();\n\n\t\tThread t1 = new Thread(st);\n\t\tThread t2 = new Thread(st);\n\n\n\t\tt1.setDaemon(true);\n\t\tt2.setDaemon(true);\n\t\tt1.start();\n\t\tt2.start();\n\n\t\tint num = 0;\n\n\t\twhile(true)\n\t\t{\n\t\t\tif(num++ == 60)\n\t\t\t{\n\t\t\t\t//st.changeFlag();\n\t\t\t\t//t1.interrupt();\n\t\t\t\t//t2.interrupt();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\".......\"+num);\n\t\t}\n\t\tSystem.out.println(\"over\");\n\t}\n}\n```\n\n\n### 守护进程\n\njoin:\n当A线程执行到了B线程的.join()方法时，A就会等待。等B线程都执行完，A才会执行。\n\njoin可以用来临时加入线程执行。\n\n\n```java\n\nclass Demo implements Runnable\n{\n\tpublic void run()\n\t{\n\t\tfor(int x=0; x<70; x++)\n\t\t{\n\t\t\tSystem.out.println(Thread.currentThread().toString()+\".....\"+x);\n\t\t\tThread.yield();\n\t\t}\n\t}\n}\n\n\nclass  JoinDemo\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tDemo d = new Demo();\n\t\tThread t1 = new Thread(d);\n\t\tThread t2 = new Thread(d);\n\t\tt1.start();\n\n\t\t//t1.setPriority(Thread.MAX_PRIORITY);\n\n\t\tt2.start();\n\n\t\t//t1.join();\n\n\t\tfor(int x=0; x<80; x++)\n\t\t{\n\t\t\t//System.out.println(\"main.....\"+x);\n\t\t}\n\t\tSystem.out.println(\"over\");\n\t}\n}\n```\n\n### 练习\n\n```java\nclass MyThread extends Thread{\n\tpublic void run(){\n\t\ttry {\n\t\t\tThread.currentThread().sleep(3000);\n\t\t} catch (InterruptedException e) {\n\t\t}\n\t\tSystem.out.println(\"MyThread running\");\n\t}\n}\n\n\n\npublic class ThreadTest{\n\tpublic static void main(String argv[]) {\n\t\tMyThread t = new MyThread();\n\t\tt.run();\n\t\tt.start();\n\t\tSystem.out.println(\"Thread Test\");\n\t  }\n}\n```\n\n#### 代码分析过程：\n\n`MyThread t = new MyThread();`\n创建了一个线程。\n`t.run();`\n调用`MyThread`对象的`run()`方法。\n这是只有一个线程在运行就是主线程。\n当主线程执行到了`run()`方法中的`sleep(3000);`时。\n这是主线程处于冻结状态。程序并没有任何执行。\n当3秒过后，主线程打印了  `MyThread running`。 `run()`方法执行结束。\n\n`t.start();`\n开启了t线程。\n**有两种可能情况。**\n1. 第一种情况:\n主线程在只执行了`t.start()`后，还具有执行权，继续往下执行，\n打印了`Thread Test`。主线程结束。\nt线程获取执行权，调用自己的run方法。然后执行的`sleep(3000);`冻结3秒。\n3秒后，打印MyThread running t线程结束，整个程序结束。\n\n2. 第二种情况：\n主线程执行到`t.start();`开启了t线程，t线程就直接获取到了执行权。\n就调用自己的`run()`方法。\n指定到`sleep(3000)`.t线程冻结3秒，这是t线程就是释放了执行权。\n那么主线程开始执行打印了`Thread Test`，主线程结束。\n等到3秒后，t线程打印`MyThread running` ，然后t线程结束。\n程序结束。\n\n### 总结\n\n\n#### 线程间通信。\n\t等待/唤醒机制。\n\n\t也就是常见的生产者消费者问题。\n\n\t1. 当多个生产者消费者出现时，\n\t需要让获取执行权的线程判断标记。\n\t通过while完成。\n\n\t2. 需要将对方的线程唤醒。\n\t仅仅用notify，是不可以的。因为有可能出现只唤醒本方。\n\t有可能会导致，所有线程都等待。\n\t所以可以通过notifyAll的形式来完成 。\n\n*这个程序有一个bug。就是每次notifyAll。都会唤醒本方。\n可不可以只唤醒对方呢？*\n\n**JDK1.5版本提供了一些新的对象，优化了等待唤醒机制。**\n\n1. 将synchronized 替换成了Lock接口。\n\t将隐式锁，升级成了显示锁。\n\t**Lock**\n\t\t- 获取锁：lock();\n\t\t- 释放锁：unlock();注意：释放的动作一定要执行，所以通常定义在finally中。\n\t\t- 获取Condition对象：newCondition();\n2. 将Object中的wait，notify，notifyAll方法都替换成了Condition的await，signal，signalAll。\n\t和以前不同是：一个同步代码块具备一个锁，该所以具备自己的独立wait和notify方法。\n\t现在是将wait，notify等方法，封装进一个特有的对象Condition，而一个Lock锁上可以有多个Condition对象。\n\n```java\n\n\tLock lock = new ReentrantLock();\n\n\tCondition conA = lock.newCondition();\n\tCondition conB = lock.newCondition();\n\n\tcon.await();//生产，，消费\n\tcon.signal();生产\n\n\n\tset()\n\t{\n\t\tif(flag)\n\t\t\tconA.await();//生产者，\n\t\tcode......;\n\n\t\tflag = true;\n\t\tconB.signal();\n\t}\n\n\tout()\n\t{\n\t\tif(!flag)\n\t\t\tconB.await();//消费者\n\n\t\tcode....;\n\t\tflag = false;\n\t\tconA.signal();\n\t}\n\n\n```\n- wait和sleep的区别：\nwait:释放cpu执行权，释放同步中锁。\nsleep:释放cpu执行权，不释放同步中锁。\n\n`synchronized(锁)\n{\nwait();\n}`\n\n#### 停止线程：\n\t**stop过时。**\n\t原理：run方法结束。run方法中通常定义循环，指定控制住循环线程即可结束。\n\n\t1. 定义结束标记。\n\t2. 当线程处于了冻结状态，没有执行标记，程序一样无法结束。\n\t\t这时可以循环，正常退出冻结状态，或者强制结束冻结状态。\n\t\t强制结束冻结状态：interrupt();目的是线程强制从冻结状态恢复到运行状态。\n\t\t但是会发生InterruptedException异常。\n\n\n\n- 线程中一些常见方法：\n\tsetDaemon(boolean):将线程标记为后台线程，后台线程和前台线程一样，开启，一样抢执行权运行，\n\t只有在结束时，有区别，当前台线程都运行结束后，后台线程会自动结束。\n\n\tjoin():什么意思？等待该线程结束。当A线程执行到了B的.join方法时，A就会处于冻结状态。\n\t\t\tA什么时候运行呢？当B运行结束后，A就会具备运行资格，继续运行。\n\n\t加入线程，可以完成对某个线程的临时加入执行。\n\n\n\n\n**多线程重点:**\n1. 多线程的创建的两种方式，以及区别。\n\n2. 同步的特点。\n  \t同步的好处：\n  \t同步的弊端：\n  \t同步的前提：\n  \t同步的表现形式以及区别。\n  \t特例：static同步函数锁是哪一个。\n\n\t**死锁代码要求写的出来。**\n\n3. 线程间通信，看以上总结。\n\n\n4. wait和sleep，  `yield()`: 临时暂停，可以让线程是释放执行权。\n`yield()`方法API:\n`给调度程序的一个提示，当前线程愿意得到它当前的处理器的使用。调度程序可以自由地忽略这个提示。\n产量是一个启发式的尝试，以改善线程之间的相对进展，否则将过度使用一个中央处理器。它的使用应结合详细的分析和基准，以确保它实际上有所需的效果。\n\n使用这种方法是不恰当的。它可能是有用的调试或测试的目的，它可能有助于重现由于种族条件的错误。这也可能是有用的在设计并发控制结构如在java.util.concurrent.locks包的。\n`\n","slug":"JavaReview-day12-线程通信","published":1,"updated":"2018-01-22T11:23:17.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m05w000qq8kxg798ys67","content":"<h2 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h2><font color=\"red\">线程间通讯：<br>其实就是多个线程在操作同一个资源，<br>但是操作的动作不同。</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tResource r = <span class=\"keyword\">new</span> Resource();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tProducer pro = <span class=\"keyword\">new</span> Producer(r);</span><br><span class=\"line\">\t\tConsumer con = <span class=\"keyword\">new</span> Consumer(r);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\">\t\tThread t3 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\">\t\tThread t4 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t\tt4.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于多个生产者和消费者。<br>为什么要定义while判断标记。<br>原因：让被唤醒的线程再一次判断标记。</p>\n<p>为什么定义<code>notifyAll</code>，<br>因为需要唤醒对方线程。<br>因为只用notify，容易出现只唤醒本方线程的情况。导致程序中的所有线程都等待。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Resource</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//  t1    t2</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;<span class=\"keyword\">this</span>.wait();&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;<span class=\"comment\">//t1(放弃资格)  t2(获取资格)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name+<span class=\"string\">\"--\"</span>+count++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...生产者..\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//  t3   t4  </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;wait();&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;<span class=\"comment\">//t3(放弃资格) t4(放弃资格)</span></span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...消费者.........\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tProducer(Resource res)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.set(<span class=\"string\">\"+商品+\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsumer(Resource res)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.out();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"进程同步优化解决方案\"><a href=\"#进程同步优化解决方案\" class=\"headerlink\" title=\"进程同步优化解决方案\"></a>进程同步优化解决方案</h3><p>JDK1.5 中提供了多线程升级解决方案。<br>将同步Synchronized替换成显式的Lock操作。<br>将Object中的wait，notify notifyAll，替换了Condition对象。<br>该对象可以Lock锁 进行获取。<br>该示例中，实现了本方只唤醒对方操作。</p>\n<ul>\n<li><p>Lock:替代了Synchronized</p>\n<pre><code>lock\nunlock\nnewCondition()\n</code></pre></li>\n<li><p>Condition：替代了Object wait notify notifyAll</p>\n<pre><code>await();\nsignal();\nsignalAll();\n</code></pre></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerDemo2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tResource r = <span class=\"keyword\">new</span> Resource();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tProducer pro = <span class=\"keyword\">new</span> Producer(r);</span><br><span class=\"line\">\t\tConsumer con = <span class=\"keyword\">new</span> Consumer(r);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\">\t\tThread t3 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\">\t\tThread t4 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t\tt4.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Resource</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//  t1    t2</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Condition condition_pro = lock.newCondition();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Condition condition_con = lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name)</span><span class=\"keyword\">throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(flag)</span><br><span class=\"line\">\t\t\t\tcondition_pro.await();<span class=\"comment\">//t1,t2</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name+<span class=\"string\">\"--\"</span>+count++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...生产者..\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\tcondition_con.signal();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlock.unlock();<span class=\"comment\">//释放锁的动作一定要执行。</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//  t3   t4  </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(!flag)</span><br><span class=\"line\">\t\t\t\tcondition_con.await();</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...消费者.........\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\t\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\tcondition_pro.signal();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tProducer(Resource res)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tres.set(<span class=\"string\">\"+商品+\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsumer(Resource res)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tres.out();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Res</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name,String sex)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;<span class=\"keyword\">this</span>.wait();&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notify();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;<span class=\"keyword\">this</span>.wait();&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\tSystem.out.println(name+<span class=\"string\">\"........\"</span>+sex);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notify();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Input</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Res r ;</span><br><span class=\"line\">\tInput(Res r)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)\t\t\t\t</span><br><span class=\"line\">\t\t\t\tr.set(<span class=\"string\">\"mike\"</span>,<span class=\"string\">\"man\"</span>);\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tr.set(<span class=\"string\">\"丽丽\"</span>,<span class=\"string\">\"女女女女女\"</span>);\t\t\t\t</span><br><span class=\"line\">\t\t\tx = (x+<span class=\"number\">1</span>)%<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Output</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Res r ;</span><br><span class=\"line\"></span><br><span class=\"line\">\tOutput(Res r)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tr.out();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">InputOutputDemo2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tRes r = <span class=\"keyword\">new</span> Res();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Input(r)).start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Output(r)).start();</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tInput in = new Input(r);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tOutput out = new Output(r);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tThread t1 = new Thread(in);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tThread t2 = new Thread(out);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tt2.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>等待的线程存放在线程池中</strong><br><strong>最先唤醒的是最先被冻结的线程</strong></p>\n<h3 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h3><p><strong>stop方法已经过时。</strong></p>\n<p>如何停止线程？<br>只有一种，run方法结束。<br>开启多线程运行，运行代码通常是循环结构。<br>只要控制住循环，就可以让run方法结束，也就是线程结束。</p>\n<p>特殊情况：<br>当线程处于了冻结状态。<br>就不会读取到标记。那么线程就不会结束。</p>\n<p>当没有指定的方式让冻结的线程恢复到运行状态是，这时需要对冻结进行清除。<br>强制让线程恢复到运行状态中来。这样就可以操作标记让线程结束。</p>\n<p>Thread类提供该方法 <code>interrupt()</code>;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag =<span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....run\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeFlag</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StopThreadDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStopThread st = <span class=\"keyword\">new</span> StopThread();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(st);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(st);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt1.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tt2.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(num++ == <span class=\"number\">60</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//st.changeFlag();</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//t1.interrupt();</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//t2.interrupt();</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\".......\"</span>+num);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"over\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"守护进程\"><a href=\"#守护进程\" class=\"headerlink\" title=\"守护进程\"></a>守护进程</h3><p>join:<br>当A线程执行到了B线程的.join()方法时，A就会等待。等B线程都执行完，A才会执行。</p>\n<p>join可以用来临时加入线程执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">70</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().toString()+<span class=\"string\">\".....\"</span>+x);</span><br><span class=\"line\">\t\t\tThread.yield();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">JoinDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDemo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//t1.setPriority(Thread.MAX_PRIORITY);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//t1.join();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">80</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//System.out.println(\"main.....\"+x);</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"over\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"MyThread running\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String argv[])</span> </span>&#123;</span><br><span class=\"line\">\t\tMyThread t = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">\t\tt.run();</span><br><span class=\"line\">\t\tt.start();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Thread Test\"</span>);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码分析过程：\"><a href=\"#代码分析过程：\" class=\"headerlink\" title=\"代码分析过程：\"></a>代码分析过程：</h4><p><code>MyThread t = new MyThread();</code><br>创建了一个线程。<br><code>t.run();</code><br>调用<code>MyThread</code>对象的<code>run()</code>方法。<br>这是只有一个线程在运行就是主线程。<br>当主线程执行到了<code>run()</code>方法中的<code>sleep(3000);</code>时。<br>这是主线程处于冻结状态。程序并没有任何执行。<br>当3秒过后，主线程打印了  <code>MyThread running</code>。 <code>run()</code>方法执行结束。</p>\n<p><code>t.start();</code><br>开启了t线程。<br><strong>有两种可能情况。</strong></p>\n<ol>\n<li><p>第一种情况:<br>主线程在只执行了<code>t.start()</code>后，还具有执行权，继续往下执行，<br>打印了<code>Thread Test</code>。主线程结束。<br>t线程获取执行权，调用自己的run方法。然后执行的<code>sleep(3000);</code>冻结3秒。<br>3秒后，打印MyThread running t线程结束，整个程序结束。</p>\n</li>\n<li><p>第二种情况：<br>主线程执行到<code>t.start();</code>开启了t线程，t线程就直接获取到了执行权。<br>就调用自己的<code>run()</code>方法。<br>指定到<code>sleep(3000)</code>.t线程冻结3秒，这是t线程就是释放了执行权。<br>那么主线程开始执行打印了<code>Thread Test</code>，主线程结束。<br>等到3秒后，t线程打印<code>MyThread running</code> ，然后t线程结束。<br>程序结束。</p>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"线程间通信。\"><a href=\"#线程间通信。\" class=\"headerlink\" title=\"线程间通信。\"></a>线程间通信。</h4><pre><code>等待/唤醒机制。\n\n也就是常见的生产者消费者问题。\n\n1. 当多个生产者消费者出现时，\n需要让获取执行权的线程判断标记。\n通过while完成。\n\n2. 需要将对方的线程唤醒。\n仅仅用notify，是不可以的。因为有可能出现只唤醒本方。\n有可能会导致，所有线程都等待。\n所以可以通过notifyAll的形式来完成 。\n</code></pre><p><em>这个程序有一个bug。就是每次notifyAll。都会唤醒本方。<br>可不可以只唤醒对方呢？</em></p>\n<p><strong>JDK1.5版本提供了一些新的对象，优化了等待唤醒机制。</strong></p>\n<ol>\n<li>将synchronized 替换成了Lock接口。<br> 将隐式锁，升级成了显示锁。<br> <strong>Lock</strong><pre><code>- 获取锁：lock();\n- 释放锁：unlock();注意：释放的动作一定要执行，所以通常定义在finally中。\n- 获取Condition对象：newCondition();\n</code></pre></li>\n<li>将Object中的wait，notify，notifyAll方法都替换成了Condition的await，signal，signalAll。<br> 和以前不同是：一个同步代码块具备一个锁，该所以具备自己的独立wait和notify方法。<br> 现在是将wait，notify等方法，封装进一个特有的对象Condition，而一个Lock锁上可以有多个Condition对象。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">Condition conA = lock.newCondition();</span><br><span class=\"line\">Condition conB = lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">con.await();<span class=\"comment\">//生产，，消费</span></span><br><span class=\"line\">con.signal();生产</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\tconA.await();<span class=\"comment\">//生产者，</span></span><br><span class=\"line\">\tcode......;</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\tconB.signal();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">out()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">\t\tconB.await();<span class=\"comment\">//消费者</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcode....;</span><br><span class=\"line\">\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\tconA.signal();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>wait和sleep的区别：<br>wait:释放cpu执行权，释放同步中锁。<br>sleep:释放cpu执行权，不释放同步中锁。</li>\n</ul>\n<p><code>synchronized(锁)\n{\nwait();\n}</code></p>\n<h4 id=\"停止线程：\"><a href=\"#停止线程：\" class=\"headerlink\" title=\"停止线程：\"></a>停止线程：</h4><pre><code>**stop过时。**\n原理：run方法结束。run方法中通常定义循环，指定控制住循环线程即可结束。\n\n1. 定义结束标记。\n2. 当线程处于了冻结状态，没有执行标记，程序一样无法结束。\n    这时可以循环，正常退出冻结状态，或者强制结束冻结状态。\n    强制结束冻结状态：interrupt();目的是线程强制从冻结状态恢复到运行状态。\n    但是会发生InterruptedException异常。\n</code></pre><ul>\n<li><p>线程中一些常见方法：<br>  setDaemon(boolean):将线程标记为后台线程，后台线程和前台线程一样，开启，一样抢执行权运行，<br>  只有在结束时，有区别，当前台线程都运行结束后，后台线程会自动结束。</p>\n<p>  join():什么意思？等待该线程结束。当A线程执行到了B的.join方法时，A就会处于冻结状态。</p>\n<pre><code>A什么时候运行呢？当B运行结束后，A就会具备运行资格，继续运行。\n</code></pre><p>  加入线程，可以完成对某个线程的临时加入执行。</p>\n</li>\n</ul>\n<p><strong>多线程重点:</strong></p>\n<ol>\n<li><p>多线程的创建的两种方式，以及区别。</p>\n</li>\n<li><p>同步的特点。<br>   同步的好处：<br>   同步的弊端：<br>   同步的前提：<br>   同步的表现形式以及区别。<br>   特例：static同步函数锁是哪一个。</p>\n<p> <strong>死锁代码要求写的出来。</strong></p>\n</li>\n<li><p>线程间通信，看以上总结。</p>\n</li>\n</ol>\n<ol>\n<li>wait和sleep，  <code>yield()</code>: 临时暂停，可以让线程是释放执行权。<br><code>yield()</code>方法API:<br>`给调度程序的一个提示，当前线程愿意得到它当前的处理器的使用。调度程序可以自由地忽略这个提示。<br>产量是一个启发式的尝试，以改善线程之间的相对进展，否则将过度使用一个中央处理器。它的使用应结合详细的分析和基准，以确保它实际上有所需的效果。</li>\n</ol>\n<p>使用这种方法是不恰当的。它可能是有用的调试或测试的目的，它可能有助于重现由于种族条件的错误。这也可能是有用的在设计并发控制结构如在java.util.concurrent.locks包的。<br>`</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h2><font color=\"red\">线程间通讯：<br>其实就是多个线程在操作同一个资源，<br>但是操作的动作不同。</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tResource r = <span class=\"keyword\">new</span> Resource();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tProducer pro = <span class=\"keyword\">new</span> Producer(r);</span><br><span class=\"line\">\t\tConsumer con = <span class=\"keyword\">new</span> Consumer(r);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\">\t\tThread t3 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\">\t\tThread t4 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t\tt4.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于多个生产者和消费者。<br>为什么要定义while判断标记。<br>原因：让被唤醒的线程再一次判断标记。</p>\n<p>为什么定义<code>notifyAll</code>，<br>因为需要唤醒对方线程。<br>因为只用notify，容易出现只唤醒本方线程的情况。导致程序中的所有线程都等待。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Resource</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//  t1    t2</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;<span class=\"keyword\">this</span>.wait();&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;<span class=\"comment\">//t1(放弃资格)  t2(获取资格)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name+<span class=\"string\">\"--\"</span>+count++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...生产者..\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//  t3   t4  </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;wait();&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;<span class=\"comment\">//t3(放弃资格) t4(放弃资格)</span></span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...消费者.........\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tProducer(Resource res)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.set(<span class=\"string\">\"+商品+\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsumer(Resource res)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.out();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"进程同步优化解决方案\"><a href=\"#进程同步优化解决方案\" class=\"headerlink\" title=\"进程同步优化解决方案\"></a>进程同步优化解决方案</h3><p>JDK1.5 中提供了多线程升级解决方案。<br>将同步Synchronized替换成显式的Lock操作。<br>将Object中的wait，notify notifyAll，替换了Condition对象。<br>该对象可以Lock锁 进行获取。<br>该示例中，实现了本方只唤醒对方操作。</p>\n<ul>\n<li><p>Lock:替代了Synchronized</p>\n<pre><code>lock\nunlock\nnewCondition()\n</code></pre></li>\n<li><p>Condition：替代了Object wait notify notifyAll</p>\n<pre><code>await();\nsignal();\nsignalAll();\n</code></pre></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerDemo2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tResource r = <span class=\"keyword\">new</span> Resource();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tProducer pro = <span class=\"keyword\">new</span> Producer(r);</span><br><span class=\"line\">\t\tConsumer con = <span class=\"keyword\">new</span> Consumer(r);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\">\t\tThread t3 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\">\t\tThread t4 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t\tt4.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Resource</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//  t1    t2</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Condition condition_pro = lock.newCondition();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Condition condition_con = lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name)</span><span class=\"keyword\">throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(flag)</span><br><span class=\"line\">\t\t\t\tcondition_pro.await();<span class=\"comment\">//t1,t2</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name+<span class=\"string\">\"--\"</span>+count++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...生产者..\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\tcondition_con.signal();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlock.unlock();<span class=\"comment\">//释放锁的动作一定要执行。</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//  t3   t4  </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(!flag)</span><br><span class=\"line\">\t\t\t\tcondition_con.await();</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"...消费者.........\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\t\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\tcondition_pro.signal();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tProducer(Resource res)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tres.set(<span class=\"string\">\"+商品+\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsumer(Resource res)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tres.out();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Res</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name,String sex)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;<span class=\"keyword\">this</span>.wait();&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notify();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;<span class=\"keyword\">this</span>.wait();&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;&#125;</span><br><span class=\"line\">\t\tSystem.out.println(name+<span class=\"string\">\"........\"</span>+sex);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notify();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Input</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Res r ;</span><br><span class=\"line\">\tInput(Res r)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>)\t\t\t\t</span><br><span class=\"line\">\t\t\t\tr.set(<span class=\"string\">\"mike\"</span>,<span class=\"string\">\"man\"</span>);\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tr.set(<span class=\"string\">\"丽丽\"</span>,<span class=\"string\">\"女女女女女\"</span>);\t\t\t\t</span><br><span class=\"line\">\t\t\tx = (x+<span class=\"number\">1</span>)%<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Output</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Res r ;</span><br><span class=\"line\"></span><br><span class=\"line\">\tOutput(Res r)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tr.out();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">InputOutputDemo2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tRes r = <span class=\"keyword\">new</span> Res();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Input(r)).start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Output(r)).start();</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tInput in = new Input(r);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tOutput out = new Output(r);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tThread t1 = new Thread(in);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tThread t2 = new Thread(out);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tt1.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tt2.start();</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>等待的线程存放在线程池中</strong><br><strong>最先唤醒的是最先被冻结的线程</strong></p>\n<h3 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h3><p><strong>stop方法已经过时。</strong></p>\n<p>如何停止线程？<br>只有一种，run方法结束。<br>开启多线程运行，运行代码通常是循环结构。<br>只要控制住循环，就可以让run方法结束，也就是线程结束。</p>\n<p>特殊情况：<br>当线程处于了冻结状态。<br>就不会读取到标记。那么线程就不会结束。</p>\n<p>当没有指定的方式让冻结的线程恢复到运行状态是，这时需要对冻结进行清除。<br>强制让线程恢复到运行状态中来。这样就可以操作标记让线程结束。</p>\n<p>Thread类提供该方法 <code>interrupt()</code>;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag =<span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\"....run\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeFlag</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StopThreadDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStopThread st = <span class=\"keyword\">new</span> StopThread();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(st);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(st);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt1.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tt2.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(num++ == <span class=\"number\">60</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//st.changeFlag();</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//t1.interrupt();</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//t2.interrupt();</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\".......\"</span>+num);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"over\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"守护进程\"><a href=\"#守护进程\" class=\"headerlink\" title=\"守护进程\"></a>守护进程</h3><p>join:<br>当A线程执行到了B线程的.join()方法时，A就会等待。等B线程都执行完，A才会执行。</p>\n<p>join可以用来临时加入线程执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">70</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().toString()+<span class=\"string\">\".....\"</span>+x);</span><br><span class=\"line\">\t\t\tThread.yield();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">JoinDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDemo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//t1.setPriority(Thread.MAX_PRIORITY);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//t1.join();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;<span class=\"number\">80</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//System.out.println(\"main.....\"+x);</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"over\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"MyThread running\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String argv[])</span> </span>&#123;</span><br><span class=\"line\">\t\tMyThread t = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">\t\tt.run();</span><br><span class=\"line\">\t\tt.start();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Thread Test\"</span>);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码分析过程：\"><a href=\"#代码分析过程：\" class=\"headerlink\" title=\"代码分析过程：\"></a>代码分析过程：</h4><p><code>MyThread t = new MyThread();</code><br>创建了一个线程。<br><code>t.run();</code><br>调用<code>MyThread</code>对象的<code>run()</code>方法。<br>这是只有一个线程在运行就是主线程。<br>当主线程执行到了<code>run()</code>方法中的<code>sleep(3000);</code>时。<br>这是主线程处于冻结状态。程序并没有任何执行。<br>当3秒过后，主线程打印了  <code>MyThread running</code>。 <code>run()</code>方法执行结束。</p>\n<p><code>t.start();</code><br>开启了t线程。<br><strong>有两种可能情况。</strong></p>\n<ol>\n<li><p>第一种情况:<br>主线程在只执行了<code>t.start()</code>后，还具有执行权，继续往下执行，<br>打印了<code>Thread Test</code>。主线程结束。<br>t线程获取执行权，调用自己的run方法。然后执行的<code>sleep(3000);</code>冻结3秒。<br>3秒后，打印MyThread running t线程结束，整个程序结束。</p>\n</li>\n<li><p>第二种情况：<br>主线程执行到<code>t.start();</code>开启了t线程，t线程就直接获取到了执行权。<br>就调用自己的<code>run()</code>方法。<br>指定到<code>sleep(3000)</code>.t线程冻结3秒，这是t线程就是释放了执行权。<br>那么主线程开始执行打印了<code>Thread Test</code>，主线程结束。<br>等到3秒后，t线程打印<code>MyThread running</code> ，然后t线程结束。<br>程序结束。</p>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"线程间通信。\"><a href=\"#线程间通信。\" class=\"headerlink\" title=\"线程间通信。\"></a>线程间通信。</h4><pre><code>等待/唤醒机制。\n\n也就是常见的生产者消费者问题。\n\n1. 当多个生产者消费者出现时，\n需要让获取执行权的线程判断标记。\n通过while完成。\n\n2. 需要将对方的线程唤醒。\n仅仅用notify，是不可以的。因为有可能出现只唤醒本方。\n有可能会导致，所有线程都等待。\n所以可以通过notifyAll的形式来完成 。\n</code></pre><p><em>这个程序有一个bug。就是每次notifyAll。都会唤醒本方。<br>可不可以只唤醒对方呢？</em></p>\n<p><strong>JDK1.5版本提供了一些新的对象，优化了等待唤醒机制。</strong></p>\n<ol>\n<li>将synchronized 替换成了Lock接口。<br> 将隐式锁，升级成了显示锁。<br> <strong>Lock</strong><pre><code>- 获取锁：lock();\n- 释放锁：unlock();注意：释放的动作一定要执行，所以通常定义在finally中。\n- 获取Condition对象：newCondition();\n</code></pre></li>\n<li>将Object中的wait，notify，notifyAll方法都替换成了Condition的await，signal，signalAll。<br> 和以前不同是：一个同步代码块具备一个锁，该所以具备自己的独立wait和notify方法。<br> 现在是将wait，notify等方法，封装进一个特有的对象Condition，而一个Lock锁上可以有多个Condition对象。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">Condition conA = lock.newCondition();</span><br><span class=\"line\">Condition conB = lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">con.await();<span class=\"comment\">//生产，，消费</span></span><br><span class=\"line\">con.signal();生产</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\tconA.await();<span class=\"comment\">//生产者，</span></span><br><span class=\"line\">\tcode......;</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\tconB.signal();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">out()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">\t\tconB.await();<span class=\"comment\">//消费者</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcode....;</span><br><span class=\"line\">\tflag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\tconA.signal();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>wait和sleep的区别：<br>wait:释放cpu执行权，释放同步中锁。<br>sleep:释放cpu执行权，不释放同步中锁。</li>\n</ul>\n<p><code>synchronized(锁)\n{\nwait();\n}</code></p>\n<h4 id=\"停止线程：\"><a href=\"#停止线程：\" class=\"headerlink\" title=\"停止线程：\"></a>停止线程：</h4><pre><code>**stop过时。**\n原理：run方法结束。run方法中通常定义循环，指定控制住循环线程即可结束。\n\n1. 定义结束标记。\n2. 当线程处于了冻结状态，没有执行标记，程序一样无法结束。\n    这时可以循环，正常退出冻结状态，或者强制结束冻结状态。\n    强制结束冻结状态：interrupt();目的是线程强制从冻结状态恢复到运行状态。\n    但是会发生InterruptedException异常。\n</code></pre><ul>\n<li><p>线程中一些常见方法：<br>  setDaemon(boolean):将线程标记为后台线程，后台线程和前台线程一样，开启，一样抢执行权运行，<br>  只有在结束时，有区别，当前台线程都运行结束后，后台线程会自动结束。</p>\n<p>  join():什么意思？等待该线程结束。当A线程执行到了B的.join方法时，A就会处于冻结状态。</p>\n<pre><code>A什么时候运行呢？当B运行结束后，A就会具备运行资格，继续运行。\n</code></pre><p>  加入线程，可以完成对某个线程的临时加入执行。</p>\n</li>\n</ul>\n<p><strong>多线程重点:</strong></p>\n<ol>\n<li><p>多线程的创建的两种方式，以及区别。</p>\n</li>\n<li><p>同步的特点。<br>   同步的好处：<br>   同步的弊端：<br>   同步的前提：<br>   同步的表现形式以及区别。<br>   特例：static同步函数锁是哪一个。</p>\n<p> <strong>死锁代码要求写的出来。</strong></p>\n</li>\n<li><p>线程间通信，看以上总结。</p>\n</li>\n</ol>\n<ol>\n<li>wait和sleep，  <code>yield()</code>: 临时暂停，可以让线程是释放执行权。<br><code>yield()</code>方法API:<br>`给调度程序的一个提示，当前线程愿意得到它当前的处理器的使用。调度程序可以自由地忽略这个提示。<br>产量是一个启发式的尝试，以改善线程之间的相对进展，否则将过度使用一个中央处理器。它的使用应结合详细的分析和基准，以确保它实际上有所需的效果。</li>\n</ol>\n<p>使用这种方法是不恰当的。它可能是有用的调试或测试的目的，它可能有助于重现由于种族条件的错误。这也可能是有用的在设计并发控制结构如在java.util.concurrent.locks包的。<br>`</p>\n"},{"title":"JavaReview-day13-String","date":"2018-01-21T07:06:53.000Z","type":["JavaReview"],"_content":"\n## String及其他\n\n> 本篇主要介绍介绍String和其他基本数据类型的包装类型及其常用方法;\n\n```java\nclass StringDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\t/*\n\t\tString s1 = \"abc\";//s1是一个类类型变量， \"abc\"是一个对象。\n\t\t//字符串最大特点：一旦被初始化就不可以被改变。\n\n\t\tString s2 = new String(\"abc\");\n\n\t\t//s1和s2有什么区别？\n\t\t//s1在内存中有一个对象。\n\t\t//s2在内存中有两个对象。\n\n\t\tSystem.out.println(s1==s2);\n\t\tSystem.out.println(s1.equals(s2));//String类复写了Object类中equals方法，\n\t\t*/\n    //该方法用于判断字符串是否相同。\n\n\t\tString s = \"abcde\";\n\t\tmethod_1(s);\n\t}\n\t/*\n\tString类是对字符串事物的描述。\n\t该类定义了专门用于操作字符串的方法。\n\t\"abc\":\n\t*/\n\n\tpublic static void method_1(String s)\n\t{\n\t\tchar ch = s.charAt(3);\n\n\t\tSystem.out.println(\"ch=\"+ch);\n\t\tint num = s.codePointAt(3);\n\n\t\tSystem.out.println(\"num=\"+num);\n\n\t\tString s1 = \"qq\";\n\t\ts1 = s1.concat(\"mm\");\n\n\t\tSystem.out.println(\"s1=\"+s1);\n\t\tSystem.out.println(\"qq\"+\"mm\");\n\n\t\tString a = \"opq\";\n\t\tString b = \"opq\";\n\t\tSystem.out.println(\"a==b:\"+(a==b));\n\n\n\t}\n}\n```\n\n### String\n\nString类适用于描述字符串事物。\n那么它就提供了多个方法对字符串进行操作。\n\n常见的操作有哪些？\n\"abcd\"\n\n#### 1.获取。\n\t1. 字符串中的包含的字符数，也就是字符串的长度。\n\t\tint length():获取长度。\n\t1. 根据位置获取位置上某个字符。\n\t\tchar charAt(int index):\n\t1. 根据字符获取该字符在字符串中位置。\n\t\tint indexOf(int ch):返回的是ch在字符串中第一次出现的位置。\n\t\tint indexOf(int ch, int fromIndex) :从fromIndex指定位置开始，获取ch在字符串中出现的位置。\n\n\t\tint indexOf(String str):返回的是str在字符串中第一次出现的位置。\n\t\tint indexOf(String str, int fromIndex) :从fromIndex指定位置开始，获取str在字符串中出现的位置。\n\n\t\tint lastIndexOf(int ch) ：\n\n\n#### 2.判断。\n\t1. 字符串中是否包含某一个子串。\n\t\tboolean contains(str):\n\t\t特殊之处：indexOf(str):可以索引str第一次出现位置，如果返回-1.表示该str不在字符串中存在。\n\t\t\t\t所以，也可以用于对指定判断是否包含。\n\t\t\t\tif(str.indexOf(\"aa\")!=-1)\n\n\t\t\t\t而且该方法即可以判断，有可以获取出现的位置。\n\n\t2. 字符中是否有内容。\n\t\tboolean isEmpty(): 原理就是判断长度是否为0.\n\t3. 字符串是否是以指定内容开头。\n\t\tboolean startsWith(str);\n\t4. 字符串是否是以指定内容结尾。\n\t\tboolean endsWith(str);\n\t5. 判断字符串内容是否相同。复写了Object类中的equals方法。\n\t\tboolean equals(str);\n\t6. 判断内容是否相同，并忽略大小写。\n\t\tboolean equalsIgnoreCase();\n\n#### 3.转换。\n\t1. 将字符数组转成字符串。\n\t\t构造函数：String(char[])\n\t\t\t\t  String(char[],offset,count):将字符数组中的一部分转成字符串。\n\n\t\t静态方法：\n\t\t\t\tstatic String copyValueOf(char[]);\n\t\t\t\tstatic String copyValueOf(char[] data, int offset, int count)\n\n\t\t\t\tstatic String valueOf(char[]):\n\n\n\t2. 将字符串转成字符数组。**\n\t\tchar[] toCharArray():\n\n\t3. 将字节数组转成字符串。\n\t\t\tString(byte[])\n\t\t\tString(byte[],offset,count):将字节数组中的一部分转成字符串。\n\n\t4. 将字符串转成字节数组。\n\t\t\tbyte[]  getBytes():\n\t5. 将基本数据类型转成字符串。\n\t\tstatic String valueOf(int)\n\t\tstatic String valueOf(double)\n\n\t\t//3+\"\";//String.valueOf(3);\n\n\t\t特殊：字符串和字节数组在转换过程中，是可以指定编码表的。\n\n#### 4.替换\n\tString replace(oldchar,newchar);\n\n#### 5.切割\n\tString[] split(regex);\n\n#### 6.子串。获取字符串中的一部分。\n\tString substring(begin);\n\tString substring(begin,end);\n\n#### 7.转换，去除空格，比较。\n\t1. 将字符串转成大写或则小写。\n\t\t String toUpperCase();\n\t\t String toLowerCase();\n\n\t2. 将字符串两端的多个空格去除。\n\t\tString trim();\n\n\t3. 对两个字符串进行自然顺序的比较。\n\t\tint compareTo(string);\n\n```java\nclass  StringMethodDemo\n{\n\n\tpublic static void method_7()\n\t{\n\t\tString s = \"    Hello Java     \";\n\t\tsop(s.toLowerCase());\n\t\tsop(s.toUpperCase());\n\t\tsop(s.trim());\n\n\t\tString s1 = \"a1c\";\n\t\tString s2 = \"aaa\";\n\n\t\tsop(s1.compareTo(s2));\n\t}\n\tpublic static void method_sub()\n\t{\n\t\tString s = \"abcdef\";\n\n\t\tsop(s.substring(2));//从指定位置开始到结尾。如果角标不存在，会出现字符串角标越界异常。\n\t\tsop(s.substring(2,4));//包含头，不包含尾。s.substring(0,s.length());\n\t}\n\n\tpublic static void  method_split()\n\t{\n\t\tString s = \"zhagnsa,lisi,wangwu\";\n\n\t\tString[] arr  = s.split(\",\");\n\n\t\tfor(int x = 0; x<arr.length; x++)\n\t\t{\n\t\t\tsop(arr[x]);\n\t\t}\n\t}\n\n\tpublic static void method_replace()\n\t{\n\t\tString s = \"hello java\";\n\n\t\t//String s1 = s.replace('q','n');//如果要替换的字符不存在，返回的还是原串。\n\n\n\t\tString s1 = s.replace(\"java\",\"world\");\n\t\tsop(\"s=\"+s);\n\t\tsop(\"s1=\"+s1);\n\t}\n\n\tpublic static void method_trans()\n\t{\n\t\tchar[] arr = {'a','b','c','d','e','f'};\n\n\t\tString s= new String(arr,1,3);\n\n\t\tsop(\"s=\"+s);\n\n\t\tString s1 = \"zxcvbnm\";\n\n\t\tchar[] chs = s1.toCharArray();\n\n\t\tfor(int x=0; x<chs.length; x++)\n\t\t{\n\t\t\tsop(\"ch=\"+chs[x]);\n\t\t}\n\t}\n\tpublic static void method_is()\n\t{\n\t\tString str = \"ArrayDemo.java\";\n\n\t\t//判断文件名称是否是Array单词开头。\n\t\tsop(str.startsWith(\"Array\"));\n\t\t//判断文件名称是否是.java的文件。\n\t\tsop(str.endsWith(\".java\"));\n\t\t//判断文件中是否包含Demo\n\t\tsop(str.contains(\".java\"));\n\n\n\t}\n\n\n\tpublic static void method_get()\n\t{\n\t\tString str = \"abcdeakpf\";\n\n\t\t//长度\n\t\tsop(str.length());\n\n\t\t//根据索引获取字符。\n\t\tsop(str.charAt(4));//当访问到字符串中不存在的角标时会发生StringIndexOutOfBoundsException。\n\n\n\t\t//根据字符获取索引\n\t\tsop(str.indexOf('m',3));//如果没有找到，返回-1.\n\n\t\t//反向索引一个字符出现位置。\n\t\tsop(str.lastIndexOf(\"a\"));\n\n\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tmethod_7();\n//\t\tmethod_trans();\n//\t\tmethod_is();\n//\t\tmethod_get();\n\t\t/*\n\t\tString s1 = \"abc\";\n\t\tString s2 = new String(\"abc\");\n\n\t\tString s3 = \"abc\";\n\t\tSystem.out.println(s1==s2);\n\t\tSystem.out.println(s1==s3);\n\t\t*/\n\t}\n\n\tpublic static void sop(Object obj)\n\t{\n\t\tSystem.out.println(obj);\n\t}\n\n\n}\n```\n\n## String实战\n\n### 实战一\n\n\n\n- 模拟一个trim方法，去除字符串两端的空格。\n\t思路：\n\t1. 判断字符串第一个位置是否是空格，如果是继续向下判断，直到不是空格为止。\n\t\t结尾处判断空格也是如此。\n\t2. 当开始和结尾都判断到不是空格时，就是要获取的字符串。\n\n\n\n- 将一个字符串进行反转。将字符串中指定部分进行反转，\"abcdefg\";abfedcg\n\t思路：\n\t1. 曾经学习过对数组的元素进行反转。\n\t2. 将字符串变成数组，对数组反转。\n\t3. 将反转后的数组变成字符串。\n\t4. 只要将或反转的部分的开始和结束位置作为参数传递即可。\n\n```java\n\n\nclass StringTest\n{\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tString s = \"      ab cd      \";\n\n\t\tsop(\"(\"+s+\")\");\n//\t\ts = myTrim(s);\n//\t\tsop(\"(\"+s+\")\");\n\n\t\tsop(\"(\"+reverseString(s)+\")\");\n\n\t}\n\n\n\t//练习二：将字符串反转。\n\t/*\n\t思路：\n\t1，将字符串变成数组。\n\t2，对数组反转。\n\t3，将数组变成字符串。\n\t*/\n\n\tpublic static String reverseString(String s,int start,int end)\n\t{\n\t\t//字符串变数组。\n\t\tchar[] chs = s.toCharArray();\n\n\t\t//反转数组。\n\t\treverse(chs,start,end);\n\n\t\t//将数组变成字符串。\n\t\treturn new String(chs);\n\t}\n\tpublic static String reverseString(String s)\n\t{\n\t\treturn reverseString(s,0,s.length());\n\n\t}\n\n\tprivate static void reverse(char[] arr,int x,int y)\n\t{\n\t\tfor(int start=x,end=y-1; start<end ; start++,end--)\n\t\t{\n\t\t\tswap(arr,start,end);\n\t\t}\n\t}\n\tprivate static void swap(char[] arr,int x,int y)\n\t{\n\t\tchar temp = arr[x];\n\t\tarr[x] = arr[y];\n\t\tarr[y] = temp;\n\t}\n\n\t//练习一，去除字符串两端空格。\n\tpublic static String myTrim(String str)\n\t{\n\t\tint start = 0,end = str.length()-1;\n\n\t\twhile(start<=end && str.charAt(start)==' ')\n\t\t\tstart++;\n\n\t\twhile(start<=end && str.charAt(end)==' ')\n\t\t\tend--;\n\n\t\treturn str.substring(start,end+1);\n\t}\n}\n```\n\n\n### 实战二\n\n- 获取一个字符串在另一个字符串中出现的次数。\n\t\"abkkcdkkefkkskk\"\n\n\n\t- 思路：\n\t1. 定义个计数器。\n\t2. 获取kk第一次出现的位置。\n\t3. 从第一次出现位置后剩余的字符串中继续获取kk出现的位置。\n\t\t每获取一次就计数一次。\n\t4. 当获取不到时，计数完成。\n\n\n\n\n```java\n\nclass  StringTest2\n{\n\n\t/*\n\t练习三。\n\t*/\n\n\tpublic static int getSubCount(String str,String key)\n\t{\n\t\tint count = 0;\n\t\tint index = 0;\n\n\t\twhile((index=str.indexOf(key))!=-1)\n\t\t{\n\t\t\tsop(\"str=\"+str);\n\t\t\tstr = str.substring(index+key.length());\n\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\n\t/*\n\t练习三，方式二。\n\n\t*/\n\tpublic static int getSubCount_2(String str,String key)\n\t{\n\t\tint count = 0;\n\t\tint index = 0;\n\n\t\twhile((index= str.indexOf(key,index))!=-1)\n\t\t{\n\t\t\tsop(\"index=\"+index);\n\t\t\tindex = index + key.length();\n\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\n\tpublic static void main(String[] args)\n\t{\n\t\tString str = \"kkabkkcdkkefkks\";\n\n\t\t///sop(\"count=====\"+str.split(\"kk\").length);不建议使用。\n\n\t\tsop(\"count=\"+getSubCount_2(str,\"kk\"));\n\t}\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n\n### 实战三\n\n\n- 获取两个字符串中最大相同子串。第一个动作：将短的那个串进行长度一次递减的子串打印。\n\t\"abcwerthelloyuiodef\"\n\t\"cvhellobnm\"\n\t思路：\n\t\t1. 将短的那个子串按照长度递减的方式获取到。\n\t\t2. 将每获取到的子串去长串中判断是否包含，\n\t\t\t如果包含，已经找到。\n\n```java\nclass  StringTest3\n{\n\t/*\n\t练习四。\n\t*/\n\tpublic static String getMaxSubString(String s1,String s2)\n\t{\n\n\t\tString max = \"\",min = \"\";\n\n\t\tmax = (s1.length()>s2.length())?s1: s2;\n\n\t\tmin = (max==s1)?s2: s1;\n\n    //sop(\"max=\"+max+\"...min=\"+min);\n\t\tfor(int x=0; x<min.length(); x++)\n\t\t{\n\t\t\tfor(int y=0,z=min.length()-x; z!=min.length()+1; y++,z++)\n\t\t\t{\n\t\t\t\tString temp = min.substring(y,z);\n\n\t\t\t\tsop(temp);\n\t\t\t\tif(max.contains(temp))//if(s1.indexOf(temp)!=-1)\n\t\t\t\t\treturn temp;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n\n\n\tpublic static void main(String[] args)\n\t{\n\t\tString s1 = \"ab\";\n\t\tString s2 = \"cvhellobnm\";\n\t\tsop(getMaxSubString(s2,s1));\n\t}\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n### 实战四\n\n/*\n对字符串中字符进行自然顺序排序。\n\n思路：\n1，字符串变成字符数组。\n2，对数组排序，选择，冒泡，Arrays.sort();\n3，将排序后的数组变成字符串。\n\"vcz1bdAa+cs\"-->abccdsvz\n\n\n\n\n*作业：\n\"12 0 99 -7 30 4 100 13\"\n要求对字符串中的数值进行排序。生成一个数值从小到大新字符串。\n\"-7 0 4 12 13 30 99 100\"*\n\n```java\npublic class StringTest {\n\n    public static void main(String[] args) {\n        String str = \"12 0 99 -7 30 4 100 13\";\n        System.out.println(sortString(str));\n        }\n    static String  sortString(String str){\n\n        String[] string = str.split(\" \");\n        List<Integer> integer = new ArrayList<>();\n        for (int i = 0; i < string.length; i ++) {\n            integer.add(Integer.parseInt(string[i]));\n        }\n        sort(integer);\n        String result = \"\";\n        for (Integer integer1 : integer) {\n            result += integer1.toString() + \" \";\n        }\n        return result;\n    }\n}\n```\n## StringBuffer\n\nStringBuffer是字符串缓冲区。\n\n是一个容器。\n### 特点：\n1. 长度是可变化的。\n2. 可以字节操作多个数据类型。\n3. 最终会通过toString方法变成字符串。\n\nC create U update R read D delete\n\n1. 存储。\n\tStringBuffer append():将指定数据作为参数添加到已有数据结尾处。\n\tStringBuffer insert(index,数据):可以将数据插入到指定index位置。\n\n\n2. 删除。\n\tStringBuffer delete(start,end):删除缓冲区中的数据，包含start，不包含end。\n\tStringBuffer deleteCharAt(index):删除指定位置的字符。\n\n3. 获取。\n\tchar charAt(int index)\n\tint indexOf(String str)\n\tint lastIndexOf(String str)\n\tint length()\n\tString substring(int start, int end)\n\n4. 修改。\n\tStringBuffer replace(start,end,string);\n\tvoid setCharAt(int index, char ch) ;\n\n\n5. 反转。\n\tStringBuffer reverse();\n\n6. 将缓冲区中指定数据存储到指定字符数组中。\n\tvoid getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)\n\n## StringBuilder\n\n### API:\n`一个可变的字符序列。这个类提供了一个API兼容 StringBuffer，但无法保证同步。本课程是专为使用作为一个下降的替代 StringBuffer在地方的字符串缓冲区被一个线程使用（一般情况下）。在可能的情况下，建议优先使用这类 StringBuffer它将在大多数实现更快。\n在StringBuilder的主营业务是append和insert方法的重载，以便接受任何数据类型。每个有效地将一个给定的数据到一个字符串，然后追加或插入字符串的字符的字符串生成器。的append方法总是说这些人物在生成器的结束；的insert方法添加字符在指定点。\n\n例如，如果z指字符串生成器对象的当前内容是“start”，然后调用方法z.append(\"le\")会导致字符串生成器包含“startle”，而z.insert(4, \"le\")会改变字符串生成器包含“starlet”。\n\n一般来说，如果某人是一个StringBuilder实例，然后sb.append(x)具有相同的效果sb.insert(sb.length(), x)。\n\n每一个字符串生成器都有一个容量。只要字符串生成器中包含的字符序列的长度不超过容量，就没有必要分配一个新的内部缓冲区。如果内部缓冲区溢出，则自动作出较大的。\n\nStringBuilder不安全的实例用于多个线程。如果需要同步然后建议StringBuffer可用。\n\n除非另有说明，通过null争论这类构造函数或方法会导致一个NullPointerException被。`\n\nJDK1.5 版本之后出现了StringBuilder.\n\n**StringBuffer是线程同步。\n  StringBuilder是线程不同步。**\n\n<font color='red'>**以后开发，建议使用StringBuilder**</font>\n\nJava升级的三个因素：\n1. 提高效率。\n2. 简化书写。\n3. 提高安全性。\n\n\n```java\n\nclass Demo\n{\n}\n\npublic class StringBufferDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\t//method_update();\n\n\t\tStringBuilder sb = new StringBuilder(\"abcdef\");\n\n\t\tchar[] chs = new char[6];\n\n\n\t\tsb.getChars(1,4,chs,1);//将\n\n\t\tfor(int x=0; x<chs.length; x++)\n\t\t{\n\t\t\tsop(\"chs[\"+x+\"]=\"+chs[x]+\";\");\n\t\t}\n\n\t\tdraw(3,6);\n\t\tdraw(8,9);\n\n//\tStringBuilder sb1 = new StringBuilder();\n//\tsb1.append(new Demo()).append(new Demo());\n//\tsop(\"sb1=\"+sb1);\n\t}\n\tpublic static void method_update()\n\t{\n\t\tStringBuffer sb  = new StringBuffer(\"abcde\");\n\n//\tsb.replace(1,4,\"java\");\n\t\tsb.setCharAt(2,'k');\n\n\n\t\tsop(sb.toString());\n\n\t}\n\tpublic static void method_del()\n\t{\n\t\tStringBuffer sb  = new StringBuffer(\"abcde\");\n\n//\t\tsb.delete(1,3);\n\t\t//清空缓冲区。\n\t\t//sb.delete(0,sb.length());\n\n\t\t//sb.delete(2,3);\n\t\tsb.deleteCharAt(2);\n\n\t\tsop(sb.toString());\n\t}\n\n\tpublic static void method_add()\n\t{\n\t\tStringBuffer sb = new StringBuffer();\n\n\n\t\t//sb.append(\"abc\").append(true).append(34);\n//\t\tStringBuffer sb1 = sb.append(34);\n//\t\tsop(\"sb==sb1:\"+(sb==sb1));\n\n\t\tsb.insert(1,\"qq\");\n\t\tsop(sb.toString());//abctrue34\n\t\t//sop(sb1.toString());\n\n\n\t}\n\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n\n\tpublic static void draw(int row,int col)\n\t{\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int x=0; x<row; x++)\n\t\t{\n\t\t\tfor(int y=0; y<col; y++)\n\t\t\t{\n\t\t\t\tsb.append(\"*\");\n\t\t\t}\n\t\t\tsb.append(\"\\r\\n\");\n\t\t}\n\n\t\tsop(sb.toString());\n\t}\n\n}\n```\n\n## 包装类\n\n/*\n基本数据类型对象包装类。\n| 引用类型 | 包装类型 |\n|:-----:|:-----:|\n| byte\t| Byte  |\n| short\t| Short |\n| int\t\t| Integer |\n| long\t| Long |\n| boolean | Boolean |\n| float\t | Float |\n| double | Double |\n| char\t | Character |\n\n### 基本数据类型对象包装类的最常见作用，\n  就是用于基本数据类型和字符串类型之间做转换\n\n1. 基本数据类型转成字符串。\n\n\t基本数据类型+\"\"\n\n\t基本数据类型.toString(基本数据类型值);\n\n\t如： `Integer.toString(34);`//将34整数变成\"34\";\n\n2. 字符串转成基本数据类型。\n\n\t`xxx a = Xxx.parseXxx(String);\n\n\tint a = Integer.parseInt(\"123\");\n\n\tdouble b = Double.parseDouble(\"12.23\");\n\n\tboolean b = Boolean.parseBoolean(\"true\");\n\n\tInteger i = new Integer(\"123\");\n\n\tint num = i.intValue();`\n3. 进制转换\n\n - 十进制转成其他进制。\n `toBinaryString();\n\ttoHexString();\n\ttoOctalString();`\n- 其他进制转成十进制。\n\t`parseInt(string,radix);`\n\n```java\n\nclass IntegerDemo\n{\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n\n\tpublic static void main(String[] args)\n\t{\n\t\t//整数类型的最大值。\n\t\t//sop(\"int max :\"+Integer.MAX_VALUE);\n\n//\t\t将一个字符串转成整数。\n\n\t\tint num = Integer.parseInt(\"123\");//必须传入数字格式的字符串。\n\t\t//long x = Long.parseLong(\"123\");\n\n//\t\tsop(\"num=\"+(num+4));\n\n//\t\tsop(Integer.toBinaryString(-6));\n//\t\tsop(Integer.toHexString(60));\n\n\t\tint x = Integer.parseInt(\"3c\",16);\n\n\t\tsop(\"x=\"+x);\n\n\n\t}\n}\n```\n\n### Integer常用方法\n/*\nJDK1.5版本以后出现的新特性。\n\n```java\nclass IntegerDemo1\n{\n\tpublic static void main(String[] args)\n\t{\n\n//\t\tInteger x = new Integer(4);\n\n\t\tInteger x = 4;//自动装箱。//new Integer(4)\n\t\tx = x/* x.intValue() */ + 2;//x+2:x 进行自动拆箱。变成成了int类型。和2进行加法运算。\n\t\t//再将和进行装箱赋给x。\n\n\t\tInteger m = 128;\n\t\tInteger n = 128;\n\n\t\tsop(\"m==n:\"+(m==n));\n\n\t\tInteger a = 127;\n\t\tInteger b = 127;\n\n\t\tsop(\"a==b:\"+(a==b));//结果为true。因为a和b指向了同一个Integer对象。\n\t   //因为当数值在byte范围内容，对于新特性，如果该数值已经存在，则不会在开辟新的空间。\n\t}\n\n\tpublic static void method()\n\t{\n\t\tInteger x = new Integer(\"123\");\n\n\t\tInteger y = new Integer(123);\n\n\t\tsop(\"x==y:\"+(x==y));\n\t\tsop(\"x.equals(y):\"+x.equals(y));\n\t}\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n\n}\n```\n\n#### Demo\n\n```java\nclass  Demo\n{\n\n\tpublic static void sop(Object str)//Object str = new Integer(4);\n\t{\n\t\tSystem.out.println(str);\n\t}\n\tpublic static void main(String[] args)\n\t{\n\n\t\tsop(4);\n//\t\tint[] arr = {3,1,5,8,23,9};\n//\n//\t\tSystem.out.println(toString(arr));\n//\t\tSystem.out.println(toString_2(arr));\n\t}\n\tpublic static String toString_2(int[] arr)\n\t{\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tsb.append(\"[\");\n\n\t\tfor(int x=0; x<arr.length; x++)\n\t\t{\n\t\t\tif(x!=arr.length-1)\n\t\t\t\tsb.append(arr[x]+\", \");\n\t\t\telse\n\t\t\t\tsb.append(arr[x]+\"}\");\n\n\t\t}\n\t\treturn  sb.toString();\n\t}\n\n\tpublic static String toString(int[] arr)\n\t{\n\t\tString str = \"[\";\n\n\t\tfor(int x=0; x<arr.length; x++)\n\t\t{\n\t\t\tif(x!=arr.length-1)\n\t\t\t\tstr += arr[x]+\", \";\n\t\t\telse\n\t\t\t\tstr += arr[x]+\"]\";\n\t\t}\n\t\treturn str;\n\t}\n}\n```\n","source":"_posts/JavaReview-day13-String.md","raw":"---\ntitle: JavaReview-day13-String\ndate: 2018-01-21 15:06:53\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n## String及其他\n\n> 本篇主要介绍介绍String和其他基本数据类型的包装类型及其常用方法;\n\n```java\nclass StringDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\t/*\n\t\tString s1 = \"abc\";//s1是一个类类型变量， \"abc\"是一个对象。\n\t\t//字符串最大特点：一旦被初始化就不可以被改变。\n\n\t\tString s2 = new String(\"abc\");\n\n\t\t//s1和s2有什么区别？\n\t\t//s1在内存中有一个对象。\n\t\t//s2在内存中有两个对象。\n\n\t\tSystem.out.println(s1==s2);\n\t\tSystem.out.println(s1.equals(s2));//String类复写了Object类中equals方法，\n\t\t*/\n    //该方法用于判断字符串是否相同。\n\n\t\tString s = \"abcde\";\n\t\tmethod_1(s);\n\t}\n\t/*\n\tString类是对字符串事物的描述。\n\t该类定义了专门用于操作字符串的方法。\n\t\"abc\":\n\t*/\n\n\tpublic static void method_1(String s)\n\t{\n\t\tchar ch = s.charAt(3);\n\n\t\tSystem.out.println(\"ch=\"+ch);\n\t\tint num = s.codePointAt(3);\n\n\t\tSystem.out.println(\"num=\"+num);\n\n\t\tString s1 = \"qq\";\n\t\ts1 = s1.concat(\"mm\");\n\n\t\tSystem.out.println(\"s1=\"+s1);\n\t\tSystem.out.println(\"qq\"+\"mm\");\n\n\t\tString a = \"opq\";\n\t\tString b = \"opq\";\n\t\tSystem.out.println(\"a==b:\"+(a==b));\n\n\n\t}\n}\n```\n\n### String\n\nString类适用于描述字符串事物。\n那么它就提供了多个方法对字符串进行操作。\n\n常见的操作有哪些？\n\"abcd\"\n\n#### 1.获取。\n\t1. 字符串中的包含的字符数，也就是字符串的长度。\n\t\tint length():获取长度。\n\t1. 根据位置获取位置上某个字符。\n\t\tchar charAt(int index):\n\t1. 根据字符获取该字符在字符串中位置。\n\t\tint indexOf(int ch):返回的是ch在字符串中第一次出现的位置。\n\t\tint indexOf(int ch, int fromIndex) :从fromIndex指定位置开始，获取ch在字符串中出现的位置。\n\n\t\tint indexOf(String str):返回的是str在字符串中第一次出现的位置。\n\t\tint indexOf(String str, int fromIndex) :从fromIndex指定位置开始，获取str在字符串中出现的位置。\n\n\t\tint lastIndexOf(int ch) ：\n\n\n#### 2.判断。\n\t1. 字符串中是否包含某一个子串。\n\t\tboolean contains(str):\n\t\t特殊之处：indexOf(str):可以索引str第一次出现位置，如果返回-1.表示该str不在字符串中存在。\n\t\t\t\t所以，也可以用于对指定判断是否包含。\n\t\t\t\tif(str.indexOf(\"aa\")!=-1)\n\n\t\t\t\t而且该方法即可以判断，有可以获取出现的位置。\n\n\t2. 字符中是否有内容。\n\t\tboolean isEmpty(): 原理就是判断长度是否为0.\n\t3. 字符串是否是以指定内容开头。\n\t\tboolean startsWith(str);\n\t4. 字符串是否是以指定内容结尾。\n\t\tboolean endsWith(str);\n\t5. 判断字符串内容是否相同。复写了Object类中的equals方法。\n\t\tboolean equals(str);\n\t6. 判断内容是否相同，并忽略大小写。\n\t\tboolean equalsIgnoreCase();\n\n#### 3.转换。\n\t1. 将字符数组转成字符串。\n\t\t构造函数：String(char[])\n\t\t\t\t  String(char[],offset,count):将字符数组中的一部分转成字符串。\n\n\t\t静态方法：\n\t\t\t\tstatic String copyValueOf(char[]);\n\t\t\t\tstatic String copyValueOf(char[] data, int offset, int count)\n\n\t\t\t\tstatic String valueOf(char[]):\n\n\n\t2. 将字符串转成字符数组。**\n\t\tchar[] toCharArray():\n\n\t3. 将字节数组转成字符串。\n\t\t\tString(byte[])\n\t\t\tString(byte[],offset,count):将字节数组中的一部分转成字符串。\n\n\t4. 将字符串转成字节数组。\n\t\t\tbyte[]  getBytes():\n\t5. 将基本数据类型转成字符串。\n\t\tstatic String valueOf(int)\n\t\tstatic String valueOf(double)\n\n\t\t//3+\"\";//String.valueOf(3);\n\n\t\t特殊：字符串和字节数组在转换过程中，是可以指定编码表的。\n\n#### 4.替换\n\tString replace(oldchar,newchar);\n\n#### 5.切割\n\tString[] split(regex);\n\n#### 6.子串。获取字符串中的一部分。\n\tString substring(begin);\n\tString substring(begin,end);\n\n#### 7.转换，去除空格，比较。\n\t1. 将字符串转成大写或则小写。\n\t\t String toUpperCase();\n\t\t String toLowerCase();\n\n\t2. 将字符串两端的多个空格去除。\n\t\tString trim();\n\n\t3. 对两个字符串进行自然顺序的比较。\n\t\tint compareTo(string);\n\n```java\nclass  StringMethodDemo\n{\n\n\tpublic static void method_7()\n\t{\n\t\tString s = \"    Hello Java     \";\n\t\tsop(s.toLowerCase());\n\t\tsop(s.toUpperCase());\n\t\tsop(s.trim());\n\n\t\tString s1 = \"a1c\";\n\t\tString s2 = \"aaa\";\n\n\t\tsop(s1.compareTo(s2));\n\t}\n\tpublic static void method_sub()\n\t{\n\t\tString s = \"abcdef\";\n\n\t\tsop(s.substring(2));//从指定位置开始到结尾。如果角标不存在，会出现字符串角标越界异常。\n\t\tsop(s.substring(2,4));//包含头，不包含尾。s.substring(0,s.length());\n\t}\n\n\tpublic static void  method_split()\n\t{\n\t\tString s = \"zhagnsa,lisi,wangwu\";\n\n\t\tString[] arr  = s.split(\",\");\n\n\t\tfor(int x = 0; x<arr.length; x++)\n\t\t{\n\t\t\tsop(arr[x]);\n\t\t}\n\t}\n\n\tpublic static void method_replace()\n\t{\n\t\tString s = \"hello java\";\n\n\t\t//String s1 = s.replace('q','n');//如果要替换的字符不存在，返回的还是原串。\n\n\n\t\tString s1 = s.replace(\"java\",\"world\");\n\t\tsop(\"s=\"+s);\n\t\tsop(\"s1=\"+s1);\n\t}\n\n\tpublic static void method_trans()\n\t{\n\t\tchar[] arr = {'a','b','c','d','e','f'};\n\n\t\tString s= new String(arr,1,3);\n\n\t\tsop(\"s=\"+s);\n\n\t\tString s1 = \"zxcvbnm\";\n\n\t\tchar[] chs = s1.toCharArray();\n\n\t\tfor(int x=0; x<chs.length; x++)\n\t\t{\n\t\t\tsop(\"ch=\"+chs[x]);\n\t\t}\n\t}\n\tpublic static void method_is()\n\t{\n\t\tString str = \"ArrayDemo.java\";\n\n\t\t//判断文件名称是否是Array单词开头。\n\t\tsop(str.startsWith(\"Array\"));\n\t\t//判断文件名称是否是.java的文件。\n\t\tsop(str.endsWith(\".java\"));\n\t\t//判断文件中是否包含Demo\n\t\tsop(str.contains(\".java\"));\n\n\n\t}\n\n\n\tpublic static void method_get()\n\t{\n\t\tString str = \"abcdeakpf\";\n\n\t\t//长度\n\t\tsop(str.length());\n\n\t\t//根据索引获取字符。\n\t\tsop(str.charAt(4));//当访问到字符串中不存在的角标时会发生StringIndexOutOfBoundsException。\n\n\n\t\t//根据字符获取索引\n\t\tsop(str.indexOf('m',3));//如果没有找到，返回-1.\n\n\t\t//反向索引一个字符出现位置。\n\t\tsop(str.lastIndexOf(\"a\"));\n\n\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tmethod_7();\n//\t\tmethod_trans();\n//\t\tmethod_is();\n//\t\tmethod_get();\n\t\t/*\n\t\tString s1 = \"abc\";\n\t\tString s2 = new String(\"abc\");\n\n\t\tString s3 = \"abc\";\n\t\tSystem.out.println(s1==s2);\n\t\tSystem.out.println(s1==s3);\n\t\t*/\n\t}\n\n\tpublic static void sop(Object obj)\n\t{\n\t\tSystem.out.println(obj);\n\t}\n\n\n}\n```\n\n## String实战\n\n### 实战一\n\n\n\n- 模拟一个trim方法，去除字符串两端的空格。\n\t思路：\n\t1. 判断字符串第一个位置是否是空格，如果是继续向下判断，直到不是空格为止。\n\t\t结尾处判断空格也是如此。\n\t2. 当开始和结尾都判断到不是空格时，就是要获取的字符串。\n\n\n\n- 将一个字符串进行反转。将字符串中指定部分进行反转，\"abcdefg\";abfedcg\n\t思路：\n\t1. 曾经学习过对数组的元素进行反转。\n\t2. 将字符串变成数组，对数组反转。\n\t3. 将反转后的数组变成字符串。\n\t4. 只要将或反转的部分的开始和结束位置作为参数传递即可。\n\n```java\n\n\nclass StringTest\n{\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tString s = \"      ab cd      \";\n\n\t\tsop(\"(\"+s+\")\");\n//\t\ts = myTrim(s);\n//\t\tsop(\"(\"+s+\")\");\n\n\t\tsop(\"(\"+reverseString(s)+\")\");\n\n\t}\n\n\n\t//练习二：将字符串反转。\n\t/*\n\t思路：\n\t1，将字符串变成数组。\n\t2，对数组反转。\n\t3，将数组变成字符串。\n\t*/\n\n\tpublic static String reverseString(String s,int start,int end)\n\t{\n\t\t//字符串变数组。\n\t\tchar[] chs = s.toCharArray();\n\n\t\t//反转数组。\n\t\treverse(chs,start,end);\n\n\t\t//将数组变成字符串。\n\t\treturn new String(chs);\n\t}\n\tpublic static String reverseString(String s)\n\t{\n\t\treturn reverseString(s,0,s.length());\n\n\t}\n\n\tprivate static void reverse(char[] arr,int x,int y)\n\t{\n\t\tfor(int start=x,end=y-1; start<end ; start++,end--)\n\t\t{\n\t\t\tswap(arr,start,end);\n\t\t}\n\t}\n\tprivate static void swap(char[] arr,int x,int y)\n\t{\n\t\tchar temp = arr[x];\n\t\tarr[x] = arr[y];\n\t\tarr[y] = temp;\n\t}\n\n\t//练习一，去除字符串两端空格。\n\tpublic static String myTrim(String str)\n\t{\n\t\tint start = 0,end = str.length()-1;\n\n\t\twhile(start<=end && str.charAt(start)==' ')\n\t\t\tstart++;\n\n\t\twhile(start<=end && str.charAt(end)==' ')\n\t\t\tend--;\n\n\t\treturn str.substring(start,end+1);\n\t}\n}\n```\n\n\n### 实战二\n\n- 获取一个字符串在另一个字符串中出现的次数。\n\t\"abkkcdkkefkkskk\"\n\n\n\t- 思路：\n\t1. 定义个计数器。\n\t2. 获取kk第一次出现的位置。\n\t3. 从第一次出现位置后剩余的字符串中继续获取kk出现的位置。\n\t\t每获取一次就计数一次。\n\t4. 当获取不到时，计数完成。\n\n\n\n\n```java\n\nclass  StringTest2\n{\n\n\t/*\n\t练习三。\n\t*/\n\n\tpublic static int getSubCount(String str,String key)\n\t{\n\t\tint count = 0;\n\t\tint index = 0;\n\n\t\twhile((index=str.indexOf(key))!=-1)\n\t\t{\n\t\t\tsop(\"str=\"+str);\n\t\t\tstr = str.substring(index+key.length());\n\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\n\t/*\n\t练习三，方式二。\n\n\t*/\n\tpublic static int getSubCount_2(String str,String key)\n\t{\n\t\tint count = 0;\n\t\tint index = 0;\n\n\t\twhile((index= str.indexOf(key,index))!=-1)\n\t\t{\n\t\t\tsop(\"index=\"+index);\n\t\t\tindex = index + key.length();\n\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\n\tpublic static void main(String[] args)\n\t{\n\t\tString str = \"kkabkkcdkkefkks\";\n\n\t\t///sop(\"count=====\"+str.split(\"kk\").length);不建议使用。\n\n\t\tsop(\"count=\"+getSubCount_2(str,\"kk\"));\n\t}\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n\n### 实战三\n\n\n- 获取两个字符串中最大相同子串。第一个动作：将短的那个串进行长度一次递减的子串打印。\n\t\"abcwerthelloyuiodef\"\n\t\"cvhellobnm\"\n\t思路：\n\t\t1. 将短的那个子串按照长度递减的方式获取到。\n\t\t2. 将每获取到的子串去长串中判断是否包含，\n\t\t\t如果包含，已经找到。\n\n```java\nclass  StringTest3\n{\n\t/*\n\t练习四。\n\t*/\n\tpublic static String getMaxSubString(String s1,String s2)\n\t{\n\n\t\tString max = \"\",min = \"\";\n\n\t\tmax = (s1.length()>s2.length())?s1: s2;\n\n\t\tmin = (max==s1)?s2: s1;\n\n    //sop(\"max=\"+max+\"...min=\"+min);\n\t\tfor(int x=0; x<min.length(); x++)\n\t\t{\n\t\t\tfor(int y=0,z=min.length()-x; z!=min.length()+1; y++,z++)\n\t\t\t{\n\t\t\t\tString temp = min.substring(y,z);\n\n\t\t\t\tsop(temp);\n\t\t\t\tif(max.contains(temp))//if(s1.indexOf(temp)!=-1)\n\t\t\t\t\treturn temp;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n\n\n\tpublic static void main(String[] args)\n\t{\n\t\tString s1 = \"ab\";\n\t\tString s2 = \"cvhellobnm\";\n\t\tsop(getMaxSubString(s2,s1));\n\t}\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n}\n```\n\n### 实战四\n\n/*\n对字符串中字符进行自然顺序排序。\n\n思路：\n1，字符串变成字符数组。\n2，对数组排序，选择，冒泡，Arrays.sort();\n3，将排序后的数组变成字符串。\n\"vcz1bdAa+cs\"-->abccdsvz\n\n\n\n\n*作业：\n\"12 0 99 -7 30 4 100 13\"\n要求对字符串中的数值进行排序。生成一个数值从小到大新字符串。\n\"-7 0 4 12 13 30 99 100\"*\n\n```java\npublic class StringTest {\n\n    public static void main(String[] args) {\n        String str = \"12 0 99 -7 30 4 100 13\";\n        System.out.println(sortString(str));\n        }\n    static String  sortString(String str){\n\n        String[] string = str.split(\" \");\n        List<Integer> integer = new ArrayList<>();\n        for (int i = 0; i < string.length; i ++) {\n            integer.add(Integer.parseInt(string[i]));\n        }\n        sort(integer);\n        String result = \"\";\n        for (Integer integer1 : integer) {\n            result += integer1.toString() + \" \";\n        }\n        return result;\n    }\n}\n```\n## StringBuffer\n\nStringBuffer是字符串缓冲区。\n\n是一个容器。\n### 特点：\n1. 长度是可变化的。\n2. 可以字节操作多个数据类型。\n3. 最终会通过toString方法变成字符串。\n\nC create U update R read D delete\n\n1. 存储。\n\tStringBuffer append():将指定数据作为参数添加到已有数据结尾处。\n\tStringBuffer insert(index,数据):可以将数据插入到指定index位置。\n\n\n2. 删除。\n\tStringBuffer delete(start,end):删除缓冲区中的数据，包含start，不包含end。\n\tStringBuffer deleteCharAt(index):删除指定位置的字符。\n\n3. 获取。\n\tchar charAt(int index)\n\tint indexOf(String str)\n\tint lastIndexOf(String str)\n\tint length()\n\tString substring(int start, int end)\n\n4. 修改。\n\tStringBuffer replace(start,end,string);\n\tvoid setCharAt(int index, char ch) ;\n\n\n5. 反转。\n\tStringBuffer reverse();\n\n6. 将缓冲区中指定数据存储到指定字符数组中。\n\tvoid getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)\n\n## StringBuilder\n\n### API:\n`一个可变的字符序列。这个类提供了一个API兼容 StringBuffer，但无法保证同步。本课程是专为使用作为一个下降的替代 StringBuffer在地方的字符串缓冲区被一个线程使用（一般情况下）。在可能的情况下，建议优先使用这类 StringBuffer它将在大多数实现更快。\n在StringBuilder的主营业务是append和insert方法的重载，以便接受任何数据类型。每个有效地将一个给定的数据到一个字符串，然后追加或插入字符串的字符的字符串生成器。的append方法总是说这些人物在生成器的结束；的insert方法添加字符在指定点。\n\n例如，如果z指字符串生成器对象的当前内容是“start”，然后调用方法z.append(\"le\")会导致字符串生成器包含“startle”，而z.insert(4, \"le\")会改变字符串生成器包含“starlet”。\n\n一般来说，如果某人是一个StringBuilder实例，然后sb.append(x)具有相同的效果sb.insert(sb.length(), x)。\n\n每一个字符串生成器都有一个容量。只要字符串生成器中包含的字符序列的长度不超过容量，就没有必要分配一个新的内部缓冲区。如果内部缓冲区溢出，则自动作出较大的。\n\nStringBuilder不安全的实例用于多个线程。如果需要同步然后建议StringBuffer可用。\n\n除非另有说明，通过null争论这类构造函数或方法会导致一个NullPointerException被。`\n\nJDK1.5 版本之后出现了StringBuilder.\n\n**StringBuffer是线程同步。\n  StringBuilder是线程不同步。**\n\n<font color='red'>**以后开发，建议使用StringBuilder**</font>\n\nJava升级的三个因素：\n1. 提高效率。\n2. 简化书写。\n3. 提高安全性。\n\n\n```java\n\nclass Demo\n{\n}\n\npublic class StringBufferDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\t//method_update();\n\n\t\tStringBuilder sb = new StringBuilder(\"abcdef\");\n\n\t\tchar[] chs = new char[6];\n\n\n\t\tsb.getChars(1,4,chs,1);//将\n\n\t\tfor(int x=0; x<chs.length; x++)\n\t\t{\n\t\t\tsop(\"chs[\"+x+\"]=\"+chs[x]+\";\");\n\t\t}\n\n\t\tdraw(3,6);\n\t\tdraw(8,9);\n\n//\tStringBuilder sb1 = new StringBuilder();\n//\tsb1.append(new Demo()).append(new Demo());\n//\tsop(\"sb1=\"+sb1);\n\t}\n\tpublic static void method_update()\n\t{\n\t\tStringBuffer sb  = new StringBuffer(\"abcde\");\n\n//\tsb.replace(1,4,\"java\");\n\t\tsb.setCharAt(2,'k');\n\n\n\t\tsop(sb.toString());\n\n\t}\n\tpublic static void method_del()\n\t{\n\t\tStringBuffer sb  = new StringBuffer(\"abcde\");\n\n//\t\tsb.delete(1,3);\n\t\t//清空缓冲区。\n\t\t//sb.delete(0,sb.length());\n\n\t\t//sb.delete(2,3);\n\t\tsb.deleteCharAt(2);\n\n\t\tsop(sb.toString());\n\t}\n\n\tpublic static void method_add()\n\t{\n\t\tStringBuffer sb = new StringBuffer();\n\n\n\t\t//sb.append(\"abc\").append(true).append(34);\n//\t\tStringBuffer sb1 = sb.append(34);\n//\t\tsop(\"sb==sb1:\"+(sb==sb1));\n\n\t\tsb.insert(1,\"qq\");\n\t\tsop(sb.toString());//abctrue34\n\t\t//sop(sb1.toString());\n\n\n\t}\n\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n\n\tpublic static void draw(int row,int col)\n\t{\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int x=0; x<row; x++)\n\t\t{\n\t\t\tfor(int y=0; y<col; y++)\n\t\t\t{\n\t\t\t\tsb.append(\"*\");\n\t\t\t}\n\t\t\tsb.append(\"\\r\\n\");\n\t\t}\n\n\t\tsop(sb.toString());\n\t}\n\n}\n```\n\n## 包装类\n\n/*\n基本数据类型对象包装类。\n| 引用类型 | 包装类型 |\n|:-----:|:-----:|\n| byte\t| Byte  |\n| short\t| Short |\n| int\t\t| Integer |\n| long\t| Long |\n| boolean | Boolean |\n| float\t | Float |\n| double | Double |\n| char\t | Character |\n\n### 基本数据类型对象包装类的最常见作用，\n  就是用于基本数据类型和字符串类型之间做转换\n\n1. 基本数据类型转成字符串。\n\n\t基本数据类型+\"\"\n\n\t基本数据类型.toString(基本数据类型值);\n\n\t如： `Integer.toString(34);`//将34整数变成\"34\";\n\n2. 字符串转成基本数据类型。\n\n\t`xxx a = Xxx.parseXxx(String);\n\n\tint a = Integer.parseInt(\"123\");\n\n\tdouble b = Double.parseDouble(\"12.23\");\n\n\tboolean b = Boolean.parseBoolean(\"true\");\n\n\tInteger i = new Integer(\"123\");\n\n\tint num = i.intValue();`\n3. 进制转换\n\n - 十进制转成其他进制。\n `toBinaryString();\n\ttoHexString();\n\ttoOctalString();`\n- 其他进制转成十进制。\n\t`parseInt(string,radix);`\n\n```java\n\nclass IntegerDemo\n{\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n\n\tpublic static void main(String[] args)\n\t{\n\t\t//整数类型的最大值。\n\t\t//sop(\"int max :\"+Integer.MAX_VALUE);\n\n//\t\t将一个字符串转成整数。\n\n\t\tint num = Integer.parseInt(\"123\");//必须传入数字格式的字符串。\n\t\t//long x = Long.parseLong(\"123\");\n\n//\t\tsop(\"num=\"+(num+4));\n\n//\t\tsop(Integer.toBinaryString(-6));\n//\t\tsop(Integer.toHexString(60));\n\n\t\tint x = Integer.parseInt(\"3c\",16);\n\n\t\tsop(\"x=\"+x);\n\n\n\t}\n}\n```\n\n### Integer常用方法\n/*\nJDK1.5版本以后出现的新特性。\n\n```java\nclass IntegerDemo1\n{\n\tpublic static void main(String[] args)\n\t{\n\n//\t\tInteger x = new Integer(4);\n\n\t\tInteger x = 4;//自动装箱。//new Integer(4)\n\t\tx = x/* x.intValue() */ + 2;//x+2:x 进行自动拆箱。变成成了int类型。和2进行加法运算。\n\t\t//再将和进行装箱赋给x。\n\n\t\tInteger m = 128;\n\t\tInteger n = 128;\n\n\t\tsop(\"m==n:\"+(m==n));\n\n\t\tInteger a = 127;\n\t\tInteger b = 127;\n\n\t\tsop(\"a==b:\"+(a==b));//结果为true。因为a和b指向了同一个Integer对象。\n\t   //因为当数值在byte范围内容，对于新特性，如果该数值已经存在，则不会在开辟新的空间。\n\t}\n\n\tpublic static void method()\n\t{\n\t\tInteger x = new Integer(\"123\");\n\n\t\tInteger y = new Integer(123);\n\n\t\tsop(\"x==y:\"+(x==y));\n\t\tsop(\"x.equals(y):\"+x.equals(y));\n\t}\n\n\tpublic static void sop(String str)\n\t{\n\t\tSystem.out.println(str);\n\t}\n\n}\n```\n\n#### Demo\n\n```java\nclass  Demo\n{\n\n\tpublic static void sop(Object str)//Object str = new Integer(4);\n\t{\n\t\tSystem.out.println(str);\n\t}\n\tpublic static void main(String[] args)\n\t{\n\n\t\tsop(4);\n//\t\tint[] arr = {3,1,5,8,23,9};\n//\n//\t\tSystem.out.println(toString(arr));\n//\t\tSystem.out.println(toString_2(arr));\n\t}\n\tpublic static String toString_2(int[] arr)\n\t{\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tsb.append(\"[\");\n\n\t\tfor(int x=0; x<arr.length; x++)\n\t\t{\n\t\t\tif(x!=arr.length-1)\n\t\t\t\tsb.append(arr[x]+\", \");\n\t\t\telse\n\t\t\t\tsb.append(arr[x]+\"}\");\n\n\t\t}\n\t\treturn  sb.toString();\n\t}\n\n\tpublic static String toString(int[] arr)\n\t{\n\t\tString str = \"[\";\n\n\t\tfor(int x=0; x<arr.length; x++)\n\t\t{\n\t\t\tif(x!=arr.length-1)\n\t\t\t\tstr += arr[x]+\", \";\n\t\t\telse\n\t\t\t\tstr += arr[x]+\"]\";\n\t\t}\n\t\treturn str;\n\t}\n}\n```\n","slug":"JavaReview-day13-String","published":1,"updated":"2018-01-27T06:27:06.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m05z000vq8kxcwts8v1k","content":"<h2 id=\"String及其他\"><a href=\"#String及其他\" class=\"headerlink\" title=\"String及其他\"></a>String及其他</h2><blockquote>\n<p>本篇主要介绍介绍String和其他基本数据类型的包装类型及其常用方法;</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s1 = \"abc\";//s1是一个类类型变量， \"abc\"是一个对象。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//字符串最大特点：一旦被初始化就不可以被改变。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s2 = new String(\"abc\");</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t//s1和s2有什么区别？</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//s1在内存中有一个对象。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//s2在内存中有两个对象。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(s1==s2);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(s1.equals(s2));//String类复写了Object类中equals方法，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">    <span class=\"comment\">//该方法用于判断字符串是否相同。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"abcde\"</span>;</span><br><span class=\"line\">\t\tmethod_1(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tString类是对字符串事物的描述。</span></span><br><span class=\"line\"><span class=\"comment\">\t该类定义了专门用于操作字符串的方法。</span></span><br><span class=\"line\"><span class=\"comment\">\t\"abc\":</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_1</span><span class=\"params\">(String s)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> ch = s.charAt(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ch=\"</span>+ch);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = s.codePointAt(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"num=\"</span>+num);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s1 = <span class=\"string\">\"qq\"</span>;</span><br><span class=\"line\">\t\ts1 = s1.concat(<span class=\"string\">\"mm\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"s1=\"</span>+s1);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"qq\"</span>+<span class=\"string\">\"mm\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString a = <span class=\"string\">\"opq\"</span>;</span><br><span class=\"line\">\t\tString b = <span class=\"string\">\"opq\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"a==b:\"</span>+(a==b));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>String类适用于描述字符串事物。<br>那么它就提供了多个方法对字符串进行操作。</p>\n<p>常见的操作有哪些？<br>“abcd”</p>\n<h4 id=\"1-获取。\"><a href=\"#1-获取。\" class=\"headerlink\" title=\"1.获取。\"></a>1.获取。</h4><pre><code>1. 字符串中的包含的字符数，也就是字符串的长度。\n    int length():获取长度。\n1. 根据位置获取位置上某个字符。\n    char charAt(int index):\n1. 根据字符获取该字符在字符串中位置。\n    int indexOf(int ch):返回的是ch在字符串中第一次出现的位置。\n    int indexOf(int ch, int fromIndex) :从fromIndex指定位置开始，获取ch在字符串中出现的位置。\n\n    int indexOf(String str):返回的是str在字符串中第一次出现的位置。\n    int indexOf(String str, int fromIndex) :从fromIndex指定位置开始，获取str在字符串中出现的位置。\n\n    int lastIndexOf(int ch) ：\n</code></pre><h4 id=\"2-判断。\"><a href=\"#2-判断。\" class=\"headerlink\" title=\"2.判断。\"></a>2.判断。</h4><pre><code>1. 字符串中是否包含某一个子串。\n    boolean contains(str):\n    特殊之处：indexOf(str):可以索引str第一次出现位置，如果返回-1.表示该str不在字符串中存在。\n            所以，也可以用于对指定判断是否包含。\n            if(str.indexOf(&quot;aa&quot;)!=-1)\n\n            而且该方法即可以判断，有可以获取出现的位置。\n\n2. 字符中是否有内容。\n    boolean isEmpty(): 原理就是判断长度是否为0.\n3. 字符串是否是以指定内容开头。\n    boolean startsWith(str);\n4. 字符串是否是以指定内容结尾。\n    boolean endsWith(str);\n5. 判断字符串内容是否相同。复写了Object类中的equals方法。\n    boolean equals(str);\n6. 判断内容是否相同，并忽略大小写。\n    boolean equalsIgnoreCase();\n</code></pre><h4 id=\"3-转换。\"><a href=\"#3-转换。\" class=\"headerlink\" title=\"3.转换。\"></a>3.转换。</h4><pre><code>1. 将字符数组转成字符串。\n    构造函数：String(char[])\n              String(char[],offset,count):将字符数组中的一部分转成字符串。\n\n    静态方法：\n            static String copyValueOf(char[]);\n            static String copyValueOf(char[] data, int offset, int count)\n\n            static String valueOf(char[]):\n\n\n2. 将字符串转成字符数组。**\n    char[] toCharArray():\n\n3. 将字节数组转成字符串。\n        String(byte[])\n        String(byte[],offset,count):将字节数组中的一部分转成字符串。\n\n4. 将字符串转成字节数组。\n        byte[]  getBytes():\n5. 将基本数据类型转成字符串。\n    static String valueOf(int)\n    static String valueOf(double)\n\n    //3+&quot;&quot;;//String.valueOf(3);\n\n    特殊：字符串和字节数组在转换过程中，是可以指定编码表的。\n</code></pre><h4 id=\"4-替换\"><a href=\"#4-替换\" class=\"headerlink\" title=\"4.替换\"></a>4.替换</h4><pre><code>String replace(oldchar,newchar);\n</code></pre><h4 id=\"5-切割\"><a href=\"#5-切割\" class=\"headerlink\" title=\"5.切割\"></a>5.切割</h4><pre><code>String[] split(regex);\n</code></pre><h4 id=\"6-子串。获取字符串中的一部分。\"><a href=\"#6-子串。获取字符串中的一部分。\" class=\"headerlink\" title=\"6.子串。获取字符串中的一部分。\"></a>6.子串。获取字符串中的一部分。</h4><pre><code>String substring(begin);\nString substring(begin,end);\n</code></pre><h4 id=\"7-转换，去除空格，比较。\"><a href=\"#7-转换，去除空格，比较。\" class=\"headerlink\" title=\"7.转换，去除空格，比较。\"></a>7.转换，去除空格，比较。</h4><pre><code>1. 将字符串转成大写或则小写。\n     String toUpperCase();\n     String toLowerCase();\n\n2. 将字符串两端的多个空格去除。\n    String trim();\n\n3. 对两个字符串进行自然顺序的比较。\n    int compareTo(string);\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StringMethodDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_7</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"    Hello Java     \"</span>;</span><br><span class=\"line\">\t\tsop(s.toLowerCase());</span><br><span class=\"line\">\t\tsop(s.toUpperCase());</span><br><span class=\"line\">\t\tsop(s.trim());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s1 = <span class=\"string\">\"a1c\"</span>;</span><br><span class=\"line\">\t\tString s2 = <span class=\"string\">\"aaa\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(s1.compareTo(s2));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_sub</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"abcdef\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(s.substring(<span class=\"number\">2</span>));<span class=\"comment\">//从指定位置开始到结尾。如果角标不存在，会出现字符串角标越界异常。</span></span><br><span class=\"line\">\t\tsop(s.substring(<span class=\"number\">2</span>,<span class=\"number\">4</span>));<span class=\"comment\">//包含头，不包含尾。s.substring(0,s.length());</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">method_split</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"zhagnsa,lisi,wangwu\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString[] arr  = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x&lt;arr.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(arr[x]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_replace</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"hello java\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//String s1 = s.replace('q','n');//如果要替换的字符不存在，返回的还是原串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s1 = s.replace(<span class=\"string\">\"java\"</span>,<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"s=\"</span>+s);</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"s1=\"</span>+s1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_trans</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] arr = &#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s= <span class=\"keyword\">new</span> String(arr,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"s=\"</span>+s);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s1 = <span class=\"string\">\"zxcvbnm\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] chs = s1.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;chs.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(<span class=\"string\">\"ch=\"</span>+chs[x]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_is</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"ArrayDemo.java\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断文件名称是否是Array单词开头。</span></span><br><span class=\"line\">\t\tsop(str.startsWith(<span class=\"string\">\"Array\"</span>));</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断文件名称是否是.java的文件。</span></span><br><span class=\"line\">\t\tsop(str.endsWith(<span class=\"string\">\".java\"</span>));</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断文件中是否包含Demo</span></span><br><span class=\"line\">\t\tsop(str.contains(<span class=\"string\">\".java\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_get</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"abcdeakpf\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//长度</span></span><br><span class=\"line\">\t\tsop(str.length());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//根据索引获取字符。</span></span><br><span class=\"line\">\t\tsop(str.charAt(<span class=\"number\">4</span>));<span class=\"comment\">//当访问到字符串中不存在的角标时会发生StringIndexOutOfBoundsException。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//根据字符获取索引</span></span><br><span class=\"line\">\t\tsop(str.indexOf(<span class=\"string\">'m'</span>,<span class=\"number\">3</span>));<span class=\"comment\">//如果没有找到，返回-1.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//反向索引一个字符出现位置。</span></span><br><span class=\"line\">\t\tsop(str.lastIndexOf(<span class=\"string\">\"a\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tmethod_7();</span><br><span class=\"line\"><span class=\"comment\">//\t\tmethod_trans();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tmethod_is();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tmethod_get();</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s1 = \"abc\";</span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s2 = new String(\"abc\");</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s3 = \"abc\";</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(s1==s2);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(s1==s3);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"String实战\"><a href=\"#String实战\" class=\"headerlink\" title=\"String实战\"></a>String实战</h2><h3 id=\"实战一\"><a href=\"#实战一\" class=\"headerlink\" title=\"实战一\"></a>实战一</h3><ul>\n<li>模拟一个trim方法，去除字符串两端的空格。<br>  思路：<ol>\n<li>判断字符串第一个位置是否是空格，如果是继续向下判断，直到不是空格为止。<br> 结尾处判断空格也是如此。</li>\n<li>当开始和结尾都判断到不是空格时，就是要获取的字符串。</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>将一个字符串进行反转。将字符串中指定部分进行反转，”abcdefg”;abfedcg<br>  思路：<ol>\n<li>曾经学习过对数组的元素进行反转。</li>\n<li>将字符串变成数组，对数组反转。</li>\n<li>将反转后的数组变成字符串。</li>\n<li>只要将或反转的部分的开始和结束位置作为参数传递即可。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"      ab cd      \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"(\"</span>+s+<span class=\"string\">\")\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t\ts = myTrim(s);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(\"(\"+s+\")\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"(\"</span>+reverseString(s)+<span class=\"string\">\")\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//练习二：将字符串反转。</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t思路：</span></span><br><span class=\"line\"><span class=\"comment\">\t1，将字符串变成数组。</span></span><br><span class=\"line\"><span class=\"comment\">\t2，对数组反转。</span></span><br><span class=\"line\"><span class=\"comment\">\t3，将数组变成字符串。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">reverseString</span><span class=\"params\">(String s,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//字符串变数组。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] chs = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//反转数组。</span></span><br><span class=\"line\">\t\treverse(chs,start,end);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//将数组变成字符串。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(chs);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">reverseString</span><span class=\"params\">(String s)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> reverseString(s,<span class=\"number\">0</span>,s.length());</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> start=x,end=y-<span class=\"number\">1</span>; start&lt;end ; start++,end--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tswap(arr,start,end);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> temp = arr[x];</span><br><span class=\"line\">\t\tarr[x] = arr[y];</span><br><span class=\"line\">\t\tarr[y] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//练习一，去除字符串两端空格。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">myTrim</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>,end = str.length()-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(start&lt;=end &amp;&amp; str.charAt(start)==<span class=\"string\">' '</span>)</span><br><span class=\"line\">\t\t\tstart++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(start&lt;=end &amp;&amp; str.charAt(end)==<span class=\"string\">' '</span>)</span><br><span class=\"line\">\t\t\tend--;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.substring(start,end+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实战二\"><a href=\"#实战二\" class=\"headerlink\" title=\"实战二\"></a>实战二</h3><ul>\n<li>获取一个字符串在另一个字符串中出现的次数。<br>  “abkkcdkkefkkskk”</li>\n</ul>\n<pre><code>- 思路：\n1. 定义个计数器。\n2. 获取kk第一次出现的位置。\n3. 从第一次出现位置后剩余的字符串中继续获取kk出现的位置。\n    每获取一次就计数一次。\n4. 当获取不到时，计数完成。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StringTest2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t练习三。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSubCount</span><span class=\"params\">(String str,String key)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>((index=str.indexOf(key))!=-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(<span class=\"string\">\"str=\"</span>+str);</span><br><span class=\"line\">\t\t\tstr = str.substring(index+key.length());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t练习三，方式二。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSubCount_2</span><span class=\"params\">(String str,String key)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>((index= str.indexOf(key,index))!=-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(<span class=\"string\">\"index=\"</span>+index);</span><br><span class=\"line\">\t\t\tindex = index + key.length();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"kkabkkcdkkefkks\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">///sop(\"count=====\"+str.split(\"kk\").length);不建议使用。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"count=\"</span>+getSubCount_2(str,<span class=\"string\">\"kk\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实战三\"><a href=\"#实战三\" class=\"headerlink\" title=\"实战三\"></a>实战三</h3><ul>\n<li>获取两个字符串中最大相同子串。第一个动作：将短的那个串进行长度一次递减的子串打印。<br>  “abcwerthelloyuiodef”<br>  “cvhellobnm”<br>  思路：<pre><code>1. 将短的那个子串按照长度递减的方式获取到。\n2. 将每获取到的子串去长串中判断是否包含，\n    如果包含，已经找到。\n</code></pre></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StringTest3</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t练习四。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMaxSubString</span><span class=\"params\">(String s1,String s2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString max = <span class=\"string\">\"\"</span>,min = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmax = (s1.length()&gt;s2.length())?s1: s2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmin = (max==s1)?s2: s1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//sop(\"max=\"+max+\"...min=\"+min);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;min.length(); x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y=<span class=\"number\">0</span>,z=min.length()-x; z!=min.length()+<span class=\"number\">1</span>; y++,z++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tString temp = min.substring(y,z);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tsop(temp);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(max.contains(temp))<span class=\"comment\">//if(s1.indexOf(temp)!=-1)</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s1 = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">\t\tString s2 = <span class=\"string\">\"cvhellobnm\"</span>;</span><br><span class=\"line\">\t\tsop(getMaxSubString(s2,s1));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实战四\"><a href=\"#实战四\" class=\"headerlink\" title=\"实战四\"></a>实战四</h3><p>/*<br>对字符串中字符进行自然顺序排序。</p>\n<p>思路：<br>1，字符串变成字符数组。<br>2，对数组排序，选择，冒泡，Arrays.sort();<br>3，将排序后的数组变成字符串。<br>“vcz1bdAa+cs”–&gt;abccdsvz</p>\n<p><em>作业：<br>“12 0 99 -7 30 4 100 13”<br>要求对字符串中的数值进行排序。生成一个数值从小到大新字符串。<br>“-7 0 4 12 13 30 99 100”</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"12 0 99 -7 30 4 100 13\"</span>;</span><br><span class=\"line\">        System.out.println(sortString(str));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String  <span class=\"title\">sortString</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] string = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; integer = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; string.length; i ++) &#123;</span><br><span class=\"line\">            integer.add(Integer.parseInt(string[i]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(integer);</span><br><span class=\"line\">        String result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer integer1 : integer) &#123;</span><br><span class=\"line\">            result += integer1.toString() + <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"StringBuffer\"><a href=\"#StringBuffer\" class=\"headerlink\" title=\"StringBuffer\"></a>StringBuffer</h2><p>StringBuffer是字符串缓冲区。</p>\n<p>是一个容器。</p>\n<h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><ol>\n<li>长度是可变化的。</li>\n<li>可以字节操作多个数据类型。</li>\n<li>最终会通过toString方法变成字符串。</li>\n</ol>\n<p>C create U update R read D delete</p>\n<ol>\n<li>存储。<br> StringBuffer append():将指定数据作为参数添加到已有数据结尾处。<br> StringBuffer insert(index,数据):可以将数据插入到指定index位置。</li>\n</ol>\n<ol>\n<li><p>删除。<br> StringBuffer delete(start,end):删除缓冲区中的数据，包含start，不包含end。<br> StringBuffer deleteCharAt(index):删除指定位置的字符。</p>\n</li>\n<li><p>获取。<br> char charAt(int index)<br> int indexOf(String str)<br> int lastIndexOf(String str)<br> int length()<br> String substring(int start, int end)</p>\n</li>\n<li><p>修改。<br> StringBuffer replace(start,end,string);<br> void setCharAt(int index, char ch) ;</p>\n</li>\n</ol>\n<ol>\n<li><p>反转。<br> StringBuffer reverse();</p>\n</li>\n<li><p>将缓冲区中指定数据存储到指定字符数组中。<br> void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</p>\n</li>\n</ol>\n<h2 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h2><h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API:\"></a>API:</h3><p>`一个可变的字符序列。这个类提供了一个API兼容 StringBuffer，但无法保证同步。本课程是专为使用作为一个下降的替代 StringBuffer在地方的字符串缓冲区被一个线程使用（一般情况下）。在可能的情况下，建议优先使用这类 StringBuffer它将在大多数实现更快。<br>在StringBuilder的主营业务是append和insert方法的重载，以便接受任何数据类型。每个有效地将一个给定的数据到一个字符串，然后追加或插入字符串的字符的字符串生成器。的append方法总是说这些人物在生成器的结束；的insert方法添加字符在指定点。</p>\n<p>例如，如果z指字符串生成器对象的当前内容是“start”，然后调用方法z.append(“le”)会导致字符串生成器包含“startle”，而z.insert(4, “le”)会改变字符串生成器包含“starlet”。</p>\n<p>一般来说，如果某人是一个StringBuilder实例，然后sb.append(x)具有相同的效果sb.insert(sb.length(), x)。</p>\n<p>每一个字符串生成器都有一个容量。只要字符串生成器中包含的字符序列的长度不超过容量，就没有必要分配一个新的内部缓冲区。如果内部缓冲区溢出，则自动作出较大的。</p>\n<p>StringBuilder不安全的实例用于多个线程。如果需要同步然后建议StringBuffer可用。</p>\n<p>除非另有说明，通过null争论这类构造函数或方法会导致一个NullPointerException被。`</p>\n<p>JDK1.5 版本之后出现了StringBuilder.</p>\n<p><strong>StringBuffer是线程同步。<br>  StringBuilder是线程不同步。</strong></p>\n<font color=\"red\"><strong>以后开发，建议使用StringBuilder</strong></font>\n\n<p>Java升级的三个因素：</p>\n<ol>\n<li>提高效率。</li>\n<li>简化书写。</li>\n<li>提高安全性。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringBufferDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//method_update();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"abcdef\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] chs = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsb.getChars(<span class=\"number\">1</span>,<span class=\"number\">4</span>,chs,<span class=\"number\">1</span>);<span class=\"comment\">//将</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;chs.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(<span class=\"string\">\"chs[\"</span>+x+<span class=\"string\">\"]=\"</span>+chs[x]+<span class=\"string\">\";\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdraw(<span class=\"number\">3</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">\t\tdraw(<span class=\"number\">8</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\tStringBuilder sb1 = new StringBuilder();</span></span><br><span class=\"line\"><span class=\"comment\">//\tsb1.append(new Demo()).append(new Demo());</span></span><br><span class=\"line\"><span class=\"comment\">//\tsop(\"sb1=\"+sb1);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_update</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuffer sb  = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"abcde\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\tsb.replace(1,4,\"java\");</span></span><br><span class=\"line\">\t\tsb.setCharAt(<span class=\"number\">2</span>,<span class=\"string\">'k'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(sb.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_del</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuffer sb  = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"abcde\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tsb.delete(1,3);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//清空缓冲区。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//sb.delete(0,sb.length());</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//sb.delete(2,3);</span></span><br><span class=\"line\">\t\tsb.deleteCharAt(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(sb.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_add</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//sb.append(\"abc\").append(true).append(34);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tStringBuffer sb1 = sb.append(34);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(\"sb==sb1:\"+(sb==sb1));</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsb.insert(<span class=\"number\">1</span>,<span class=\"string\">\"qq\"</span>);</span><br><span class=\"line\">\t\tsop(sb.toString());<span class=\"comment\">//abctrue34</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//sop(sb1.toString());</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">int</span> row,<span class=\"keyword\">int</span> col)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;row; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y=<span class=\"number\">0</span>; y&lt;col; y++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tsb.append(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tsb.append(<span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(sb.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h2><p>/*<br>基本数据类型对象包装类。<br>| 引用类型 | 包装类型 |<br>|:—–:|:—–:|<br>| byte    | Byte  |<br>| short    | Short |<br>| int        | Integer |<br>| long    | Long |<br>| boolean | Boolean |<br>| float     | Float |<br>| double | Double |<br>| char     | Character |</p>\n<h3 id=\"基本数据类型对象包装类的最常见作用，\"><a href=\"#基本数据类型对象包装类的最常见作用，\" class=\"headerlink\" title=\"基本数据类型对象包装类的最常见作用，\"></a>基本数据类型对象包装类的最常见作用，</h3><p>  就是用于基本数据类型和字符串类型之间做转换</p>\n<ol>\n<li><p>基本数据类型转成字符串。</p>\n<p> 基本数据类型+””</p>\n<p> 基本数据类型.toString(基本数据类型值);</p>\n<p> 如： <code>Integer.toString(34);</code>//将34整数变成”34”;</p>\n</li>\n<li><p>字符串转成基本数据类型。</p>\n<p> `xxx a = Xxx.parseXxx(String);</p>\n<p> int a = Integer.parseInt(“123”);</p>\n<p> double b = Double.parseDouble(“12.23”);</p>\n<p> boolean b = Boolean.parseBoolean(“true”);</p>\n<p> Integer i = new Integer(“123”);</p>\n<p> int num = i.intValue();`</p>\n</li>\n<li><p>进制转换</p>\n<ul>\n<li>十进制转成其他进制。<br><code>toBinaryString();\ntoHexString();\ntoOctalString();</code></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>其他进制转成十进制。<br>  <code>parseInt(string,radix);</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//整数类型的最大值。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//sop(\"int max :\"+Integer.MAX_VALUE);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\t将一个字符串转成整数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = Integer.parseInt(<span class=\"string\">\"123\"</span>);<span class=\"comment\">//必须传入数字格式的字符串。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//long x = Long.parseLong(\"123\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(\"num=\"+(num+4));</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(Integer.toBinaryString(-6));</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(Integer.toHexString(60));</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = Integer.parseInt(<span class=\"string\">\"3c\"</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"x=\"</span>+x);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Integer常用方法\"><a href=\"#Integer常用方法\" class=\"headerlink\" title=\"Integer常用方法\"></a>Integer常用方法</h3><p>/*<br>JDK1.5版本以后出现的新特性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerDemo1</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tInteger x = new Integer(4);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInteger x = <span class=\"number\">4</span>;<span class=\"comment\">//自动装箱。//new Integer(4)</span></span><br><span class=\"line\">\t\tx = x<span class=\"comment\">/* x.intValue() */</span> + <span class=\"number\">2</span>;<span class=\"comment\">//x+2:x 进行自动拆箱。变成成了int类型。和2进行加法运算。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//再将和进行装箱赋给x。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInteger m = <span class=\"number\">128</span>;</span><br><span class=\"line\">\t\tInteger n = <span class=\"number\">128</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"m==n:\"</span>+(m==n));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInteger a = <span class=\"number\">127</span>;</span><br><span class=\"line\">\t\tInteger b = <span class=\"number\">127</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"a==b:\"</span>+(a==b));<span class=\"comment\">//结果为true。因为a和b指向了同一个Integer对象。</span></span><br><span class=\"line\">\t   <span class=\"comment\">//因为当数值在byte范围内容，对于新特性，如果该数值已经存在，则不会在开辟新的空间。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tInteger x = <span class=\"keyword\">new</span> Integer(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInteger y = <span class=\"keyword\">new</span> Integer(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"x==y:\"</span>+(x==y));</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"x.equals(y):\"</span>+x.equals(y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Demo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object str)</span><span class=\"comment\">//Object str = new Integer(4);</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t\tint[] arr = &#123;3,1,5,8,23,9&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(toString_2(arr));</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toString_2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;arr.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x!=arr.length-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\tsb.append(arr[x]+<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tsb.append(arr[x]+<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  sb.toString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toString</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"[\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;arr.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x!=arr.length-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\tstr += arr[x]+<span class=\"string\">\", \"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tstr += arr[x]+<span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"String及其他\"><a href=\"#String及其他\" class=\"headerlink\" title=\"String及其他\"></a>String及其他</h2><blockquote>\n<p>本篇主要介绍介绍String和其他基本数据类型的包装类型及其常用方法;</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s1 = \"abc\";//s1是一个类类型变量， \"abc\"是一个对象。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//字符串最大特点：一旦被初始化就不可以被改变。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s2 = new String(\"abc\");</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t//s1和s2有什么区别？</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//s1在内存中有一个对象。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t//s2在内存中有两个对象。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(s1==s2);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(s1.equals(s2));//String类复写了Object类中equals方法，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">    <span class=\"comment\">//该方法用于判断字符串是否相同。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"abcde\"</span>;</span><br><span class=\"line\">\t\tmethod_1(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tString类是对字符串事物的描述。</span></span><br><span class=\"line\"><span class=\"comment\">\t该类定义了专门用于操作字符串的方法。</span></span><br><span class=\"line\"><span class=\"comment\">\t\"abc\":</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_1</span><span class=\"params\">(String s)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> ch = s.charAt(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ch=\"</span>+ch);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = s.codePointAt(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"num=\"</span>+num);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s1 = <span class=\"string\">\"qq\"</span>;</span><br><span class=\"line\">\t\ts1 = s1.concat(<span class=\"string\">\"mm\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"s1=\"</span>+s1);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"qq\"</span>+<span class=\"string\">\"mm\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString a = <span class=\"string\">\"opq\"</span>;</span><br><span class=\"line\">\t\tString b = <span class=\"string\">\"opq\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"a==b:\"</span>+(a==b));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>String类适用于描述字符串事物。<br>那么它就提供了多个方法对字符串进行操作。</p>\n<p>常见的操作有哪些？<br>“abcd”</p>\n<h4 id=\"1-获取。\"><a href=\"#1-获取。\" class=\"headerlink\" title=\"1.获取。\"></a>1.获取。</h4><pre><code>1. 字符串中的包含的字符数，也就是字符串的长度。\n    int length():获取长度。\n1. 根据位置获取位置上某个字符。\n    char charAt(int index):\n1. 根据字符获取该字符在字符串中位置。\n    int indexOf(int ch):返回的是ch在字符串中第一次出现的位置。\n    int indexOf(int ch, int fromIndex) :从fromIndex指定位置开始，获取ch在字符串中出现的位置。\n\n    int indexOf(String str):返回的是str在字符串中第一次出现的位置。\n    int indexOf(String str, int fromIndex) :从fromIndex指定位置开始，获取str在字符串中出现的位置。\n\n    int lastIndexOf(int ch) ：\n</code></pre><h4 id=\"2-判断。\"><a href=\"#2-判断。\" class=\"headerlink\" title=\"2.判断。\"></a>2.判断。</h4><pre><code>1. 字符串中是否包含某一个子串。\n    boolean contains(str):\n    特殊之处：indexOf(str):可以索引str第一次出现位置，如果返回-1.表示该str不在字符串中存在。\n            所以，也可以用于对指定判断是否包含。\n            if(str.indexOf(&quot;aa&quot;)!=-1)\n\n            而且该方法即可以判断，有可以获取出现的位置。\n\n2. 字符中是否有内容。\n    boolean isEmpty(): 原理就是判断长度是否为0.\n3. 字符串是否是以指定内容开头。\n    boolean startsWith(str);\n4. 字符串是否是以指定内容结尾。\n    boolean endsWith(str);\n5. 判断字符串内容是否相同。复写了Object类中的equals方法。\n    boolean equals(str);\n6. 判断内容是否相同，并忽略大小写。\n    boolean equalsIgnoreCase();\n</code></pre><h4 id=\"3-转换。\"><a href=\"#3-转换。\" class=\"headerlink\" title=\"3.转换。\"></a>3.转换。</h4><pre><code>1. 将字符数组转成字符串。\n    构造函数：String(char[])\n              String(char[],offset,count):将字符数组中的一部分转成字符串。\n\n    静态方法：\n            static String copyValueOf(char[]);\n            static String copyValueOf(char[] data, int offset, int count)\n\n            static String valueOf(char[]):\n\n\n2. 将字符串转成字符数组。**\n    char[] toCharArray():\n\n3. 将字节数组转成字符串。\n        String(byte[])\n        String(byte[],offset,count):将字节数组中的一部分转成字符串。\n\n4. 将字符串转成字节数组。\n        byte[]  getBytes():\n5. 将基本数据类型转成字符串。\n    static String valueOf(int)\n    static String valueOf(double)\n\n    //3+&quot;&quot;;//String.valueOf(3);\n\n    特殊：字符串和字节数组在转换过程中，是可以指定编码表的。\n</code></pre><h4 id=\"4-替换\"><a href=\"#4-替换\" class=\"headerlink\" title=\"4.替换\"></a>4.替换</h4><pre><code>String replace(oldchar,newchar);\n</code></pre><h4 id=\"5-切割\"><a href=\"#5-切割\" class=\"headerlink\" title=\"5.切割\"></a>5.切割</h4><pre><code>String[] split(regex);\n</code></pre><h4 id=\"6-子串。获取字符串中的一部分。\"><a href=\"#6-子串。获取字符串中的一部分。\" class=\"headerlink\" title=\"6.子串。获取字符串中的一部分。\"></a>6.子串。获取字符串中的一部分。</h4><pre><code>String substring(begin);\nString substring(begin,end);\n</code></pre><h4 id=\"7-转换，去除空格，比较。\"><a href=\"#7-转换，去除空格，比较。\" class=\"headerlink\" title=\"7.转换，去除空格，比较。\"></a>7.转换，去除空格，比较。</h4><pre><code>1. 将字符串转成大写或则小写。\n     String toUpperCase();\n     String toLowerCase();\n\n2. 将字符串两端的多个空格去除。\n    String trim();\n\n3. 对两个字符串进行自然顺序的比较。\n    int compareTo(string);\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StringMethodDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_7</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"    Hello Java     \"</span>;</span><br><span class=\"line\">\t\tsop(s.toLowerCase());</span><br><span class=\"line\">\t\tsop(s.toUpperCase());</span><br><span class=\"line\">\t\tsop(s.trim());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s1 = <span class=\"string\">\"a1c\"</span>;</span><br><span class=\"line\">\t\tString s2 = <span class=\"string\">\"aaa\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(s1.compareTo(s2));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_sub</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"abcdef\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(s.substring(<span class=\"number\">2</span>));<span class=\"comment\">//从指定位置开始到结尾。如果角标不存在，会出现字符串角标越界异常。</span></span><br><span class=\"line\">\t\tsop(s.substring(<span class=\"number\">2</span>,<span class=\"number\">4</span>));<span class=\"comment\">//包含头，不包含尾。s.substring(0,s.length());</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">method_split</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"zhagnsa,lisi,wangwu\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString[] arr  = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x&lt;arr.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(arr[x]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_replace</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"hello java\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//String s1 = s.replace('q','n');//如果要替换的字符不存在，返回的还是原串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s1 = s.replace(<span class=\"string\">\"java\"</span>,<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"s=\"</span>+s);</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"s1=\"</span>+s1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_trans</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] arr = &#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s= <span class=\"keyword\">new</span> String(arr,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"s=\"</span>+s);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString s1 = <span class=\"string\">\"zxcvbnm\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] chs = s1.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;chs.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(<span class=\"string\">\"ch=\"</span>+chs[x]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_is</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"ArrayDemo.java\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断文件名称是否是Array单词开头。</span></span><br><span class=\"line\">\t\tsop(str.startsWith(<span class=\"string\">\"Array\"</span>));</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断文件名称是否是.java的文件。</span></span><br><span class=\"line\">\t\tsop(str.endsWith(<span class=\"string\">\".java\"</span>));</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断文件中是否包含Demo</span></span><br><span class=\"line\">\t\tsop(str.contains(<span class=\"string\">\".java\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_get</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"abcdeakpf\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//长度</span></span><br><span class=\"line\">\t\tsop(str.length());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//根据索引获取字符。</span></span><br><span class=\"line\">\t\tsop(str.charAt(<span class=\"number\">4</span>));<span class=\"comment\">//当访问到字符串中不存在的角标时会发生StringIndexOutOfBoundsException。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//根据字符获取索引</span></span><br><span class=\"line\">\t\tsop(str.indexOf(<span class=\"string\">'m'</span>,<span class=\"number\">3</span>));<span class=\"comment\">//如果没有找到，返回-1.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//反向索引一个字符出现位置。</span></span><br><span class=\"line\">\t\tsop(str.lastIndexOf(<span class=\"string\">\"a\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tmethod_7();</span><br><span class=\"line\"><span class=\"comment\">//\t\tmethod_trans();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tmethod_is();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tmethod_get();</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s1 = \"abc\";</span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s2 = new String(\"abc\");</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\tString s3 = \"abc\";</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(s1==s2);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(s1==s3);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"String实战\"><a href=\"#String实战\" class=\"headerlink\" title=\"String实战\"></a>String实战</h2><h3 id=\"实战一\"><a href=\"#实战一\" class=\"headerlink\" title=\"实战一\"></a>实战一</h3><ul>\n<li>模拟一个trim方法，去除字符串两端的空格。<br>  思路：<ol>\n<li>判断字符串第一个位置是否是空格，如果是继续向下判断，直到不是空格为止。<br> 结尾处判断空格也是如此。</li>\n<li>当开始和结尾都判断到不是空格时，就是要获取的字符串。</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>将一个字符串进行反转。将字符串中指定部分进行反转，”abcdefg”;abfedcg<br>  思路：<ol>\n<li>曾经学习过对数组的元素进行反转。</li>\n<li>将字符串变成数组，对数组反转。</li>\n<li>将反转后的数组变成字符串。</li>\n<li>只要将或反转的部分的开始和结束位置作为参数传递即可。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"string\">\"      ab cd      \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"(\"</span>+s+<span class=\"string\">\")\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t\ts = myTrim(s);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(\"(\"+s+\")\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"(\"</span>+reverseString(s)+<span class=\"string\">\")\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//练习二：将字符串反转。</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t思路：</span></span><br><span class=\"line\"><span class=\"comment\">\t1，将字符串变成数组。</span></span><br><span class=\"line\"><span class=\"comment\">\t2，对数组反转。</span></span><br><span class=\"line\"><span class=\"comment\">\t3，将数组变成字符串。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">reverseString</span><span class=\"params\">(String s,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//字符串变数组。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] chs = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//反转数组。</span></span><br><span class=\"line\">\t\treverse(chs,start,end);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//将数组变成字符串。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(chs);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">reverseString</span><span class=\"params\">(String s)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> reverseString(s,<span class=\"number\">0</span>,s.length());</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> start=x,end=y-<span class=\"number\">1</span>; start&lt;end ; start++,end--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tswap(arr,start,end);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> temp = arr[x];</span><br><span class=\"line\">\t\tarr[x] = arr[y];</span><br><span class=\"line\">\t\tarr[y] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//练习一，去除字符串两端空格。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">myTrim</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>,end = str.length()-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(start&lt;=end &amp;&amp; str.charAt(start)==<span class=\"string\">' '</span>)</span><br><span class=\"line\">\t\t\tstart++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(start&lt;=end &amp;&amp; str.charAt(end)==<span class=\"string\">' '</span>)</span><br><span class=\"line\">\t\t\tend--;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.substring(start,end+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实战二\"><a href=\"#实战二\" class=\"headerlink\" title=\"实战二\"></a>实战二</h3><ul>\n<li>获取一个字符串在另一个字符串中出现的次数。<br>  “abkkcdkkefkkskk”</li>\n</ul>\n<pre><code>- 思路：\n1. 定义个计数器。\n2. 获取kk第一次出现的位置。\n3. 从第一次出现位置后剩余的字符串中继续获取kk出现的位置。\n    每获取一次就计数一次。\n4. 当获取不到时，计数完成。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StringTest2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t练习三。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSubCount</span><span class=\"params\">(String str,String key)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>((index=str.indexOf(key))!=-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(<span class=\"string\">\"str=\"</span>+str);</span><br><span class=\"line\">\t\t\tstr = str.substring(index+key.length());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t练习三，方式二。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSubCount_2</span><span class=\"params\">(String str,String key)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>((index= str.indexOf(key,index))!=-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(<span class=\"string\">\"index=\"</span>+index);</span><br><span class=\"line\">\t\t\tindex = index + key.length();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"kkabkkcdkkefkks\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">///sop(\"count=====\"+str.split(\"kk\").length);不建议使用。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"count=\"</span>+getSubCount_2(str,<span class=\"string\">\"kk\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实战三\"><a href=\"#实战三\" class=\"headerlink\" title=\"实战三\"></a>实战三</h3><ul>\n<li>获取两个字符串中最大相同子串。第一个动作：将短的那个串进行长度一次递减的子串打印。<br>  “abcwerthelloyuiodef”<br>  “cvhellobnm”<br>  思路：<pre><code>1. 将短的那个子串按照长度递减的方式获取到。\n2. 将每获取到的子串去长串中判断是否包含，\n    如果包含，已经找到。\n</code></pre></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">StringTest3</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t练习四。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMaxSubString</span><span class=\"params\">(String s1,String s2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString max = <span class=\"string\">\"\"</span>,min = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmax = (s1.length()&gt;s2.length())?s1: s2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmin = (max==s1)?s2: s1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//sop(\"max=\"+max+\"...min=\"+min);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;min.length(); x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y=<span class=\"number\">0</span>,z=min.length()-x; z!=min.length()+<span class=\"number\">1</span>; y++,z++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tString temp = min.substring(y,z);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tsop(temp);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(max.contains(temp))<span class=\"comment\">//if(s1.indexOf(temp)!=-1)</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString s1 = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">\t\tString s2 = <span class=\"string\">\"cvhellobnm\"</span>;</span><br><span class=\"line\">\t\tsop(getMaxSubString(s2,s1));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实战四\"><a href=\"#实战四\" class=\"headerlink\" title=\"实战四\"></a>实战四</h3><p>/*<br>对字符串中字符进行自然顺序排序。</p>\n<p>思路：<br>1，字符串变成字符数组。<br>2，对数组排序，选择，冒泡，Arrays.sort();<br>3，将排序后的数组变成字符串。<br>“vcz1bdAa+cs”–&gt;abccdsvz</p>\n<p><em>作业：<br>“12 0 99 -7 30 4 100 13”<br>要求对字符串中的数值进行排序。生成一个数值从小到大新字符串。<br>“-7 0 4 12 13 30 99 100”</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"12 0 99 -7 30 4 100 13\"</span>;</span><br><span class=\"line\">        System.out.println(sortString(str));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String  <span class=\"title\">sortString</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] string = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; integer = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; string.length; i ++) &#123;</span><br><span class=\"line\">            integer.add(Integer.parseInt(string[i]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(integer);</span><br><span class=\"line\">        String result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer integer1 : integer) &#123;</span><br><span class=\"line\">            result += integer1.toString() + <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"StringBuffer\"><a href=\"#StringBuffer\" class=\"headerlink\" title=\"StringBuffer\"></a>StringBuffer</h2><p>StringBuffer是字符串缓冲区。</p>\n<p>是一个容器。</p>\n<h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><ol>\n<li>长度是可变化的。</li>\n<li>可以字节操作多个数据类型。</li>\n<li>最终会通过toString方法变成字符串。</li>\n</ol>\n<p>C create U update R read D delete</p>\n<ol>\n<li>存储。<br> StringBuffer append():将指定数据作为参数添加到已有数据结尾处。<br> StringBuffer insert(index,数据):可以将数据插入到指定index位置。</li>\n</ol>\n<ol>\n<li><p>删除。<br> StringBuffer delete(start,end):删除缓冲区中的数据，包含start，不包含end。<br> StringBuffer deleteCharAt(index):删除指定位置的字符。</p>\n</li>\n<li><p>获取。<br> char charAt(int index)<br> int indexOf(String str)<br> int lastIndexOf(String str)<br> int length()<br> String substring(int start, int end)</p>\n</li>\n<li><p>修改。<br> StringBuffer replace(start,end,string);<br> void setCharAt(int index, char ch) ;</p>\n</li>\n</ol>\n<ol>\n<li><p>反转。<br> StringBuffer reverse();</p>\n</li>\n<li><p>将缓冲区中指定数据存储到指定字符数组中。<br> void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</p>\n</li>\n</ol>\n<h2 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h2><h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API:\"></a>API:</h3><p>`一个可变的字符序列。这个类提供了一个API兼容 StringBuffer，但无法保证同步。本课程是专为使用作为一个下降的替代 StringBuffer在地方的字符串缓冲区被一个线程使用（一般情况下）。在可能的情况下，建议优先使用这类 StringBuffer它将在大多数实现更快。<br>在StringBuilder的主营业务是append和insert方法的重载，以便接受任何数据类型。每个有效地将一个给定的数据到一个字符串，然后追加或插入字符串的字符的字符串生成器。的append方法总是说这些人物在生成器的结束；的insert方法添加字符在指定点。</p>\n<p>例如，如果z指字符串生成器对象的当前内容是“start”，然后调用方法z.append(“le”)会导致字符串生成器包含“startle”，而z.insert(4, “le”)会改变字符串生成器包含“starlet”。</p>\n<p>一般来说，如果某人是一个StringBuilder实例，然后sb.append(x)具有相同的效果sb.insert(sb.length(), x)。</p>\n<p>每一个字符串生成器都有一个容量。只要字符串生成器中包含的字符序列的长度不超过容量，就没有必要分配一个新的内部缓冲区。如果内部缓冲区溢出，则自动作出较大的。</p>\n<p>StringBuilder不安全的实例用于多个线程。如果需要同步然后建议StringBuffer可用。</p>\n<p>除非另有说明，通过null争论这类构造函数或方法会导致一个NullPointerException被。`</p>\n<p>JDK1.5 版本之后出现了StringBuilder.</p>\n<p><strong>StringBuffer是线程同步。<br>  StringBuilder是线程不同步。</strong></p>\n<font color=\"red\"><strong>以后开发，建议使用StringBuilder</strong></font>\n\n<p>Java升级的三个因素：</p>\n<ol>\n<li>提高效率。</li>\n<li>简化书写。</li>\n<li>提高安全性。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringBufferDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//method_update();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"abcdef\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] chs = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsb.getChars(<span class=\"number\">1</span>,<span class=\"number\">4</span>,chs,<span class=\"number\">1</span>);<span class=\"comment\">//将</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;chs.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(<span class=\"string\">\"chs[\"</span>+x+<span class=\"string\">\"]=\"</span>+chs[x]+<span class=\"string\">\";\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdraw(<span class=\"number\">3</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">\t\tdraw(<span class=\"number\">8</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\tStringBuilder sb1 = new StringBuilder();</span></span><br><span class=\"line\"><span class=\"comment\">//\tsb1.append(new Demo()).append(new Demo());</span></span><br><span class=\"line\"><span class=\"comment\">//\tsop(\"sb1=\"+sb1);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_update</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuffer sb  = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"abcde\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\tsb.replace(1,4,\"java\");</span></span><br><span class=\"line\">\t\tsb.setCharAt(<span class=\"number\">2</span>,<span class=\"string\">'k'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(sb.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_del</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuffer sb  = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"abcde\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tsb.delete(1,3);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//清空缓冲区。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//sb.delete(0,sb.length());</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//sb.delete(2,3);</span></span><br><span class=\"line\">\t\tsb.deleteCharAt(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(sb.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_add</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//sb.append(\"abc\").append(true).append(34);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tStringBuffer sb1 = sb.append(34);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(\"sb==sb1:\"+(sb==sb1));</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsb.insert(<span class=\"number\">1</span>,<span class=\"string\">\"qq\"</span>);</span><br><span class=\"line\">\t\tsop(sb.toString());<span class=\"comment\">//abctrue34</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//sop(sb1.toString());</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">int</span> row,<span class=\"keyword\">int</span> col)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;row; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y=<span class=\"number\">0</span>; y&lt;col; y++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tsb.append(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tsb.append(<span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(sb.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h2><p>/*<br>基本数据类型对象包装类。<br>| 引用类型 | 包装类型 |<br>|:—–:|:—–:|<br>| byte    | Byte  |<br>| short    | Short |<br>| int        | Integer |<br>| long    | Long |<br>| boolean | Boolean |<br>| float     | Float |<br>| double | Double |<br>| char     | Character |</p>\n<h3 id=\"基本数据类型对象包装类的最常见作用，\"><a href=\"#基本数据类型对象包装类的最常见作用，\" class=\"headerlink\" title=\"基本数据类型对象包装类的最常见作用，\"></a>基本数据类型对象包装类的最常见作用，</h3><p>  就是用于基本数据类型和字符串类型之间做转换</p>\n<ol>\n<li><p>基本数据类型转成字符串。</p>\n<p> 基本数据类型+””</p>\n<p> 基本数据类型.toString(基本数据类型值);</p>\n<p> 如： <code>Integer.toString(34);</code>//将34整数变成”34”;</p>\n</li>\n<li><p>字符串转成基本数据类型。</p>\n<p> `xxx a = Xxx.parseXxx(String);</p>\n<p> int a = Integer.parseInt(“123”);</p>\n<p> double b = Double.parseDouble(“12.23”);</p>\n<p> boolean b = Boolean.parseBoolean(“true”);</p>\n<p> Integer i = new Integer(“123”);</p>\n<p> int num = i.intValue();`</p>\n</li>\n<li><p>进制转换</p>\n<ul>\n<li>十进制转成其他进制。<br><code>toBinaryString();\ntoHexString();\ntoOctalString();</code></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>其他进制转成十进制。<br>  <code>parseInt(string,radix);</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//整数类型的最大值。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//sop(\"int max :\"+Integer.MAX_VALUE);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\t将一个字符串转成整数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = Integer.parseInt(<span class=\"string\">\"123\"</span>);<span class=\"comment\">//必须传入数字格式的字符串。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//long x = Long.parseLong(\"123\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(\"num=\"+(num+4));</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(Integer.toBinaryString(-6));</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tsop(Integer.toHexString(60));</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = Integer.parseInt(<span class=\"string\">\"3c\"</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"x=\"</span>+x);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Integer常用方法\"><a href=\"#Integer常用方法\" class=\"headerlink\" title=\"Integer常用方法\"></a>Integer常用方法</h3><p>/*<br>JDK1.5版本以后出现的新特性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerDemo1</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tInteger x = new Integer(4);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInteger x = <span class=\"number\">4</span>;<span class=\"comment\">//自动装箱。//new Integer(4)</span></span><br><span class=\"line\">\t\tx = x<span class=\"comment\">/* x.intValue() */</span> + <span class=\"number\">2</span>;<span class=\"comment\">//x+2:x 进行自动拆箱。变成成了int类型。和2进行加法运算。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//再将和进行装箱赋给x。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInteger m = <span class=\"number\">128</span>;</span><br><span class=\"line\">\t\tInteger n = <span class=\"number\">128</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"m==n:\"</span>+(m==n));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInteger a = <span class=\"number\">127</span>;</span><br><span class=\"line\">\t\tInteger b = <span class=\"number\">127</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"a==b:\"</span>+(a==b));<span class=\"comment\">//结果为true。因为a和b指向了同一个Integer对象。</span></span><br><span class=\"line\">\t   <span class=\"comment\">//因为当数值在byte范围内容，对于新特性，如果该数值已经存在，则不会在开辟新的空间。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tInteger x = <span class=\"keyword\">new</span> Integer(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInteger y = <span class=\"keyword\">new</span> Integer(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"x==y:\"</span>+(x==y));</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"x.equals(y):\"</span>+x.equals(y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Demo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object str)</span><span class=\"comment\">//Object str = new Integer(4);</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t\tint[] arr = &#123;3,1,5,8,23,9&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(toString_2(arr));</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toString_2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;arr.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x!=arr.length-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\tsb.append(arr[x]+<span class=\"string\">\", \"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tsb.append(arr[x]+<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  sb.toString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toString</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"[\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;arr.length; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x!=arr.length-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\tstr += arr[x]+<span class=\"string\">\", \"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tstr += arr[x]+<span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaReview-day14-集合框架[1]","date":"2018-01-22T09:39:21.000Z","type":["JavaReview"],"_content":"\n# 集合框架\n\n## 集合框架图\n![](/images/post_images/20180122-Collection.jpg)\n![](/images/post_images/20180122-Collection-simple.jpg)\n\n## Collection\n\nCollection定义了集合框架的共性功能。\n1. 添加\n\tadd(e);\n\taddAll(collection);\n\n2. 删除\n\tremove(e);\n\tremoveAll(collection);\n\tclear();\n\n3. 判断。\n\tcontains(e);\n\tisEmpty();\n\n4. 获取\n\titerator();\n\tsize();\n\n5. 获取交集。\n\tretainAll();\n\n6. 集合变数组。\n\ttoArray();\n\n\n\n- add方法的参数类型是Object。以便于接收任意类型对象。\n\n-  集合中存储的都是对象的引用(地址)\n\n\n**什么是迭代器呢？**\n其实就是集合的取出元素的方式。\n如同抓娃娃游戏机中的夹子。\n\n迭代器是取出方式，会直接访问集合中的元素。\n所以将迭代器通过内部类的形式来进行描述。\n通过容器的iterator()方法获取该内部类的对象。\n\n\n\n\n\n\n\n```java\nimport java.util.*;\n\nclass  CollectionDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tmethod_get();\n\t}\n\tpublic static void method_get()\n\t{\n\t\tArrayList al = new ArrayList();\n\t\t//1，添加元素。\n\t\tal.add(\"java01\");//add(Object obj);\n\t\tal.add(\"java02\");\n\t\tal.add(\"java03\");\n\t\tal.add(\"java04\");\n\t\t/*\n\t\tIterator it = al.iterator();//获取迭代器，用于取出集合中的元素。\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tsop(it.next());\n\t\t}\n\t\t*/\n\t\tfor(Iterator it = al.iterator(); it.hasNext() ; )\n\t\t{\n\t\t\tsop(it.next());\n\t\t}\n\t}\n\n\tpublic static void method_2()\n\t{\n\t\tArrayList al1 = new ArrayList();\n\n\t\tal1.add(\"java01\");\n\t\tal1.add(\"java02\");\n\t\tal1.add(\"java03\");\n\t\tal1.add(\"java04\");\n\t\tArrayList al2 = new ArrayList();\n\n\t\tal2.add(\"java03\");\n\t\tal2.add(\"java04\");\n\t\tal2.add(\"java05\");\n\t\tal2.add(\"java06\");\n\n\t\t//al1.retainAll(al2);//去交集，al1中只会保留和al2中相同的元素。\n\t\tal1.removeAll(al2);\n\t\tsop(\"al1:\"+al1);\n\t\tsop(\"al2:\"+al2);\n\n\t}\n\n\tpublic static void base_method()\n\t{\n\t\t//创建一个集合容器。使用Collection接口的子类。ArrayList\n\t\tArrayList al = new ArrayList();\n\n\t\t//1，添加元素。\n\t\tal.add(\"java01\");//add(Object obj);\n\t\tal.add(\"java02\");\n\t\tal.add(\"java03\");\n\t\tal.add(\"java04\");\n\n\t\t//打印原集合。\n\t\tsop(\"原集合:\"+al);\n\n\t\t//3，删除元素。\n\t\t//al.remove(\"java02\");\n\t\t//al.clear();//清空集合。\n\n\t\t//4，判断元素。\n\t\tsop(\"java03是否存在:\"+al.contains(\"java03\"));\n\t\tsop(\"集合是否为空？\"+al.isEmpty());\n\n\t\t//2，获取个数。集合长度。\n\t\tsop(\"size:\"+al.size());\n\n\t\t//打印改变后的集合。\n\t\tsop(al);\n\n\t}\n\n\tpublic static void sop(Object obj)\n\t{\n\t\tSystem.out.println(obj);\n\t}\n}\n```\n\n## List\n\n### Vector\n\n枚举就是Vector特有的取出方式。\n发现枚举和迭代器很像。\n其实枚举和迭代是一样的。\n\n因为枚举的名称以及方法的名称都过长。\n所以被迭代器取代了。\n枚举郁郁而终了。\n\n```java\n\nimport java.util.*;\n\nclass VectorDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tVector v = new Vector();\n\n\t\tv.add(\"java01\");\n\t\tv.add(\"java02\");\n\t\tv.add(\"java03\");\n\t\tv.add(\"java04\");\n\n\t\tEnumeration en = v.elements();\n\n\t\twhile(en.hasMoreElements())\n\t\t{\n\t\t\tSystem.out.println(en.nextElement());\n\t\t}\n\t}\n}\n```\n\n\n### LinkedList\n\n使用LinkedList模拟一个堆栈或者队列数据结构。\n\n堆栈：先进后出  如同一个杯子。\n队列：先进先出 First in First out  FIFO 如同一个水管。\n\n```java\nimport java.util.*;\nclass DuiLie\n{\n\tprivate LinkedList link;\n\n\tDuiLie()\n\t{\n\t\tlink = new LinkedList();\n\t}\n\n\tpublic void myAdd(Object obj)\n\t{\n\t\tlink.addFirst(obj);\n\t}\n\tpublic Object myGet()\n\t{\n\t\treturn link.removeFirst();\n\t}\n\tpublic boolean isNull()\n\t{\n\t\treturn link.isEmpty();\n\t}\n\n}\n\n\n\nclass  LinkedListTest\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tDuiLie dl = new DuiLie();\n\t\tdl.myAdd(\"java01\");\n\t\tdl.myAdd(\"java02\");\n\t\tdl.myAdd(\"java03\");\n\t\tdl.myAdd(\"java04\");\n\n\t\twhile(!dl.isNull())\n\t\t{\n\t\t\tSystem.out.println(dl.myGet());\n\t\t}\n\t}\n}\n```\n\n### ArrayList\n\n```java\nimport java.util.*;\n/*\n去除ArrayList集合中的重复元素。\n*/\nclass ArrayListTest\n{\n\tpublic static void sop(Object obj)\n\t{\n\t\tSystem.out.println(obj);\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tArrayList al = new ArrayList();\n\n\t\tal.add(\"java01\");\n\t\tal.add(\"java02\");\n\t\tal.add(\"java01\");\n\t\tal.add(\"java02\");\n\t\tal.add(\"java01\");\n    //al.add(\"java03\");\n\t\t/*\n\t\t在迭代时循环中next调用一次，就要hasNext判断一次。\n\t\tIterator it = al.iterator();\n\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tsop(it.next()+\"....\"+it.next());\n\t\t}\n\t\t*/\n\n\t\tsop(al);\n\t\tal = singleElement(al);\n\t\tsop(al);\n\t}\n\n\tpublic static ArrayList singleElement(ArrayList al)\n\t{\n\t\t//定义一个临时容器。\n\t\tArrayList newAl = new ArrayList();\n\n\t\tIterator it = al.iterator();\n\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tObject obj = it.next();\n\n\t\t\tif(!newAl.contains(obj))\n\t\t\t\tnewAl.add(obj);\n\t\t}\n\t\treturn newAl;\n\t}\n}\n```\n\n### ArrayList练习:\n\n将自定义对象作为元素存到ArrayList集合中，并去除重复元素。\n比如：存人对象。同姓名同年龄，视为同一个人。为重复元素。\n\n\n思路:\n1. 对人描述，将数据封装进人对象。\n2. 定义容器，将人存入。\n3. 取出。\n\n\n\nList集合判断元素是否相同，依据是元素的equals方法。\n\n```java\n\nimport java.util.*;\nclass Person\n{\n\tprivate String name;\n\tprivate int age;\n\tPerson(String name,int age)\n\t{\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\n\tpublic boolean equals(Object obj)\n\t{\n\n\t\tif(!(obj instanceof Person))\n\t\t\treturn false;\n\n\t\tPerson p = (Person)obj;\n\t\t//System.out.println(this.name+\".....\"+p.name);\n\n\t\treturn this.name.equals(p.name) && this.age == p.age;\n\t}\n\n\tpublic String getName()\n\t{\n\t\treturn name;\n\t}\n\tpublic int getAge()\n\t{\n\t\treturn age;\n\t}\n}\nclass ArrayListTest2\n{\n\tpublic static void sop(Object obj)\n\t{\n\t\tSystem.out.println(obj);\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tArrayList al = new ArrayList();\n\n\t\tal.add(new Demo());\n\n\t\tal.add(new Person(\"lisi01\",30));//al.add(Object obj);//Object obj = new Person(\"lisi01\",30);\n\t\t//al.add(new Person(\"lisi02\",32));\n\t\tal.add(new Person(\"lisi02\",32));\n\t\tal.add(new Person(\"lisi04\",35));\n\t\tal.add(new Person(\"lisi03\",33));\n\t\t//al.add(new Person(\"lisi04\",35));\n\n\n\t\t//al = singleElement(al);\n\n\t\tsop(\"remove 03 :\"+al.remove(new Person(\"lisi03\",33)));//remove方法底层也是依赖于元素的equals方法。\n\n\n\t\tIterator it = al.iterator();\n\n\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tPerson p = (Person)it.next();\n\t\t\tsop(p.getName()+\"::\"+p.getAge());\n\t\t}\n\t}\n\n\n\tpublic static ArrayList singleElement(ArrayList al)\n\t{\n\t\t//定义一个临时容器。\n\t\tArrayList newAl = new ArrayList();\n\n\t\tIterator it = al.iterator();\n\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tObject obj = it.next();\n\n\t\t\tif(!newAl.contains(obj))\n\t\t\t\tnewAl.add(obj);\n\n\t\t}\n\n\t\treturn newAl;\n\t}\n}\n```\n\n### 练习2\n\n对字符串排序。\n\"zxcvbasdfg\"\n思路：\n1. 字符串变数组。\n2. 数组排序。\n3. 数组变字符串。\n\n```java\nimport java.util.*;\nclass  Test\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tString str = \"zxcvbasdfg\";\n\n//\t\tchar[] arr = str.toCharArray();\n//\t\tArrays.sort(arr);\n//\t\tSystem.out.println(new String(arr));\n//\t\tstr = sortString(str);\n//\t\tSystem.out.println(str);\n\t}\n\n\tpublic static String sortString(String str)\n\t{\n\t\tchar[] arr = stringToArray(str);\n\n\t\tsort(arr);\n\n\t\treturn arrayToString(arr);\n\t}\n\n\tprivate static char[] stringToArray(String str)\n\t{\n\t\treturn str.toCharArray();\n\t}\n\n\tprivate static void sort(char[] arr)\n\t{\n\t\tfor(int x=0; x<arr.length-1; x++)\n\t\t{\n\t\t\tfor(int y=x+1; y<arr.length; y++)\n\t\t\t{\n\t\t\t\tif(arr[x]>arr[y])\n\t\t\t\t{\n\t\t\t\t\tswap(arr,x,y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprivate static void swap(char[] arr,int x,int y)\n\t{\n\t\tchar temp = arr[x];\n\t\tarr[x] = arr[y];\n\t\tarr[y] = temp;\n\t}\n\n\tprivate static String arrayToString(char[] arr)\n\t{\n\t\treturn new String(arr);\n\t}\n}\n```\n","source":"_posts/JavaReview-day14-集合框架[1].md","raw":"---\ntitle: JavaReview-day14-集合框架[1]\ndate: 2018-01-22 17:39:21\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n# 集合框架\n\n## 集合框架图\n![](/images/post_images/20180122-Collection.jpg)\n![](/images/post_images/20180122-Collection-simple.jpg)\n\n## Collection\n\nCollection定义了集合框架的共性功能。\n1. 添加\n\tadd(e);\n\taddAll(collection);\n\n2. 删除\n\tremove(e);\n\tremoveAll(collection);\n\tclear();\n\n3. 判断。\n\tcontains(e);\n\tisEmpty();\n\n4. 获取\n\titerator();\n\tsize();\n\n5. 获取交集。\n\tretainAll();\n\n6. 集合变数组。\n\ttoArray();\n\n\n\n- add方法的参数类型是Object。以便于接收任意类型对象。\n\n-  集合中存储的都是对象的引用(地址)\n\n\n**什么是迭代器呢？**\n其实就是集合的取出元素的方式。\n如同抓娃娃游戏机中的夹子。\n\n迭代器是取出方式，会直接访问集合中的元素。\n所以将迭代器通过内部类的形式来进行描述。\n通过容器的iterator()方法获取该内部类的对象。\n\n\n\n\n\n\n\n```java\nimport java.util.*;\n\nclass  CollectionDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tmethod_get();\n\t}\n\tpublic static void method_get()\n\t{\n\t\tArrayList al = new ArrayList();\n\t\t//1，添加元素。\n\t\tal.add(\"java01\");//add(Object obj);\n\t\tal.add(\"java02\");\n\t\tal.add(\"java03\");\n\t\tal.add(\"java04\");\n\t\t/*\n\t\tIterator it = al.iterator();//获取迭代器，用于取出集合中的元素。\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tsop(it.next());\n\t\t}\n\t\t*/\n\t\tfor(Iterator it = al.iterator(); it.hasNext() ; )\n\t\t{\n\t\t\tsop(it.next());\n\t\t}\n\t}\n\n\tpublic static void method_2()\n\t{\n\t\tArrayList al1 = new ArrayList();\n\n\t\tal1.add(\"java01\");\n\t\tal1.add(\"java02\");\n\t\tal1.add(\"java03\");\n\t\tal1.add(\"java04\");\n\t\tArrayList al2 = new ArrayList();\n\n\t\tal2.add(\"java03\");\n\t\tal2.add(\"java04\");\n\t\tal2.add(\"java05\");\n\t\tal2.add(\"java06\");\n\n\t\t//al1.retainAll(al2);//去交集，al1中只会保留和al2中相同的元素。\n\t\tal1.removeAll(al2);\n\t\tsop(\"al1:\"+al1);\n\t\tsop(\"al2:\"+al2);\n\n\t}\n\n\tpublic static void base_method()\n\t{\n\t\t//创建一个集合容器。使用Collection接口的子类。ArrayList\n\t\tArrayList al = new ArrayList();\n\n\t\t//1，添加元素。\n\t\tal.add(\"java01\");//add(Object obj);\n\t\tal.add(\"java02\");\n\t\tal.add(\"java03\");\n\t\tal.add(\"java04\");\n\n\t\t//打印原集合。\n\t\tsop(\"原集合:\"+al);\n\n\t\t//3，删除元素。\n\t\t//al.remove(\"java02\");\n\t\t//al.clear();//清空集合。\n\n\t\t//4，判断元素。\n\t\tsop(\"java03是否存在:\"+al.contains(\"java03\"));\n\t\tsop(\"集合是否为空？\"+al.isEmpty());\n\n\t\t//2，获取个数。集合长度。\n\t\tsop(\"size:\"+al.size());\n\n\t\t//打印改变后的集合。\n\t\tsop(al);\n\n\t}\n\n\tpublic static void sop(Object obj)\n\t{\n\t\tSystem.out.println(obj);\n\t}\n}\n```\n\n## List\n\n### Vector\n\n枚举就是Vector特有的取出方式。\n发现枚举和迭代器很像。\n其实枚举和迭代是一样的。\n\n因为枚举的名称以及方法的名称都过长。\n所以被迭代器取代了。\n枚举郁郁而终了。\n\n```java\n\nimport java.util.*;\n\nclass VectorDemo\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tVector v = new Vector();\n\n\t\tv.add(\"java01\");\n\t\tv.add(\"java02\");\n\t\tv.add(\"java03\");\n\t\tv.add(\"java04\");\n\n\t\tEnumeration en = v.elements();\n\n\t\twhile(en.hasMoreElements())\n\t\t{\n\t\t\tSystem.out.println(en.nextElement());\n\t\t}\n\t}\n}\n```\n\n\n### LinkedList\n\n使用LinkedList模拟一个堆栈或者队列数据结构。\n\n堆栈：先进后出  如同一个杯子。\n队列：先进先出 First in First out  FIFO 如同一个水管。\n\n```java\nimport java.util.*;\nclass DuiLie\n{\n\tprivate LinkedList link;\n\n\tDuiLie()\n\t{\n\t\tlink = new LinkedList();\n\t}\n\n\tpublic void myAdd(Object obj)\n\t{\n\t\tlink.addFirst(obj);\n\t}\n\tpublic Object myGet()\n\t{\n\t\treturn link.removeFirst();\n\t}\n\tpublic boolean isNull()\n\t{\n\t\treturn link.isEmpty();\n\t}\n\n}\n\n\n\nclass  LinkedListTest\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tDuiLie dl = new DuiLie();\n\t\tdl.myAdd(\"java01\");\n\t\tdl.myAdd(\"java02\");\n\t\tdl.myAdd(\"java03\");\n\t\tdl.myAdd(\"java04\");\n\n\t\twhile(!dl.isNull())\n\t\t{\n\t\t\tSystem.out.println(dl.myGet());\n\t\t}\n\t}\n}\n```\n\n### ArrayList\n\n```java\nimport java.util.*;\n/*\n去除ArrayList集合中的重复元素。\n*/\nclass ArrayListTest\n{\n\tpublic static void sop(Object obj)\n\t{\n\t\tSystem.out.println(obj);\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tArrayList al = new ArrayList();\n\n\t\tal.add(\"java01\");\n\t\tal.add(\"java02\");\n\t\tal.add(\"java01\");\n\t\tal.add(\"java02\");\n\t\tal.add(\"java01\");\n    //al.add(\"java03\");\n\t\t/*\n\t\t在迭代时循环中next调用一次，就要hasNext判断一次。\n\t\tIterator it = al.iterator();\n\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tsop(it.next()+\"....\"+it.next());\n\t\t}\n\t\t*/\n\n\t\tsop(al);\n\t\tal = singleElement(al);\n\t\tsop(al);\n\t}\n\n\tpublic static ArrayList singleElement(ArrayList al)\n\t{\n\t\t//定义一个临时容器。\n\t\tArrayList newAl = new ArrayList();\n\n\t\tIterator it = al.iterator();\n\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tObject obj = it.next();\n\n\t\t\tif(!newAl.contains(obj))\n\t\t\t\tnewAl.add(obj);\n\t\t}\n\t\treturn newAl;\n\t}\n}\n```\n\n### ArrayList练习:\n\n将自定义对象作为元素存到ArrayList集合中，并去除重复元素。\n比如：存人对象。同姓名同年龄，视为同一个人。为重复元素。\n\n\n思路:\n1. 对人描述，将数据封装进人对象。\n2. 定义容器，将人存入。\n3. 取出。\n\n\n\nList集合判断元素是否相同，依据是元素的equals方法。\n\n```java\n\nimport java.util.*;\nclass Person\n{\n\tprivate String name;\n\tprivate int age;\n\tPerson(String name,int age)\n\t{\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\n\tpublic boolean equals(Object obj)\n\t{\n\n\t\tif(!(obj instanceof Person))\n\t\t\treturn false;\n\n\t\tPerson p = (Person)obj;\n\t\t//System.out.println(this.name+\".....\"+p.name);\n\n\t\treturn this.name.equals(p.name) && this.age == p.age;\n\t}\n\n\tpublic String getName()\n\t{\n\t\treturn name;\n\t}\n\tpublic int getAge()\n\t{\n\t\treturn age;\n\t}\n}\nclass ArrayListTest2\n{\n\tpublic static void sop(Object obj)\n\t{\n\t\tSystem.out.println(obj);\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tArrayList al = new ArrayList();\n\n\t\tal.add(new Demo());\n\n\t\tal.add(new Person(\"lisi01\",30));//al.add(Object obj);//Object obj = new Person(\"lisi01\",30);\n\t\t//al.add(new Person(\"lisi02\",32));\n\t\tal.add(new Person(\"lisi02\",32));\n\t\tal.add(new Person(\"lisi04\",35));\n\t\tal.add(new Person(\"lisi03\",33));\n\t\t//al.add(new Person(\"lisi04\",35));\n\n\n\t\t//al = singleElement(al);\n\n\t\tsop(\"remove 03 :\"+al.remove(new Person(\"lisi03\",33)));//remove方法底层也是依赖于元素的equals方法。\n\n\n\t\tIterator it = al.iterator();\n\n\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tPerson p = (Person)it.next();\n\t\t\tsop(p.getName()+\"::\"+p.getAge());\n\t\t}\n\t}\n\n\n\tpublic static ArrayList singleElement(ArrayList al)\n\t{\n\t\t//定义一个临时容器。\n\t\tArrayList newAl = new ArrayList();\n\n\t\tIterator it = al.iterator();\n\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tObject obj = it.next();\n\n\t\t\tif(!newAl.contains(obj))\n\t\t\t\tnewAl.add(obj);\n\n\t\t}\n\n\t\treturn newAl;\n\t}\n}\n```\n\n### 练习2\n\n对字符串排序。\n\"zxcvbasdfg\"\n思路：\n1. 字符串变数组。\n2. 数组排序。\n3. 数组变字符串。\n\n```java\nimport java.util.*;\nclass  Test\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tString str = \"zxcvbasdfg\";\n\n//\t\tchar[] arr = str.toCharArray();\n//\t\tArrays.sort(arr);\n//\t\tSystem.out.println(new String(arr));\n//\t\tstr = sortString(str);\n//\t\tSystem.out.println(str);\n\t}\n\n\tpublic static String sortString(String str)\n\t{\n\t\tchar[] arr = stringToArray(str);\n\n\t\tsort(arr);\n\n\t\treturn arrayToString(arr);\n\t}\n\n\tprivate static char[] stringToArray(String str)\n\t{\n\t\treturn str.toCharArray();\n\t}\n\n\tprivate static void sort(char[] arr)\n\t{\n\t\tfor(int x=0; x<arr.length-1; x++)\n\t\t{\n\t\t\tfor(int y=x+1; y<arr.length; y++)\n\t\t\t{\n\t\t\t\tif(arr[x]>arr[y])\n\t\t\t\t{\n\t\t\t\t\tswap(arr,x,y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprivate static void swap(char[] arr,int x,int y)\n\t{\n\t\tchar temp = arr[x];\n\t\tarr[x] = arr[y];\n\t\tarr[y] = temp;\n\t}\n\n\tprivate static String arrayToString(char[] arr)\n\t{\n\t\treturn new String(arr);\n\t}\n}\n```\n","slug":"JavaReview-day14-集合框架[1]","published":1,"updated":"2018-01-28T09:44:57.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m062000yq8kxwo5e1bk9","content":"<h1 id=\"集合框架\"><a href=\"#集合框架\" class=\"headerlink\" title=\"集合框架\"></a>集合框架</h1><h2 id=\"集合框架图\"><a href=\"#集合框架图\" class=\"headerlink\" title=\"集合框架图\"></a>集合框架图</h2><p><img src=\"/images/post_images/20180122-Collection.jpg\" alt=\"\"><br><img src=\"/images/post_images/20180122-Collection-simple.jpg\" alt=\"\"></p>\n<h2 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h2><p>Collection定义了集合框架的共性功能。</p>\n<ol>\n<li><p>添加<br> add(e);<br> addAll(collection);</p>\n</li>\n<li><p>删除<br> remove(e);<br> removeAll(collection);<br> clear();</p>\n</li>\n<li><p>判断。<br> contains(e);<br> isEmpty();</p>\n</li>\n<li><p>获取<br> iterator();<br> size();</p>\n</li>\n<li><p>获取交集。<br> retainAll();</p>\n</li>\n<li><p>集合变数组。<br> toArray();</p>\n</li>\n</ol>\n<ul>\n<li><p>add方法的参数类型是Object。以便于接收任意类型对象。</p>\n</li>\n<li><p>集合中存储的都是对象的引用(地址)</p>\n</li>\n</ul>\n<p><strong>什么是迭代器呢？</strong><br>其实就是集合的取出元素的方式。<br>如同抓娃娃游戏机中的夹子。</p>\n<p>迭代器是取出方式，会直接访问集合中的元素。<br>所以将迭代器通过内部类的形式来进行描述。<br>通过容器的iterator()方法获取该内部类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">CollectionDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tmethod_get();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_get</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList al = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">\t\t<span class=\"comment\">//1，添加元素。</span></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);<span class=\"comment\">//add(Object obj);</span></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tIterator it = al.iterator();//获取迭代器，用于取出集合中的元素。</span></span><br><span class=\"line\"><span class=\"comment\">\t\twhile(it.hasNext())</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tsop(it.next());</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Iterator it = al.iterator(); it.hasNext() ; )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(it.next());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList al1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal1.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tal1.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal1.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tal1.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\">\t\tArrayList al2 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal2.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tal2.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\">\t\tal2.add(<span class=\"string\">\"java05\"</span>);</span><br><span class=\"line\">\t\tal2.add(<span class=\"string\">\"java06\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//al1.retainAll(al2);//去交集，al1中只会保留和al2中相同的元素。</span></span><br><span class=\"line\">\t\tal1.removeAll(al2);</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"al1:\"</span>+al1);</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"al2:\"</span>+al2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">base_method</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个集合容器。使用Collection接口的子类。ArrayList</span></span><br><span class=\"line\">\t\tArrayList al = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//1，添加元素。</span></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);<span class=\"comment\">//add(Object obj);</span></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//打印原集合。</span></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"原集合:\"</span>+al);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//3，删除元素。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//al.remove(\"java02\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//al.clear();//清空集合。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//4，判断元素。</span></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"java03是否存在:\"</span>+al.contains(<span class=\"string\">\"java03\"</span>));</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"集合是否为空？\"</span>+al.isEmpty());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//2，获取个数。集合长度。</span></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"size:\"</span>+al.size());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//打印改变后的集合。</span></span><br><span class=\"line\">\t\tsop(al);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>枚举就是Vector特有的取出方式。<br>发现枚举和迭代器很像。<br>其实枚举和迭代是一样的。</p>\n<p>因为枚举的名称以及方法的名称都过长。<br>所以被迭代器取代了。<br>枚举郁郁而终了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VectorDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tVector v = <span class=\"keyword\">new</span> Vector();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tv.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tv.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tv.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tv.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tEnumeration en = v.elements();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(en.hasMoreElements())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(en.nextElement());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3><p>使用LinkedList模拟一个堆栈或者队列数据结构。</p>\n<p>堆栈：先进后出  如同一个杯子。<br>队列：先进先出 First in First out  FIFO 如同一个水管。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DuiLie</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> LinkedList link;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDuiLie()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlink = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">myAdd</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tlink.addFirst(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">myGet</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> link.removeFirst();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> link.isEmpty();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">LinkedListTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDuiLie dl = <span class=\"keyword\">new</span> DuiLie();</span><br><span class=\"line\">\t\tdl.myAdd(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tdl.myAdd(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tdl.myAdd(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tdl.myAdd(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!dl.isNull())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(dl.myGet());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">去除ArrayList集合中的重复元素。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayListTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList al = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//al.add(\"java03\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t在迭代时循环中next调用一次，就要hasNext判断一次。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tIterator it = al.iterator();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\twhile(it.hasNext())</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tsop(it.next()+\"....\"+it.next());</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(al);</span><br><span class=\"line\">\t\tal = singleElement(al);</span><br><span class=\"line\">\t\tsop(al);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList <span class=\"title\">singleElement</span><span class=\"params\">(ArrayList al)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个临时容器。</span></span><br><span class=\"line\">\t\tArrayList newAl = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tIterator it = al.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tObject obj = it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!newAl.contains(obj))</span><br><span class=\"line\">\t\t\t\tnewAl.add(obj);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newAl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ArrayList练习\"><a href=\"#ArrayList练习\" class=\"headerlink\" title=\"ArrayList练习:\"></a>ArrayList练习:</h3><p>将自定义对象作为元素存到ArrayList集合中，并去除重复元素。<br>比如：存人对象。同姓名同年龄，视为同一个人。为重复元素。</p>\n<p>思路:</p>\n<ol>\n<li>对人描述，将数据封装进人对象。</li>\n<li>定义容器，将人存入。</li>\n<li>取出。</li>\n</ol>\n<p>List集合判断元素是否相同，依据是元素的equals方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tPerson(String name,<span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!(obj <span class=\"keyword\">instanceof</span> Person))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPerson p = (Person)obj;</span><br><span class=\"line\">\t\t<span class=\"comment\">//System.out.println(this.name+\".....\"+p.name);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name.equals(p.name) &amp;&amp; <span class=\"keyword\">this</span>.age == p.age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayListTest2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList al = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Demo());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi01\"</span>,<span class=\"number\">30</span>));<span class=\"comment\">//al.add(Object obj);//Object obj = new Person(\"lisi01\",30);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//al.add(new Person(\"lisi02\",32));</span></span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi02\"</span>,<span class=\"number\">32</span>));</span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi04\"</span>,<span class=\"number\">35</span>));</span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi03\"</span>,<span class=\"number\">33</span>));</span><br><span class=\"line\">\t\t<span class=\"comment\">//al.add(new Person(\"lisi04\",35));</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//al = singleElement(al);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"remove 03 :\"</span>+al.remove(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi03\"</span>,<span class=\"number\">33</span>)));<span class=\"comment\">//remove方法底层也是依赖于元素的equals方法。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tIterator it = al.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tPerson p = (Person)it.next();</span><br><span class=\"line\">\t\t\tsop(p.getName()+<span class=\"string\">\"::\"</span>+p.getAge());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList <span class=\"title\">singleElement</span><span class=\"params\">(ArrayList al)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个临时容器。</span></span><br><span class=\"line\">\t\tArrayList newAl = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tIterator it = al.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tObject obj = it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!newAl.contains(obj))</span><br><span class=\"line\">\t\t\t\tnewAl.add(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newAl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"练习2\"><a href=\"#练习2\" class=\"headerlink\" title=\"练习2\"></a>练习2</h3><p>对字符串排序。<br>“zxcvbasdfg”<br>思路：</p>\n<ol>\n<li>字符串变数组。</li>\n<li>数组排序。</li>\n<li>数组变字符串。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"zxcvbasdfg\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tchar[] arr = str.toCharArray();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tArrays.sort(arr);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(new String(arr));</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tstr = sortString(str);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(str);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">sortString</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] arr = stringToArray(str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arrayToString(arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span>[] stringToArray(String str)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.toCharArray();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;arr.length-<span class=\"number\">1</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y=x+<span class=\"number\">1</span>; y&lt;arr.length; y++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(arr[x]&gt;arr[y])</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tswap(arr,x,y);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> temp = arr[x];</span><br><span class=\"line\">\t\tarr[x] = arr[y];</span><br><span class=\"line\">\t\tarr[y] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">arrayToString</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"集合框架\"><a href=\"#集合框架\" class=\"headerlink\" title=\"集合框架\"></a>集合框架</h1><h2 id=\"集合框架图\"><a href=\"#集合框架图\" class=\"headerlink\" title=\"集合框架图\"></a>集合框架图</h2><p><img src=\"/images/post_images/20180122-Collection.jpg\" alt=\"\"><br><img src=\"/images/post_images/20180122-Collection-simple.jpg\" alt=\"\"></p>\n<h2 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h2><p>Collection定义了集合框架的共性功能。</p>\n<ol>\n<li><p>添加<br> add(e);<br> addAll(collection);</p>\n</li>\n<li><p>删除<br> remove(e);<br> removeAll(collection);<br> clear();</p>\n</li>\n<li><p>判断。<br> contains(e);<br> isEmpty();</p>\n</li>\n<li><p>获取<br> iterator();<br> size();</p>\n</li>\n<li><p>获取交集。<br> retainAll();</p>\n</li>\n<li><p>集合变数组。<br> toArray();</p>\n</li>\n</ol>\n<ul>\n<li><p>add方法的参数类型是Object。以便于接收任意类型对象。</p>\n</li>\n<li><p>集合中存储的都是对象的引用(地址)</p>\n</li>\n</ul>\n<p><strong>什么是迭代器呢？</strong><br>其实就是集合的取出元素的方式。<br>如同抓娃娃游戏机中的夹子。</p>\n<p>迭代器是取出方式，会直接访问集合中的元素。<br>所以将迭代器通过内部类的形式来进行描述。<br>通过容器的iterator()方法获取该内部类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">CollectionDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tmethod_get();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_get</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList al = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">\t\t<span class=\"comment\">//1，添加元素。</span></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);<span class=\"comment\">//add(Object obj);</span></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tIterator it = al.iterator();//获取迭代器，用于取出集合中的元素。</span></span><br><span class=\"line\"><span class=\"comment\">\t\twhile(it.hasNext())</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tsop(it.next());</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Iterator it = al.iterator(); it.hasNext() ; )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsop(it.next());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method_2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList al1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal1.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tal1.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal1.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tal1.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\">\t\tArrayList al2 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal2.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tal2.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\">\t\tal2.add(<span class=\"string\">\"java05\"</span>);</span><br><span class=\"line\">\t\tal2.add(<span class=\"string\">\"java06\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//al1.retainAll(al2);//去交集，al1中只会保留和al2中相同的元素。</span></span><br><span class=\"line\">\t\tal1.removeAll(al2);</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"al1:\"</span>+al1);</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"al2:\"</span>+al2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">base_method</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个集合容器。使用Collection接口的子类。ArrayList</span></span><br><span class=\"line\">\t\tArrayList al = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//1，添加元素。</span></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);<span class=\"comment\">//add(Object obj);</span></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//打印原集合。</span></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"原集合:\"</span>+al);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//3，删除元素。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//al.remove(\"java02\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//al.clear();//清空集合。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//4，判断元素。</span></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"java03是否存在:\"</span>+al.contains(<span class=\"string\">\"java03\"</span>));</span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"集合是否为空？\"</span>+al.isEmpty());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//2，获取个数。集合长度。</span></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"size:\"</span>+al.size());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//打印改变后的集合。</span></span><br><span class=\"line\">\t\tsop(al);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>枚举就是Vector特有的取出方式。<br>发现枚举和迭代器很像。<br>其实枚举和迭代是一样的。</p>\n<p>因为枚举的名称以及方法的名称都过长。<br>所以被迭代器取代了。<br>枚举郁郁而终了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VectorDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tVector v = <span class=\"keyword\">new</span> Vector();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tv.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tv.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tv.add(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tv.add(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tEnumeration en = v.elements();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(en.hasMoreElements())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(en.nextElement());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3><p>使用LinkedList模拟一个堆栈或者队列数据结构。</p>\n<p>堆栈：先进后出  如同一个杯子。<br>队列：先进先出 First in First out  FIFO 如同一个水管。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DuiLie</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> LinkedList link;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDuiLie()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlink = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">myAdd</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tlink.addFirst(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">myGet</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> link.removeFirst();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> link.isEmpty();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">LinkedListTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDuiLie dl = <span class=\"keyword\">new</span> DuiLie();</span><br><span class=\"line\">\t\tdl.myAdd(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tdl.myAdd(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tdl.myAdd(<span class=\"string\">\"java03\"</span>);</span><br><span class=\"line\">\t\tdl.myAdd(<span class=\"string\">\"java04\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!dl.isNull())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(dl.myGet());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">去除ArrayList集合中的重复元素。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayListTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList al = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java02\"</span>);</span><br><span class=\"line\">\t\tal.add(<span class=\"string\">\"java01\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//al.add(\"java03\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t在迭代时循环中next调用一次，就要hasNext判断一次。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tIterator it = al.iterator();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\twhile(it.hasNext())</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tsop(it.next()+\"....\"+it.next());</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(al);</span><br><span class=\"line\">\t\tal = singleElement(al);</span><br><span class=\"line\">\t\tsop(al);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList <span class=\"title\">singleElement</span><span class=\"params\">(ArrayList al)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个临时容器。</span></span><br><span class=\"line\">\t\tArrayList newAl = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tIterator it = al.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tObject obj = it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!newAl.contains(obj))</span><br><span class=\"line\">\t\t\t\tnewAl.add(obj);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newAl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ArrayList练习\"><a href=\"#ArrayList练习\" class=\"headerlink\" title=\"ArrayList练习:\"></a>ArrayList练习:</h3><p>将自定义对象作为元素存到ArrayList集合中，并去除重复元素。<br>比如：存人对象。同姓名同年龄，视为同一个人。为重复元素。</p>\n<p>思路:</p>\n<ol>\n<li>对人描述，将数据封装进人对象。</li>\n<li>定义容器，将人存入。</li>\n<li>取出。</li>\n</ol>\n<p>List集合判断元素是否相同，依据是元素的equals方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tPerson(String name,<span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!(obj <span class=\"keyword\">instanceof</span> Person))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPerson p = (Person)obj;</span><br><span class=\"line\">\t\t<span class=\"comment\">//System.out.println(this.name+\".....\"+p.name);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name.equals(p.name) &amp;&amp; <span class=\"keyword\">this</span>.age == p.age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayListTest2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sop</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList al = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Demo());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi01\"</span>,<span class=\"number\">30</span>));<span class=\"comment\">//al.add(Object obj);//Object obj = new Person(\"lisi01\",30);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//al.add(new Person(\"lisi02\",32));</span></span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi02\"</span>,<span class=\"number\">32</span>));</span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi04\"</span>,<span class=\"number\">35</span>));</span><br><span class=\"line\">\t\tal.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi03\"</span>,<span class=\"number\">33</span>));</span><br><span class=\"line\">\t\t<span class=\"comment\">//al.add(new Person(\"lisi04\",35));</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//al = singleElement(al);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsop(<span class=\"string\">\"remove 03 :\"</span>+al.remove(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"lisi03\"</span>,<span class=\"number\">33</span>)));<span class=\"comment\">//remove方法底层也是依赖于元素的equals方法。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tIterator it = al.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tPerson p = (Person)it.next();</span><br><span class=\"line\">\t\t\tsop(p.getName()+<span class=\"string\">\"::\"</span>+p.getAge());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList <span class=\"title\">singleElement</span><span class=\"params\">(ArrayList al)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个临时容器。</span></span><br><span class=\"line\">\t\tArrayList newAl = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tIterator it = al.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tObject obj = it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!newAl.contains(obj))</span><br><span class=\"line\">\t\t\t\tnewAl.add(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newAl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"练习2\"><a href=\"#练习2\" class=\"headerlink\" title=\"练习2\"></a>练习2</h3><p>对字符串排序。<br>“zxcvbasdfg”<br>思路：</p>\n<ol>\n<li>字符串变数组。</li>\n<li>数组排序。</li>\n<li>数组变字符串。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"zxcvbasdfg\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tchar[] arr = str.toCharArray();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tArrays.sort(arr);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(new String(arr));</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tstr = sortString(str);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(str);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">sortString</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] arr = stringToArray(str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arrayToString(arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span>[] stringToArray(String str)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.toCharArray();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;arr.length-<span class=\"number\">1</span>; x++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y=x+<span class=\"number\">1</span>; y&lt;arr.length; y++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(arr[x]&gt;arr[y])</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tswap(arr,x,y);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> temp = arr[x];</span><br><span class=\"line\">\t\tarr[x] = arr[y];</span><br><span class=\"line\">\t\tarr[y] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">arrayToString</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Javareview-day05-封装","date":"2017-11-29T10:55:32.000Z","type":["JavaReview"],"_content":"\n# Java 复习第五天\n\n## 封装\n\n- 私有只是封装的一种表现形式\n- 封装可以增加代码的健壮性\n\n## 构造函数\n\n1. 对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作);\n2. 当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法;\n3. 当在类中定义了构造函数后,默认的构造函数就会消失;\n4. 构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能;\n\n## 成员变量和局部变量\n\n### 作用范围\n\n1. 成员变量作用于整个类中, 局部变量作用于函数中或者语句中;\n2. 在内存中的位置:\n\n  - 成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在;\n  - 局部变量: 存在栈内存中\n#### 其他区别\n成员变量都有默认值, 在不赋值的情况下也可以参与运算.\n\n\n### 匿名对象\n\n- 匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化\n- 如果对一个对象进行多个成员调用, 必须给这个对象起个名字\n- 匿名对象可以作为实际参数进行传递\n\n### 构造代码块\n#### 作用:\n  - 给对象进行初始化\n\n#### 特点:\n  - 对象一建立就运行, 而且优先于构造函数执行;\n\n#### 和构造函数的区别:\n  - 构造代码块是给所有对象进行统一初始化\n  - 构造函数是给对应的对象进行初始化\n  - 构造代码块中定义的事不同对象共性的初始化内容\n\n#### 构造代码块示例:\n\n  ```java\n  class User{\n    private String name;\n    //以下'{}'和其中的内容为构造代码块\n    {\n      private int id;\n    }\n\n\n  }\n\n  ```\n\n### this 关键字:\n  1. this 代表的是本类对象, 即 this 所在函数所属对象的引用\n  2. this语句:\n    ```java\n    this(xxx);\n    ```\n    作用: this()用于构造函数之间的调用\n    特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。\n  3. **注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用**\n\n  ```java\n    class Persion{\n      int age;\n      String name;\n      Persion(){\n        this(name);\n      }\n      Persion(String name){\n        this();\n      }\n    }\n    class test{\n      Persion p = new Persion();\n    }\n\n  ```\n\n### this 和 super 关键字的特点:\n\n1. this 和 super 关键字不能再 static 类型的方法或 static 的代码块中\n\n  - 原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用\n  - 原因2: 无法再静态代码中加载非静态的关键字\n","source":"_posts/Javareview-day05-封装.md","raw":"---\ntitle: Javareview-day05-封装\ndate: 2017-11-29T18:55:32.000Z\ntags:\n  - Java\ncategories:\n  - JavaReview\ntype:\n  - JavaReview\n---\n\n# Java 复习第五天\n\n## 封装\n\n- 私有只是封装的一种表现形式\n- 封装可以增加代码的健壮性\n\n## 构造函数\n\n1. 对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作);\n2. 当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法;\n3. 当在类中定义了构造函数后,默认的构造函数就会消失;\n4. 构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能;\n\n## 成员变量和局部变量\n\n### 作用范围\n\n1. 成员变量作用于整个类中, 局部变量作用于函数中或者语句中;\n2. 在内存中的位置:\n\n  - 成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在;\n  - 局部变量: 存在栈内存中\n#### 其他区别\n成员变量都有默认值, 在不赋值的情况下也可以参与运算.\n\n\n### 匿名对象\n\n- 匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化\n- 如果对一个对象进行多个成员调用, 必须给这个对象起个名字\n- 匿名对象可以作为实际参数进行传递\n\n### 构造代码块\n#### 作用:\n  - 给对象进行初始化\n\n#### 特点:\n  - 对象一建立就运行, 而且优先于构造函数执行;\n\n#### 和构造函数的区别:\n  - 构造代码块是给所有对象进行统一初始化\n  - 构造函数是给对应的对象进行初始化\n  - 构造代码块中定义的事不同对象共性的初始化内容\n\n#### 构造代码块示例:\n\n  ```java\n  class User{\n    private String name;\n    //以下'{}'和其中的内容为构造代码块\n    {\n      private int id;\n    }\n\n\n  }\n\n  ```\n\n### this 关键字:\n  1. this 代表的是本类对象, 即 this 所在函数所属对象的引用\n  2. this语句:\n    ```java\n    this(xxx);\n    ```\n    作用: this()用于构造函数之间的调用\n    特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。\n  3. **注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用**\n\n  ```java\n    class Persion{\n      int age;\n      String name;\n      Persion(){\n        this(name);\n      }\n      Persion(String name){\n        this();\n      }\n    }\n    class test{\n      Persion p = new Persion();\n    }\n\n  ```\n\n### this 和 super 关键字的特点:\n\n1. this 和 super 关键字不能再 static 类型的方法或 static 的代码块中\n\n  - 原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用\n  - 原因2: 无法再静态代码中加载非静态的关键字\n","slug":"Javareview-day05-封装","published":1,"updated":"2018-01-22T11:36:25.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m0650012q8kxjgtfw822","content":"<h1 id=\"Java-复习第五天\"><a href=\"#Java-复习第五天\" class=\"headerlink\" title=\"Java 复习第五天\"></a>Java 复习第五天</h1><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li>私有只是封装的一种表现形式</li>\n<li>封装可以增加代码的健壮性</li>\n</ul>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><ol>\n<li>对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作);</li>\n<li>当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法;</li>\n<li>当在类中定义了构造函数后,默认的构造函数就会消失;</li>\n<li>构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能;</li>\n</ol>\n<h2 id=\"成员变量和局部变量\"><a href=\"#成员变量和局部变量\" class=\"headerlink\" title=\"成员变量和局部变量\"></a>成员变量和局部变量</h2><h3 id=\"作用范围\"><a href=\"#作用范围\" class=\"headerlink\" title=\"作用范围\"></a>作用范围</h3><ol>\n<li>成员变量作用于整个类中, 局部变量作用于函数中或者语句中;</li>\n<li><p>在内存中的位置:</p>\n<ul>\n<li>成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在;</li>\n<li>局部变量: 存在栈内存中<h4 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h4>成员变量都有默认值, 在不赋值的情况下也可以参与运算.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h3><ul>\n<li>匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化</li>\n<li>如果对一个对象进行多个成员调用, 必须给这个对象起个名字</li>\n<li>匿名对象可以作为实际参数进行传递</li>\n</ul>\n<h3 id=\"构造代码块\"><a href=\"#构造代码块\" class=\"headerlink\" title=\"构造代码块\"></a>构造代码块</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用:\"></a>作用:</h4><ul>\n<li>给对象进行初始化</li>\n</ul>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><ul>\n<li>对象一建立就运行, 而且优先于构造函数执行;</li>\n</ul>\n<h4 id=\"和构造函数的区别\"><a href=\"#和构造函数的区别\" class=\"headerlink\" title=\"和构造函数的区别:\"></a>和构造函数的区别:</h4><ul>\n<li>构造代码块是给所有对象进行统一初始化</li>\n<li>构造函数是给对应的对象进行初始化</li>\n<li>构造代码块中定义的事不同对象共性的初始化内容</li>\n</ul>\n<h4 id=\"构造代码块示例\"><a href=\"#构造代码块示例\" class=\"headerlink\" title=\"构造代码块示例:\"></a>构造代码块示例:</h4>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"comment\">//以下'&#123;&#125;'和其中的内容为构造代码块</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this-关键字\"><a href=\"#this-关键字\" class=\"headerlink\" title=\"this 关键字:\"></a>this 关键字:</h3><ol>\n<li>this 代表的是本类对象, 即 this 所在函数所属对象的引用</li>\n<li><p>this语句:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>(xxx);</span><br></pre></td></tr></table></figure>\n<p>作用: this()用于构造函数之间的调用<br>特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。</p>\n</li>\n<li><p><strong>注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  Persion()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Persion(String name)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  Persion p = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"this-和-super-关键字的特点\"><a href=\"#this-和-super-关键字的特点\" class=\"headerlink\" title=\"this 和 super 关键字的特点:\"></a>this 和 super 关键字的特点:</h3><ol>\n<li><p>this 和 super 关键字不能再 static 类型的方法或 static 的代码块中</p>\n<ul>\n<li>原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用</li>\n<li>原因2: 无法再静态代码中加载非静态的关键字</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-复习第五天\"><a href=\"#Java-复习第五天\" class=\"headerlink\" title=\"Java 复习第五天\"></a>Java 复习第五天</h1><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li>私有只是封装的一种表现形式</li>\n<li>封装可以增加代码的健壮性</li>\n</ul>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><ol>\n<li>对象一建立,就会调用与之对应的构造函数(可以用于对象的初始化工作);</li>\n<li>当一个类中没有定义构造函数时, 那么系统会默认给该类加入一个空参数的构造方法;</li>\n<li>当在类中定义了构造函数后,默认的构造函数就会消失;</li>\n<li>构造函数和在对象一建立就运行, 给对象初始化; 而一般方法是对象调用才运行, 是给对象添加对象具备的功能;</li>\n</ol>\n<h2 id=\"成员变量和局部变量\"><a href=\"#成员变量和局部变量\" class=\"headerlink\" title=\"成员变量和局部变量\"></a>成员变量和局部变量</h2><h3 id=\"作用范围\"><a href=\"#作用范围\" class=\"headerlink\" title=\"作用范围\"></a>作用范围</h3><ol>\n<li>成员变量作用于整个类中, 局部变量作用于函数中或者语句中;</li>\n<li><p>在内存中的位置:</p>\n<ul>\n<li>成员变量: 在堆内存中, 因为对象的存在, 才在内存中存在;</li>\n<li>局部变量: 存在栈内存中<h4 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h4>成员变量都有默认值, 在不赋值的情况下也可以参与运算.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h3><ul>\n<li>匿名对象使用方式之一: 当对对象的方法只调用一次时, 可以用匿名对象来完成, 这样写比较优化</li>\n<li>如果对一个对象进行多个成员调用, 必须给这个对象起个名字</li>\n<li>匿名对象可以作为实际参数进行传递</li>\n</ul>\n<h3 id=\"构造代码块\"><a href=\"#构造代码块\" class=\"headerlink\" title=\"构造代码块\"></a>构造代码块</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用:\"></a>作用:</h4><ul>\n<li>给对象进行初始化</li>\n</ul>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><ul>\n<li>对象一建立就运行, 而且优先于构造函数执行;</li>\n</ul>\n<h4 id=\"和构造函数的区别\"><a href=\"#和构造函数的区别\" class=\"headerlink\" title=\"和构造函数的区别:\"></a>和构造函数的区别:</h4><ul>\n<li>构造代码块是给所有对象进行统一初始化</li>\n<li>构造函数是给对应的对象进行初始化</li>\n<li>构造代码块中定义的事不同对象共性的初始化内容</li>\n</ul>\n<h4 id=\"构造代码块示例\"><a href=\"#构造代码块示例\" class=\"headerlink\" title=\"构造代码块示例:\"></a>构造代码块示例:</h4>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"comment\">//以下'&#123;&#125;'和其中的内容为构造代码块</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this-关键字\"><a href=\"#this-关键字\" class=\"headerlink\" title=\"this 关键字:\"></a>this 关键字:</h3><ol>\n<li>this 代表的是本类对象, 即 this 所在函数所属对象的引用</li>\n<li><p>this语句:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>(xxx);</span><br></pre></td></tr></table></figure>\n<p>作用: this()用于构造函数之间的调用<br>特性: this() 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。</p>\n</li>\n<li><p><strong>注意: 以下代码会进入死循环状态, 构造函数之间不可以循环调用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  Persion()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Persion(String name)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  Persion p = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"this-和-super-关键字的特点\"><a href=\"#this-和-super-关键字的特点\" class=\"headerlink\" title=\"this 和 super 关键字的特点:\"></a>this 和 super 关键字的特点:</h3><ol>\n<li><p>this 和 super 关键字不能再 static 类型的方法或 static 的代码块中</p>\n<ul>\n<li>原因1: 加载顺序: static 类型的方法/代码块/方法会先于类加载, 所以当前时间点类对象并未初始化完成,所以无法调用</li>\n<li>原因2: 无法再静态代码中加载非静态的关键字</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Java中的23中设计模式-三","date":"2017-12-25T10:04:02.000Z","type":["Java","设计模式"],"_content":"> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n本章是关于设计模式的最后一讲,会讲到第三种设计模式——行为型模式,共11种：策略模式、模板方\n法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、\n中介者模式、解释器模式。这段时间一直在写关于设计模式的东西,终于写到一半了,写博文是个很\n费时间的东西,因为我得为读者负责,不论是图还是代码还是表述,都希望能尽量写清楚,以便读者\n理解,我想不论是我还是读者,都希望看到高质量的博文出来,从我本人出发,我会一直坚持下去,\n不断更新,源源动力来自于读者朋友们的不断支持,我会尽自己的努力,写好每一篇文章！希望大家\n能不断给出意见和建议,共同打造完美的博文！\n\n先来张图,看看这11中模式的关系：\n1. 通过父类与子类的关系进行实现。\n2. 两个类之间。\n3. 类的状态。\n4. 通过中间类\n![](/images/post_images/20171225_13.png)\n\n## 13. 策略模式(strategy)\n\n策略模式定义了一系列算法,并将每个算法封装起来,使他们可以相互替换,且算法的变化不会影\n响到使用算法的客户。需要设计一个接口,为一系列实现类提供统一的方法,多个实现类实现该接\n口,设计一个抽象类（可有可无,属于辅助类）,提供辅助函数,关系图如下:\n![](/images/post_images/20171225_14.png)\n\n图中ICalculator提供同意的方法,\nAbstractCalculator是辅助类,提供辅助方法,接下来,依次实现下每个类：\n首先统一接口:\n\n``` java\npublic interface ICalculator {  \n    public int calculate(String exp);  \n}  \n```\n辅助类:\n``` java\npublic abstract class AbstractCalculator {  \n\n    public int[] split(String exp,String opt){  \n        String array[] = exp.split(opt);  \n        int arrayInt[] = new int[2];  \n        arrayInt[0] = Integer.parseInt(array[0]);  \n        arrayInt[1] = Integer.parseInt(array[1]);  \n        return arrayInt;  \n    }  \n}  \n```\n三个实现类:\n\n``` java\npublic class Plus extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"\\\\+\");  \n        return arrayInt[0]+arrayInt[1];  \n    }  \n}  \n```\n``` java\npublic class Minus extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"-\");  \n        return arrayInt[0]-arrayInt[1];  \n    }  \n\n}  \n```\n``` java\npublic class Multiply extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"\\\\*\");  \n        return arrayInt[0]*arrayInt[1];  \n    }  \n}  \n```\n简单的测试类:\n``` java\npublic class StrategyTest {  \n\n    public static void main(String[] args) {  \n        String exp = \"2+8\";  \n        ICalculator cal = new Plus();  \n        int result = cal.calculate(exp);  \n        System.out.println(result);  \n    }  \n}  \n```\n\n输出: `10`\n\n策略模式的决定权在用户,系统本身提供不同算法的实现,新增或者删除算法,对各种算法做封装\n。因此,策略模式多用在算法决策系统中,外部用户只需要决定用哪个算法即可。\n\n## 14. 模板方法模式(Template Method)\n\n解释一下模板方法模式,就是指：一个抽象类中,有一个主方法,再定义1...n个方法,可以是抽象\n的,也可以是实际的方法,定义一个类,继承该抽象类,重写抽象方法,通过调用抽象类,实现对\n子类的调用,先看个关系图:\n![](/images/post_images/20171225_15.png)\n就是在AbstractCalculator类中定义一个主方法calculate,calculate()调用spilt()等,Plus\n和Minus分别继承AbstractCalculator类,通过对AbstractCalculator的调用实现对子类的调用\n,看下面的例子:\n``` java\npublic abstract class AbstractCalculator {  \n\n    /*主方法,实现对本类其它方法的调用*/  \n    public final int calculate(String exp,String opt){  \n        int array[] = split(exp,opt);  \n        return calculate(array[0],array[1]);  \n    }  \n\n    /*被子类重写的方法*/  \n    abstract public int calculate(int num1,int num2);  \n\n    public int[] split(String exp,String opt){  \n        String array[] = exp.split(opt);  \n        int arrayInt[] = new int[2];  \n        arrayInt[0] = Integer.parseInt(array[0]);  \n        arrayInt[1] = Integer.parseInt(array[1]);  \n        return arrayInt;  \n    }  \n}  \n```\n``` java\npublic class Plus extends AbstractCalculator {  \n\n    @Override  \n    public int calculate(int num1,int num2) {  \n        return num1 + num2;\n    }  \n}\n```\n测试类:\n``` java\npublic class StrategyTest {  \n\n    public static void main(String[] args) {  \n        String exp = \"8+8\";  \n        AbstractCalculator cal = new Plus();  \n        int result = cal.calculate(exp, \"\\\\+\");  \n        System.out.println(result);  \n    }  \n}  \n```\n我跟踪下这个小程序的执行过程：首先将`exp和\"\\\\+\"`做参数,调用AbstractCalculator类里\n的`calculate(String,String)`方法,在`calculate(String,String)`里调用同类\n的`split()`,之后再调用`calculate(int ,int)`方法,从这个方法进入到子类中,执行\n完`return num1 + num2`后,将值返回到`AbstractCalculator`类,赋给`result`,打印出来\n。正好验证了我们开头的思路。\n\n\n## 15. 观察者模式（Observer）\n包括这个模式在内的接下来的四个模式,都是类和类之间的关系,不涉及到继承,学的时候应该 记\n得归纳,记得本文最开始的那个图。观察者模式很好理解,类似于邮件订阅和RSS订阅,当我们浏览\n一些博客或wiki时,经常会看到RSS图标,就这的意思是,当你订阅了该文章,如果后续有更新,会\n及时通知你。其实,简单来讲就一句话：当一个对象变化时,其它依赖该对象的对象都会收到通知\n,并且随着变化！对象之间是一种一对多的关系。先来看看关系图：\n![](/images/post_images/20171225_16.png)\n我解释下这些类的作用：MySubject类就是我们的主对象,Observer1和Observer2是依赖\n于MySubject的对象,当MySubject变化时,Observer1和Observer2必然变化\n。AbstractSubject类中定义着需要监控的对象列表,可以对其进行修改：增加或删除被监控对象\n,且当MySubject变化时,负责通知在列表内存在的对象。\n我们看实现代码：\n\n一个Observer接口:\n``` java\npublic interface Observer {  \n    public void update();  \n}  \n```\n两个实现类:\n``` java\npublic class Observer1 implements Observer {  \n\n    @Override  \n    public void update() {  \n        System.out.println(\"observer1 has received!\");  \n    }  \n}  \n```\n``` java\npublic class Observer2 implements Observer {  \n\n    @Override  \n    public void update() {  \n        System.out.println(\"observer2 has received!\");  \n    }  \n\n}\n```\nSubject接口及实现类:\n``` java\npublic interface Subject {  \n\n    /*增加观察者*/  \n    public void add(Observer observer);  \n\n    /*删除观察者*/  \n    public void del(Observer observer);  \n\n    /*通知所有的观察者*/  \n    public void notifyObservers();  \n\n    /*自身的操作*/  \n    public void operation();  \n}  \n```\n``` java\npublic abstract class AbstractSubject implements Subject {  \n\n    private Vector<Observer> vector = new Vector<Observer>();  \n    @Override  \n    public void add(Observer observer) {  \n        vector.add(observer);  \n    }  \n\n    @Override  \n    public void del(Observer observer) {  \n        vector.remove(observer);  \n    }  \n\n    @Override  \n    public void notifyObservers() {  \n        Enumeration<Observer> enumo = vector.elements();  \n        while(enumo.hasMoreElements()){  \n            enumo.nextElement().update();  \n        }  \n    }  \n}  \n```\n\n``` java\npublic class MySubject extends AbstractSubject {  \n\n    @Override  \n    public void operation() {  \n        System.out.println(\"update self!\");  \n        notifyObservers();  \n    }  \n\n}  \n```\n测试类:\n``` java\npublic class ObserverTest {  \n\n    public static void main(String[] args) {  \n        Subject sub = new MySubject();  \n        sub.add(new Observer1());  \n        sub.add(new Observer2());  \n\n        sub.operation();  \n    }  \n\n}  \n```\n\n输出：\n`update self!\nobserver1 has received!\nobserver2 has received!`\n\n 这些东西,其实不难,只是有些抽象,不太容易整体理解,建议读者：根据关系图,新建项目,自\n 己写代码(或者参考我的代码),按照总体思路走一遍,这样才能体会它的思想,理解起来容易！\n\n## 16. 迭代子模式（Iterator）\n 顾名思义,迭代器模式就是顺序访问聚集中的对象,一般来说,集合中非常常见,如果对集合类比\n 较熟悉的话,理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象,即聚集对象,\n 二是迭代器对象,用于对聚集对象进行遍历访问。我们看下关系图:\n![](/images/post_images/20171225_16.png)\n这个思路和我们常用的一模一样,MyCollection中定义了集合的一些操作,MyIterator中定义了\n一系列迭代操作,且持有Collection实例,我们来看看实现代码：\n\n两个接口:\n\n``` java\npublic interface Collection {  \n\n    public Iterator iterator();  \n\n    /*取得集合元素*/  \n    public Object get(int i);  \n\n    /*取得集合大小*/  \n    public int size();  \n}  \n\n```\n``` java\npublic interface Iterator {  \n    //前移  \n    public Object previous();  \n\n    //后移  \n    public Object next();  \n    public boolean hasNext();  \n\n    //取得第一个元素  \n    public Object first();  \n}  \n```\n两个实现:\n``` java\npublic class MyCollection implements Collection {  \n\n    public String string[] = {\"A\",\"B\",\"C\",\"D\",\"E\"};  \n    @Override  \n    public Iterator iterator() {  \n        return new MyIterator(this);  \n    }  \n\n    @Override  \n    public Object get(int i) {  \n        return string[i];  \n    }  \n\n    @Override  \n    public int size() {  \n        return string.length;  \n    }  \n}  \n```\n``` java\npublic class MyIterator implements Iterator {  \n\n    private Collection collection;  \n    private int pos = -1;  \n\n    public MyIterator(Collection collection){  \n        this.collection = collection;  \n    }  \n\n    @Override  \n    public Object previous() {  \n        if(pos > 0){  \n            pos--;  \n        }  \n        return collection.get(pos);  \n    }  \n\n    @Override  \n    public Object next() {  \n        if(pos<collection.size()-1){  \n            pos++;  \n        }  \n        return collection.get(pos);  \n    }  \n\n    @Override  \n    public boolean hasNext() {  \n        if(pos<collection.size()-1){  \n            return true;  \n        }else{  \n            return false;  \n        }  \n    }  \n\n    @Override  \n    public Object first() {  \n        pos = 0;  \n        return collection.get(pos);  \n    }  \n\n}  \n```\n\n测试类:\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Collection collection = new MyCollection();  \n        Iterator it = collection.iterator();  \n\n        while(it.hasNext()){  \n            System.out.println(it.next());  \n        }  \n    }  \n}  \n```\n\n输出: `A B C D E`\n\n此处我们貌似模拟了一个集合类的过程,感觉是不是很爽？其实JDK中各个类也都是这些基本的东西\n,加一些设计模式,再加一些优化放到一起的,只要我们把这些东西学会了,掌握好了,我们也可\n以写出自己的集合类,甚至框架！\n\n\n## 17. 责任链模式(Chain of Responsibility)\n接下来我们将要谈谈责任链模式,有多个对象,每个对象持有对下一个对象的引用,这样就会形成\n一条链,请求在这条链上传递,直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个\n对象会处理该请求,所以,责任链模式可以实现,在隐瞒客户端的情况下,对系统进行动态的调整\n。先看看关系图:\n\n![](/images/post_images/20171225_18.png)\n\nAbstracthandler类提供了get和set方法,方便MyHandle类设置和修改引用对象,MyHandle类是\n核心,实例化后生成一系列相互持有的对象,构成一条链。\n\n``` java\npublic interface Handler {  \n    public void operator();  \n}  \n```\n\n``` java\npublic abstract class AbstractHandler {  \n\n    private Handler handler;  \n\n    public Handler getHandler() {  \n        return handler;  \n    }  \n\n    public void setHandler(Handler handler) {  \n        this.handler = handler;  \n    }  \n\n}  \n```\n\n``` java\npublic class MyHandler extends AbstractHandler implements Handler {  \n\n    private String name;  \n\n    public MyHandler(String name) {  \n        this.name = name;  \n    }  \n\n    @Override  \n    public void operator() {  \n        System.out.println(name+\"deal!\");  \n        if(getHandler()!=null){  \n            getHandler().operator();  \n        }  \n    }  \n}  \n```\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        MyHandler h1 = new MyHandler(\"h1\");  \n        MyHandler h2 = new MyHandler(\"h2\");  \n        MyHandler h3 = new MyHandler(\"h3\");  \n\n        h1.setHandler(h2);  \n        h2.setHandler(h3);  \n\n        h1.operator();  \n    }  \n}  \n```\n\n输出:\n`h1deal!\nh2deal!\nh3deal!`\n\n此处强调一点就是,链接上的请求可以是一条链,可以是一个树,还可以是一个环,模式本身不约\n束这个,需要我们自己去实现,同时,在一个时刻,命令只允许由一个对象传给另一个对象,而不\n允许传给多个对象。\n\n## 18. 命令模式（Command）\n命令模式很好理解,举个例子,司令员下令让士兵去干件事情,从整个事情的角度来考虑,司令员\n的作用是,发出口令,口令经过传递,传到了士兵耳朵里,士兵去执行。这个过程好在,三者相互\n解耦,任何一方都不用去依赖其他人,只需要做好自己的事儿就行,司令员要的是结果,不会去关\n注到底士兵是怎么实现的。我们看看关系图:\n\n![](/images/post_images/20171225_19.png)\n\n**Invoker** 是调用者（司令员）,**Receiver** 是被调用者（士兵）,**MyCommand** 是命\n令,实现了 **Command** 接口,持有接收对象,看实现代码:\n\n``` java\npublic interface Command {  \n    public void exe();  \n}  \n```\n``` java\npublic class MyCommand implements Command {  \n\n    private Receiver receiver;  \n\n    public MyCommand(Receiver receiver) {  \n        this.receiver = receiver;  \n    }  \n\n    @Override  \n    public void exe() {  \n        receiver.action();  \n    }  \n}  \n```\n``` java\npublic class Receiver {  \n    public void action(){  \n        System.out.println(\"command received!\");  \n    }  \n}  \n```\n``` java\npublic class Invoker {  \n\n    private Command command;  \n\n    public Invoker(Command command) {  \n        this.command = command;  \n    }  \n\n    public void action(){  \n        command.exe();  \n    }  \n}  \n```\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Receiver receiver = new Receiver();  \n        Command cmd = new MyCommand(receiver);  \n        Invoker invoker = new Invoker(cmd);  \n        invoker.action();  \n    }  \n}  \n```\n输出: `command received!`\n这个很好理解,命令模式的目的就是达到命令的发出者和执行者之间解耦,实现请求和执行分开,\n熟悉Struts的同学应该知道,Struts其实就是一种将请求和呈现分离的技术,其中必然涉及命令模\n式的思想！\n本篇暂时就到这里,因为考虑到将来博文会不断的更新,不断的增加新内容,所以当前篇幅不易过\n长,以便大家阅读,所以接下来的放到另一篇里。敬请关注！\n","source":"_posts/Java中的23中设计模式-三.md","raw":"---\ntitle: 'Java中的23中设计模式-三'\ndate: 2017-12-25 18:04:02\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - Java\n  - 设计模式\ntype:\n  - Java\n  - 设计模式\n---\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n本章是关于设计模式的最后一讲,会讲到第三种设计模式——行为型模式,共11种：策略模式、模板方\n法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、\n中介者模式、解释器模式。这段时间一直在写关于设计模式的东西,终于写到一半了,写博文是个很\n费时间的东西,因为我得为读者负责,不论是图还是代码还是表述,都希望能尽量写清楚,以便读者\n理解,我想不论是我还是读者,都希望看到高质量的博文出来,从我本人出发,我会一直坚持下去,\n不断更新,源源动力来自于读者朋友们的不断支持,我会尽自己的努力,写好每一篇文章！希望大家\n能不断给出意见和建议,共同打造完美的博文！\n\n先来张图,看看这11中模式的关系：\n1. 通过父类与子类的关系进行实现。\n2. 两个类之间。\n3. 类的状态。\n4. 通过中间类\n![](/images/post_images/20171225_13.png)\n\n## 13. 策略模式(strategy)\n\n策略模式定义了一系列算法,并将每个算法封装起来,使他们可以相互替换,且算法的变化不会影\n响到使用算法的客户。需要设计一个接口,为一系列实现类提供统一的方法,多个实现类实现该接\n口,设计一个抽象类（可有可无,属于辅助类）,提供辅助函数,关系图如下:\n![](/images/post_images/20171225_14.png)\n\n图中ICalculator提供同意的方法,\nAbstractCalculator是辅助类,提供辅助方法,接下来,依次实现下每个类：\n首先统一接口:\n\n``` java\npublic interface ICalculator {  \n    public int calculate(String exp);  \n}  \n```\n辅助类:\n``` java\npublic abstract class AbstractCalculator {  \n\n    public int[] split(String exp,String opt){  \n        String array[] = exp.split(opt);  \n        int arrayInt[] = new int[2];  \n        arrayInt[0] = Integer.parseInt(array[0]);  \n        arrayInt[1] = Integer.parseInt(array[1]);  \n        return arrayInt;  \n    }  \n}  \n```\n三个实现类:\n\n``` java\npublic class Plus extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"\\\\+\");  \n        return arrayInt[0]+arrayInt[1];  \n    }  \n}  \n```\n``` java\npublic class Minus extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"-\");  \n        return arrayInt[0]-arrayInt[1];  \n    }  \n\n}  \n```\n``` java\npublic class Multiply extends AbstractCalculator implements ICalculator {  \n\n    @Override  \n    public int calculate(String exp) {  \n        int arrayInt[] = split(exp,\"\\\\*\");  \n        return arrayInt[0]*arrayInt[1];  \n    }  \n}  \n```\n简单的测试类:\n``` java\npublic class StrategyTest {  \n\n    public static void main(String[] args) {  \n        String exp = \"2+8\";  \n        ICalculator cal = new Plus();  \n        int result = cal.calculate(exp);  \n        System.out.println(result);  \n    }  \n}  \n```\n\n输出: `10`\n\n策略模式的决定权在用户,系统本身提供不同算法的实现,新增或者删除算法,对各种算法做封装\n。因此,策略模式多用在算法决策系统中,外部用户只需要决定用哪个算法即可。\n\n## 14. 模板方法模式(Template Method)\n\n解释一下模板方法模式,就是指：一个抽象类中,有一个主方法,再定义1...n个方法,可以是抽象\n的,也可以是实际的方法,定义一个类,继承该抽象类,重写抽象方法,通过调用抽象类,实现对\n子类的调用,先看个关系图:\n![](/images/post_images/20171225_15.png)\n就是在AbstractCalculator类中定义一个主方法calculate,calculate()调用spilt()等,Plus\n和Minus分别继承AbstractCalculator类,通过对AbstractCalculator的调用实现对子类的调用\n,看下面的例子:\n``` java\npublic abstract class AbstractCalculator {  \n\n    /*主方法,实现对本类其它方法的调用*/  \n    public final int calculate(String exp,String opt){  \n        int array[] = split(exp,opt);  \n        return calculate(array[0],array[1]);  \n    }  \n\n    /*被子类重写的方法*/  \n    abstract public int calculate(int num1,int num2);  \n\n    public int[] split(String exp,String opt){  \n        String array[] = exp.split(opt);  \n        int arrayInt[] = new int[2];  \n        arrayInt[0] = Integer.parseInt(array[0]);  \n        arrayInt[1] = Integer.parseInt(array[1]);  \n        return arrayInt;  \n    }  \n}  \n```\n``` java\npublic class Plus extends AbstractCalculator {  \n\n    @Override  \n    public int calculate(int num1,int num2) {  \n        return num1 + num2;\n    }  \n}\n```\n测试类:\n``` java\npublic class StrategyTest {  \n\n    public static void main(String[] args) {  \n        String exp = \"8+8\";  \n        AbstractCalculator cal = new Plus();  \n        int result = cal.calculate(exp, \"\\\\+\");  \n        System.out.println(result);  \n    }  \n}  \n```\n我跟踪下这个小程序的执行过程：首先将`exp和\"\\\\+\"`做参数,调用AbstractCalculator类里\n的`calculate(String,String)`方法,在`calculate(String,String)`里调用同类\n的`split()`,之后再调用`calculate(int ,int)`方法,从这个方法进入到子类中,执行\n完`return num1 + num2`后,将值返回到`AbstractCalculator`类,赋给`result`,打印出来\n。正好验证了我们开头的思路。\n\n\n## 15. 观察者模式（Observer）\n包括这个模式在内的接下来的四个模式,都是类和类之间的关系,不涉及到继承,学的时候应该 记\n得归纳,记得本文最开始的那个图。观察者模式很好理解,类似于邮件订阅和RSS订阅,当我们浏览\n一些博客或wiki时,经常会看到RSS图标,就这的意思是,当你订阅了该文章,如果后续有更新,会\n及时通知你。其实,简单来讲就一句话：当一个对象变化时,其它依赖该对象的对象都会收到通知\n,并且随着变化！对象之间是一种一对多的关系。先来看看关系图：\n![](/images/post_images/20171225_16.png)\n我解释下这些类的作用：MySubject类就是我们的主对象,Observer1和Observer2是依赖\n于MySubject的对象,当MySubject变化时,Observer1和Observer2必然变化\n。AbstractSubject类中定义着需要监控的对象列表,可以对其进行修改：增加或删除被监控对象\n,且当MySubject变化时,负责通知在列表内存在的对象。\n我们看实现代码：\n\n一个Observer接口:\n``` java\npublic interface Observer {  \n    public void update();  \n}  \n```\n两个实现类:\n``` java\npublic class Observer1 implements Observer {  \n\n    @Override  \n    public void update() {  \n        System.out.println(\"observer1 has received!\");  \n    }  \n}  \n```\n``` java\npublic class Observer2 implements Observer {  \n\n    @Override  \n    public void update() {  \n        System.out.println(\"observer2 has received!\");  \n    }  \n\n}\n```\nSubject接口及实现类:\n``` java\npublic interface Subject {  \n\n    /*增加观察者*/  \n    public void add(Observer observer);  \n\n    /*删除观察者*/  \n    public void del(Observer observer);  \n\n    /*通知所有的观察者*/  \n    public void notifyObservers();  \n\n    /*自身的操作*/  \n    public void operation();  \n}  \n```\n``` java\npublic abstract class AbstractSubject implements Subject {  \n\n    private Vector<Observer> vector = new Vector<Observer>();  \n    @Override  \n    public void add(Observer observer) {  \n        vector.add(observer);  \n    }  \n\n    @Override  \n    public void del(Observer observer) {  \n        vector.remove(observer);  \n    }  \n\n    @Override  \n    public void notifyObservers() {  \n        Enumeration<Observer> enumo = vector.elements();  \n        while(enumo.hasMoreElements()){  \n            enumo.nextElement().update();  \n        }  \n    }  \n}  \n```\n\n``` java\npublic class MySubject extends AbstractSubject {  \n\n    @Override  \n    public void operation() {  \n        System.out.println(\"update self!\");  \n        notifyObservers();  \n    }  \n\n}  \n```\n测试类:\n``` java\npublic class ObserverTest {  \n\n    public static void main(String[] args) {  \n        Subject sub = new MySubject();  \n        sub.add(new Observer1());  \n        sub.add(new Observer2());  \n\n        sub.operation();  \n    }  \n\n}  \n```\n\n输出：\n`update self!\nobserver1 has received!\nobserver2 has received!`\n\n 这些东西,其实不难,只是有些抽象,不太容易整体理解,建议读者：根据关系图,新建项目,自\n 己写代码(或者参考我的代码),按照总体思路走一遍,这样才能体会它的思想,理解起来容易！\n\n## 16. 迭代子模式（Iterator）\n 顾名思义,迭代器模式就是顺序访问聚集中的对象,一般来说,集合中非常常见,如果对集合类比\n 较熟悉的话,理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象,即聚集对象,\n 二是迭代器对象,用于对聚集对象进行遍历访问。我们看下关系图:\n![](/images/post_images/20171225_16.png)\n这个思路和我们常用的一模一样,MyCollection中定义了集合的一些操作,MyIterator中定义了\n一系列迭代操作,且持有Collection实例,我们来看看实现代码：\n\n两个接口:\n\n``` java\npublic interface Collection {  \n\n    public Iterator iterator();  \n\n    /*取得集合元素*/  \n    public Object get(int i);  \n\n    /*取得集合大小*/  \n    public int size();  \n}  \n\n```\n``` java\npublic interface Iterator {  \n    //前移  \n    public Object previous();  \n\n    //后移  \n    public Object next();  \n    public boolean hasNext();  \n\n    //取得第一个元素  \n    public Object first();  \n}  \n```\n两个实现:\n``` java\npublic class MyCollection implements Collection {  \n\n    public String string[] = {\"A\",\"B\",\"C\",\"D\",\"E\"};  \n    @Override  \n    public Iterator iterator() {  \n        return new MyIterator(this);  \n    }  \n\n    @Override  \n    public Object get(int i) {  \n        return string[i];  \n    }  \n\n    @Override  \n    public int size() {  \n        return string.length;  \n    }  \n}  \n```\n``` java\npublic class MyIterator implements Iterator {  \n\n    private Collection collection;  \n    private int pos = -1;  \n\n    public MyIterator(Collection collection){  \n        this.collection = collection;  \n    }  \n\n    @Override  \n    public Object previous() {  \n        if(pos > 0){  \n            pos--;  \n        }  \n        return collection.get(pos);  \n    }  \n\n    @Override  \n    public Object next() {  \n        if(pos<collection.size()-1){  \n            pos++;  \n        }  \n        return collection.get(pos);  \n    }  \n\n    @Override  \n    public boolean hasNext() {  \n        if(pos<collection.size()-1){  \n            return true;  \n        }else{  \n            return false;  \n        }  \n    }  \n\n    @Override  \n    public Object first() {  \n        pos = 0;  \n        return collection.get(pos);  \n    }  \n\n}  \n```\n\n测试类:\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Collection collection = new MyCollection();  \n        Iterator it = collection.iterator();  \n\n        while(it.hasNext()){  \n            System.out.println(it.next());  \n        }  \n    }  \n}  \n```\n\n输出: `A B C D E`\n\n此处我们貌似模拟了一个集合类的过程,感觉是不是很爽？其实JDK中各个类也都是这些基本的东西\n,加一些设计模式,再加一些优化放到一起的,只要我们把这些东西学会了,掌握好了,我们也可\n以写出自己的集合类,甚至框架！\n\n\n## 17. 责任链模式(Chain of Responsibility)\n接下来我们将要谈谈责任链模式,有多个对象,每个对象持有对下一个对象的引用,这样就会形成\n一条链,请求在这条链上传递,直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个\n对象会处理该请求,所以,责任链模式可以实现,在隐瞒客户端的情况下,对系统进行动态的调整\n。先看看关系图:\n\n![](/images/post_images/20171225_18.png)\n\nAbstracthandler类提供了get和set方法,方便MyHandle类设置和修改引用对象,MyHandle类是\n核心,实例化后生成一系列相互持有的对象,构成一条链。\n\n``` java\npublic interface Handler {  \n    public void operator();  \n}  \n```\n\n``` java\npublic abstract class AbstractHandler {  \n\n    private Handler handler;  \n\n    public Handler getHandler() {  \n        return handler;  \n    }  \n\n    public void setHandler(Handler handler) {  \n        this.handler = handler;  \n    }  \n\n}  \n```\n\n``` java\npublic class MyHandler extends AbstractHandler implements Handler {  \n\n    private String name;  \n\n    public MyHandler(String name) {  \n        this.name = name;  \n    }  \n\n    @Override  \n    public void operator() {  \n        System.out.println(name+\"deal!\");  \n        if(getHandler()!=null){  \n            getHandler().operator();  \n        }  \n    }  \n}  \n```\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        MyHandler h1 = new MyHandler(\"h1\");  \n        MyHandler h2 = new MyHandler(\"h2\");  \n        MyHandler h3 = new MyHandler(\"h3\");  \n\n        h1.setHandler(h2);  \n        h2.setHandler(h3);  \n\n        h1.operator();  \n    }  \n}  \n```\n\n输出:\n`h1deal!\nh2deal!\nh3deal!`\n\n此处强调一点就是,链接上的请求可以是一条链,可以是一个树,还可以是一个环,模式本身不约\n束这个,需要我们自己去实现,同时,在一个时刻,命令只允许由一个对象传给另一个对象,而不\n允许传给多个对象。\n\n## 18. 命令模式（Command）\n命令模式很好理解,举个例子,司令员下令让士兵去干件事情,从整个事情的角度来考虑,司令员\n的作用是,发出口令,口令经过传递,传到了士兵耳朵里,士兵去执行。这个过程好在,三者相互\n解耦,任何一方都不用去依赖其他人,只需要做好自己的事儿就行,司令员要的是结果,不会去关\n注到底士兵是怎么实现的。我们看看关系图:\n\n![](/images/post_images/20171225_19.png)\n\n**Invoker** 是调用者（司令员）,**Receiver** 是被调用者（士兵）,**MyCommand** 是命\n令,实现了 **Command** 接口,持有接收对象,看实现代码:\n\n``` java\npublic interface Command {  \n    public void exe();  \n}  \n```\n``` java\npublic class MyCommand implements Command {  \n\n    private Receiver receiver;  \n\n    public MyCommand(Receiver receiver) {  \n        this.receiver = receiver;  \n    }  \n\n    @Override  \n    public void exe() {  \n        receiver.action();  \n    }  \n}  \n```\n``` java\npublic class Receiver {  \n    public void action(){  \n        System.out.println(\"command received!\");  \n    }  \n}  \n```\n``` java\npublic class Invoker {  \n\n    private Command command;  \n\n    public Invoker(Command command) {  \n        this.command = command;  \n    }  \n\n    public void action(){  \n        command.exe();  \n    }  \n}  \n```\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Receiver receiver = new Receiver();  \n        Command cmd = new MyCommand(receiver);  \n        Invoker invoker = new Invoker(cmd);  \n        invoker.action();  \n    }  \n}  \n```\n输出: `command received!`\n这个很好理解,命令模式的目的就是达到命令的发出者和执行者之间解耦,实现请求和执行分开,\n熟悉Struts的同学应该知道,Struts其实就是一种将请求和呈现分离的技术,其中必然涉及命令模\n式的思想！\n本篇暂时就到这里,因为考虑到将来博文会不断的更新,不断的增加新内容,所以当前篇幅不易过\n长,以便大家阅读,所以接下来的放到另一篇里。敬请关注！\n","slug":"Java中的23中设计模式-三","published":1,"updated":"2018-01-22T09:45:54.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m0680015q8kxv1slu0md","content":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<p>本章是关于设计模式的最后一讲,会讲到第三种设计模式——行为型模式,共11种：策略模式、模板方<br>法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、<br>中介者模式、解释器模式。这段时间一直在写关于设计模式的东西,终于写到一半了,写博文是个很<br>费时间的东西,因为我得为读者负责,不论是图还是代码还是表述,都希望能尽量写清楚,以便读者<br>理解,我想不论是我还是读者,都希望看到高质量的博文出来,从我本人出发,我会一直坚持下去,<br>不断更新,源源动力来自于读者朋友们的不断支持,我会尽自己的努力,写好每一篇文章！希望大家<br>能不断给出意见和建议,共同打造完美的博文！</p>\n<p>先来张图,看看这11中模式的关系：</p>\n<ol>\n<li>通过父类与子类的关系进行实现。</li>\n<li>两个类之间。</li>\n<li>类的状态。</li>\n<li>通过中间类<br><img src=\"/images/post_images/20171225_13.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"13-策略模式-strategy\"><a href=\"#13-策略模式-strategy\" class=\"headerlink\" title=\"13. 策略模式(strategy)\"></a>13. 策略模式(strategy)</h2><p>策略模式定义了一系列算法,并将每个算法封装起来,使他们可以相互替换,且算法的变化不会影<br>响到使用算法的客户。需要设计一个接口,为一系列实现类提供统一的方法,多个实现类实现该接<br>口,设计一个抽象类（可有可无,属于辅助类）,提供辅助函数,关系图如下:<br><img src=\"/images/post_images/20171225_14.png\" alt=\"\"></p>\n<p>图中ICalculator提供同意的方法,<br>AbstractCalculator是辅助类,提供辅助方法,接下来,依次实现下每个类：<br>首先统一接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>辅助类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] split(String exp,String opt)&#123;  </span><br><span class=\"line\">        String array[] = exp.split(opt);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">0</span>] = Integer.parseInt(array[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">1</span>] = Integer.parseInt(array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三个实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"\\\\+\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]+arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Minus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"-\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]-arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multiply</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"\\\\*\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]*arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单的测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        String exp = <span class=\"string\">\"2+8\"</span>;  </span><br><span class=\"line\">        ICalculator cal = <span class=\"keyword\">new</span> Plus();  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = cal.calculate(exp);  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>10</code></p>\n<p>策略模式的决定权在用户,系统本身提供不同算法的实现,新增或者删除算法,对各种算法做封装<br>。因此,策略模式多用在算法决策系统中,外部用户只需要决定用哪个算法即可。</p>\n<h2 id=\"14-模板方法模式-Template-Method\"><a href=\"#14-模板方法模式-Template-Method\" class=\"headerlink\" title=\"14. 模板方法模式(Template Method)\"></a>14. 模板方法模式(Template Method)</h2><p>解释一下模板方法模式,就是指：一个抽象类中,有一个主方法,再定义1…n个方法,可以是抽象<br>的,也可以是实际的方法,定义一个类,继承该抽象类,重写抽象方法,通过调用抽象类,实现对<br>子类的调用,先看个关系图:<br><img src=\"/images/post_images/20171225_15.png\" alt=\"\"><br>就是在AbstractCalculator类中定义一个主方法calculate,calculate()调用spilt()等,Plus<br>和Minus分别继承AbstractCalculator类,通过对AbstractCalculator的调用实现对子类的调用<br>,看下面的例子:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*主方法,实现对本类其它方法的调用*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp,String opt)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> array[] = split(exp,opt);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> calculate(array[<span class=\"number\">0</span>],array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*被子类重写的方法*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] split(String exp,String opt)&#123;  </span><br><span class=\"line\">        String array[] = exp.split(opt);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">0</span>] = Integer.parseInt(array[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">1</span>] = Integer.parseInt(array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        String exp = <span class=\"string\">\"8+8\"</span>;  </span><br><span class=\"line\">        AbstractCalculator cal = <span class=\"keyword\">new</span> Plus();  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = cal.calculate(exp, <span class=\"string\">\"\\\\+\"</span>);  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我跟踪下这个小程序的执行过程：首先将<code>exp和&quot;\\\\+&quot;</code>做参数,调用AbstractCalculator类里<br>的<code>calculate(String,String)</code>方法,在<code>calculate(String,String)</code>里调用同类<br>的<code>split()</code>,之后再调用<code>calculate(int ,int)</code>方法,从这个方法进入到子类中,执行<br>完<code>return num1 + num2</code>后,将值返回到<code>AbstractCalculator</code>类,赋给<code>result</code>,打印出来<br>。正好验证了我们开头的思路。</p>\n<h2 id=\"15-观察者模式（Observer）\"><a href=\"#15-观察者模式（Observer）\" class=\"headerlink\" title=\"15. 观察者模式（Observer）\"></a>15. 观察者模式（Observer）</h2><p>包括这个模式在内的接下来的四个模式,都是类和类之间的关系,不涉及到继承,学的时候应该 记<br>得归纳,记得本文最开始的那个图。观察者模式很好理解,类似于邮件订阅和RSS订阅,当我们浏览<br>一些博客或wiki时,经常会看到RSS图标,就这的意思是,当你订阅了该文章,如果后续有更新,会<br>及时通知你。其实,简单来讲就一句话：当一个对象变化时,其它依赖该对象的对象都会收到通知<br>,并且随着变化！对象之间是一种一对多的关系。先来看看关系图：<br><img src=\"/images/post_images/20171225_16.png\" alt=\"\"><br>我解释下这些类的作用：MySubject类就是我们的主对象,Observer1和Observer2是依赖<br>于MySubject的对象,当MySubject变化时,Observer1和Observer2必然变化<br>。AbstractSubject类中定义着需要监控的对象列表,可以对其进行修改：增加或删除被监控对象<br>,且当MySubject变化时,负责通知在列表内存在的对象。<br>我们看实现代码：</p>\n<p>一个Observer接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"observer1 has received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"observer2 has received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Subject接口及实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*增加观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*删除观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(Observer observer)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*通知所有的观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*自身的操作*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; vector = <span class=\"keyword\">new</span> Vector&lt;Observer&gt;();  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span> </span>&#123;  </span><br><span class=\"line\">        vector.add(observer);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(Observer observer)</span> </span>&#123;  </span><br><span class=\"line\">        vector.remove(observer);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Enumeration&lt;Observer&gt; enumo = vector.elements();  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(enumo.hasMoreElements())&#123;  </span><br><span class=\"line\">            enumo.nextElement().update();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSubject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"update self!\"</span>);  </span><br><span class=\"line\">        notifyObservers();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Subject sub = <span class=\"keyword\">new</span> MySubject();  </span><br><span class=\"line\">        sub.add(<span class=\"keyword\">new</span> Observer1());  </span><br><span class=\"line\">        sub.add(<span class=\"keyword\">new</span> Observer2());  </span><br><span class=\"line\"></span><br><span class=\"line\">        sub.operation();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>update self!\nobserver1 has received!\nobserver2 has received!</code></p>\n<p> 这些东西,其实不难,只是有些抽象,不太容易整体理解,建议读者：根据关系图,新建项目,自<br> 己写代码(或者参考我的代码),按照总体思路走一遍,这样才能体会它的思想,理解起来容易！</p>\n<h2 id=\"16-迭代子模式（Iterator）\"><a href=\"#16-迭代子模式（Iterator）\" class=\"headerlink\" title=\"16. 迭代子模式（Iterator）\"></a>16. 迭代子模式（Iterator）</h2><p> 顾名思义,迭代器模式就是顺序访问聚集中的对象,一般来说,集合中非常常见,如果对集合类比<br> 较熟悉的话,理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象,即聚集对象,<br> 二是迭代器对象,用于对聚集对象进行遍历访问。我们看下关系图:<br><img src=\"/images/post_images/20171225_16.png\" alt=\"\"><br>这个思路和我们常用的一模一样,MyCollection中定义了集合的一些操作,MyIterator中定义了<br>一系列迭代操作,且持有Collection实例,我们来看看实现代码：</p>\n<p>两个接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*取得集合元素*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*取得集合大小*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//前移  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">previous</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后移  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取得第一个元素  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">first</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCollection</span> <span class=\"keyword\">implements</span> <span class=\"title\">Collection</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String string[] = &#123;<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"E\"</span>&#125;;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyIterator(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string[i];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.length;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Collection collection;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pos = -<span class=\"number\">1</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyIterator</span><span class=\"params\">(Collection collection)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.collection = collection;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">previous</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos &gt; <span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            pos--;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos&lt;collection.size()-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">            pos++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos&lt;collection.size()-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">first</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pos = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Collection collection = <span class=\"keyword\">new</span> MyCollection();  </span><br><span class=\"line\">        Iterator it = collection.iterator();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;  </span><br><span class=\"line\">            System.out.println(it.next());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>A B C D E</code></p>\n<p>此处我们貌似模拟了一个集合类的过程,感觉是不是很爽？其实JDK中各个类也都是这些基本的东西<br>,加一些设计模式,再加一些优化放到一起的,只要我们把这些东西学会了,掌握好了,我们也可<br>以写出自己的集合类,甚至框架！</p>\n<h2 id=\"17-责任链模式-Chain-of-Responsibility\"><a href=\"#17-责任链模式-Chain-of-Responsibility\" class=\"headerlink\" title=\"17. 责任链模式(Chain of Responsibility)\"></a>17. 责任链模式(Chain of Responsibility)</h2><p>接下来我们将要谈谈责任链模式,有多个对象,每个对象持有对下一个对象的引用,这样就会形成<br>一条链,请求在这条链上传递,直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个<br>对象会处理该请求,所以,责任链模式可以实现,在隐瞒客户端的情况下,对系统进行动态的调整<br>。先看看关系图:</p>\n<p><img src=\"/images/post_images/20171225_18.png\" alt=\"\"></p>\n<p>Abstracthandler类提供了get和set方法,方便MyHandle类设置和修改引用对象,MyHandle类是<br>核心,实例化后生成一系列相互持有的对象,构成一条链。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Handler</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandler</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Handler <span class=\"title\">getHandler</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHandler</span><span class=\"params\">(Handler handler)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">Handler</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">\"deal!\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getHandler()!=<span class=\"keyword\">null</span>)&#123;  </span><br><span class=\"line\">            getHandler().operator();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        MyHandler h1 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h1\"</span>);  </span><br><span class=\"line\">        MyHandler h2 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h2\"</span>);  </span><br><span class=\"line\">        MyHandler h3 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h3\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        h1.setHandler(h2);  </span><br><span class=\"line\">        h2.setHandler(h3);  </span><br><span class=\"line\"></span><br><span class=\"line\">        h1.operator();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><code>h1deal!\nh2deal!\nh3deal!</code></p>\n<p>此处强调一点就是,链接上的请求可以是一条链,可以是一个树,还可以是一个环,模式本身不约<br>束这个,需要我们自己去实现,同时,在一个时刻,命令只允许由一个对象传给另一个对象,而不<br>允许传给多个对象。</p>\n<h2 id=\"18-命令模式（Command）\"><a href=\"#18-命令模式（Command）\" class=\"headerlink\" title=\"18. 命令模式（Command）\"></a>18. 命令模式（Command）</h2><p>命令模式很好理解,举个例子,司令员下令让士兵去干件事情,从整个事情的角度来考虑,司令员<br>的作用是,发出口令,口令经过传递,传到了士兵耳朵里,士兵去执行。这个过程好在,三者相互<br>解耦,任何一方都不用去依赖其他人,只需要做好自己的事儿就行,司令员要的是结果,不会去关<br>注到底士兵是怎么实现的。我们看看关系图:</p>\n<p><img src=\"/images/post_images/20171225_19.png\" alt=\"\"></p>\n<p><strong>Invoker</strong> 是调用者（司令员）,<strong>Receiver</strong> 是被调用者（士兵）,<strong>MyCommand</strong> 是命<br>令,实现了 <strong>Command</strong> 接口,持有接收对象,看实现代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exe</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Receiver receiver;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCommand</span><span class=\"params\">(Receiver receiver)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exe</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        receiver.action();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"command received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Command command;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Invoker</span><span class=\"params\">(Command command)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.command = command;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        command.exe();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Receiver receiver = <span class=\"keyword\">new</span> Receiver();  </span><br><span class=\"line\">        Command cmd = <span class=\"keyword\">new</span> MyCommand(receiver);  </span><br><span class=\"line\">        Invoker invoker = <span class=\"keyword\">new</span> Invoker(cmd);  </span><br><span class=\"line\">        invoker.action();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出: <code>command received!</code><br>这个很好理解,命令模式的目的就是达到命令的发出者和执行者之间解耦,实现请求和执行分开,<br>熟悉Struts的同学应该知道,Struts其实就是一种将请求和呈现分离的技术,其中必然涉及命令模<br>式的思想！<br>本篇暂时就到这里,因为考虑到将来博文会不断的更新,不断的增加新内容,所以当前篇幅不易过<br>长,以便大家阅读,所以接下来的放到另一篇里。敬请关注！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<p>本章是关于设计模式的最后一讲,会讲到第三种设计模式——行为型模式,共11种：策略模式、模板方<br>法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、<br>中介者模式、解释器模式。这段时间一直在写关于设计模式的东西,终于写到一半了,写博文是个很<br>费时间的东西,因为我得为读者负责,不论是图还是代码还是表述,都希望能尽量写清楚,以便读者<br>理解,我想不论是我还是读者,都希望看到高质量的博文出来,从我本人出发,我会一直坚持下去,<br>不断更新,源源动力来自于读者朋友们的不断支持,我会尽自己的努力,写好每一篇文章！希望大家<br>能不断给出意见和建议,共同打造完美的博文！</p>\n<p>先来张图,看看这11中模式的关系：</p>\n<ol>\n<li>通过父类与子类的关系进行实现。</li>\n<li>两个类之间。</li>\n<li>类的状态。</li>\n<li>通过中间类<br><img src=\"/images/post_images/20171225_13.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"13-策略模式-strategy\"><a href=\"#13-策略模式-strategy\" class=\"headerlink\" title=\"13. 策略模式(strategy)\"></a>13. 策略模式(strategy)</h2><p>策略模式定义了一系列算法,并将每个算法封装起来,使他们可以相互替换,且算法的变化不会影<br>响到使用算法的客户。需要设计一个接口,为一系列实现类提供统一的方法,多个实现类实现该接<br>口,设计一个抽象类（可有可无,属于辅助类）,提供辅助函数,关系图如下:<br><img src=\"/images/post_images/20171225_14.png\" alt=\"\"></p>\n<p>图中ICalculator提供同意的方法,<br>AbstractCalculator是辅助类,提供辅助方法,接下来,依次实现下每个类：<br>首先统一接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>辅助类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] split(String exp,String opt)&#123;  </span><br><span class=\"line\">        String array[] = exp.split(opt);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">0</span>] = Integer.parseInt(array[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">1</span>] = Integer.parseInt(array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三个实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"\\\\+\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]+arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Minus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"-\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]-arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multiply</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = split(exp,<span class=\"string\">\"\\\\*\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt[<span class=\"number\">0</span>]*arrayInt[<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单的测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        String exp = <span class=\"string\">\"2+8\"</span>;  </span><br><span class=\"line\">        ICalculator cal = <span class=\"keyword\">new</span> Plus();  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = cal.calculate(exp);  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>10</code></p>\n<p>策略模式的决定权在用户,系统本身提供不同算法的实现,新增或者删除算法,对各种算法做封装<br>。因此,策略模式多用在算法决策系统中,外部用户只需要决定用哪个算法即可。</p>\n<h2 id=\"14-模板方法模式-Template-Method\"><a href=\"#14-模板方法模式-Template-Method\" class=\"headerlink\" title=\"14. 模板方法模式(Template Method)\"></a>14. 模板方法模式(Template Method)</h2><p>解释一下模板方法模式,就是指：一个抽象类中,有一个主方法,再定义1…n个方法,可以是抽象<br>的,也可以是实际的方法,定义一个类,继承该抽象类,重写抽象方法,通过调用抽象类,实现对<br>子类的调用,先看个关系图:<br><img src=\"/images/post_images/20171225_15.png\" alt=\"\"><br>就是在AbstractCalculator类中定义一个主方法calculate,calculate()调用spilt()等,Plus<br>和Minus分别继承AbstractCalculator类,通过对AbstractCalculator的调用实现对子类的调用<br>,看下面的例子:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*主方法,实现对本类其它方法的调用*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String exp,String opt)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> array[] = split(exp,opt);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> calculate(array[<span class=\"number\">0</span>],array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*被子类重写的方法*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] split(String exp,String opt)&#123;  </span><br><span class=\"line\">        String array[] = exp.split(opt);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arrayInt[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">0</span>] = Integer.parseInt(array[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">        arrayInt[<span class=\"number\">1</span>] = Integer.parseInt(array[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayInt;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCalculator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        String exp = <span class=\"string\">\"8+8\"</span>;  </span><br><span class=\"line\">        AbstractCalculator cal = <span class=\"keyword\">new</span> Plus();  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = cal.calculate(exp, <span class=\"string\">\"\\\\+\"</span>);  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我跟踪下这个小程序的执行过程：首先将<code>exp和&quot;\\\\+&quot;</code>做参数,调用AbstractCalculator类里<br>的<code>calculate(String,String)</code>方法,在<code>calculate(String,String)</code>里调用同类<br>的<code>split()</code>,之后再调用<code>calculate(int ,int)</code>方法,从这个方法进入到子类中,执行<br>完<code>return num1 + num2</code>后,将值返回到<code>AbstractCalculator</code>类,赋给<code>result</code>,打印出来<br>。正好验证了我们开头的思路。</p>\n<h2 id=\"15-观察者模式（Observer）\"><a href=\"#15-观察者模式（Observer）\" class=\"headerlink\" title=\"15. 观察者模式（Observer）\"></a>15. 观察者模式（Observer）</h2><p>包括这个模式在内的接下来的四个模式,都是类和类之间的关系,不涉及到继承,学的时候应该 记<br>得归纳,记得本文最开始的那个图。观察者模式很好理解,类似于邮件订阅和RSS订阅,当我们浏览<br>一些博客或wiki时,经常会看到RSS图标,就这的意思是,当你订阅了该文章,如果后续有更新,会<br>及时通知你。其实,简单来讲就一句话：当一个对象变化时,其它依赖该对象的对象都会收到通知<br>,并且随着变化！对象之间是一种一对多的关系。先来看看关系图：<br><img src=\"/images/post_images/20171225_16.png\" alt=\"\"><br>我解释下这些类的作用：MySubject类就是我们的主对象,Observer1和Observer2是依赖<br>于MySubject的对象,当MySubject变化时,Observer1和Observer2必然变化<br>。AbstractSubject类中定义着需要监控的对象列表,可以对其进行修改：增加或删除被监控对象<br>,且当MySubject变化时,负责通知在列表内存在的对象。<br>我们看实现代码：</p>\n<p>一个Observer接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"observer1 has received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"observer2 has received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Subject接口及实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*增加观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*删除观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(Observer observer)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*通知所有的观察者*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*自身的操作*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; vector = <span class=\"keyword\">new</span> Vector&lt;Observer&gt;();  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span> </span>&#123;  </span><br><span class=\"line\">        vector.add(observer);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(Observer observer)</span> </span>&#123;  </span><br><span class=\"line\">        vector.remove(observer);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Enumeration&lt;Observer&gt; enumo = vector.elements();  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(enumo.hasMoreElements())&#123;  </span><br><span class=\"line\">            enumo.nextElement().update();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSubject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"update self!\"</span>);  </span><br><span class=\"line\">        notifyObservers();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Subject sub = <span class=\"keyword\">new</span> MySubject();  </span><br><span class=\"line\">        sub.add(<span class=\"keyword\">new</span> Observer1());  </span><br><span class=\"line\">        sub.add(<span class=\"keyword\">new</span> Observer2());  </span><br><span class=\"line\"></span><br><span class=\"line\">        sub.operation();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>update self!\nobserver1 has received!\nobserver2 has received!</code></p>\n<p> 这些东西,其实不难,只是有些抽象,不太容易整体理解,建议读者：根据关系图,新建项目,自<br> 己写代码(或者参考我的代码),按照总体思路走一遍,这样才能体会它的思想,理解起来容易！</p>\n<h2 id=\"16-迭代子模式（Iterator）\"><a href=\"#16-迭代子模式（Iterator）\" class=\"headerlink\" title=\"16. 迭代子模式（Iterator）\"></a>16. 迭代子模式（Iterator）</h2><p> 顾名思义,迭代器模式就是顺序访问聚集中的对象,一般来说,集合中非常常见,如果对集合类比<br> 较熟悉的话,理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象,即聚集对象,<br> 二是迭代器对象,用于对聚集对象进行遍历访问。我们看下关系图:<br><img src=\"/images/post_images/20171225_16.png\" alt=\"\"><br>这个思路和我们常用的一模一样,MyCollection中定义了集合的一些操作,MyIterator中定义了<br>一系列迭代操作,且持有Collection实例,我们来看看实现代码：</p>\n<p>两个接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*取得集合元素*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*取得集合大小*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//前移  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">previous</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后移  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取得第一个元素  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">first</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCollection</span> <span class=\"keyword\">implements</span> <span class=\"title\">Collection</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String string[] = &#123;<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"E\"</span>&#125;;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyIterator(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string[i];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.length;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Collection collection;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pos = -<span class=\"number\">1</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyIterator</span><span class=\"params\">(Collection collection)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.collection = collection;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">previous</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos &gt; <span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            pos--;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos&lt;collection.size()-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">            pos++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos&lt;collection.size()-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">first</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pos = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.get(pos);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Collection collection = <span class=\"keyword\">new</span> MyCollection();  </span><br><span class=\"line\">        Iterator it = collection.iterator();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;  </span><br><span class=\"line\">            System.out.println(it.next());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>A B C D E</code></p>\n<p>此处我们貌似模拟了一个集合类的过程,感觉是不是很爽？其实JDK中各个类也都是这些基本的东西<br>,加一些设计模式,再加一些优化放到一起的,只要我们把这些东西学会了,掌握好了,我们也可<br>以写出自己的集合类,甚至框架！</p>\n<h2 id=\"17-责任链模式-Chain-of-Responsibility\"><a href=\"#17-责任链模式-Chain-of-Responsibility\" class=\"headerlink\" title=\"17. 责任链模式(Chain of Responsibility)\"></a>17. 责任链模式(Chain of Responsibility)</h2><p>接下来我们将要谈谈责任链模式,有多个对象,每个对象持有对下一个对象的引用,这样就会形成<br>一条链,请求在这条链上传递,直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个<br>对象会处理该请求,所以,责任链模式可以实现,在隐瞒客户端的情况下,对系统进行动态的调整<br>。先看看关系图:</p>\n<p><img src=\"/images/post_images/20171225_18.png\" alt=\"\"></p>\n<p>Abstracthandler类提供了get和set方法,方便MyHandle类设置和修改引用对象,MyHandle类是<br>核心,实例化后生成一系列相互持有的对象,构成一条链。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Handler</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandler</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Handler <span class=\"title\">getHandler</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHandler</span><span class=\"params\">(Handler handler)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">Handler</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">\"deal!\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getHandler()!=<span class=\"keyword\">null</span>)&#123;  </span><br><span class=\"line\">            getHandler().operator();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        MyHandler h1 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h1\"</span>);  </span><br><span class=\"line\">        MyHandler h2 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h2\"</span>);  </span><br><span class=\"line\">        MyHandler h3 = <span class=\"keyword\">new</span> MyHandler(<span class=\"string\">\"h3\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        h1.setHandler(h2);  </span><br><span class=\"line\">        h2.setHandler(h3);  </span><br><span class=\"line\"></span><br><span class=\"line\">        h1.operator();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><code>h1deal!\nh2deal!\nh3deal!</code></p>\n<p>此处强调一点就是,链接上的请求可以是一条链,可以是一个树,还可以是一个环,模式本身不约<br>束这个,需要我们自己去实现,同时,在一个时刻,命令只允许由一个对象传给另一个对象,而不<br>允许传给多个对象。</p>\n<h2 id=\"18-命令模式（Command）\"><a href=\"#18-命令模式（Command）\" class=\"headerlink\" title=\"18. 命令模式（Command）\"></a>18. 命令模式（Command）</h2><p>命令模式很好理解,举个例子,司令员下令让士兵去干件事情,从整个事情的角度来考虑,司令员<br>的作用是,发出口令,口令经过传递,传到了士兵耳朵里,士兵去执行。这个过程好在,三者相互<br>解耦,任何一方都不用去依赖其他人,只需要做好自己的事儿就行,司令员要的是结果,不会去关<br>注到底士兵是怎么实现的。我们看看关系图:</p>\n<p><img src=\"/images/post_images/20171225_19.png\" alt=\"\"></p>\n<p><strong>Invoker</strong> 是调用者（司令员）,<strong>Receiver</strong> 是被调用者（士兵）,<strong>MyCommand</strong> 是命<br>令,实现了 <strong>Command</strong> 接口,持有接收对象,看实现代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exe</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Receiver receiver;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCommand</span><span class=\"params\">(Receiver receiver)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exe</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        receiver.action();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"command received!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Command command;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Invoker</span><span class=\"params\">(Command command)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.command = command;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        command.exe();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Receiver receiver = <span class=\"keyword\">new</span> Receiver();  </span><br><span class=\"line\">        Command cmd = <span class=\"keyword\">new</span> MyCommand(receiver);  </span><br><span class=\"line\">        Invoker invoker = <span class=\"keyword\">new</span> Invoker(cmd);  </span><br><span class=\"line\">        invoker.action();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出: <code>command received!</code><br>这个很好理解,命令模式的目的就是达到命令的发出者和执行者之间解耦,实现请求和执行分开,<br>熟悉Struts的同学应该知道,Struts其实就是一种将请求和呈现分离的技术,其中必然涉及命令模<br>式的思想！<br>本篇暂时就到这里,因为考虑到将来博文会不断的更新,不断的增加新内容,所以当前篇幅不易过<br>长,以便大家阅读,所以接下来的放到另一篇里。敬请关注！</p>\n"},{"title":"Java中的23中设计模式(二)","date":"2017-12-25T00:27:27.000Z","type":["Java","设计模式"],"_content":"\n> 本文转载自[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n我们接着讨论设计模式,上篇文章我讲完了5种创建型模式,这章开始,我将讲下7种结构型模式：适\n配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模\n式是各种模式的起源,我们看下面的图：\n\n![](/images/post_images/20171225_01.png)\n## 6. 适配器模式(Adapter)\n\t适配器模式将某个类的接口转换成客户端期望的另一个接口表示,目的是消除由于接口不匹配所\n造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式\n。\n\n首先,我们来看看类的适配器模式,先看类图：\n![](/images/post_images/20171225_02.png)\n\n核心思想就是：有一个Source类,拥有一个方法,待适配,目标接口时Targetable,通过\nAdapter类,将Source的功能扩展到Targetable里,看代码：\n\n```java\npublic class Source {  \n\n    public void method1() {  \n        System.out.println(\"this is original method!\");  \n    }  \n}  \n```\n\n```java\npublic interface Targetable {  \n\n    /* 与原类中的方法相同 */  \n    public void method1();  \n\n    /* 新类的方法 */  \n    public void method2();  \n}  \n\n```\n\n```java\npublic class Adapter extends Source implements Targetable {  \n\n    @Override  \n    public void method2() {  \n        System.out.println(\"this is the targetable method!\");  \n    }  \n}  \n```\nAdapter类继承Source类,实现Targetable接口,下面是测试类:\n\n```java\npublic class AdapterTest {  \n\n    public static void main(String[] args) {  \n        Targetable target = new Adapter();  \n        target.method1();  \n        target.method2();  \n    }  \n}\n```\n输出:\n`this is original method!\nthis is the targetable method!`\n这样Targetable接口的实现类就具有了Source类的功能。\n\n<font color='#B83B5E'>**对象的适配器模式**</font>\n\n基本思路和类的适配器模式相同,只是将Adapter类作修改,这次不继承Source类,而是持有Source类的实例,以达到解决兼容性的问题。看图:\n![](/images/post_images/20171225_03.png)\n\n只需要修改Adapter类的源码即可:\n```java\npublic class Wrapper implements Targetable {  \n\n    private Source source;  \n\n    public Wrapper(Source source){  \n        super();  \n        this.source = source;  \n    }  \n    @Override  \n    public void method2() {  \n        System.out.println(\"this is the targetable method!\");  \n    }  \n\n    @Override  \n    public void method1() {  \n        source.method1();  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class AdapterTest {  \n\n    public static void main(String[] args) {  \n        Source source = new Source();  \n        Targetable target = new Wrapper(source);  \n        target.method1();  \n        target.method2();  \n    }  \n}\n```\n输出与第一种一样,只是适配的方法不同而已。\n\n第三种适配器模式是<font color='#B83B5E'>**接口的适配器模式**</font>,接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法,当我们写该接口的实现类时,必须实现该接口的所有方法,这明显有时比较浪费,因为并不是所有的方法都是我们需要的,有时只需要某一些,此处为了解决这个问题,我们引入了接口的适配器模式,借助于一个抽象类,该抽象类实现了该接口,实现了所有的方法,而我们不和原始的接口打交道,只和该抽象类取得联系,所以我们写一个类,继承该抽象类,重写我们需要的方法就行。看一下类图:\n![](/images/post_images/20171225_04.png)\n\n这个很好理解,在实际开发中,我们也常会遇到这种接口中定义了太多的方法,以致于有时我们在\n一些实现类中并不是都需要。看代码:\n```java\npublic interface Sourceable {  \n\n    public void method1();  \n    public void method2();  \n}  \n```\n抽象类Wrapper2:\n```java\npublic abstract class Wrapper2 implements Sourceable{  \n\n    public void method1(){}  \n    public void method2(){}  \n}  \n```\n```java\npublic class SourceSub1 extends Wrapper2 {  \n    public void method1(){  \n        System.out.println(\"the sourceable interface's first Sub1!\");  \n    }  \n}\n```\n```java\npublic class SourceSub2 extends Wrapper2 {  \n    public void method2(){  \n        System.out.println(\"the sourceable interface's second Sub2!\");  \n    }  \n}  \n```\n```java\npublic class WrapperTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source1 = new SourceSub1();  \n        Sourceable source2 = new SourceSub2();  \n\n        source1.method1();  \n        source1.method2();  \n        source2.method1();  \n        source2.method2();  \n    }  \n}\n```\n测试输出：\n`the sourceable interface's first Sub1!\nthe sourceable interface's second Sub2!`\n达到了我们的效果！\n讲了这么多,总结一下三种适配器模式的应用场景：\n类的适配器模式：当希望将<font color='#F08A5D'>一个类</font>转换成满足<font color='#F08A5D'>另一个新接口</font>的类时,可以使用类的适配器模式,创建一个新类,继承原有的类,实现新的接口即可。对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时,可以创建一个Wrapper类,持有原类的一个实例,在Wrapper类的方法中,调用实例的方法就行。接口的适配器模式：当不希望实现一个接口中所有的方法时,可以创建一个抽象类Wrapper,实现所有方法,我们写别的类的时候,继承抽象类即可。\n\n## 7. 装饰模式（Decorator）\n\n顾名思义,装饰模式就是给一个对象增加一些新的功能,而且是动态的,要求装饰对象和被装饰对\n象实现同一个接口,装饰对象持有被装饰对象的实例,关系图如下:\n![](/images/post_images/20171225_05.png)\n\nSource类是被装饰类,Decorator类是一个装饰类,可以为Source类动态的添加一些功能,代码如下:\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n```java\npublic class Source implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"the original method!\");  \n    }  \n}  \n```\n\n```java\npublic class Decorator implements Sourceable {  \n\n    private Sourceable source;  \n\n    public Decorator(Sourceable source){  \n        super();  \n        this.source = source;  \n    }  \n    @Override  \n    public void method() {  \n        System.out.println(\"before decorator!\");  \n        source.method();  \n        System.out.println(\"after decorator!\");  \n    }  \n}  \n```\n\n测试类:\n```java\npublic class DecoratorTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source = new Source();  \n        Sourceable obj = new Decorator(source);  \n        obj.method();  \n    }  \n}  \n```\n输出：\n`before decorator!\nthe original method!\nafter decorator!`\n\n- 装饰器模式的应用场景：\n1. 需要扩展一个类的功能。\n2. 动态的为一个对象增加功能,而且还能动态撤销。(继承不能做到这一点,继承的功能是静态的,不能动态增删。)\n\n- 缺点：产生过多相似的对象,不易排错！\n\n## 8. 代理模式(Proxy)\n其实每个模式名称就表明了该模式的作用,代理模式就是多一个代理类出来,替原对象进行一些操作,比如我们在租房子的时候回去找中介,为什么呢？因为你对该地区房屋的信息掌握的不够全面,希望找一个更熟悉的人去帮你做,此处的代理就是这个意思。再如我们有的时候打官司,我们需要请律师,因为律师在法律方面有专长,可以替我们进行操作,表达我们的想法。\n先来看看关系图:\n![](/images/post_images/20171225_06.png)根据上文的阐述,代理模式就比较容易的理解了,\n我们看下代码:\n\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n\n```java\npublic class Source implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"the original method!\");  \n    }  \n}  \n```\n\n```java\npublic class Proxy implements Sourceable {  \n\n    private Source source;  \n    public Proxy(){  \n        super();  \n        this.source = new Source();  \n    }  \n    @Override  \n    public void method() {  \n        before();  \n        source.method();  \n        atfer();  \n    }  \n    private void atfer() {  \n        System.out.println(\"after proxy!\");  \n    }  \n    private void before() {  \n        System.out.println(\"before proxy!\");  \n    }  \n}  \n```\n测试类:\n```java\npublic class ProxyTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source = new Proxy();  \n        source.method();  \n    }  \n\n}\n```\n输出：\n`before proxy!\nthe original method!\nafter proxy!`\n\n- **代理模式的应用场景:**\n如果已有的方法在使用的时候需要对原有的方法进行改进,此时有两种办法：\n1. 修改原有的方法来适应。这样违反了“对扩展开放,对修改关闭”的原则。\n2. 就是采用一个代理类调用原有的方法,且对产生的结果进行控制。这种方法就是代理模式。\n使用代理模式,可以将功能划分的更加清晰,有助于后期维护！\n\n## 9、外观模式(Facade)\n\n外观模式是为了解决类与类之家的依赖关系的,像spring一样,可以将类和类之间的关系配置到配置文件中,而外观模式就是将他们的关系放在一个Facade类中,降低了类类之间的耦合度,该模式中没有涉及到接口,看下类图:(我们以一个计算机的启动过程为例)\n![](/images/post_images/20171225_07.png)\n\n我们先看下实现类:\n```java\npublic class CPU {  \n\n    public void startup(){  \n        System.out.println(\"cpu startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"cpu shutdown!\");  \n    }  \n}  \n```\n```java\npublic class CPU {  \n\n    public void startup(){  \n        System.out.println(\"cpu startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"cpu shutdown!\");  \n    }  \n}  \n```\n```java\npublic class Disk {  \n\n    public void startup(){  \n        System.out.println(\"disk startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"disk shutdown!\");  \n    }  \n}  \n```\n```java\npublic class Computer {  \n    private CPU cpu;  \n    private Memory memory;  \n    private Disk disk;  \n\n    public Computer(){  \n        cpu = new CPU();  \n        memory = new Memory();  \n        disk = new Disk();  \n    }  \n\n    public void startup(){  \n        System.out.println(\"start the computer!\");  \n        cpu.startup();  \n        memory.startup();  \n        disk.startup();  \n        System.out.println(\"start computer finished!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"begin to close the computer!\");  \n        cpu.shutdown();  \n        memory.shutdown();  \n        disk.shutdown();  \n        System.out.println(\"computer closed!\");  \n    }  \n}  \n```\nUser类如下:\n```java\npublic class User {  \n\n    public static void main(String[] args) {  \n        Computer computer = new Computer();  \n        computer.startup();  \n        computer.shutdown();  \n    }  \n}  \n```\n输出:\n`start the computer!\n\tcpu startup!\n\tmemory startup!\n\tdisk startup!\n\tstart computer finished!\n\tbegin to close the computer!\n\tcpu shutdown!\n\tmemory shutdown!\n\tdisk shutdown!\n\tcomputer closed!`\n\n如果我们没有Computer类,那么,CPU、Memory、Disk他们之间将会相互持有实例,产生关系,这样会造成严重的依赖,修改一个类,可能会带来其他类的修改,这不是我们想要看到的,有了Computer类,他们之间的关系被放在了Computer类里,这样就起到了解耦的作用,这,就是外观模式！\n\n## 桥接模式(Bridge)\n桥接模式就是把事物和其具体实现分开,使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦,使得二者可以独立变化,像我们常用的JDBC桥DriverManager一样,JDBC进行连接数据库的时候,在各个数据库之间进行切换,基本不需要动太多的代码,甚至丝毫不用动,原因就是JDBC提供统一接口,每个数据库提供各自的实现,用一个叫做数据库驱动的程序来桥接就行了。\n我们来看看关系图:\n![](/images/post_images/20171225_08.png)\n实现代码:\n先定义接口:\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n分别定义两个实现类:\n\n```java\npublic class SourceSub1 implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"this is the first sub!\");  \n    }  \n}  \n```\n```java\npublic class SourceSub2 implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"this is the second sub!\");  \n    }  \n}  \n```\n定义一个桥,持有Sourceable的一个实例:\n```java\npublic abstract class Bridge {  \n    private Sourceable source;  \n\n    public void method(){  \n        source.method();  \n    }  \n\n    public Sourceable getSource() {  \n        return source;  \n    }  \n\n    public void setSource(Sourceable source) {  \n        this.source = source;  \n    }  \n}\n```\n\n```java\npublic class MyBridge extends Bridge {  \n    public void method(){  \n        getSource().method();  \n    }  \n}\n```\n测试类:\n```java\npublic class BridgeTest {  \n\n    public static void main(String[] args) {  \n\n        Bridge bridge = new MyBridge();  \n\n        /*调用第一个对象*/  \n        Sourceable source1 = new SourceSub1();  \n        bridge.setSource(source1);  \n        bridge.method();  \n\n        /*调用第二个对象*/  \n        Sourceable source2 = new SourceSub2();  \n        bridge.setSource(source2);  \n        bridge.method();  \n    }  \n}  \n```\noutput：\n`this is the first sub!\n this is the second sub!`\n这样,就通过对Bridge类的调用,实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。接下来我再画个图,大家就应该明白了,因为这个图是我们JDBC连接的原理,有数据库学习基础的,一结合就都懂了。\n![](/images/post_images/20171225_09.png)\n\n## 11. 组合模式（Composite）\n\t组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便,看看关系图：\n直接来看代码:\n![](/images/post_images/20171225_10.png)\n\n直接来看代码:\n```java\npublic class TreeNode {  \n\n    private String name;  \n    private TreeNode parent;  \n    private Vector<TreeNode> children = new Vector<TreeNode>();  \n\n    public TreeNode(String name){  \n        this.name = name;  \n    }  \n\n    public String getName() {  \n        return name;  \n    }  \n\n    public void setName(String name) {  \n        this.name = name;  \n    }  \n\n    public TreeNode getParent() {  \n        return parent;  \n    }  \n\n    public void setParent(TreeNode parent) {  \n        this.parent = parent;  \n    }  \n\n    //添加孩子节点  \n    public void add(TreeNode node){  \n        children.add(node);  \n    }  \n\n    //删除孩子节点  \n    public void remove(TreeNode node){  \n        children.remove(node);  \n    }  \n\n    //取得孩子节点  \n    public Enumeration<TreeNode> getChildren(){  \n        return children.elements();  \n    }  \n}  \n```\n\n```java\npublic class Tree {  \n\n    TreeNode root = null;  \n\n    public Tree(String name) {  \n        root = new TreeNode(name);  \n    }  \n\n    public static void main(String[] args) {  \n        Tree tree = new Tree(\"A\");  \n        TreeNode nodeB = new TreeNode(\"B\");  \n        TreeNode nodeC = new TreeNode(\"C\");  \n\n        nodeB.add(nodeC);  \n        tree.root.add(nodeB);  \n        System.out.println(\"build the tree finished!\");  \n    }  \n}  \n```\n使用场景: 将多个对象组合在一起进行操作,常用于表示树形结构中,例如二叉树,数等。\n\n## 12. 享元模式(Flyweight)\n\n享元模式的主要目的是实现对象的共享,即共享池,当系统中对象多的时候可以减少内存的开销,\n通常与工厂模式一起使用。\n\n![](/images/post_images/20171225_11.png)\n\nFlyWeightFactory负责创建和管理享元单元,当一个客户端请求时,工厂需要检查当前对象池中是否有符合条件的对象,如果有,就返回已经存在的对象,如果没有,则创建一个新对象,FlyWeight是超类。一提到共享池,我们很容易联想到Java里面的JDBC连接池,想想每个连接的特点,我们不难总结出：适用于作共享的一些个对象,他们有一些共有的属性,就拿数据库连接池来说,url、driverClassName、username、password及dbname,这些属性对于每个连接来说都是一样的,所以就适合用享元模式来处理,建一个工厂类,将上述类似属性作为内部数据,其它的作为外部数据,在方法调用时,当做参数传进来,这样就节省了空间,减少了实例的数量。看个例子:\n![](/images/post_images/20171225_12.png)\n\n看下数据库连接池的代码:\n\n```java\npublic class ConnectionPool {  \n\n    private Vector<Connection> pool;  \n\n    /*公有属性*/  \n    private String url = \"jdbc:mysql://localhost:3306/test\";  \n    private String username = \"root\";  \n    private String password = \"root\";  \n    private String driverClassName = \"com.mysql.jdbc.Driver\";  \n\n    private int poolSize = 100;  \n    private static ConnectionPool instance = null;  \n    Connection conn = null;  \n\n    /*构造方法,做一些初始化工作*/  \n    private ConnectionPool() {  \n        pool = new Vector<Connection>(poolSize);  \n\n        for (int i = 0; i < poolSize; i++) {  \n            try {  \n                Class.forName(driverClassName);  \n                conn = DriverManager.getConnection(url, username, password);  \n                pool.add(conn);  \n            } catch (ClassNotFoundException e) {  \n                e.printStackTrace();  \n            } catch (SQLException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }  \n\n    /* 返回连接到连接池 */  \n    public synchronized void release() {  \n        pool.add(conn);  \n    }  \n\n    /* 返回连接池中的一个数据库连接 */  \n    public synchronized Connection getConnection() {  \n        if (pool.size() > 0) {  \n            Connection conn = pool.get(0);  \n            pool.remove(conn);  \n            return conn;  \n        } else {  \n            return null;  \n        }  \n    }  \n}  \n```\n通过连接池的管理,实现了数据库连接的共享,不需要每一次都重新创建连接,节省了数据库重新创建的开销,提升了系统的性能！\n","source":"_posts/Java中的23中设计模式-二.md","raw":"---\ntitle: Java中的23中设计模式(二)\ndate: 2017-12-25 08:27:27\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - Java\n  - 设计模式\ntype:\n  - Java\n  - 设计模式\n---\n\n> 本文转载自[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n我们接着讨论设计模式,上篇文章我讲完了5种创建型模式,这章开始,我将讲下7种结构型模式：适\n配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模\n式是各种模式的起源,我们看下面的图：\n\n![](/images/post_images/20171225_01.png)\n## 6. 适配器模式(Adapter)\n\t适配器模式将某个类的接口转换成客户端期望的另一个接口表示,目的是消除由于接口不匹配所\n造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式\n。\n\n首先,我们来看看类的适配器模式,先看类图：\n![](/images/post_images/20171225_02.png)\n\n核心思想就是：有一个Source类,拥有一个方法,待适配,目标接口时Targetable,通过\nAdapter类,将Source的功能扩展到Targetable里,看代码：\n\n```java\npublic class Source {  \n\n    public void method1() {  \n        System.out.println(\"this is original method!\");  \n    }  \n}  \n```\n\n```java\npublic interface Targetable {  \n\n    /* 与原类中的方法相同 */  \n    public void method1();  \n\n    /* 新类的方法 */  \n    public void method2();  \n}  \n\n```\n\n```java\npublic class Adapter extends Source implements Targetable {  \n\n    @Override  \n    public void method2() {  \n        System.out.println(\"this is the targetable method!\");  \n    }  \n}  \n```\nAdapter类继承Source类,实现Targetable接口,下面是测试类:\n\n```java\npublic class AdapterTest {  \n\n    public static void main(String[] args) {  \n        Targetable target = new Adapter();  \n        target.method1();  \n        target.method2();  \n    }  \n}\n```\n输出:\n`this is original method!\nthis is the targetable method!`\n这样Targetable接口的实现类就具有了Source类的功能。\n\n<font color='#B83B5E'>**对象的适配器模式**</font>\n\n基本思路和类的适配器模式相同,只是将Adapter类作修改,这次不继承Source类,而是持有Source类的实例,以达到解决兼容性的问题。看图:\n![](/images/post_images/20171225_03.png)\n\n只需要修改Adapter类的源码即可:\n```java\npublic class Wrapper implements Targetable {  \n\n    private Source source;  \n\n    public Wrapper(Source source){  \n        super();  \n        this.source = source;  \n    }  \n    @Override  \n    public void method2() {  \n        System.out.println(\"this is the targetable method!\");  \n    }  \n\n    @Override  \n    public void method1() {  \n        source.method1();  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class AdapterTest {  \n\n    public static void main(String[] args) {  \n        Source source = new Source();  \n        Targetable target = new Wrapper(source);  \n        target.method1();  \n        target.method2();  \n    }  \n}\n```\n输出与第一种一样,只是适配的方法不同而已。\n\n第三种适配器模式是<font color='#B83B5E'>**接口的适配器模式**</font>,接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法,当我们写该接口的实现类时,必须实现该接口的所有方法,这明显有时比较浪费,因为并不是所有的方法都是我们需要的,有时只需要某一些,此处为了解决这个问题,我们引入了接口的适配器模式,借助于一个抽象类,该抽象类实现了该接口,实现了所有的方法,而我们不和原始的接口打交道,只和该抽象类取得联系,所以我们写一个类,继承该抽象类,重写我们需要的方法就行。看一下类图:\n![](/images/post_images/20171225_04.png)\n\n这个很好理解,在实际开发中,我们也常会遇到这种接口中定义了太多的方法,以致于有时我们在\n一些实现类中并不是都需要。看代码:\n```java\npublic interface Sourceable {  \n\n    public void method1();  \n    public void method2();  \n}  \n```\n抽象类Wrapper2:\n```java\npublic abstract class Wrapper2 implements Sourceable{  \n\n    public void method1(){}  \n    public void method2(){}  \n}  \n```\n```java\npublic class SourceSub1 extends Wrapper2 {  \n    public void method1(){  \n        System.out.println(\"the sourceable interface's first Sub1!\");  \n    }  \n}\n```\n```java\npublic class SourceSub2 extends Wrapper2 {  \n    public void method2(){  \n        System.out.println(\"the sourceable interface's second Sub2!\");  \n    }  \n}  \n```\n```java\npublic class WrapperTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source1 = new SourceSub1();  \n        Sourceable source2 = new SourceSub2();  \n\n        source1.method1();  \n        source1.method2();  \n        source2.method1();  \n        source2.method2();  \n    }  \n}\n```\n测试输出：\n`the sourceable interface's first Sub1!\nthe sourceable interface's second Sub2!`\n达到了我们的效果！\n讲了这么多,总结一下三种适配器模式的应用场景：\n类的适配器模式：当希望将<font color='#F08A5D'>一个类</font>转换成满足<font color='#F08A5D'>另一个新接口</font>的类时,可以使用类的适配器模式,创建一个新类,继承原有的类,实现新的接口即可。对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时,可以创建一个Wrapper类,持有原类的一个实例,在Wrapper类的方法中,调用实例的方法就行。接口的适配器模式：当不希望实现一个接口中所有的方法时,可以创建一个抽象类Wrapper,实现所有方法,我们写别的类的时候,继承抽象类即可。\n\n## 7. 装饰模式（Decorator）\n\n顾名思义,装饰模式就是给一个对象增加一些新的功能,而且是动态的,要求装饰对象和被装饰对\n象实现同一个接口,装饰对象持有被装饰对象的实例,关系图如下:\n![](/images/post_images/20171225_05.png)\n\nSource类是被装饰类,Decorator类是一个装饰类,可以为Source类动态的添加一些功能,代码如下:\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n```java\npublic class Source implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"the original method!\");  \n    }  \n}  \n```\n\n```java\npublic class Decorator implements Sourceable {  \n\n    private Sourceable source;  \n\n    public Decorator(Sourceable source){  \n        super();  \n        this.source = source;  \n    }  \n    @Override  \n    public void method() {  \n        System.out.println(\"before decorator!\");  \n        source.method();  \n        System.out.println(\"after decorator!\");  \n    }  \n}  \n```\n\n测试类:\n```java\npublic class DecoratorTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source = new Source();  \n        Sourceable obj = new Decorator(source);  \n        obj.method();  \n    }  \n}  \n```\n输出：\n`before decorator!\nthe original method!\nafter decorator!`\n\n- 装饰器模式的应用场景：\n1. 需要扩展一个类的功能。\n2. 动态的为一个对象增加功能,而且还能动态撤销。(继承不能做到这一点,继承的功能是静态的,不能动态增删。)\n\n- 缺点：产生过多相似的对象,不易排错！\n\n## 8. 代理模式(Proxy)\n其实每个模式名称就表明了该模式的作用,代理模式就是多一个代理类出来,替原对象进行一些操作,比如我们在租房子的时候回去找中介,为什么呢？因为你对该地区房屋的信息掌握的不够全面,希望找一个更熟悉的人去帮你做,此处的代理就是这个意思。再如我们有的时候打官司,我们需要请律师,因为律师在法律方面有专长,可以替我们进行操作,表达我们的想法。\n先来看看关系图:\n![](/images/post_images/20171225_06.png)根据上文的阐述,代理模式就比较容易的理解了,\n我们看下代码:\n\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n\n```java\npublic class Source implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"the original method!\");  \n    }  \n}  \n```\n\n```java\npublic class Proxy implements Sourceable {  \n\n    private Source source;  \n    public Proxy(){  \n        super();  \n        this.source = new Source();  \n    }  \n    @Override  \n    public void method() {  \n        before();  \n        source.method();  \n        atfer();  \n    }  \n    private void atfer() {  \n        System.out.println(\"after proxy!\");  \n    }  \n    private void before() {  \n        System.out.println(\"before proxy!\");  \n    }  \n}  \n```\n测试类:\n```java\npublic class ProxyTest {  \n\n    public static void main(String[] args) {  \n        Sourceable source = new Proxy();  \n        source.method();  \n    }  \n\n}\n```\n输出：\n`before proxy!\nthe original method!\nafter proxy!`\n\n- **代理模式的应用场景:**\n如果已有的方法在使用的时候需要对原有的方法进行改进,此时有两种办法：\n1. 修改原有的方法来适应。这样违反了“对扩展开放,对修改关闭”的原则。\n2. 就是采用一个代理类调用原有的方法,且对产生的结果进行控制。这种方法就是代理模式。\n使用代理模式,可以将功能划分的更加清晰,有助于后期维护！\n\n## 9、外观模式(Facade)\n\n外观模式是为了解决类与类之家的依赖关系的,像spring一样,可以将类和类之间的关系配置到配置文件中,而外观模式就是将他们的关系放在一个Facade类中,降低了类类之间的耦合度,该模式中没有涉及到接口,看下类图:(我们以一个计算机的启动过程为例)\n![](/images/post_images/20171225_07.png)\n\n我们先看下实现类:\n```java\npublic class CPU {  \n\n    public void startup(){  \n        System.out.println(\"cpu startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"cpu shutdown!\");  \n    }  \n}  \n```\n```java\npublic class CPU {  \n\n    public void startup(){  \n        System.out.println(\"cpu startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"cpu shutdown!\");  \n    }  \n}  \n```\n```java\npublic class Disk {  \n\n    public void startup(){  \n        System.out.println(\"disk startup!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"disk shutdown!\");  \n    }  \n}  \n```\n```java\npublic class Computer {  \n    private CPU cpu;  \n    private Memory memory;  \n    private Disk disk;  \n\n    public Computer(){  \n        cpu = new CPU();  \n        memory = new Memory();  \n        disk = new Disk();  \n    }  \n\n    public void startup(){  \n        System.out.println(\"start the computer!\");  \n        cpu.startup();  \n        memory.startup();  \n        disk.startup();  \n        System.out.println(\"start computer finished!\");  \n    }  \n\n    public void shutdown(){  \n        System.out.println(\"begin to close the computer!\");  \n        cpu.shutdown();  \n        memory.shutdown();  \n        disk.shutdown();  \n        System.out.println(\"computer closed!\");  \n    }  \n}  \n```\nUser类如下:\n```java\npublic class User {  \n\n    public static void main(String[] args) {  \n        Computer computer = new Computer();  \n        computer.startup();  \n        computer.shutdown();  \n    }  \n}  \n```\n输出:\n`start the computer!\n\tcpu startup!\n\tmemory startup!\n\tdisk startup!\n\tstart computer finished!\n\tbegin to close the computer!\n\tcpu shutdown!\n\tmemory shutdown!\n\tdisk shutdown!\n\tcomputer closed!`\n\n如果我们没有Computer类,那么,CPU、Memory、Disk他们之间将会相互持有实例,产生关系,这样会造成严重的依赖,修改一个类,可能会带来其他类的修改,这不是我们想要看到的,有了Computer类,他们之间的关系被放在了Computer类里,这样就起到了解耦的作用,这,就是外观模式！\n\n## 桥接模式(Bridge)\n桥接模式就是把事物和其具体实现分开,使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦,使得二者可以独立变化,像我们常用的JDBC桥DriverManager一样,JDBC进行连接数据库的时候,在各个数据库之间进行切换,基本不需要动太多的代码,甚至丝毫不用动,原因就是JDBC提供统一接口,每个数据库提供各自的实现,用一个叫做数据库驱动的程序来桥接就行了。\n我们来看看关系图:\n![](/images/post_images/20171225_08.png)\n实现代码:\n先定义接口:\n```java\npublic interface Sourceable {  \n    public void method();  \n}  \n```\n分别定义两个实现类:\n\n```java\npublic class SourceSub1 implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"this is the first sub!\");  \n    }  \n}  \n```\n```java\npublic class SourceSub2 implements Sourceable {  \n\n    @Override  \n    public void method() {  \n        System.out.println(\"this is the second sub!\");  \n    }  \n}  \n```\n定义一个桥,持有Sourceable的一个实例:\n```java\npublic abstract class Bridge {  \n    private Sourceable source;  \n\n    public void method(){  \n        source.method();  \n    }  \n\n    public Sourceable getSource() {  \n        return source;  \n    }  \n\n    public void setSource(Sourceable source) {  \n        this.source = source;  \n    }  \n}\n```\n\n```java\npublic class MyBridge extends Bridge {  \n    public void method(){  \n        getSource().method();  \n    }  \n}\n```\n测试类:\n```java\npublic class BridgeTest {  \n\n    public static void main(String[] args) {  \n\n        Bridge bridge = new MyBridge();  \n\n        /*调用第一个对象*/  \n        Sourceable source1 = new SourceSub1();  \n        bridge.setSource(source1);  \n        bridge.method();  \n\n        /*调用第二个对象*/  \n        Sourceable source2 = new SourceSub2();  \n        bridge.setSource(source2);  \n        bridge.method();  \n    }  \n}  \n```\noutput：\n`this is the first sub!\n this is the second sub!`\n这样,就通过对Bridge类的调用,实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。接下来我再画个图,大家就应该明白了,因为这个图是我们JDBC连接的原理,有数据库学习基础的,一结合就都懂了。\n![](/images/post_images/20171225_09.png)\n\n## 11. 组合模式（Composite）\n\t组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便,看看关系图：\n直接来看代码:\n![](/images/post_images/20171225_10.png)\n\n直接来看代码:\n```java\npublic class TreeNode {  \n\n    private String name;  \n    private TreeNode parent;  \n    private Vector<TreeNode> children = new Vector<TreeNode>();  \n\n    public TreeNode(String name){  \n        this.name = name;  \n    }  \n\n    public String getName() {  \n        return name;  \n    }  \n\n    public void setName(String name) {  \n        this.name = name;  \n    }  \n\n    public TreeNode getParent() {  \n        return parent;  \n    }  \n\n    public void setParent(TreeNode parent) {  \n        this.parent = parent;  \n    }  \n\n    //添加孩子节点  \n    public void add(TreeNode node){  \n        children.add(node);  \n    }  \n\n    //删除孩子节点  \n    public void remove(TreeNode node){  \n        children.remove(node);  \n    }  \n\n    //取得孩子节点  \n    public Enumeration<TreeNode> getChildren(){  \n        return children.elements();  \n    }  \n}  \n```\n\n```java\npublic class Tree {  \n\n    TreeNode root = null;  \n\n    public Tree(String name) {  \n        root = new TreeNode(name);  \n    }  \n\n    public static void main(String[] args) {  \n        Tree tree = new Tree(\"A\");  \n        TreeNode nodeB = new TreeNode(\"B\");  \n        TreeNode nodeC = new TreeNode(\"C\");  \n\n        nodeB.add(nodeC);  \n        tree.root.add(nodeB);  \n        System.out.println(\"build the tree finished!\");  \n    }  \n}  \n```\n使用场景: 将多个对象组合在一起进行操作,常用于表示树形结构中,例如二叉树,数等。\n\n## 12. 享元模式(Flyweight)\n\n享元模式的主要目的是实现对象的共享,即共享池,当系统中对象多的时候可以减少内存的开销,\n通常与工厂模式一起使用。\n\n![](/images/post_images/20171225_11.png)\n\nFlyWeightFactory负责创建和管理享元单元,当一个客户端请求时,工厂需要检查当前对象池中是否有符合条件的对象,如果有,就返回已经存在的对象,如果没有,则创建一个新对象,FlyWeight是超类。一提到共享池,我们很容易联想到Java里面的JDBC连接池,想想每个连接的特点,我们不难总结出：适用于作共享的一些个对象,他们有一些共有的属性,就拿数据库连接池来说,url、driverClassName、username、password及dbname,这些属性对于每个连接来说都是一样的,所以就适合用享元模式来处理,建一个工厂类,将上述类似属性作为内部数据,其它的作为外部数据,在方法调用时,当做参数传进来,这样就节省了空间,减少了实例的数量。看个例子:\n![](/images/post_images/20171225_12.png)\n\n看下数据库连接池的代码:\n\n```java\npublic class ConnectionPool {  \n\n    private Vector<Connection> pool;  \n\n    /*公有属性*/  \n    private String url = \"jdbc:mysql://localhost:3306/test\";  \n    private String username = \"root\";  \n    private String password = \"root\";  \n    private String driverClassName = \"com.mysql.jdbc.Driver\";  \n\n    private int poolSize = 100;  \n    private static ConnectionPool instance = null;  \n    Connection conn = null;  \n\n    /*构造方法,做一些初始化工作*/  \n    private ConnectionPool() {  \n        pool = new Vector<Connection>(poolSize);  \n\n        for (int i = 0; i < poolSize; i++) {  \n            try {  \n                Class.forName(driverClassName);  \n                conn = DriverManager.getConnection(url, username, password);  \n                pool.add(conn);  \n            } catch (ClassNotFoundException e) {  \n                e.printStackTrace();  \n            } catch (SQLException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }  \n\n    /* 返回连接到连接池 */  \n    public synchronized void release() {  \n        pool.add(conn);  \n    }  \n\n    /* 返回连接池中的一个数据库连接 */  \n    public synchronized Connection getConnection() {  \n        if (pool.size() > 0) {  \n            Connection conn = pool.get(0);  \n            pool.remove(conn);  \n            return conn;  \n        } else {  \n            return null;  \n        }  \n    }  \n}  \n```\n通过连接池的管理,实现了数据库连接的共享,不需要每一次都重新创建连接,节省了数据库重新创建的开销,提升了系统的性能！\n","slug":"Java中的23中设计模式-二","published":1,"updated":"2018-01-22T11:23:17.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m06a0018q8kxenzsvybw","content":"<blockquote>\n<p>本文转载自<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<p>我们接着讨论设计模式,上篇文章我讲完了5种创建型模式,这章开始,我将讲下7种结构型模式：适<br>配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模<br>式是各种模式的起源,我们看下面的图：</p>\n<p><img src=\"/images/post_images/20171225_01.png\" alt=\"\"></p>\n<h2 id=\"6-适配器模式-Adapter\"><a href=\"#6-适配器模式-Adapter\" class=\"headerlink\" title=\"6. 适配器模式(Adapter)\"></a>6. 适配器模式(Adapter)</h2><pre><code>适配器模式将某个类的接口转换成客户端期望的另一个接口表示,目的是消除由于接口不匹配所\n</code></pre><p>造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式<br>。</p>\n<p>首先,我们来看看类的适配器模式,先看类图：<br><img src=\"/images/post_images/20171225_02.png\" alt=\"\"></p>\n<p>核心思想就是：有一个Source类,拥有一个方法,待适配,目标接口时Targetable,通过<br>Adapter类,将Source的功能扩展到Targetable里,看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 与原类中的方法相同 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 新类的方法 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the targetable method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Adapter类继承Source类,实现Targetable接口,下面是测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Targetable target = <span class=\"keyword\">new</span> Adapter();  </span><br><span class=\"line\">        target.method1();  </span><br><span class=\"line\">        target.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><code>this is original method!\nthis is the targetable method!</code><br>这样Targetable接口的实现类就具有了Source类的功能。</p>\n<font color=\"#B83B5E\"><strong>对象的适配器模式</strong></font>\n\n<p>基本思路和类的适配器模式相同,只是将Adapter类作修改,这次不继承Source类,而是持有Source类的实例,以达到解决兼容性的问题。看图:<br><img src=\"/images/post_images/20171225_03.png\" alt=\"\"></p>\n<p>只需要修改Adapter类的源码即可:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Source source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Wrapper</span><span class=\"params\">(Source source)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the targetable method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        source.method1();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Source source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">        Targetable target = <span class=\"keyword\">new</span> Wrapper(source);  </span><br><span class=\"line\">        target.method1();  </span><br><span class=\"line\">        target.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出与第一种一样,只是适配的方法不同而已。</p>\n<p>第三种适配器模式是<font color=\"#B83B5E\"><strong>接口的适配器模式</strong></font>,接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法,当我们写该接口的实现类时,必须实现该接口的所有方法,这明显有时比较浪费,因为并不是所有的方法都是我们需要的,有时只需要某一些,此处为了解决这个问题,我们引入了接口的适配器模式,借助于一个抽象类,该抽象类实现了该接口,实现了所有的方法,而我们不和原始的接口打交道,只和该抽象类取得联系,所以我们写一个类,继承该抽象类,重写我们需要的方法就行。看一下类图:<br><img src=\"/images/post_images/20171225_04.png\" alt=\"\"></p>\n<p>这个很好理解,在实际开发中,我们也常会遇到这种接口中定义了太多的方法,以致于有时我们在<br>一些实现类中并不是都需要。看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>抽象类Wrapper2:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span></span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper2</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the sourceable interface's first Sub1!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper2</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the sourceable interface's second Sub2!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WrapperTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source1 = <span class=\"keyword\">new</span> SourceSub1();  </span><br><span class=\"line\">        Sourceable source2 = <span class=\"keyword\">new</span> SourceSub2();  </span><br><span class=\"line\"></span><br><span class=\"line\">        source1.method1();  </span><br><span class=\"line\">        source1.method2();  </span><br><span class=\"line\">        source2.method1();  </span><br><span class=\"line\">        source2.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：<br><code>the sourceable interface&#39;s first Sub1!\nthe sourceable interface&#39;s second Sub2!</code><br>达到了我们的效果！<br>讲了这么多,总结一下三种适配器模式的应用场景：<br>类的适配器模式：当希望将<font color=\"#F08A5D\">一个类</font>转换成满足<font color=\"#F08A5D\">另一个新接口</font>的类时,可以使用类的适配器模式,创建一个新类,继承原有的类,实现新的接口即可。对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时,可以创建一个Wrapper类,持有原类的一个实例,在Wrapper类的方法中,调用实例的方法就行。接口的适配器模式：当不希望实现一个接口中所有的方法时,可以创建一个抽象类Wrapper,实现所有方法,我们写别的类的时候,继承抽象类即可。</p>\n<h2 id=\"7-装饰模式（Decorator）\"><a href=\"#7-装饰模式（Decorator）\" class=\"headerlink\" title=\"7. 装饰模式（Decorator）\"></a>7. 装饰模式（Decorator）</h2><p>顾名思义,装饰模式就是给一个对象增加一些新的功能,而且是动态的,要求装饰对象和被装饰对<br>象实现同一个接口,装饰对象持有被装饰对象的实例,关系图如下:<br><img src=\"/images/post_images/20171225_05.png\" alt=\"\"></p>\n<p>Source类是被装饰类,Decorator类是一个装饰类,可以为Source类动态的添加一些功能,代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Sourceable source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decorator</span><span class=\"params\">(Sourceable source)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before decorator!\"</span>);  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after decorator!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">        Sourceable obj = <span class=\"keyword\">new</span> Decorator(source);  </span><br><span class=\"line\">        obj.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>before decorator!\nthe original method!\nafter decorator!</code></p>\n<ul>\n<li>装饰器模式的应用场景：</li>\n</ul>\n<ol>\n<li>需要扩展一个类的功能。</li>\n<li>动态的为一个对象增加功能,而且还能动态撤销。(继承不能做到这一点,继承的功能是静态的,不能动态增删。)</li>\n</ol>\n<ul>\n<li>缺点：产生过多相似的对象,不易排错！</li>\n</ul>\n<h2 id=\"8-代理模式-Proxy\"><a href=\"#8-代理模式-Proxy\" class=\"headerlink\" title=\"8. 代理模式(Proxy)\"></a>8. 代理模式(Proxy)</h2><p>其实每个模式名称就表明了该模式的作用,代理模式就是多一个代理类出来,替原对象进行一些操作,比如我们在租房子的时候回去找中介,为什么呢？因为你对该地区房屋的信息掌握的不够全面,希望找一个更熟悉的人去帮你做,此处的代理就是这个意思。再如我们有的时候打官司,我们需要请律师,因为律师在法律方面有专长,可以替我们进行操作,表达我们的想法。<br>先来看看关系图:<br><img src=\"/images/post_images/20171225_06.png\" alt=\"\">根据上文的阐述,代理模式就比较容易的理解了,<br>我们看下代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Source source;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        before();  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">        atfer();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">atfer</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after proxy!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before proxy!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source = <span class=\"keyword\">new</span> Proxy();  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>before proxy!\nthe original method!\nafter proxy!</code></p>\n<ul>\n<li><strong>代理模式的应用场景:</strong><br>如果已有的方法在使用的时候需要对原有的方法进行改进,此时有两种办法：</li>\n</ul>\n<ol>\n<li>修改原有的方法来适应。这样违反了“对扩展开放,对修改关闭”的原则。</li>\n<li>就是采用一个代理类调用原有的方法,且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式,可以将功能划分的更加清晰,有助于后期维护！</li>\n</ol>\n<h2 id=\"9、外观模式-Facade\"><a href=\"#9、外观模式-Facade\" class=\"headerlink\" title=\"9、外观模式(Facade)\"></a>9、外观模式(Facade)</h2><p>外观模式是为了解决类与类之家的依赖关系的,像spring一样,可以将类和类之间的关系配置到配置文件中,而外观模式就是将他们的关系放在一个Facade类中,降低了类类之间的耦合度,该模式中没有涉及到接口,看下类图:(我们以一个计算机的启动过程为例)<br><img src=\"/images/post_images/20171225_07.png\" alt=\"\"></p>\n<p>我们先看下实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Disk</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> CPU cpu;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memory memory;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Disk disk;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        cpu = <span class=\"keyword\">new</span> CPU();  </span><br><span class=\"line\">        memory = <span class=\"keyword\">new</span> Memory();  </span><br><span class=\"line\">        disk = <span class=\"keyword\">new</span> Disk();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start the computer!\"</span>);  </span><br><span class=\"line\">        cpu.startup();  </span><br><span class=\"line\">        memory.startup();  </span><br><span class=\"line\">        disk.startup();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start computer finished!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"begin to close the computer!\"</span>);  </span><br><span class=\"line\">        cpu.shutdown();  </span><br><span class=\"line\">        memory.shutdown();  </span><br><span class=\"line\">        disk.shutdown();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"computer closed!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User类如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Computer computer = <span class=\"keyword\">new</span> Computer();  </span><br><span class=\"line\">        computer.startup();  </span><br><span class=\"line\">        computer.shutdown();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>start the computer!\n    cpu startup!\n    memory startup!\n    disk startup!\n    start computer finished!\n    begin to close the computer!\n    cpu shutdown!\n    memory shutdown!\n    disk shutdown!\n    computer closed!</code></p>\n<p>如果我们没有Computer类,那么,CPU、Memory、Disk他们之间将会相互持有实例,产生关系,这样会造成严重的依赖,修改一个类,可能会带来其他类的修改,这不是我们想要看到的,有了Computer类,他们之间的关系被放在了Computer类里,这样就起到了解耦的作用,这,就是外观模式！</p>\n<h2 id=\"桥接模式-Bridge\"><a href=\"#桥接模式-Bridge\" class=\"headerlink\" title=\"桥接模式(Bridge)\"></a>桥接模式(Bridge)</h2><p>桥接模式就是把事物和其具体实现分开,使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦,使得二者可以独立变化,像我们常用的JDBC桥DriverManager一样,JDBC进行连接数据库的时候,在各个数据库之间进行切换,基本不需要动太多的代码,甚至丝毫不用动,原因就是JDBC提供统一接口,每个数据库提供各自的实现,用一个叫做数据库驱动的程序来桥接就行了。<br>我们来看看关系图:<br><img src=\"/images/post_images/20171225_08.png\" alt=\"\"><br>实现代码:<br>先定义接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>分别定义两个实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the first sub!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the second sub!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个桥,持有Sourceable的一个实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bridge</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Sourceable source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sourceable <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSource</span><span class=\"params\">(Sourceable source)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBridge</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bridge</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        getSource().method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgeTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        Bridge bridge = <span class=\"keyword\">new</span> MyBridge();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*调用第一个对象*/</span>  </span><br><span class=\"line\">        Sourceable source1 = <span class=\"keyword\">new</span> SourceSub1();  </span><br><span class=\"line\">        bridge.setSource(source1);  </span><br><span class=\"line\">        bridge.method();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*调用第二个对象*/</span>  </span><br><span class=\"line\">        Sourceable source2 = <span class=\"keyword\">new</span> SourceSub2();  </span><br><span class=\"line\">        bridge.setSource(source2);  </span><br><span class=\"line\">        bridge.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>output：<br><code>this is the first sub!\n this is the second sub!</code><br>这样,就通过对Bridge类的调用,实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。接下来我再画个图,大家就应该明白了,因为这个图是我们JDBC连接的原理,有数据库学习基础的,一结合就都懂了。<br><img src=\"/images/post_images/20171225_09.png\" alt=\"\"></p>\n<h2 id=\"11-组合模式（Composite）\"><a href=\"#11-组合模式（Composite）\" class=\"headerlink\" title=\"11. 组合模式（Composite）\"></a>11. 组合模式（Composite）</h2><pre><code>组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便,看看关系图：\n</code></pre><p>直接来看代码:<br><img src=\"/images/post_images/20171225_10.png\" alt=\"\"></p>\n<p>直接来看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> TreeNode parent;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;TreeNode&gt; children = <span class=\"keyword\">new</span> Vector&lt;TreeNode&gt;();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(String name)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> parent;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParent</span><span class=\"params\">(TreeNode parent)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parent = parent;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(TreeNode node)</span></span>&#123;  </span><br><span class=\"line\">        children.add(node);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(TreeNode node)</span></span>&#123;  </span><br><span class=\"line\">        children.remove(node);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取得孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Enumeration&lt;TreeNode&gt; <span class=\"title\">getChildren</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> children.elements();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> TreeNode(name);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Tree tree = <span class=\"keyword\">new</span> Tree(<span class=\"string\">\"A\"</span>);  </span><br><span class=\"line\">        TreeNode nodeB = <span class=\"keyword\">new</span> TreeNode(<span class=\"string\">\"B\"</span>);  </span><br><span class=\"line\">        TreeNode nodeC = <span class=\"keyword\">new</span> TreeNode(<span class=\"string\">\"C\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        nodeB.add(nodeC);  </span><br><span class=\"line\">        tree.root.add(nodeB);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"build the tree finished!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用场景: 将多个对象组合在一起进行操作,常用于表示树形结构中,例如二叉树,数等。</p>\n<h2 id=\"12-享元模式-Flyweight\"><a href=\"#12-享元模式-Flyweight\" class=\"headerlink\" title=\"12. 享元模式(Flyweight)\"></a>12. 享元模式(Flyweight)</h2><p>享元模式的主要目的是实现对象的共享,即共享池,当系统中对象多的时候可以减少内存的开销,<br>通常与工厂模式一起使用。</p>\n<p><img src=\"/images/post_images/20171225_11.png\" alt=\"\"></p>\n<p>FlyWeightFactory负责创建和管理享元单元,当一个客户端请求时,工厂需要检查当前对象池中是否有符合条件的对象,如果有,就返回已经存在的对象,如果没有,则创建一个新对象,FlyWeight是超类。一提到共享池,我们很容易联想到Java里面的JDBC连接池,想想每个连接的特点,我们不难总结出：适用于作共享的一些个对象,他们有一些共有的属性,就拿数据库连接池来说,url、driverClassName、username、password及dbname,这些属性对于每个连接来说都是一样的,所以就适合用享元模式来处理,建一个工厂类,将上述类似属性作为内部数据,其它的作为外部数据,在方法调用时,当做参数传进来,这样就节省了空间,减少了实例的数量。看个例子:<br><img src=\"/images/post_images/20171225_12.png\" alt=\"\"></p>\n<p>看下数据库连接池的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionPool</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Connection&gt; pool;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*公有属性*/</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username = <span class=\"string\">\"root\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password = <span class=\"string\">\"root\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> poolSize = <span class=\"number\">100</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConnectionPool instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    Connection conn = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*构造方法,做一些初始化工作*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ConnectionPool</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pool = <span class=\"keyword\">new</span> Vector&lt;Connection&gt;(poolSize);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; poolSize; i++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                Class.forName(driverClassName);  </span><br><span class=\"line\">                conn = DriverManager.getConnection(url, username, password);  </span><br><span class=\"line\">                pool.add(conn);  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;  </span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 返回连接到连接池 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pool.add(conn);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 返回连接池中的一个数据库连接 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pool.size() &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            Connection conn = pool.get(<span class=\"number\">0</span>);  </span><br><span class=\"line\">            pool.remove(conn);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> conn;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过连接池的管理,实现了数据库连接的共享,不需要每一次都重新创建连接,节省了数据库重新创建的开销,提升了系统的性能！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转载自<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<p>我们接着讨论设计模式,上篇文章我讲完了5种创建型模式,这章开始,我将讲下7种结构型模式：适<br>配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模<br>式是各种模式的起源,我们看下面的图：</p>\n<p><img src=\"/images/post_images/20171225_01.png\" alt=\"\"></p>\n<h2 id=\"6-适配器模式-Adapter\"><a href=\"#6-适配器模式-Adapter\" class=\"headerlink\" title=\"6. 适配器模式(Adapter)\"></a>6. 适配器模式(Adapter)</h2><pre><code>适配器模式将某个类的接口转换成客户端期望的另一个接口表示,目的是消除由于接口不匹配所\n</code></pre><p>造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式<br>。</p>\n<p>首先,我们来看看类的适配器模式,先看类图：<br><img src=\"/images/post_images/20171225_02.png\" alt=\"\"></p>\n<p>核心思想就是：有一个Source类,拥有一个方法,待适配,目标接口时Targetable,通过<br>Adapter类,将Source的功能扩展到Targetable里,看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 与原类中的方法相同 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 新类的方法 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the targetable method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Adapter类继承Source类,实现Targetable接口,下面是测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Targetable target = <span class=\"keyword\">new</span> Adapter();  </span><br><span class=\"line\">        target.method1();  </span><br><span class=\"line\">        target.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出:<br><code>this is original method!\nthis is the targetable method!</code><br>这样Targetable接口的实现类就具有了Source类的功能。</p>\n<font color=\"#B83B5E\"><strong>对象的适配器模式</strong></font>\n\n<p>基本思路和类的适配器模式相同,只是将Adapter类作修改,这次不继承Source类,而是持有Source类的实例,以达到解决兼容性的问题。看图:<br><img src=\"/images/post_images/20171225_03.png\" alt=\"\"></p>\n<p>只需要修改Adapter类的源码即可:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Targetable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Source source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Wrapper</span><span class=\"params\">(Source source)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the targetable method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        source.method1();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Source source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">        Targetable target = <span class=\"keyword\">new</span> Wrapper(source);  </span><br><span class=\"line\">        target.method1();  </span><br><span class=\"line\">        target.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出与第一种一样,只是适配的方法不同而已。</p>\n<p>第三种适配器模式是<font color=\"#B83B5E\"><strong>接口的适配器模式</strong></font>,接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法,当我们写该接口的实现类时,必须实现该接口的所有方法,这明显有时比较浪费,因为并不是所有的方法都是我们需要的,有时只需要某一些,此处为了解决这个问题,我们引入了接口的适配器模式,借助于一个抽象类,该抽象类实现了该接口,实现了所有的方法,而我们不和原始的接口打交道,只和该抽象类取得联系,所以我们写一个类,继承该抽象类,重写我们需要的方法就行。看一下类图:<br><img src=\"/images/post_images/20171225_04.png\" alt=\"\"></p>\n<p>这个很好理解,在实际开发中,我们也常会遇到这种接口中定义了太多的方法,以致于有时我们在<br>一些实现类中并不是都需要。看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>抽象类Wrapper2:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span></span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper2</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the sourceable interface's first Sub1!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper2</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the sourceable interface's second Sub2!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WrapperTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source1 = <span class=\"keyword\">new</span> SourceSub1();  </span><br><span class=\"line\">        Sourceable source2 = <span class=\"keyword\">new</span> SourceSub2();  </span><br><span class=\"line\"></span><br><span class=\"line\">        source1.method1();  </span><br><span class=\"line\">        source1.method2();  </span><br><span class=\"line\">        source2.method1();  </span><br><span class=\"line\">        source2.method2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：<br><code>the sourceable interface&#39;s first Sub1!\nthe sourceable interface&#39;s second Sub2!</code><br>达到了我们的效果！<br>讲了这么多,总结一下三种适配器模式的应用场景：<br>类的适配器模式：当希望将<font color=\"#F08A5D\">一个类</font>转换成满足<font color=\"#F08A5D\">另一个新接口</font>的类时,可以使用类的适配器模式,创建一个新类,继承原有的类,实现新的接口即可。对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时,可以创建一个Wrapper类,持有原类的一个实例,在Wrapper类的方法中,调用实例的方法就行。接口的适配器模式：当不希望实现一个接口中所有的方法时,可以创建一个抽象类Wrapper,实现所有方法,我们写别的类的时候,继承抽象类即可。</p>\n<h2 id=\"7-装饰模式（Decorator）\"><a href=\"#7-装饰模式（Decorator）\" class=\"headerlink\" title=\"7. 装饰模式（Decorator）\"></a>7. 装饰模式（Decorator）</h2><p>顾名思义,装饰模式就是给一个对象增加一些新的功能,而且是动态的,要求装饰对象和被装饰对<br>象实现同一个接口,装饰对象持有被装饰对象的实例,关系图如下:<br><img src=\"/images/post_images/20171225_05.png\" alt=\"\"></p>\n<p>Source类是被装饰类,Decorator类是一个装饰类,可以为Source类动态的添加一些功能,代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Sourceable source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decorator</span><span class=\"params\">(Sourceable source)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before decorator!\"</span>);  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after decorator!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">        Sourceable obj = <span class=\"keyword\">new</span> Decorator(source);  </span><br><span class=\"line\">        obj.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>before decorator!\nthe original method!\nafter decorator!</code></p>\n<ul>\n<li>装饰器模式的应用场景：</li>\n</ul>\n<ol>\n<li>需要扩展一个类的功能。</li>\n<li>动态的为一个对象增加功能,而且还能动态撤销。(继承不能做到这一点,继承的功能是静态的,不能动态增删。)</li>\n</ol>\n<ul>\n<li>缺点：产生过多相似的对象,不易排错！</li>\n</ul>\n<h2 id=\"8-代理模式-Proxy\"><a href=\"#8-代理模式-Proxy\" class=\"headerlink\" title=\"8. 代理模式(Proxy)\"></a>8. 代理模式(Proxy)</h2><p>其实每个模式名称就表明了该模式的作用,代理模式就是多一个代理类出来,替原对象进行一些操作,比如我们在租房子的时候回去找中介,为什么呢？因为你对该地区房屋的信息掌握的不够全面,希望找一个更熟悉的人去帮你做,此处的代理就是这个意思。再如我们有的时候打官司,我们需要请律师,因为律师在法律方面有专长,可以替我们进行操作,表达我们的想法。<br>先来看看关系图:<br><img src=\"/images/post_images/20171225_06.png\" alt=\"\">根据上文的阐述,代理模式就比较容易的理解了,<br>我们看下代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the original method!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Source source;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        before();  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">        atfer();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">atfer</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after proxy!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before proxy!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Sourceable source = <span class=\"keyword\">new</span> Proxy();  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><code>before proxy!\nthe original method!\nafter proxy!</code></p>\n<ul>\n<li><strong>代理模式的应用场景:</strong><br>如果已有的方法在使用的时候需要对原有的方法进行改进,此时有两种办法：</li>\n</ul>\n<ol>\n<li>修改原有的方法来适应。这样违反了“对扩展开放,对修改关闭”的原则。</li>\n<li>就是采用一个代理类调用原有的方法,且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式,可以将功能划分的更加清晰,有助于后期维护！</li>\n</ol>\n<h2 id=\"9、外观模式-Facade\"><a href=\"#9、外观模式-Facade\" class=\"headerlink\" title=\"9、外观模式(Facade)\"></a>9、外观模式(Facade)</h2><p>外观模式是为了解决类与类之家的依赖关系的,像spring一样,可以将类和类之间的关系配置到配置文件中,而外观模式就是将他们的关系放在一个Facade类中,降低了类类之间的耦合度,该模式中没有涉及到接口,看下类图:(我们以一个计算机的启动过程为例)<br><img src=\"/images/post_images/20171225_07.png\" alt=\"\"></p>\n<p>我们先看下实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cpu shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Disk</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk startup!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"disk shutdown!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> CPU cpu;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memory memory;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Disk disk;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        cpu = <span class=\"keyword\">new</span> CPU();  </span><br><span class=\"line\">        memory = <span class=\"keyword\">new</span> Memory();  </span><br><span class=\"line\">        disk = <span class=\"keyword\">new</span> Disk();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startup</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start the computer!\"</span>);  </span><br><span class=\"line\">        cpu.startup();  </span><br><span class=\"line\">        memory.startup();  </span><br><span class=\"line\">        disk.startup();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start computer finished!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"begin to close the computer!\"</span>);  </span><br><span class=\"line\">        cpu.shutdown();  </span><br><span class=\"line\">        memory.shutdown();  </span><br><span class=\"line\">        disk.shutdown();  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"computer closed!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User类如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Computer computer = <span class=\"keyword\">new</span> Computer();  </span><br><span class=\"line\">        computer.startup();  </span><br><span class=\"line\">        computer.shutdown();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>start the computer!\n    cpu startup!\n    memory startup!\n    disk startup!\n    start computer finished!\n    begin to close the computer!\n    cpu shutdown!\n    memory shutdown!\n    disk shutdown!\n    computer closed!</code></p>\n<p>如果我们没有Computer类,那么,CPU、Memory、Disk他们之间将会相互持有实例,产生关系,这样会造成严重的依赖,修改一个类,可能会带来其他类的修改,这不是我们想要看到的,有了Computer类,他们之间的关系被放在了Computer类里,这样就起到了解耦的作用,这,就是外观模式！</p>\n<h2 id=\"桥接模式-Bridge\"><a href=\"#桥接模式-Bridge\" class=\"headerlink\" title=\"桥接模式(Bridge)\"></a>桥接模式(Bridge)</h2><p>桥接模式就是把事物和其具体实现分开,使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦,使得二者可以独立变化,像我们常用的JDBC桥DriverManager一样,JDBC进行连接数据库的时候,在各个数据库之间进行切换,基本不需要动太多的代码,甚至丝毫不用动,原因就是JDBC提供统一接口,每个数据库提供各自的实现,用一个叫做数据库驱动的程序来桥接就行了。<br>我们来看看关系图:<br><img src=\"/images/post_images/20171225_08.png\" alt=\"\"><br>实现代码:<br>先定义接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>分别定义两个实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the first sub!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceSub2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sourceable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is the second sub!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个桥,持有Sourceable的一个实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bridge</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Sourceable source;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        source.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sourceable <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSource</span><span class=\"params\">(Sourceable source)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBridge</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bridge</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        getSource().method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgeTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        Bridge bridge = <span class=\"keyword\">new</span> MyBridge();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*调用第一个对象*/</span>  </span><br><span class=\"line\">        Sourceable source1 = <span class=\"keyword\">new</span> SourceSub1();  </span><br><span class=\"line\">        bridge.setSource(source1);  </span><br><span class=\"line\">        bridge.method();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*调用第二个对象*/</span>  </span><br><span class=\"line\">        Sourceable source2 = <span class=\"keyword\">new</span> SourceSub2();  </span><br><span class=\"line\">        bridge.setSource(source2);  </span><br><span class=\"line\">        bridge.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>output：<br><code>this is the first sub!\n this is the second sub!</code><br>这样,就通过对Bridge类的调用,实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。接下来我再画个图,大家就应该明白了,因为这个图是我们JDBC连接的原理,有数据库学习基础的,一结合就都懂了。<br><img src=\"/images/post_images/20171225_09.png\" alt=\"\"></p>\n<h2 id=\"11-组合模式（Composite）\"><a href=\"#11-组合模式（Composite）\" class=\"headerlink\" title=\"11. 组合模式（Composite）\"></a>11. 组合模式（Composite）</h2><pre><code>组合模式有时又叫 **部分-整体模式**, 在处理类似树形结构的问题时比较方便,看看关系图：\n</code></pre><p>直接来看代码:<br><img src=\"/images/post_images/20171225_10.png\" alt=\"\"></p>\n<p>直接来看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> TreeNode parent;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;TreeNode&gt; children = <span class=\"keyword\">new</span> Vector&lt;TreeNode&gt;();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(String name)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> parent;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParent</span><span class=\"params\">(TreeNode parent)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parent = parent;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(TreeNode node)</span></span>&#123;  </span><br><span class=\"line\">        children.add(node);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(TreeNode node)</span></span>&#123;  </span><br><span class=\"line\">        children.remove(node);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取得孩子节点  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Enumeration&lt;TreeNode&gt; <span class=\"title\">getChildren</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> children.elements();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(String name)</span> </span>&#123;  </span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> TreeNode(name);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Tree tree = <span class=\"keyword\">new</span> Tree(<span class=\"string\">\"A\"</span>);  </span><br><span class=\"line\">        TreeNode nodeB = <span class=\"keyword\">new</span> TreeNode(<span class=\"string\">\"B\"</span>);  </span><br><span class=\"line\">        TreeNode nodeC = <span class=\"keyword\">new</span> TreeNode(<span class=\"string\">\"C\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        nodeB.add(nodeC);  </span><br><span class=\"line\">        tree.root.add(nodeB);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"build the tree finished!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用场景: 将多个对象组合在一起进行操作,常用于表示树形结构中,例如二叉树,数等。</p>\n<h2 id=\"12-享元模式-Flyweight\"><a href=\"#12-享元模式-Flyweight\" class=\"headerlink\" title=\"12. 享元模式(Flyweight)\"></a>12. 享元模式(Flyweight)</h2><p>享元模式的主要目的是实现对象的共享,即共享池,当系统中对象多的时候可以减少内存的开销,<br>通常与工厂模式一起使用。</p>\n<p><img src=\"/images/post_images/20171225_11.png\" alt=\"\"></p>\n<p>FlyWeightFactory负责创建和管理享元单元,当一个客户端请求时,工厂需要检查当前对象池中是否有符合条件的对象,如果有,就返回已经存在的对象,如果没有,则创建一个新对象,FlyWeight是超类。一提到共享池,我们很容易联想到Java里面的JDBC连接池,想想每个连接的特点,我们不难总结出：适用于作共享的一些个对象,他们有一些共有的属性,就拿数据库连接池来说,url、driverClassName、username、password及dbname,这些属性对于每个连接来说都是一样的,所以就适合用享元模式来处理,建一个工厂类,将上述类似属性作为内部数据,其它的作为外部数据,在方法调用时,当做参数传进来,这样就节省了空间,减少了实例的数量。看个例子:<br><img src=\"/images/post_images/20171225_12.png\" alt=\"\"></p>\n<p>看下数据库连接池的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionPool</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Connection&gt; pool;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*公有属性*/</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username = <span class=\"string\">\"root\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password = <span class=\"string\">\"root\"</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> poolSize = <span class=\"number\">100</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConnectionPool instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    Connection conn = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*构造方法,做一些初始化工作*/</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ConnectionPool</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pool = <span class=\"keyword\">new</span> Vector&lt;Connection&gt;(poolSize);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; poolSize; i++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                Class.forName(driverClassName);  </span><br><span class=\"line\">                conn = DriverManager.getConnection(url, username, password);  </span><br><span class=\"line\">                pool.add(conn);  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;  </span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 返回连接到连接池 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        pool.add(conn);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 返回连接池中的一个数据库连接 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pool.size() &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            Connection conn = pool.get(<span class=\"number\">0</span>);  </span><br><span class=\"line\">            pool.remove(conn);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> conn;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过连接池的管理,实现了数据库连接的共享,不需要每一次都重新创建连接,节省了数据库重新创建的开销,提升了系统的性能！</p>\n"},{"title":"Java中的23中设计模式-四","date":"2017-12-25T10:41:56.000Z","type":["Java","设计模式"],"_content":"\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing);\n\n\n其实每个设计模式都是很重要的一种思想,看上去很熟,其实是因为我们在学到的东西中都有涉及,尽管有时我们并不知道,其实在Java本身的设计之中处处都有体现,像AWT、JDBC、集合类、IO管道或者是Web框架,里面设计模式无处不在。因为我们篇幅有限,很难讲每一个设计模式都讲的很详细,不过我会尽我所能,尽量在有限的空间和篇幅内,把意思写清楚了,更好让大家明白。本章不出意外的话,应该是设计模式最后一讲了,首先还是上一下上篇开头的那个图:\n![](/images/post_images/20171225_13.png)\n\n本章讲讲第三类和第四类。\n\n## 19. 备忘录模式（Memento）\n\n主要目的是保存一个对象的某个状态,以便在适当的时候恢复对象,个人觉得叫备份模式更形象些,通俗的讲下：假设有原始类A,A中有各种属性,A可以决定需要备份的属性,备忘录类B是用来存储A的一些内部状态,类C呢,就是一个用来存储备忘录的,且只能存储,不能修改等操作。\n做个图来分析一下:\n ![](/images/post_images/20171225_20.png)\nOriginal类是原始类,里面有需要保存的属性value及创建一个备忘录类,用来保存value值。Memento类是备忘录类,Storage类是存储备忘录的类,持有Memento类的实例,该模式很好理解。\n\n直接看源码:\n\n```java\npublic class Original {  \n\n    private String value;  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n\n    public Original(String value) {  \n        this.value = value;  \n    }  \n\n    public Memento createMemento(){  \n        return new Memento(value);  \n    }  \n\n    public void restoreMemento(Memento memento){  \n        this.value = memento.getValue();  \n    }  \n}  \n```\n```java\npublic class Memento {  \n\n    private String value;  \n\n    public Memento(String value) {  \n        this.value = value;  \n    }  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n}\n```\n\n```java\npublic class Storage {  \n\n    private Memento memento;  \n\n    public Storage(Memento memento) {  \n        this.memento = memento;  \n    }  \n\n    public Memento getMemento() {  \n        return memento;  \n    }  \n\n    public void setMemento(Memento memento) {  \n        this.memento = memento;  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        // 创建原始类  \n        Original origi = new Original(\"egg\");  \n\n        // 创建备忘录  \n        Storage storage = new Storage(origi.createMemento());  \n\n        // 修改原始类的状态  \n        System.out.println(\"初始化状态为:\" + origi.getValue());  \n        origi.setValue(\"niu\");  \n        System.out.println(\"修改后的状态为:\" + origi.getValue());  \n\n        // 回复原始类的状态  \n        origi.restoreMemento(storage.getMemento());  \n        System.out.println(\"恢复后的状态为:\" + origi.getValue());  \n    }  \n}  \n```\n\n输出：\n`初始化状态为:egg\n修改后的状态为:niu\n恢复后的状态为:egg`\n## 20. 状态模式(State)\n核心思想就是：当对象的状态改变时,同时改变其行为,很好理解！就拿QQ来说,有几种状态,在线、隐身、忙碌等,每个状态对应不同的操作,而且你的好友也能看到你的状态\n所以,状态模式就两点:\n1. 可以通过改变状态来获得不同的行为。\n2. 你的好友能同时看到你的变化。看图:\n![](/images/post_images/20171225_21.png)\n\nState类是个状态类,Context类可以实现切换,我们来看看代码:\n```java\npackage com.xtfggef.dp.state;  \n\n/**\n * 状态类的核心类\n * 2012-12-1\n * @author erqing\n *\n */  \npublic class State {  \n\n    private String value;  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n\n    public void method1(){  \n        System.out.println(\"execute the first opt!\");  \n    }  \n\n    public void method2(){  \n        System.out.println(\"execute the second opt!\");  \n    }  \n}  \n```\n\n```java\npackage com.xtfggef.dp.state;  \n\n/**\n * 状态模式的切换类   2012-12-1\n * @author erqing\n *  \n */  \npublic class Context {  \n\n    private State state;  \n\n    public Context(State state) {  \n        this.state = state;  \n    }  \n\n    public State getState() {  \n        return state;  \n    }  \n\n    public void setState(State state) {  \n        this.state = state;  \n    }  \n\n    public void method() {  \n        if (state.getValue().equals(\"state1\")) {  \n            state.method1();  \n        } else if (state.getValue().equals(\"state2\")) {  \n            state.method2();  \n        }  \n    }  \n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        State state = new State();  \n        Context context = new Context(state);  \n\n        //设置第一种状态  \n        state.setValue(\"state1\");  \n        context.method();  \n\n        //设置第二种状态  \n        state.setValue(\"state2\");  \n        context.method();  \n    }  \n}  \n```\n输出:\n`execute the first opt!\nexecute the second opt!`\n\n根据这个特性,状态模式在日常开发中用的挺多的,尤其是做网站的时候,我们有时希望根据对象\n的某一属性,区别开他们的一些功能,比如说简单的权限控制等。\n## 21. 访问者模式（Visitor）\n访问者模式把数据结构和作用于结构上的操作解耦合,使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化,经常有新的数据对象增加进来,则不适合使用访问者模式。访问者模式的优点是增加操作很容易,因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中,其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From百科\n\n简单来说,访问者模式就是一种分离对象数据结构与行为的方法,通过这种分离,可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：\n![](/images/post_images/20171225_22.png)\n来看看原码:\n一个Visitor类,存放要访问的对象,\n```java\npublic interface Visitor {  \n    public void visit(Subject sub);  \n}  \n```\n```java\npublic class MyVisitor implements Visitor {  \n\n    @Override  \n    public void visit(Subject sub) {  \n        System.out.println(\"visit the subject:\"+sub.getSubject());  \n    }  \n}  \n```\nSubject类,accept方法,接受将要访问它的对象,getSubject()获取将要被访问的属性,\n```java\npublic interface Subject {  \n    public void accept(Visitor visitor);  \n    public String getSubject();  \n}  \n```\n```java\npublic class MySubject implements Subject {  \n\n    @Override  \n    public void accept(Visitor visitor) {  \n        visitor.visit(this);  \n    }  \n\n    @Override  \n    public String getSubject() {  \n        return \"love\";  \n    }  \n}  \n```\n测试:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        Visitor visitor = new MyVisitor();  \n        Subject sub = new MySubject();  \n        sub.accept(visitor);      \n    }  \n}  \n```\n输出: `visit the subject:love`\n该模式适用场景：如果我们想为一个现有的类增加新功能,不得不考虑几个事情：\n1、新功能会不会与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对这些问题,最好的解决方法就是使用访问者模式,访问者模式适用于数据结构相对稳定的系统,把数据结构和算法解耦;\n\n## 22. 中介者模式(Mediator)\n中介者模式也是用来降低类类之间的耦合的,因为如果类类之间有依赖关系的话,不利于功能的拓展和维护,因为只要修改一个对象,其它关联的对象都得进行修改。如果使用中介者模式,只需关心和Mediator类的关系,具体类类之间的关系及调度交给Mediator就行,这有点像spring容器的作用。先看看图:![](/images/post_images/20171225_23.png)User类统一接口,User1和User2分别是不同的对象,二者之间有关联,如果不采用中介者模式,则需要二者相互持有引用,这样二者的耦合度很高,为了解耦,引入了Mediator类,提供统一接口,MyMediator为其实现类,里面持有User1和User2的实例,用来实现对User1和User2的控制。这样User1和User2两个对象相互独立,他们只需要保持好和Mediator之间的关系就行,剩下的全由MyMediator类来维护！基本实现:\n```java\npublic interface Mediator {  \n    public void createMediator();  \n    public void workAll();  \n}\n```\n```java\npublic class MyMediator implements Mediator {  \n\n    private User user1;  \n    private User user2;  \n\n    public User getUser1() {  \n        return user1;  \n    }  \n\n    public User getUser2() {  \n        return user2;  \n    }  \n\n    @Override  \n    public void createMediator() {  \n        user1 = new User1(this);  \n        user2 = new User2(this);  \n    }  \n\n    @Override  \n    public void workAll() {  \n        user1.work();  \n        user2.work();  \n    }  \n}  \n```\n```java\npublic abstract class User {  \n\n    private Mediator mediator;  \n\n    public Mediator getMediator(){  \n        return mediator;  \n    }  \n\n    public User(Mediator mediator) {  \n        this.mediator = mediator;  \n    }  \n\n    public abstract void work();  \n}  \n```\n```java\npublic class User1 extends User {  \n\n    public User1(Mediator mediator){  \n        super(mediator);  \n    }  \n\n    @Override  \n    public void work() {  \n        System.out.println(\"user1 exe!\");  \n    }  \n}  \n```\n```java\npublic class User2 extends User {  \n\n    public User2(Mediator mediator){  \n        super(mediator);  \n    }  \n\n    @Override  \n    public void work() {  \n        System.out.println(\"user2 exe!\");  \n    }  \n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Mediator mediator = new MyMediator();  \n        mediator.createMediator();  \n        mediator.workAll();  \n    }  \n}  \n```\n输出:\n`user1 exe!\nuser2 exe!`\n\n## 23. 解释器模式(Interpreter)\n解释器模式是我们暂时的最后一讲,一般主要应用在OOP开发中的编译器的开发中,所以适用面比较窄。\n ![](/images/post_images/20171225_24.png)\nContext类是一个上下文环境类,Plus和Minus分别是用来计算的实现,代码如下:\n```java\npublic interface Expression {  \n    public int interpret(Context context);  \n}  \n```\n```java\npublic class Plus implements Expression {  \n\n    @Override  \n    public int interpret(Context context) {  \n        return context.getNum1()+context.getNum2();  \n    }  \n}\n```\n```java\npublic class Minus implements Expression {  \n\n    @Override  \n    public int interpret(Context context) {  \n        return context.getNum1()-context.getNum2();  \n    }  \n}  \n```\n```java\npublic class Context {  \n\n    private int num1;  \n    private int num2;  \n\n    public Context(int num1, int num2) {  \n        this.num1 = num1;  \n        this.num2 = num2;  \n    }  \n\n    public int getNum1() {  \n        return num1;  \n    }  \n    public void setNum1(int num1) {  \n        this.num1 = num1;  \n    }  \n    public int getNum2() {  \n        return num2;  \n    }  \n    public void setNum2(int num2) {  \n        this.num2 = num2;  \n    }  \n\n\n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        // 计算9+2-8的值  \n        int result = new Minus().interpret((new Context(new Plus()  \n                .interpret(new Context(9, 2)), 8)));  \n        System.out.println(result);  \n    }  \n}  \n```\n最后输出正确的结果:`3`。\n\n\n基本就这样,解释器模式用来做各种各样的解释器,如正则表达式等的解释器等等！\n\n设计模式基本就这么大概讲完了,总体感觉有点简略,的确,这么点儿篇幅,不足以对整个23种设计模式做全面的阐述,此处读者可将它作为一个理论基础去学习,通过这四篇博文,先基本有个概念,虽然我讲的有些简单,但基本都能说明问题及他们的特点,如果对哪一个感兴趣,可以继续深入研究！\n","source":"_posts/Java中的23中设计模式-四.md","raw":"---\ntitle: 'Java中的23中设计模式-四'\ndate: 2017-12-25 18:41:56\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - Java\n  - 设计模式\ntype:\n  - Java\n  - 设计模式\n---\n\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing);\n\n\n其实每个设计模式都是很重要的一种思想,看上去很熟,其实是因为我们在学到的东西中都有涉及,尽管有时我们并不知道,其实在Java本身的设计之中处处都有体现,像AWT、JDBC、集合类、IO管道或者是Web框架,里面设计模式无处不在。因为我们篇幅有限,很难讲每一个设计模式都讲的很详细,不过我会尽我所能,尽量在有限的空间和篇幅内,把意思写清楚了,更好让大家明白。本章不出意外的话,应该是设计模式最后一讲了,首先还是上一下上篇开头的那个图:\n![](/images/post_images/20171225_13.png)\n\n本章讲讲第三类和第四类。\n\n## 19. 备忘录模式（Memento）\n\n主要目的是保存一个对象的某个状态,以便在适当的时候恢复对象,个人觉得叫备份模式更形象些,通俗的讲下：假设有原始类A,A中有各种属性,A可以决定需要备份的属性,备忘录类B是用来存储A的一些内部状态,类C呢,就是一个用来存储备忘录的,且只能存储,不能修改等操作。\n做个图来分析一下:\n ![](/images/post_images/20171225_20.png)\nOriginal类是原始类,里面有需要保存的属性value及创建一个备忘录类,用来保存value值。Memento类是备忘录类,Storage类是存储备忘录的类,持有Memento类的实例,该模式很好理解。\n\n直接看源码:\n\n```java\npublic class Original {  \n\n    private String value;  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n\n    public Original(String value) {  \n        this.value = value;  \n    }  \n\n    public Memento createMemento(){  \n        return new Memento(value);  \n    }  \n\n    public void restoreMemento(Memento memento){  \n        this.value = memento.getValue();  \n    }  \n}  \n```\n```java\npublic class Memento {  \n\n    private String value;  \n\n    public Memento(String value) {  \n        this.value = value;  \n    }  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n}\n```\n\n```java\npublic class Storage {  \n\n    private Memento memento;  \n\n    public Storage(Memento memento) {  \n        this.memento = memento;  \n    }  \n\n    public Memento getMemento() {  \n        return memento;  \n    }  \n\n    public void setMemento(Memento memento) {  \n        this.memento = memento;  \n    }  \n}  \n```\n测试类:\n\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        // 创建原始类  \n        Original origi = new Original(\"egg\");  \n\n        // 创建备忘录  \n        Storage storage = new Storage(origi.createMemento());  \n\n        // 修改原始类的状态  \n        System.out.println(\"初始化状态为:\" + origi.getValue());  \n        origi.setValue(\"niu\");  \n        System.out.println(\"修改后的状态为:\" + origi.getValue());  \n\n        // 回复原始类的状态  \n        origi.restoreMemento(storage.getMemento());  \n        System.out.println(\"恢复后的状态为:\" + origi.getValue());  \n    }  \n}  \n```\n\n输出：\n`初始化状态为:egg\n修改后的状态为:niu\n恢复后的状态为:egg`\n## 20. 状态模式(State)\n核心思想就是：当对象的状态改变时,同时改变其行为,很好理解！就拿QQ来说,有几种状态,在线、隐身、忙碌等,每个状态对应不同的操作,而且你的好友也能看到你的状态\n所以,状态模式就两点:\n1. 可以通过改变状态来获得不同的行为。\n2. 你的好友能同时看到你的变化。看图:\n![](/images/post_images/20171225_21.png)\n\nState类是个状态类,Context类可以实现切换,我们来看看代码:\n```java\npackage com.xtfggef.dp.state;  \n\n/**\n * 状态类的核心类\n * 2012-12-1\n * @author erqing\n *\n */  \npublic class State {  \n\n    private String value;  \n\n    public String getValue() {  \n        return value;  \n    }  \n\n    public void setValue(String value) {  \n        this.value = value;  \n    }  \n\n    public void method1(){  \n        System.out.println(\"execute the first opt!\");  \n    }  \n\n    public void method2(){  \n        System.out.println(\"execute the second opt!\");  \n    }  \n}  \n```\n\n```java\npackage com.xtfggef.dp.state;  \n\n/**\n * 状态模式的切换类   2012-12-1\n * @author erqing\n *  \n */  \npublic class Context {  \n\n    private State state;  \n\n    public Context(State state) {  \n        this.state = state;  \n    }  \n\n    public State getState() {  \n        return state;  \n    }  \n\n    public void setState(State state) {  \n        this.state = state;  \n    }  \n\n    public void method() {  \n        if (state.getValue().equals(\"state1\")) {  \n            state.method1();  \n        } else if (state.getValue().equals(\"state2\")) {  \n            state.method2();  \n        }  \n    }  \n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        State state = new State();  \n        Context context = new Context(state);  \n\n        //设置第一种状态  \n        state.setValue(\"state1\");  \n        context.method();  \n\n        //设置第二种状态  \n        state.setValue(\"state2\");  \n        context.method();  \n    }  \n}  \n```\n输出:\n`execute the first opt!\nexecute the second opt!`\n\n根据这个特性,状态模式在日常开发中用的挺多的,尤其是做网站的时候,我们有时希望根据对象\n的某一属性,区别开他们的一些功能,比如说简单的权限控制等。\n## 21. 访问者模式（Visitor）\n访问者模式把数据结构和作用于结构上的操作解耦合,使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化,经常有新的数据对象增加进来,则不适合使用访问者模式。访问者模式的优点是增加操作很容易,因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中,其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From百科\n\n简单来说,访问者模式就是一种分离对象数据结构与行为的方法,通过这种分离,可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：\n![](/images/post_images/20171225_22.png)\n来看看原码:\n一个Visitor类,存放要访问的对象,\n```java\npublic interface Visitor {  \n    public void visit(Subject sub);  \n}  \n```\n```java\npublic class MyVisitor implements Visitor {  \n\n    @Override  \n    public void visit(Subject sub) {  \n        System.out.println(\"visit the subject:\"+sub.getSubject());  \n    }  \n}  \n```\nSubject类,accept方法,接受将要访问它的对象,getSubject()获取将要被访问的属性,\n```java\npublic interface Subject {  \n    public void accept(Visitor visitor);  \n    public String getSubject();  \n}  \n```\n```java\npublic class MySubject implements Subject {  \n\n    @Override  \n    public void accept(Visitor visitor) {  \n        visitor.visit(this);  \n    }  \n\n    @Override  \n    public String getSubject() {  \n        return \"love\";  \n    }  \n}  \n```\n测试:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        Visitor visitor = new MyVisitor();  \n        Subject sub = new MySubject();  \n        sub.accept(visitor);      \n    }  \n}  \n```\n输出: `visit the subject:love`\n该模式适用场景：如果我们想为一个现有的类增加新功能,不得不考虑几个事情：\n1、新功能会不会与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对这些问题,最好的解决方法就是使用访问者模式,访问者模式适用于数据结构相对稳定的系统,把数据结构和算法解耦;\n\n## 22. 中介者模式(Mediator)\n中介者模式也是用来降低类类之间的耦合的,因为如果类类之间有依赖关系的话,不利于功能的拓展和维护,因为只要修改一个对象,其它关联的对象都得进行修改。如果使用中介者模式,只需关心和Mediator类的关系,具体类类之间的关系及调度交给Mediator就行,这有点像spring容器的作用。先看看图:![](/images/post_images/20171225_23.png)User类统一接口,User1和User2分别是不同的对象,二者之间有关联,如果不采用中介者模式,则需要二者相互持有引用,这样二者的耦合度很高,为了解耦,引入了Mediator类,提供统一接口,MyMediator为其实现类,里面持有User1和User2的实例,用来实现对User1和User2的控制。这样User1和User2两个对象相互独立,他们只需要保持好和Mediator之间的关系就行,剩下的全由MyMediator类来维护！基本实现:\n```java\npublic interface Mediator {  \n    public void createMediator();  \n    public void workAll();  \n}\n```\n```java\npublic class MyMediator implements Mediator {  \n\n    private User user1;  \n    private User user2;  \n\n    public User getUser1() {  \n        return user1;  \n    }  \n\n    public User getUser2() {  \n        return user2;  \n    }  \n\n    @Override  \n    public void createMediator() {  \n        user1 = new User1(this);  \n        user2 = new User2(this);  \n    }  \n\n    @Override  \n    public void workAll() {  \n        user1.work();  \n        user2.work();  \n    }  \n}  \n```\n```java\npublic abstract class User {  \n\n    private Mediator mediator;  \n\n    public Mediator getMediator(){  \n        return mediator;  \n    }  \n\n    public User(Mediator mediator) {  \n        this.mediator = mediator;  \n    }  \n\n    public abstract void work();  \n}  \n```\n```java\npublic class User1 extends User {  \n\n    public User1(Mediator mediator){  \n        super(mediator);  \n    }  \n\n    @Override  \n    public void work() {  \n        System.out.println(\"user1 exe!\");  \n    }  \n}  \n```\n```java\npublic class User2 extends User {  \n\n    public User2(Mediator mediator){  \n        super(mediator);  \n    }  \n\n    @Override  \n    public void work() {  \n        System.out.println(\"user2 exe!\");  \n    }  \n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Mediator mediator = new MyMediator();  \n        mediator.createMediator();  \n        mediator.workAll();  \n    }  \n}  \n```\n输出:\n`user1 exe!\nuser2 exe!`\n\n## 23. 解释器模式(Interpreter)\n解释器模式是我们暂时的最后一讲,一般主要应用在OOP开发中的编译器的开发中,所以适用面比较窄。\n ![](/images/post_images/20171225_24.png)\nContext类是一个上下文环境类,Plus和Minus分别是用来计算的实现,代码如下:\n```java\npublic interface Expression {  \n    public int interpret(Context context);  \n}  \n```\n```java\npublic class Plus implements Expression {  \n\n    @Override  \n    public int interpret(Context context) {  \n        return context.getNum1()+context.getNum2();  \n    }  \n}\n```\n```java\npublic class Minus implements Expression {  \n\n    @Override  \n    public int interpret(Context context) {  \n        return context.getNum1()-context.getNum2();  \n    }  \n}  \n```\n```java\npublic class Context {  \n\n    private int num1;  \n    private int num2;  \n\n    public Context(int num1, int num2) {  \n        this.num1 = num1;  \n        this.num2 = num2;  \n    }  \n\n    public int getNum1() {  \n        return num1;  \n    }  \n    public void setNum1(int num1) {  \n        this.num1 = num1;  \n    }  \n    public int getNum2() {  \n        return num2;  \n    }  \n    public void setNum2(int num2) {  \n        this.num2 = num2;  \n    }  \n\n\n}  \n```\n测试类:\n```java\npublic class Test {  \n\n    public static void main(String[] args) {  \n\n        // 计算9+2-8的值  \n        int result = new Minus().interpret((new Context(new Plus()  \n                .interpret(new Context(9, 2)), 8)));  \n        System.out.println(result);  \n    }  \n}  \n```\n最后输出正确的结果:`3`。\n\n\n基本就这样,解释器模式用来做各种各样的解释器,如正则表达式等的解释器等等！\n\n设计模式基本就这么大概讲完了,总体感觉有点简略,的确,这么点儿篇幅,不足以对整个23种设计模式做全面的阐述,此处读者可将它作为一个理论基础去学习,通过这四篇博文,先基本有个概念,虽然我讲的有些简单,但基本都能说明问题及他们的特点,如果对哪一个感兴趣,可以继续深入研究！\n","slug":"Java中的23中设计模式-四","published":1,"updated":"2018-01-22T11:23:17.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m06d001dq8kxqmkr060w","content":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a>;</p>\n</blockquote>\n<p>其实每个设计模式都是很重要的一种思想,看上去很熟,其实是因为我们在学到的东西中都有涉及,尽管有时我们并不知道,其实在Java本身的设计之中处处都有体现,像AWT、JDBC、集合类、IO管道或者是Web框架,里面设计模式无处不在。因为我们篇幅有限,很难讲每一个设计模式都讲的很详细,不过我会尽我所能,尽量在有限的空间和篇幅内,把意思写清楚了,更好让大家明白。本章不出意外的话,应该是设计模式最后一讲了,首先还是上一下上篇开头的那个图:<br><img src=\"/images/post_images/20171225_13.png\" alt=\"\"></p>\n<p>本章讲讲第三类和第四类。</p>\n<h2 id=\"19-备忘录模式（Memento）\"><a href=\"#19-备忘录模式（Memento）\" class=\"headerlink\" title=\"19. 备忘录模式（Memento）\"></a>19. 备忘录模式（Memento）</h2><p>主要目的是保存一个对象的某个状态,以便在适当的时候恢复对象,个人觉得叫备份模式更形象些,通俗的讲下：假设有原始类A,A中有各种属性,A可以决定需要备份的属性,备忘录类B是用来存储A的一些内部状态,类C呢,就是一个用来存储备忘录的,且只能存储,不能修改等操作。<br>做个图来分析一下:<br> <img src=\"/images/post_images/20171225_20.png\" alt=\"\"><br>Original类是原始类,里面有需要保存的属性value及创建一个备忘录类,用来保存value值。Memento类是备忘录类,Storage类是存储备忘录的类,持有Memento类的实例,该模式很好理解。</p>\n<p>直接看源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Original</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Original</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">createMemento</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Memento(value);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreMemento</span><span class=\"params\">(Memento memento)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = memento.getValue();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memento</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Memento</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Storage</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memento memento;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Storage</span><span class=\"params\">(Memento memento)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memento = memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">getMemento</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMemento</span><span class=\"params\">(Memento memento)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memento = memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建原始类  </span></span><br><span class=\"line\">        Original origi = <span class=\"keyword\">new</span> Original(<span class=\"string\">\"egg\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建备忘录  </span></span><br><span class=\"line\">        Storage storage = <span class=\"keyword\">new</span> Storage(origi.createMemento());  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 修改原始类的状态  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\">        origi.setValue(<span class=\"string\">\"niu\"</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改后的状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回复原始类的状态  </span></span><br><span class=\"line\">        origi.restoreMemento(storage.getMemento());  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"恢复后的状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br><code>初始化状态为:egg\n修改后的状态为:niu\n恢复后的状态为:egg</code></p>\n<h2 id=\"20-状态模式-State\"><a href=\"#20-状态模式-State\" class=\"headerlink\" title=\"20. 状态模式(State)\"></a>20. 状态模式(State)</h2><p>核心思想就是：当对象的状态改变时,同时改变其行为,很好理解！就拿QQ来说,有几种状态,在线、隐身、忙碌等,每个状态对应不同的操作,而且你的好友也能看到你的状态<br>所以,状态模式就两点:</p>\n<ol>\n<li>可以通过改变状态来获得不同的行为。</li>\n<li>你的好友能同时看到你的变化。看图:<br><img src=\"/images/post_images/20171225_21.png\" alt=\"\"></li>\n</ol>\n<p>State类是个状态类,Context类可以实现切换,我们来看看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xtfggef.dp.state;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态类的核心类</span></span><br><span class=\"line\"><span class=\"comment\"> * 2012-12-1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> erqing</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"execute the first opt!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"execute the second opt!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xtfggef.dp.state;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态模式的切换类   2012-12-1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> erqing</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State state;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(State state)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getState</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(State state)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state.getValue().equals(<span class=\"string\">\"state1\"</span>)) &#123;  </span><br><span class=\"line\">            state.method1();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state.getValue().equals(<span class=\"string\">\"state2\"</span>)) &#123;  </span><br><span class=\"line\">            state.method2();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        State state = <span class=\"keyword\">new</span> State();  </span><br><span class=\"line\">        Context context = <span class=\"keyword\">new</span> Context(state);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置第一种状态  </span></span><br><span class=\"line\">        state.setValue(<span class=\"string\">\"state1\"</span>);  </span><br><span class=\"line\">        context.method();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置第二种状态  </span></span><br><span class=\"line\">        state.setValue(<span class=\"string\">\"state2\"</span>);  </span><br><span class=\"line\">        context.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>execute the first opt!\nexecute the second opt!</code></p>\n<p>根据这个特性,状态模式在日常开发中用的挺多的,尤其是做网站的时候,我们有时希望根据对象<br>的某一属性,区别开他们的一些功能,比如说简单的权限控制等。</p>\n<h2 id=\"21-访问者模式（Visitor）\"><a href=\"#21-访问者模式（Visitor）\" class=\"headerlink\" title=\"21. 访问者模式（Visitor）\"></a>21. 访问者模式（Visitor）</h2><p>访问者模式把数据结构和作用于结构上的操作解耦合,使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化,经常有新的数据对象增加进来,则不适合使用访问者模式。访问者模式的优点是增加操作很容易,因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中,其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From百科</p>\n<p>简单来说,访问者模式就是一种分离对象数据结构与行为的方法,通过这种分离,可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：<br><img src=\"/images/post_images/20171225_22.png\" alt=\"\"><br>来看看原码:<br>一个Visitor类,存放要访问的对象,<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Subject sub)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Subject sub)</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"visit the subject:\"</span>+sub.getSubject());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Subject类,accept方法,接受将要访问它的对象,getSubject()获取将要被访问的属性,<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;  </span><br><span class=\"line\">        visitor.visit(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"love\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        Visitor visitor = <span class=\"keyword\">new</span> MyVisitor();  </span><br><span class=\"line\">        Subject sub = <span class=\"keyword\">new</span> MySubject();  </span><br><span class=\"line\">        sub.accept(visitor);      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>visit the subject:love</code><br>该模式适用场景：如果我们想为一个现有的类增加新功能,不得不考虑几个事情：<br>1、新功能会不会与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对这些问题,最好的解决方法就是使用访问者模式,访问者模式适用于数据结构相对稳定的系统,把数据结构和算法解耦;</p>\n<h2 id=\"22-中介者模式-Mediator\"><a href=\"#22-中介者模式-Mediator\" class=\"headerlink\" title=\"22. 中介者模式(Mediator)\"></a>22. 中介者模式(Mediator)</h2><p>中介者模式也是用来降低类类之间的耦合的,因为如果类类之间有依赖关系的话,不利于功能的拓展和维护,因为只要修改一个对象,其它关联的对象都得进行修改。如果使用中介者模式,只需关心和Mediator类的关系,具体类类之间的关系及调度交给Mediator就行,这有点像spring容器的作用。先看看图:<img src=\"/images/post_images/20171225_23.png\" alt=\"\">User类统一接口,User1和User2分别是不同的对象,二者之间有关联,如果不采用中介者模式,则需要二者相互持有引用,这样二者的耦合度很高,为了解耦,引入了Mediator类,提供统一接口,MyMediator为其实现类,里面持有User1和User2的实例,用来实现对User1和User2的控制。这样User1和User2两个对象相互独立,他们只需要保持好和Mediator之间的关系就行,剩下的全由MyMediator类来维护！基本实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mediator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMediator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">workAll</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMediator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mediator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user1;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user2;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMediator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        user1 = <span class=\"keyword\">new</span> User1(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        user2 = <span class=\"keyword\">new</span> User2(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">workAll</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        user1.work();  </span><br><span class=\"line\">        user2.work();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Mediator mediator;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mediator <span class=\"title\">getMediator</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> mediator;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User1</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User1</span><span class=\"params\">(Mediator mediator)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1 exe!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User2</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User2</span><span class=\"params\">(Mediator mediator)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2 exe!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Mediator mediator = <span class=\"keyword\">new</span> MyMediator();  </span><br><span class=\"line\">        mediator.createMediator();  </span><br><span class=\"line\">        mediator.workAll();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>user1 exe!\nuser2 exe!</code></p>\n<h2 id=\"23-解释器模式-Interpreter\"><a href=\"#23-解释器模式-Interpreter\" class=\"headerlink\" title=\"23. 解释器模式(Interpreter)\"></a>23. 解释器模式(Interpreter)</h2><p>解释器模式是我们暂时的最后一讲,一般主要应用在OOP开发中的编译器的开发中,所以适用面比较窄。<br> <img src=\"/images/post_images/20171225_24.png\" alt=\"\"><br>Context类是一个上下文环境类,Plus和Minus分别是用来计算的实现,代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.getNum1()+context.getNum2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Minus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.getNum1()-context.getNum2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num1;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num2;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num1 = num1;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num2 = num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNum1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum1</span><span class=\"params\">(<span class=\"keyword\">int</span> num1)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num1 = num1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNum2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum2</span><span class=\"params\">(<span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num2 = num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算9+2-8的值  </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"keyword\">new</span> Minus().interpret((<span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> Plus()  </span><br><span class=\"line\">                .interpret(<span class=\"keyword\">new</span> Context(<span class=\"number\">9</span>, <span class=\"number\">2</span>)), <span class=\"number\">8</span>)));  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后输出正确的结果:<code>3</code>。</p>\n<p>基本就这样,解释器模式用来做各种各样的解释器,如正则表达式等的解释器等等！</p>\n<p>设计模式基本就这么大概讲完了,总体感觉有点简略,的确,这么点儿篇幅,不足以对整个23种设计模式做全面的阐述,此处读者可将它作为一个理论基础去学习,通过这四篇博文,先基本有个概念,虽然我讲的有些简单,但基本都能说明问题及他们的特点,如果对哪一个感兴趣,可以继续深入研究！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a>;</p>\n</blockquote>\n<p>其实每个设计模式都是很重要的一种思想,看上去很熟,其实是因为我们在学到的东西中都有涉及,尽管有时我们并不知道,其实在Java本身的设计之中处处都有体现,像AWT、JDBC、集合类、IO管道或者是Web框架,里面设计模式无处不在。因为我们篇幅有限,很难讲每一个设计模式都讲的很详细,不过我会尽我所能,尽量在有限的空间和篇幅内,把意思写清楚了,更好让大家明白。本章不出意外的话,应该是设计模式最后一讲了,首先还是上一下上篇开头的那个图:<br><img src=\"/images/post_images/20171225_13.png\" alt=\"\"></p>\n<p>本章讲讲第三类和第四类。</p>\n<h2 id=\"19-备忘录模式（Memento）\"><a href=\"#19-备忘录模式（Memento）\" class=\"headerlink\" title=\"19. 备忘录模式（Memento）\"></a>19. 备忘录模式（Memento）</h2><p>主要目的是保存一个对象的某个状态,以便在适当的时候恢复对象,个人觉得叫备份模式更形象些,通俗的讲下：假设有原始类A,A中有各种属性,A可以决定需要备份的属性,备忘录类B是用来存储A的一些内部状态,类C呢,就是一个用来存储备忘录的,且只能存储,不能修改等操作。<br>做个图来分析一下:<br> <img src=\"/images/post_images/20171225_20.png\" alt=\"\"><br>Original类是原始类,里面有需要保存的属性value及创建一个备忘录类,用来保存value值。Memento类是备忘录类,Storage类是存储备忘录的类,持有Memento类的实例,该模式很好理解。</p>\n<p>直接看源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Original</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Original</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">createMemento</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Memento(value);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreMemento</span><span class=\"params\">(Memento memento)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = memento.getValue();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memento</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Memento</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Storage</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memento memento;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Storage</span><span class=\"params\">(Memento memento)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memento = memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">getMemento</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMemento</span><span class=\"params\">(Memento memento)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memento = memento;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建原始类  </span></span><br><span class=\"line\">        Original origi = <span class=\"keyword\">new</span> Original(<span class=\"string\">\"egg\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建备忘录  </span></span><br><span class=\"line\">        Storage storage = <span class=\"keyword\">new</span> Storage(origi.createMemento());  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 修改原始类的状态  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\">        origi.setValue(<span class=\"string\">\"niu\"</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改后的状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回复原始类的状态  </span></span><br><span class=\"line\">        origi.restoreMemento(storage.getMemento());  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"恢复后的状态为:\"</span> + origi.getValue());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br><code>初始化状态为:egg\n修改后的状态为:niu\n恢复后的状态为:egg</code></p>\n<h2 id=\"20-状态模式-State\"><a href=\"#20-状态模式-State\" class=\"headerlink\" title=\"20. 状态模式(State)\"></a>20. 状态模式(State)</h2><p>核心思想就是：当对象的状态改变时,同时改变其行为,很好理解！就拿QQ来说,有几种状态,在线、隐身、忙碌等,每个状态对应不同的操作,而且你的好友也能看到你的状态<br>所以,状态模式就两点:</p>\n<ol>\n<li>可以通过改变状态来获得不同的行为。</li>\n<li>你的好友能同时看到你的变化。看图:<br><img src=\"/images/post_images/20171225_21.png\" alt=\"\"></li>\n</ol>\n<p>State类是个状态类,Context类可以实现切换,我们来看看代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xtfggef.dp.state;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态类的核心类</span></span><br><span class=\"line\"><span class=\"comment\"> * 2012-12-1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> erqing</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"execute the first opt!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"execute the second opt!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xtfggef.dp.state;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态模式的切换类   2012-12-1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> erqing</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State state;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(State state)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getState</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(State state)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state.getValue().equals(<span class=\"string\">\"state1\"</span>)) &#123;  </span><br><span class=\"line\">            state.method1();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state.getValue().equals(<span class=\"string\">\"state2\"</span>)) &#123;  </span><br><span class=\"line\">            state.method2();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        State state = <span class=\"keyword\">new</span> State();  </span><br><span class=\"line\">        Context context = <span class=\"keyword\">new</span> Context(state);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置第一种状态  </span></span><br><span class=\"line\">        state.setValue(<span class=\"string\">\"state1\"</span>);  </span><br><span class=\"line\">        context.method();  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置第二种状态  </span></span><br><span class=\"line\">        state.setValue(<span class=\"string\">\"state2\"</span>);  </span><br><span class=\"line\">        context.method();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>execute the first opt!\nexecute the second opt!</code></p>\n<p>根据这个特性,状态模式在日常开发中用的挺多的,尤其是做网站的时候,我们有时希望根据对象<br>的某一属性,区别开他们的一些功能,比如说简单的权限控制等。</p>\n<h2 id=\"21-访问者模式（Visitor）\"><a href=\"#21-访问者模式（Visitor）\" class=\"headerlink\" title=\"21. 访问者模式（Visitor）\"></a>21. 访问者模式（Visitor）</h2><p>访问者模式把数据结构和作用于结构上的操作解耦合,使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化,经常有新的数据对象增加进来,则不适合使用访问者模式。访问者模式的优点是增加操作很容易,因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中,其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From百科</p>\n<p>简单来说,访问者模式就是一种分离对象数据结构与行为的方法,通过这种分离,可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：<br><img src=\"/images/post_images/20171225_22.png\" alt=\"\"><br>来看看原码:<br>一个Visitor类,存放要访问的对象,<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Subject sub)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Subject sub)</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"visit the subject:\"</span>+sub.getSubject());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Subject类,accept方法,接受将要访问它的对象,getSubject()获取将要被访问的属性,<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;  </span><br><span class=\"line\">        visitor.visit(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"love\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        Visitor visitor = <span class=\"keyword\">new</span> MyVisitor();  </span><br><span class=\"line\">        Subject sub = <span class=\"keyword\">new</span> MySubject();  </span><br><span class=\"line\">        sub.accept(visitor);      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>visit the subject:love</code><br>该模式适用场景：如果我们想为一个现有的类增加新功能,不得不考虑几个事情：<br>1、新功能会不会与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对这些问题,最好的解决方法就是使用访问者模式,访问者模式适用于数据结构相对稳定的系统,把数据结构和算法解耦;</p>\n<h2 id=\"22-中介者模式-Mediator\"><a href=\"#22-中介者模式-Mediator\" class=\"headerlink\" title=\"22. 中介者模式(Mediator)\"></a>22. 中介者模式(Mediator)</h2><p>中介者模式也是用来降低类类之间的耦合的,因为如果类类之间有依赖关系的话,不利于功能的拓展和维护,因为只要修改一个对象,其它关联的对象都得进行修改。如果使用中介者模式,只需关心和Mediator类的关系,具体类类之间的关系及调度交给Mediator就行,这有点像spring容器的作用。先看看图:<img src=\"/images/post_images/20171225_23.png\" alt=\"\">User类统一接口,User1和User2分别是不同的对象,二者之间有关联,如果不采用中介者模式,则需要二者相互持有引用,这样二者的耦合度很高,为了解耦,引入了Mediator类,提供统一接口,MyMediator为其实现类,里面持有User1和User2的实例,用来实现对User1和User2的控制。这样User1和User2两个对象相互独立,他们只需要保持好和Mediator之间的关系就行,剩下的全由MyMediator类来维护！基本实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mediator</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMediator</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">workAll</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMediator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mediator</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user1;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user2;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createMediator</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        user1 = <span class=\"keyword\">new</span> User1(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">        user2 = <span class=\"keyword\">new</span> User2(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">workAll</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        user1.work();  </span><br><span class=\"line\">        user2.work();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Mediator mediator;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mediator <span class=\"title\">getMediator</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> mediator;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User1</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User1</span><span class=\"params\">(Mediator mediator)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user1 exe!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User2</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User2</span><span class=\"params\">(Mediator mediator)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"user2 exe!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Mediator mediator = <span class=\"keyword\">new</span> MyMediator();  </span><br><span class=\"line\">        mediator.createMediator();  </span><br><span class=\"line\">        mediator.workAll();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><code>user1 exe!\nuser2 exe!</code></p>\n<h2 id=\"23-解释器模式-Interpreter\"><a href=\"#23-解释器模式-Interpreter\" class=\"headerlink\" title=\"23. 解释器模式(Interpreter)\"></a>23. 解释器模式(Interpreter)</h2><p>解释器模式是我们暂时的最后一讲,一般主要应用在OOP开发中的编译器的开发中,所以适用面比较窄。<br> <img src=\"/images/post_images/20171225_24.png\" alt=\"\"><br>Context类是一个上下文环境类,Plus和Minus分别是用来计算的实现,代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.getNum1()+context.getNum2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Minus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">interpret</span><span class=\"params\">(Context context)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.getNum1()-context.getNum2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num1;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num2;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num1 = num1;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num2 = num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNum1</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum1</span><span class=\"params\">(<span class=\"keyword\">int</span> num1)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num1 = num1;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNum2</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum2</span><span class=\"params\">(<span class=\"keyword\">int</span> num2)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num2 = num2;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算9+2-8的值  </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"keyword\">new</span> Minus().interpret((<span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> Plus()  </span><br><span class=\"line\">                .interpret(<span class=\"keyword\">new</span> Context(<span class=\"number\">9</span>, <span class=\"number\">2</span>)), <span class=\"number\">8</span>)));  </span><br><span class=\"line\">        System.out.println(result);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后输出正确的结果:<code>3</code>。</p>\n<p>基本就这样,解释器模式用来做各种各样的解释器,如正则表达式等的解释器等等！</p>\n<p>设计模式基本就这么大概讲完了,总体感觉有点简略,的确,这么点儿篇幅,不足以对整个23种设计模式做全面的阐述,此处读者可将它作为一个理论基础去学习,通过这四篇博文,先基本有个概念,虽然我讲的有些简单,但基本都能说明问题及他们的特点,如果对哪一个感兴趣,可以继续深入研究！</p>\n"},{"title":"Java中的23种设计模式(一)","date":"2017-12-23T09:32:21.000Z","type":["Java","设计模式"],"_content":"\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n# 设计模式（Design Patterns）\n\n设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问,设计模式于己于他人于系统都是多赢的,设计模式使代码编制真正工程化,设计模式是软件工程的基石,如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题,每种模式在现在中都有相应的原理来与之对应,每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的核心解决方案,这也是它能被广泛应用的原因\n\n\n## 设计模式的分类\n总体来说设计模式分为三大类：\n\n| 创建型模式5种 | 结构型模式7种 | 行为型模式11种 | 其他(2种) |\n|:-----:|:-----:|:-----:|:-----:|\n| 工厂方法模式  | 适配器模式    | 策略模式       | 并发型模式 |\n| 抽象工厂模式  | 装饰器模式    | 策略模式       | 线程池模式 |\n| 单例模式      | 代理模式      | 模板方法模式   |           |\n| 建造者模式    | 桥接模式      | 观察者模式     |            |\n| 原型模式      | 组合模式      | 迭代子模式     |           |\n|              | 享元模式      | 责任链模式     |            |\n|              |               | 命令模式       |           |\n|              |               | 备忘录模式     |            |\n|              |               | 状态模式       |           |\n|              |               | 访问者模式     |            |\n|              |               | 中介者模式     |            |\n|              |               | 解释器模式     |            ||\n\n用一个图片来整体描述一下：\n![](/images/post_images/20171223_Design_Patterns_1.jpg)\n\n## 设计模式的六大原则\n\n1. 开闭原则（Open Close Principle）\n开闭原则就是说对扩展开放,对修改关闭。在程序需要进行拓展的时候,不能去修改原有的代码,实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好,易于维护和升级。想要达到这样的效果,我们需要使用接口和抽象类,后面的具体设计中我们会提到这点。\n2. 里氏代换原则（Liskov Substitution Principle）\n里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说,任何基类可以出现的地方,子类一定可以出现。 LSP是继承复用的基石,只有当衍生类可以替换掉基类,软件单位的功能不受到影响时,基类才能真正被复用,而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。\n而基类与子类的继承关系就是抽象化的具体实现,所以里氏代换原则是对实现抽象化的具体步骤的规\n范。—— From Baidu 百科\n3. 依赖倒转原则（Dependence Inversion Principle）\n这个是开闭原则的基础,具体内容：真对接口编程,依赖于抽象而不依赖于具体。\n4. 接口隔离原则（Interface Segregation Principle）\n这个原则的意思是：使用多个隔离的接口,比使用单个接口要好。还是一个降低类之间的耦合度的意思,从这儿我们看出,其实设计模式就是一个软件的设计思想,从大型软件架构出发,为了升级和维护方便。所以上文中多次出现：降低依赖,降低耦合。\n5. 迪米特法则（最少知道原则）（Demeter Principle）\n为什么叫最少知道原则,就是说：一个实体应当尽量少的与其他实体之间发生相互作用,使得系统功\n能模块相对独立。\n6. 合成复用原则（Composite Reuse Principle）\n原则是尽量使用合成/聚合的方式,而不是使用继承。\n\n# Java的23中设计模式\n从这一块开始,我们详细介绍Java中23种设计模式的概念,应用场景等情况,并结合他们的特点及设计模式的原则进行分析。\n\n## 1. 工厂方法模式(Factory Method)\n就是建立一个工厂类,对实现了同一接口的一些类进行实例的创建。首先看下关系图：\n![](/images/post_images/20171223FactoryMethod.jpg)\n\n举例如下：（我们举一个发送邮件和短信的例子）\n首先,创建二者的共同接口:\n\n``` java\n  public interface Sender {  \n      public void Send();  \n  }  \n```\n其次,创建实现类:\n\n``` java\n  public class MailSender implements Sender {\n      @Override\n      public void Send() {\n          System.out.println(\"this is mailsender!\");\n      }\n  }\n```\n\n``` java\n  public class SmsSender implements Sender {\n\n      @Override  \n      public void Send() {  \n          System.out.println(\"this is sms sender!\");  \n      }  \n  }  \n```\n\n最后,建工厂类:\n\n``` java\npublic class SendFactory {  \n\n    public Sender produce(String type) {  \n        if (\"mail\".equals(type)) {  \n            return new MailSender();  \n        } else if (\"sms\".equals(type)) {  \n            return new SmsSender();  \n        } else {  \n            System.out.println(\"请输入正确的类型!\");  \n            return null;  \n        }  \n    }  \n}  \n```\n我们来测试下:\n``` java\n  public class FactoryTest {  \n\n      public static void main(String[] args) {  \n          SendFactory factory = new SendFactory();  \n          Sender sender = factory.produce(\"sms\");  \n          sender.Send();  \n      }  \n  }  \n```\n输出: `this is sms sender!`\n\n### 2. 多个工厂方法模式\n  是对普通工厂方法模式的改进,在普通工厂方法模式中,如果传递的字符串出错,则不能正确创建对象,而多个工厂方法模式是提供多个工厂方法,分别创建对象。关系图：\n![](/images/post_images/20171224_Factory.png)\n\n将上面的代码做下修改,改动下SendFactory类就行,如下:\n``` java\npublic class SendFactory {  \n\n    public Sender produceMail(){  \n        return new MailSender();  \n    }  \n\n    public Sender produceSms(){  \n        return new SmsSender();  \n    }  \n}  \n```\n测试类如下:\n``` java\npublic class FactoryTest {  \n\n    public static void main(String[] args) {  \n        SendFactory factory = new SendFactory();  \n        Sender sender = factory.produceMail();  \n        sender.Send();  \n    }  \n}  \n```\n输出：`this is mailsender!`\n\n### 3. 静态工厂方法模式\n  将上面的多个工厂方法模式里的方法置为静态的,不需要创建实例,直接调用即可。\n\n``` java\npublic class SendFactory {  \n\n    public static Sender produceMail(){  \n        return new MailSender();  \n    }  \n\n    public static Sender produceSms(){  \n        return new SmsSender();  \n    }  \n}  \n```\n``` java\npublic class FactoryTest {  \n\n    public static void main(String[] args) {      \n        Sender sender = SendFactory.produceMail();  \n        sender.Send();  \n    }  \n}  \n```\n输出：`this is mailsender!`\n\n总体来说,工厂模式适合：凡是出现了大量的产品需要创建,并且具有共同的接口时,可以通过工厂方法模式进行创建。在以上的三种模式中,第一种如果传入的字符串有误,不能正确创建对象,第三种相对于第二种,不需要实例化工厂类,所以,大多数情况下,我们会选用第三种——静态工厂方法模式。\n\n## 2. 抽象工厂模式（Abstract Factory）\n  工厂方法模式有一个问题就是,类的创建依赖工厂类,也就是说,如果想要拓展程序,必须对工厂类进行修改,这违背了闭包原则,所以,从设计角度考虑,有一定的问题,如何解决？就用到抽象工厂模式,创建多个工厂类,这样一旦需要增加新的功能,直接增加新的工厂类就可以了,不需要修改之前的代码。因为抽象工厂不太好理解,我们先看看图,然后就和代码,就比较容易理解。\n![](/images/post_images/20171224_Factory2.png)\n\n请看例子:\n\n``` java\npublic interface Sender {  \n    public void Send();  \n}  \n```\n两个实现类:\n``` java\npublic class MailSender implements Sender {  \n    @Override  \n    public void Send() {  \n        System.out.println(\"this is mailsender!\");  \n    }  \n}  \n```\n两个工厂类:\n``` java\n  public class SendMailFactory implements Provider {  \n\n      @Override  \n      public Sender produce(){  \n          return new MailSender();  \n      }  \n  }  \n```\n\n``` java\npublic class SendSmsFactory implements Provider{  \n\n    @Override  \n    public Sender produce() {  \n        return new SmsSender();  \n    }  \n}\n```\n在提供一个接口:\n``` java\npublic interface Provider {  \n    public Sender produce();  \n}  \n```\n测试类:\n\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Provider provider = new SendMailFactory();  \n        Sender sender = provider.produce();  \n        sender.Send();  \n    }  \n}\n```\n其实这个模式的好处就是,如果你现在想增加一个功能：发及时信息,则只需做一个实现类,实现Sender接口,同时做一个工厂类,实现Provider接口,就OK了,无需去改动现成的代码。这样做,拓展性较好！\n\n## 3. 单例模式（Singleton）\n单例对象（Singleton）是一种常用的设计模式。在Java应用中,单例对象能保证在一个JVM中,该对象只有一个实例存在。这样的模式有几个好处：\n1. 某些类创建比较频繁,对于一些大型的对象,这是一笔很大的系统开销。\n2. 省去了new操作符,降低了系统内存的使用频率,减轻GC压力。\n3. 有些类如交易所的核心交易引擎,控制着交易流程,如果该类可以创建多个的话,系统完全乱了。（比如一个军队出现了多个司令员同时指挥,肯定会乱成一团）,所以只有使用单例模式,才能保证核心交易服务器独立控制整个流程。\n\n首先我们写一个简单的单例类：\n``` java\npublic class Singleton {  \n\n    /* 持有私有静态实例,防止被引用,此处赋值为null,目的是实现延迟加载 */  \n    private static Singleton instance = null;  \n\n    /* 私有构造方法,防止被实例化 */  \n    private Singleton() {  \n    }  \n\n    /* 静态工程方法,创建实例 */  \n    public static Singleton getInstance() {  \n        if (instance == null) {  \n            instance = new Singleton();  \n        }  \n        return instance;  \n    }  \n\n    /* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */  \n    public Object readResolve() {  \n        return instance;  \n    }  \n}  \n```\n\n这个类可以满足基本要求,但是,像这样毫无线程安全保护的类,如果我们把它放入多线程的环境下,肯定就会出现问题了,如何解决？我们首先会想到对getInstance方法加synchronized关键字,如下:\n``` java\npublic static synchronized Singleton getInstance() {  \n        if (instance == null) {  \n            instance = new Singleton();  \n        }  \n        return instance;  \n}\n``\n\n但是,synchronized关键字锁住的是这个对象,这样的用法,在性能上会有所下降,因为每次调用getInstance(),都要对对象上锁,事实上,只有在第一次创建对象的时候需要加锁,之后就不需要了,所以,这个地方需要改进。我们改成下面这个：\n\n``` java\npublic static Singleton getInstance() {  \n        if (instance == null) {  \n            synchronized (instance) {  \n                if (instance == null) {  \n                    instance = new Singleton();  \n                }  \n            }  \n        }  \n        return instance;  \n    }  \n```\n\n似乎解决了之前提到的问题,将synchronized关键字加在了内部,也就是说当调用的时候是不需要加锁的,只有在instance为null,并创建对象的时候才需要加锁,性能有一定的提升。但是,这样的情况,还是有可能有问题的,看下面的情况：在Java指令中创建对象和赋值操作是分开进行的,也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序,也就是说有可能JVM会为新的Singleton实例分配空间,然后直接赋值给instance成员,然后再去初始化这个Singleton实例。这样就可能出错了,我们以A、B两个线程为例：a>A、B线程同时进入了第一个if判断b>A首先进入synchronized块,由于instance为null,所以它执行instance = newSingleton();c>由于JVM内部的优化机制,JVM先画出了一些分配给Singleton实例的空白内存,并赋值给instance成员（注意此时JVM没有开始初始化这个实例）,然后A离开了synchronized块。d>B进入synchronized块,由于instance此时不是null,因此它马上离开了synchronized块并将结果返回给调用该方法的程序。e>此时B线程打算使用Singleton实例,却发现它没有被初始化,于是错误发生了。所以程序还是有可能发生错误,其实程序在运行过程是很复杂的,从这点我们就可以看出,尤其是在写多线程环境下的程序更有难度,有挑战性。我们对该程序做进一步优化：\n``` java\nprivate static class SingletonFactory{           \n        private static Singleton instance = new Singleton();           \n    }           \n    public static Singleton getInstance(){           \n        return SingletonFactory.instance;           \n    }   \n```\n\n实际情况是,单例模式使用内部类来维护单例的实现,JVM内部的机制能够保证当一个类被加载的时候,这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候,JVM能够帮我们保证instance只被创建一次,并且会保证把赋值给instance的内存初始化完毕,这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制,这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式:\n\n``` java\npublic class Singleton {  \n\n    /* 私有构造方法,防止被实例化 */  \n    private Singleton() {  \n    }  \n\n    /* 此处使用一个内部类来维护单例 */  \n    private static class SingletonFactory {  \n        private static Singleton instance = new Singleton();  \n    }  \n\n    /* 获取实例 */  \n    public static Singleton getInstance() {  \n        return SingletonFactory.instance;  \n    }  \n\n    /* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */  \n    public Object readResolve() {  \n        return getInstance();  \n    }  \n}  \n```\n\n其实说它完美,也不一定,如果在构造函数中抛出异常,实例将永远得不到创建,也会出错。所以\n说,十分完美的东西是没有的,我们只能根据实际情况,选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步,所以只要将创建和getInstance()分开,单独为创建加synchronized关键字,也是可以的:\n``` java\npublic class SingletonTest {  \n\n    private static SingletonTest instance = null;  \n\n    private SingletonTest() {  \n    }  \n\n    private static synchronized void syncInit() {  \n        if (instance == null) {  \n            instance = new SingletonTest();  \n        }  \n    }  \n\n    public static SingletonTest getInstance() {  \n        if (instance == null) {  \n            syncInit();  \n        }  \n        return instance;  \n    }  \n}\n```\n\n考虑性能的话,整个程序只需创建一次实例,所以性能也不会有什么影响。<font color='red'>补充：采用\"影子实例\"的办法为单例对象的属性同步更新</font>\n\n``` java\npublic class SingletonTest {  \n\n    private static SingletonTest instance = null;  \n    private Vector properties = null;  \n\n    public Vector getProperties() {  \n        return properties;  \n    }  \n\n    private SingletonTest() {  \n    }  \n\n    private static synchronized void syncInit() {  \n        if (instance == null) {  \n            instance = new SingletonTest();  \n        }  \n    }  \n\n    public static SingletonTest getInstance() {  \n        if (instance == null) {  \n            syncInit();  \n        }  \n        return instance;  \n    }  \n\n    public void updateProperties() {  \n        SingletonTest shadow = new SingletonTest();  \n        properties = shadow.getProperties();  \n    }  \n}\n```\n通过单例模式的学习告诉我们：\n1. 单例模式理解起来简单,但是具体实现起来还是有一定的难度。\n2. synchronized关键字锁定的是对象,在用的时候,一定要在恰当的地方使用（注意需要使用锁\n的对象和过程,可能有的时候并不是整个对象及整个过程都需要锁）。\n\n到这儿,单例模式基本已经讲完了,结尾处,笔者突然想到另一个问题,就是采用类的静态方法,实现单例模式的效果,也是可行的,此处二者有什么不同？首先,静态类不能实现接口。（从类的角度说是可以的,但是那样就破坏了静态了。因为接口中不允许有static修饰的方法,所以即使实现了也是非静态的）其次,单例可以被延迟初始化,静态类一般在第一次加载是初始化。之所以延迟加载,是因为有些类比较庞大,所以延迟加载有助于提升性能。再次,单例类可以被继承,他的方法可以被覆写。但是静态类内部方法都是static,无法被覆写。最后一点,单例类比较灵活,毕竟从实现上只是一个普通的Java类,只要满足单例的基本需求,你可以在里面随心所欲的实现一些其它功能,但是静态类不行。从上面这些概括中,基本可以看出二者的区别,但是,从另一方面讲,我们上面最后实现的那个单例模式,内部就是用一个静态类来实现的,所以,二者有很大的关联,只是我们考虑问题的层面不同罢了。两种思想的结合,才能造就出完美的解决方案,就像HashMap采用数组+链表来实现一样,其实生活中很多事情都是这样,单用不同的方法来处理问题,总是有优点也有缺点,最完美的方法是,结合各个方法的优点,才能最好的解决问题！\n\n## 4. 建造者模式(Builder)\n\n工厂类模式提供的是创建单个类的模式,而建造者模式则是将各种产品集中起来进行管理,用来创建复合对象,所谓复合对象就是指某个类具有不同的属性,其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：\n还和前面一样,一个Sender接口,两个实现类MailSender和SmsSender。最后,建造者类如下：\n\n``` java\npublic class Builder {  \n\n    private List<Sender> list = new ArrayList<Sender>();  \n\n    public void produceMailSender(int count){  \n        for(int i=0; i<count; i++){  \n            list.add(new MailSender());  \n        }  \n    }  \n\n    public void produceSmsSender(int count){  \n        for(int i=0; i<count; i++){  \n            list.add(new SmsSender());  \n        }  \n    }  \n}  \n```\n测试类:\n\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Builder builder = new Builder();  \n        builder.produceMailSender(10);  \n    }  \n}  \n```\n\n从这点看出,建造者模式将很多功能集成到一个类里,这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品,而建造者模式则关注创建符合对象,多个部分。因此,是选择工厂模式还是建造者模式,依实际情况而定。\n\n## 5. 原型模式(Prototype)\n  原型模式虽然是创建型的模式,但是与工程模式没有关系,从名字即可看出,该模式的思想就是将一个对象作为原型,对其进行复制、克隆,产生一个和原对象类似的新对象。本小结会通过对象的复制,进行讲解。在Java中,复制对象是通过clone()实现的,先创建一个原型类：\n\n``` java\npublic class Prototype implements Cloneable {  \n\n    public Object clone() throws CloneNotSupportedException {  \n        Prototype proto = (Prototype) super.clone();  \n        return proto;  \n    }  \n}  \n```\n\n很简单,一个原型类,只需要实现Cloneable接口,覆写clone方法,此处clone方法可以改成任意的名称,因为Cloneable接口是个空接口,你可以任意定义实现类的方法名,如cloneA或者cloneB,因为此处的重点是 super.clone()这句话,super.clone()调用的是 Object 的 clone() 方法,而在Object类中,clone()是native的,具体怎么实现,我会在另一篇文章中,关于解读Java中本地方法的调用,此处不再深究。在这儿,我将结合对象的浅复制和深复制来说一下,首先需要了解对象深、浅复制的概念：\n\n- 浅复制：将一个对象复制后,基本数据类型的变量都会重新创建,而引用类型,指向的还是原对\n象所指向的。\n- 深复制：将一个对象复制后,不论是基本数据类型还有引用类型,都是重新创建的。简单来说,\n就是深复制进行了完全彻底的复制,而浅复制不彻底。此处,写一个深浅复制的例子：\n\n``` java\npublic class Prototype implements Cloneable, Serializable {  \n\n    private static final long serialVersionUID = 1L;  \n    private String string;  \n\n    private SerializableObject obj;  \n\n    /* 浅复制 */  \n    public Object clone() throws CloneNotSupportedException {  \n        Prototype proto = (Prototype) super.clone();  \n        return proto;  \n    }  \n\n    /* 深复制 */  \n    public Object deepClone() throws IOException, ClassNotFoundException {  \n\n        /* 写入当前对象的二进制流 */  \n        ByteArrayOutputStream bos = new ByteArrayOutputStream();  \n        ObjectOutputStream oos = new ObjectOutputStream(bos);  \n        oos.writeObject(this);  \n\n        /* 读出二进制流产生的新对象 */  \n        ByteArrayInputStream bis = new\n\t\t\t\tByteArrayInputStream(bos.toByteArray());  \n        ObjectInputStream ois = new ObjectInputStream(bis);  \n        return ois.readObject();  \n    }  \n\n    public String getString() {  \n        return string;  \n    }  \n\n    public void setString(String string) {  \n        this.string = string;  \n    }  \n\n    public SerializableObject getObj() {  \n        return obj;  \n    }  \n\n    public void setObj(SerializableObject obj) {  \n        this.obj = obj;  \n    }  \n\n}  \n\nclass SerializableObject implements Serializable {  \n    private static final long serialVersionUID = 1L;  \n}  \n```\n要实现深复制,需要采用流的形式读入当前对象的二进制输入,再写出二进制数据对应的对象。\n","source":"_posts/Java中的23种设计模式-一.md","raw":"---\ntitle: Java中的23种设计模式(一)\ndate: 2017-12-23 17:32:21\ntags:\n  - Java\n  - 设计模式\ncategories:\n  - Java\n  - 设计模式\ntype:\n  - Java\n  - 设计模式\n---\n\n> 本文转自:[http://blog.csdn.net/zhangerqing](http://blog.csdn.net/zhangerqing)\n\n# 设计模式（Design Patterns）\n\n设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问,设计模式于己于他人于系统都是多赢的,设计模式使代码编制真正工程化,设计模式是软件工程的基石,如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题,每种模式在现在中都有相应的原理来与之对应,每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的核心解决方案,这也是它能被广泛应用的原因\n\n\n## 设计模式的分类\n总体来说设计模式分为三大类：\n\n| 创建型模式5种 | 结构型模式7种 | 行为型模式11种 | 其他(2种) |\n|:-----:|:-----:|:-----:|:-----:|\n| 工厂方法模式  | 适配器模式    | 策略模式       | 并发型模式 |\n| 抽象工厂模式  | 装饰器模式    | 策略模式       | 线程池模式 |\n| 单例模式      | 代理模式      | 模板方法模式   |           |\n| 建造者模式    | 桥接模式      | 观察者模式     |            |\n| 原型模式      | 组合模式      | 迭代子模式     |           |\n|              | 享元模式      | 责任链模式     |            |\n|              |               | 命令模式       |           |\n|              |               | 备忘录模式     |            |\n|              |               | 状态模式       |           |\n|              |               | 访问者模式     |            |\n|              |               | 中介者模式     |            |\n|              |               | 解释器模式     |            ||\n\n用一个图片来整体描述一下：\n![](/images/post_images/20171223_Design_Patterns_1.jpg)\n\n## 设计模式的六大原则\n\n1. 开闭原则（Open Close Principle）\n开闭原则就是说对扩展开放,对修改关闭。在程序需要进行拓展的时候,不能去修改原有的代码,实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好,易于维护和升级。想要达到这样的效果,我们需要使用接口和抽象类,后面的具体设计中我们会提到这点。\n2. 里氏代换原则（Liskov Substitution Principle）\n里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说,任何基类可以出现的地方,子类一定可以出现。 LSP是继承复用的基石,只有当衍生类可以替换掉基类,软件单位的功能不受到影响时,基类才能真正被复用,而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。\n而基类与子类的继承关系就是抽象化的具体实现,所以里氏代换原则是对实现抽象化的具体步骤的规\n范。—— From Baidu 百科\n3. 依赖倒转原则（Dependence Inversion Principle）\n这个是开闭原则的基础,具体内容：真对接口编程,依赖于抽象而不依赖于具体。\n4. 接口隔离原则（Interface Segregation Principle）\n这个原则的意思是：使用多个隔离的接口,比使用单个接口要好。还是一个降低类之间的耦合度的意思,从这儿我们看出,其实设计模式就是一个软件的设计思想,从大型软件架构出发,为了升级和维护方便。所以上文中多次出现：降低依赖,降低耦合。\n5. 迪米特法则（最少知道原则）（Demeter Principle）\n为什么叫最少知道原则,就是说：一个实体应当尽量少的与其他实体之间发生相互作用,使得系统功\n能模块相对独立。\n6. 合成复用原则（Composite Reuse Principle）\n原则是尽量使用合成/聚合的方式,而不是使用继承。\n\n# Java的23中设计模式\n从这一块开始,我们详细介绍Java中23种设计模式的概念,应用场景等情况,并结合他们的特点及设计模式的原则进行分析。\n\n## 1. 工厂方法模式(Factory Method)\n就是建立一个工厂类,对实现了同一接口的一些类进行实例的创建。首先看下关系图：\n![](/images/post_images/20171223FactoryMethod.jpg)\n\n举例如下：（我们举一个发送邮件和短信的例子）\n首先,创建二者的共同接口:\n\n``` java\n  public interface Sender {  \n      public void Send();  \n  }  \n```\n其次,创建实现类:\n\n``` java\n  public class MailSender implements Sender {\n      @Override\n      public void Send() {\n          System.out.println(\"this is mailsender!\");\n      }\n  }\n```\n\n``` java\n  public class SmsSender implements Sender {\n\n      @Override  \n      public void Send() {  \n          System.out.println(\"this is sms sender!\");  \n      }  \n  }  \n```\n\n最后,建工厂类:\n\n``` java\npublic class SendFactory {  \n\n    public Sender produce(String type) {  \n        if (\"mail\".equals(type)) {  \n            return new MailSender();  \n        } else if (\"sms\".equals(type)) {  \n            return new SmsSender();  \n        } else {  \n            System.out.println(\"请输入正确的类型!\");  \n            return null;  \n        }  \n    }  \n}  \n```\n我们来测试下:\n``` java\n  public class FactoryTest {  \n\n      public static void main(String[] args) {  \n          SendFactory factory = new SendFactory();  \n          Sender sender = factory.produce(\"sms\");  \n          sender.Send();  \n      }  \n  }  \n```\n输出: `this is sms sender!`\n\n### 2. 多个工厂方法模式\n  是对普通工厂方法模式的改进,在普通工厂方法模式中,如果传递的字符串出错,则不能正确创建对象,而多个工厂方法模式是提供多个工厂方法,分别创建对象。关系图：\n![](/images/post_images/20171224_Factory.png)\n\n将上面的代码做下修改,改动下SendFactory类就行,如下:\n``` java\npublic class SendFactory {  \n\n    public Sender produceMail(){  \n        return new MailSender();  \n    }  \n\n    public Sender produceSms(){  \n        return new SmsSender();  \n    }  \n}  \n```\n测试类如下:\n``` java\npublic class FactoryTest {  \n\n    public static void main(String[] args) {  \n        SendFactory factory = new SendFactory();  \n        Sender sender = factory.produceMail();  \n        sender.Send();  \n    }  \n}  \n```\n输出：`this is mailsender!`\n\n### 3. 静态工厂方法模式\n  将上面的多个工厂方法模式里的方法置为静态的,不需要创建实例,直接调用即可。\n\n``` java\npublic class SendFactory {  \n\n    public static Sender produceMail(){  \n        return new MailSender();  \n    }  \n\n    public static Sender produceSms(){  \n        return new SmsSender();  \n    }  \n}  \n```\n``` java\npublic class FactoryTest {  \n\n    public static void main(String[] args) {      \n        Sender sender = SendFactory.produceMail();  \n        sender.Send();  \n    }  \n}  \n```\n输出：`this is mailsender!`\n\n总体来说,工厂模式适合：凡是出现了大量的产品需要创建,并且具有共同的接口时,可以通过工厂方法模式进行创建。在以上的三种模式中,第一种如果传入的字符串有误,不能正确创建对象,第三种相对于第二种,不需要实例化工厂类,所以,大多数情况下,我们会选用第三种——静态工厂方法模式。\n\n## 2. 抽象工厂模式（Abstract Factory）\n  工厂方法模式有一个问题就是,类的创建依赖工厂类,也就是说,如果想要拓展程序,必须对工厂类进行修改,这违背了闭包原则,所以,从设计角度考虑,有一定的问题,如何解决？就用到抽象工厂模式,创建多个工厂类,这样一旦需要增加新的功能,直接增加新的工厂类就可以了,不需要修改之前的代码。因为抽象工厂不太好理解,我们先看看图,然后就和代码,就比较容易理解。\n![](/images/post_images/20171224_Factory2.png)\n\n请看例子:\n\n``` java\npublic interface Sender {  \n    public void Send();  \n}  \n```\n两个实现类:\n``` java\npublic class MailSender implements Sender {  \n    @Override  \n    public void Send() {  \n        System.out.println(\"this is mailsender!\");  \n    }  \n}  \n```\n两个工厂类:\n``` java\n  public class SendMailFactory implements Provider {  \n\n      @Override  \n      public Sender produce(){  \n          return new MailSender();  \n      }  \n  }  \n```\n\n``` java\npublic class SendSmsFactory implements Provider{  \n\n    @Override  \n    public Sender produce() {  \n        return new SmsSender();  \n    }  \n}\n```\n在提供一个接口:\n``` java\npublic interface Provider {  \n    public Sender produce();  \n}  \n```\n测试类:\n\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Provider provider = new SendMailFactory();  \n        Sender sender = provider.produce();  \n        sender.Send();  \n    }  \n}\n```\n其实这个模式的好处就是,如果你现在想增加一个功能：发及时信息,则只需做一个实现类,实现Sender接口,同时做一个工厂类,实现Provider接口,就OK了,无需去改动现成的代码。这样做,拓展性较好！\n\n## 3. 单例模式（Singleton）\n单例对象（Singleton）是一种常用的设计模式。在Java应用中,单例对象能保证在一个JVM中,该对象只有一个实例存在。这样的模式有几个好处：\n1. 某些类创建比较频繁,对于一些大型的对象,这是一笔很大的系统开销。\n2. 省去了new操作符,降低了系统内存的使用频率,减轻GC压力。\n3. 有些类如交易所的核心交易引擎,控制着交易流程,如果该类可以创建多个的话,系统完全乱了。（比如一个军队出现了多个司令员同时指挥,肯定会乱成一团）,所以只有使用单例模式,才能保证核心交易服务器独立控制整个流程。\n\n首先我们写一个简单的单例类：\n``` java\npublic class Singleton {  \n\n    /* 持有私有静态实例,防止被引用,此处赋值为null,目的是实现延迟加载 */  \n    private static Singleton instance = null;  \n\n    /* 私有构造方法,防止被实例化 */  \n    private Singleton() {  \n    }  \n\n    /* 静态工程方法,创建实例 */  \n    public static Singleton getInstance() {  \n        if (instance == null) {  \n            instance = new Singleton();  \n        }  \n        return instance;  \n    }  \n\n    /* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */  \n    public Object readResolve() {  \n        return instance;  \n    }  \n}  \n```\n\n这个类可以满足基本要求,但是,像这样毫无线程安全保护的类,如果我们把它放入多线程的环境下,肯定就会出现问题了,如何解决？我们首先会想到对getInstance方法加synchronized关键字,如下:\n``` java\npublic static synchronized Singleton getInstance() {  \n        if (instance == null) {  \n            instance = new Singleton();  \n        }  \n        return instance;  \n}\n``\n\n但是,synchronized关键字锁住的是这个对象,这样的用法,在性能上会有所下降,因为每次调用getInstance(),都要对对象上锁,事实上,只有在第一次创建对象的时候需要加锁,之后就不需要了,所以,这个地方需要改进。我们改成下面这个：\n\n``` java\npublic static Singleton getInstance() {  \n        if (instance == null) {  \n            synchronized (instance) {  \n                if (instance == null) {  \n                    instance = new Singleton();  \n                }  \n            }  \n        }  \n        return instance;  \n    }  \n```\n\n似乎解决了之前提到的问题,将synchronized关键字加在了内部,也就是说当调用的时候是不需要加锁的,只有在instance为null,并创建对象的时候才需要加锁,性能有一定的提升。但是,这样的情况,还是有可能有问题的,看下面的情况：在Java指令中创建对象和赋值操作是分开进行的,也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序,也就是说有可能JVM会为新的Singleton实例分配空间,然后直接赋值给instance成员,然后再去初始化这个Singleton实例。这样就可能出错了,我们以A、B两个线程为例：a>A、B线程同时进入了第一个if判断b>A首先进入synchronized块,由于instance为null,所以它执行instance = newSingleton();c>由于JVM内部的优化机制,JVM先画出了一些分配给Singleton实例的空白内存,并赋值给instance成员（注意此时JVM没有开始初始化这个实例）,然后A离开了synchronized块。d>B进入synchronized块,由于instance此时不是null,因此它马上离开了synchronized块并将结果返回给调用该方法的程序。e>此时B线程打算使用Singleton实例,却发现它没有被初始化,于是错误发生了。所以程序还是有可能发生错误,其实程序在运行过程是很复杂的,从这点我们就可以看出,尤其是在写多线程环境下的程序更有难度,有挑战性。我们对该程序做进一步优化：\n``` java\nprivate static class SingletonFactory{           \n        private static Singleton instance = new Singleton();           \n    }           \n    public static Singleton getInstance(){           \n        return SingletonFactory.instance;           \n    }   \n```\n\n实际情况是,单例模式使用内部类来维护单例的实现,JVM内部的机制能够保证当一个类被加载的时候,这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候,JVM能够帮我们保证instance只被创建一次,并且会保证把赋值给instance的内存初始化完毕,这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制,这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式:\n\n``` java\npublic class Singleton {  \n\n    /* 私有构造方法,防止被实例化 */  \n    private Singleton() {  \n    }  \n\n    /* 此处使用一个内部类来维护单例 */  \n    private static class SingletonFactory {  \n        private static Singleton instance = new Singleton();  \n    }  \n\n    /* 获取实例 */  \n    public static Singleton getInstance() {  \n        return SingletonFactory.instance;  \n    }  \n\n    /* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */  \n    public Object readResolve() {  \n        return getInstance();  \n    }  \n}  \n```\n\n其实说它完美,也不一定,如果在构造函数中抛出异常,实例将永远得不到创建,也会出错。所以\n说,十分完美的东西是没有的,我们只能根据实际情况,选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步,所以只要将创建和getInstance()分开,单独为创建加synchronized关键字,也是可以的:\n``` java\npublic class SingletonTest {  \n\n    private static SingletonTest instance = null;  \n\n    private SingletonTest() {  \n    }  \n\n    private static synchronized void syncInit() {  \n        if (instance == null) {  \n            instance = new SingletonTest();  \n        }  \n    }  \n\n    public static SingletonTest getInstance() {  \n        if (instance == null) {  \n            syncInit();  \n        }  \n        return instance;  \n    }  \n}\n```\n\n考虑性能的话,整个程序只需创建一次实例,所以性能也不会有什么影响。<font color='red'>补充：采用\"影子实例\"的办法为单例对象的属性同步更新</font>\n\n``` java\npublic class SingletonTest {  \n\n    private static SingletonTest instance = null;  \n    private Vector properties = null;  \n\n    public Vector getProperties() {  \n        return properties;  \n    }  \n\n    private SingletonTest() {  \n    }  \n\n    private static synchronized void syncInit() {  \n        if (instance == null) {  \n            instance = new SingletonTest();  \n        }  \n    }  \n\n    public static SingletonTest getInstance() {  \n        if (instance == null) {  \n            syncInit();  \n        }  \n        return instance;  \n    }  \n\n    public void updateProperties() {  \n        SingletonTest shadow = new SingletonTest();  \n        properties = shadow.getProperties();  \n    }  \n}\n```\n通过单例模式的学习告诉我们：\n1. 单例模式理解起来简单,但是具体实现起来还是有一定的难度。\n2. synchronized关键字锁定的是对象,在用的时候,一定要在恰当的地方使用（注意需要使用锁\n的对象和过程,可能有的时候并不是整个对象及整个过程都需要锁）。\n\n到这儿,单例模式基本已经讲完了,结尾处,笔者突然想到另一个问题,就是采用类的静态方法,实现单例模式的效果,也是可行的,此处二者有什么不同？首先,静态类不能实现接口。（从类的角度说是可以的,但是那样就破坏了静态了。因为接口中不允许有static修饰的方法,所以即使实现了也是非静态的）其次,单例可以被延迟初始化,静态类一般在第一次加载是初始化。之所以延迟加载,是因为有些类比较庞大,所以延迟加载有助于提升性能。再次,单例类可以被继承,他的方法可以被覆写。但是静态类内部方法都是static,无法被覆写。最后一点,单例类比较灵活,毕竟从实现上只是一个普通的Java类,只要满足单例的基本需求,你可以在里面随心所欲的实现一些其它功能,但是静态类不行。从上面这些概括中,基本可以看出二者的区别,但是,从另一方面讲,我们上面最后实现的那个单例模式,内部就是用一个静态类来实现的,所以,二者有很大的关联,只是我们考虑问题的层面不同罢了。两种思想的结合,才能造就出完美的解决方案,就像HashMap采用数组+链表来实现一样,其实生活中很多事情都是这样,单用不同的方法来处理问题,总是有优点也有缺点,最完美的方法是,结合各个方法的优点,才能最好的解决问题！\n\n## 4. 建造者模式(Builder)\n\n工厂类模式提供的是创建单个类的模式,而建造者模式则是将各种产品集中起来进行管理,用来创建复合对象,所谓复合对象就是指某个类具有不同的属性,其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：\n还和前面一样,一个Sender接口,两个实现类MailSender和SmsSender。最后,建造者类如下：\n\n``` java\npublic class Builder {  \n\n    private List<Sender> list = new ArrayList<Sender>();  \n\n    public void produceMailSender(int count){  \n        for(int i=0; i<count; i++){  \n            list.add(new MailSender());  \n        }  \n    }  \n\n    public void produceSmsSender(int count){  \n        for(int i=0; i<count; i++){  \n            list.add(new SmsSender());  \n        }  \n    }  \n}  \n```\n测试类:\n\n``` java\npublic class Test {  \n\n    public static void main(String[] args) {  \n        Builder builder = new Builder();  \n        builder.produceMailSender(10);  \n    }  \n}  \n```\n\n从这点看出,建造者模式将很多功能集成到一个类里,这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品,而建造者模式则关注创建符合对象,多个部分。因此,是选择工厂模式还是建造者模式,依实际情况而定。\n\n## 5. 原型模式(Prototype)\n  原型模式虽然是创建型的模式,但是与工程模式没有关系,从名字即可看出,该模式的思想就是将一个对象作为原型,对其进行复制、克隆,产生一个和原对象类似的新对象。本小结会通过对象的复制,进行讲解。在Java中,复制对象是通过clone()实现的,先创建一个原型类：\n\n``` java\npublic class Prototype implements Cloneable {  \n\n    public Object clone() throws CloneNotSupportedException {  \n        Prototype proto = (Prototype) super.clone();  \n        return proto;  \n    }  \n}  \n```\n\n很简单,一个原型类,只需要实现Cloneable接口,覆写clone方法,此处clone方法可以改成任意的名称,因为Cloneable接口是个空接口,你可以任意定义实现类的方法名,如cloneA或者cloneB,因为此处的重点是 super.clone()这句话,super.clone()调用的是 Object 的 clone() 方法,而在Object类中,clone()是native的,具体怎么实现,我会在另一篇文章中,关于解读Java中本地方法的调用,此处不再深究。在这儿,我将结合对象的浅复制和深复制来说一下,首先需要了解对象深、浅复制的概念：\n\n- 浅复制：将一个对象复制后,基本数据类型的变量都会重新创建,而引用类型,指向的还是原对\n象所指向的。\n- 深复制：将一个对象复制后,不论是基本数据类型还有引用类型,都是重新创建的。简单来说,\n就是深复制进行了完全彻底的复制,而浅复制不彻底。此处,写一个深浅复制的例子：\n\n``` java\npublic class Prototype implements Cloneable, Serializable {  \n\n    private static final long serialVersionUID = 1L;  \n    private String string;  \n\n    private SerializableObject obj;  \n\n    /* 浅复制 */  \n    public Object clone() throws CloneNotSupportedException {  \n        Prototype proto = (Prototype) super.clone();  \n        return proto;  \n    }  \n\n    /* 深复制 */  \n    public Object deepClone() throws IOException, ClassNotFoundException {  \n\n        /* 写入当前对象的二进制流 */  \n        ByteArrayOutputStream bos = new ByteArrayOutputStream();  \n        ObjectOutputStream oos = new ObjectOutputStream(bos);  \n        oos.writeObject(this);  \n\n        /* 读出二进制流产生的新对象 */  \n        ByteArrayInputStream bis = new\n\t\t\t\tByteArrayInputStream(bos.toByteArray());  \n        ObjectInputStream ois = new ObjectInputStream(bis);  \n        return ois.readObject();  \n    }  \n\n    public String getString() {  \n        return string;  \n    }  \n\n    public void setString(String string) {  \n        this.string = string;  \n    }  \n\n    public SerializableObject getObj() {  \n        return obj;  \n    }  \n\n    public void setObj(SerializableObject obj) {  \n        this.obj = obj;  \n    }  \n\n}  \n\nclass SerializableObject implements Serializable {  \n    private static final long serialVersionUID = 1L;  \n}  \n```\n要实现深复制,需要采用流的形式读入当前对象的二进制输入,再写出二进制数据对应的对象。\n","slug":"Java中的23种设计模式-一","published":1,"updated":"2018-01-22T09:45:54.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m06e001gq8kxlriqbfgs","content":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<h1 id=\"设计模式（Design-Patterns）\"><a href=\"#设计模式（Design-Patterns）\" class=\"headerlink\" title=\"设计模式（Design Patterns）\"></a>设计模式（Design Patterns）</h1><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问,设计模式于己于他人于系统都是多赢的,设计模式使代码编制真正工程化,设计模式是软件工程的基石,如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题,每种模式在现在中都有相应的原理来与之对应,每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的核心解决方案,这也是它能被广泛应用的原因</p>\n<h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">创建型模式5种</th>\n<th style=\"text-align:center\">结构型模式7种</th>\n<th style=\"text-align:center\">行为型模式11种</th>\n<th style=\"text-align:center\">其他(2种)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">工厂方法模式</td>\n<td style=\"text-align:center\">适配器模式</td>\n<td style=\"text-align:center\">策略模式</td>\n<td style=\"text-align:center\">并发型模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">抽象工厂模式</td>\n<td style=\"text-align:center\">装饰器模式</td>\n<td style=\"text-align:center\">策略模式</td>\n<td style=\"text-align:center\">线程池模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">单例模式</td>\n<td style=\"text-align:center\">代理模式</td>\n<td style=\"text-align:center\">模板方法模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">建造者模式</td>\n<td style=\"text-align:center\">桥接模式</td>\n<td style=\"text-align:center\">观察者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">原型模式</td>\n<td style=\"text-align:center\">组合模式</td>\n<td style=\"text-align:center\">迭代子模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">享元模式</td>\n<td style=\"text-align:center\">责任链模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">命令模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">备忘录模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">状态模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">访问者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">中介者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">解释器模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>用一个图片来整体描述一下：<br><img src=\"/images/post_images/20171223_Design_Patterns_1.jpg\" alt=\"\"></p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><ol>\n<li>开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放,对修改关闭。在程序需要进行拓展的时候,不能去修改原有的代码,实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好,易于维护和升级。想要达到这样的效果,我们需要使用接口和抽象类,后面的具体设计中我们会提到这点。</li>\n<li>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说,任何基类可以出现的地方,子类一定可以出现。 LSP是继承复用的基石,只有当衍生类可以替换掉基类,软件单位的功能不受到影响时,基类才能真正被复用,而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。<br>而基类与子类的继承关系就是抽象化的具体实现,所以里氏代换原则是对实现抽象化的具体步骤的规<br>范。—— From Baidu 百科</li>\n<li>依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础,具体内容：真对接口编程,依赖于抽象而不依赖于具体。</li>\n<li>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口,比使用单个接口要好。还是一个降低类之间的耦合度的意思,从这儿我们看出,其实设计模式就是一个软件的设计思想,从大型软件架构出发,为了升级和维护方便。所以上文中多次出现：降低依赖,降低耦合。</li>\n<li>迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则,就是说：一个实体应当尽量少的与其他实体之间发生相互作用,使得系统功<br>能模块相对独立。</li>\n<li>合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式,而不是使用继承。</li>\n</ol>\n<h1 id=\"Java的23中设计模式\"><a href=\"#Java的23中设计模式\" class=\"headerlink\" title=\"Java的23中设计模式\"></a>Java的23中设计模式</h1><p>从这一块开始,我们详细介绍Java中23种设计模式的概念,应用场景等情况,并结合他们的特点及设计模式的原则进行分析。</p>\n<h2 id=\"1-工厂方法模式-Factory-Method\"><a href=\"#1-工厂方法模式-Factory-Method\" class=\"headerlink\" title=\"1. 工厂方法模式(Factory Method)\"></a>1. 工厂方法模式(Factory Method)</h2><p>就是建立一个工厂类,对实现了同一接口的一些类进行实例的创建。首先看下关系图：<br><img src=\"/images/post_images/20171223FactoryMethod.jpg\" alt=\"\"></p>\n<p>举例如下：（我们举一个发送邮件和短信的例子）<br>首先,创建二者的共同接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其次,创建实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is mailsender!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is sms sender!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后,建工厂类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">(String type)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"mail\"</span>.equals(type)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"sms\"</span>.equals(type)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请输入正确的类型!\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来测试下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        SendFactory factory = <span class=\"keyword\">new</span> SendFactory();  </span><br><span class=\"line\">        Sender sender = factory.produce(<span class=\"string\">\"sms\"</span>);  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>this is sms sender!</code></p>\n<h3 id=\"2-多个工厂方法模式\"><a href=\"#2-多个工厂方法模式\" class=\"headerlink\" title=\"2. 多个工厂方法模式\"></a>2. 多个工厂方法模式</h3><p>  是对普通工厂方法模式的改进,在普通工厂方法模式中,如果传递的字符串出错,则不能正确创建对象,而多个工厂方法模式是提供多个工厂方法,分别创建对象。关系图：<br><img src=\"/images/post_images/20171224_Factory.png\" alt=\"\"></p>\n<p>将上面的代码做下修改,改动下SendFactory类就行,如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produceMail</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produceSms</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        SendFactory factory = <span class=\"keyword\">new</span> SendFactory();  </span><br><span class=\"line\">        Sender sender = factory.produceMail();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<code>this is mailsender!</code></p>\n<h3 id=\"3-静态工厂方法模式\"><a href=\"#3-静态工厂方法模式\" class=\"headerlink\" title=\"3. 静态工厂方法模式\"></a>3. 静态工厂方法模式</h3><p>  将上面的多个工厂方法模式里的方法置为静态的,不需要创建实例,直接调用即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sender <span class=\"title\">produceMail</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sender <span class=\"title\">produceSms</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;      </span><br><span class=\"line\">        Sender sender = SendFactory.produceMail();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<code>this is mailsender!</code></p>\n<p>总体来说,工厂模式适合：凡是出现了大量的产品需要创建,并且具有共同的接口时,可以通过工厂方法模式进行创建。在以上的三种模式中,第一种如果传入的字符串有误,不能正确创建对象,第三种相对于第二种,不需要实例化工厂类,所以,大多数情况下,我们会选用第三种——静态工厂方法模式。</p>\n<h2 id=\"2-抽象工厂模式（Abstract-Factory）\"><a href=\"#2-抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"2. 抽象工厂模式（Abstract Factory）\"></a>2. 抽象工厂模式（Abstract Factory）</h2><p>  工厂方法模式有一个问题就是,类的创建依赖工厂类,也就是说,如果想要拓展程序,必须对工厂类进行修改,这违背了闭包原则,所以,从设计角度考虑,有一定的问题,如何解决？就用到抽象工厂模式,创建多个工厂类,这样一旦需要增加新的功能,直接增加新的工厂类就可以了,不需要修改之前的代码。因为抽象工厂不太好理解,我们先看看图,然后就和代码,就比较容易理解。<br><img src=\"/images/post_images/20171224_Factory2.png\" alt=\"\"></p>\n<p>请看例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is mailsender!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个工厂类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendMailFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendSmsFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span></span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在提供一个接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Provider</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Provider provider = <span class=\"keyword\">new</span> SendMailFactory();  </span><br><span class=\"line\">        Sender sender = provider.produce();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实这个模式的好处就是,如果你现在想增加一个功能：发及时信息,则只需做一个实现类,实现Sender接口,同时做一个工厂类,实现Provider接口,就OK了,无需去改动现成的代码。这样做,拓展性较好！</p>\n<h2 id=\"3-单例模式（Singleton）\"><a href=\"#3-单例模式（Singleton）\" class=\"headerlink\" title=\"3. 单例模式（Singleton）\"></a>3. 单例模式（Singleton）</h2><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中,单例对象能保证在一个JVM中,该对象只有一个实例存在。这样的模式有几个好处：</p>\n<ol>\n<li>某些类创建比较频繁,对于一些大型的对象,这是一笔很大的系统开销。</li>\n<li>省去了new操作符,降低了系统内存的使用频率,减轻GC压力。</li>\n<li>有些类如交易所的核心交易引擎,控制着交易流程,如果该类可以创建多个的话,系统完全乱了。（比如一个军队出现了多个司令员同时指挥,肯定会乱成一团）,所以只有使用单例模式,才能保证核心交易服务器独立控制整个流程。</li>\n</ol>\n<p>首先我们写一个简单的单例类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 持有私有静态实例,防止被引用,此处赋值为null,目的是实现延迟加载 */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 私有构造方法,防止被实例化 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 静态工程方法,创建实例 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个类可以满足基本要求,但是,像这样毫无线程安全保护的类,如果我们把它放入多线程的环境下,肯定就会出现问题了,如何解决？我们首先会想到对getInstance方法加synchronized关键字,如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">但是,<span class=\"keyword\">synchronized</span>关键字锁住的是这个对象,这样的用法,在性能上会有所下降,因为每次调用getInstance(),都要对对象上锁,事实上,只有在第一次创建对象的时候需要加锁,之后就不需要了,所以,这个地方需要改进。我们改成下面这个：</span><br><span class=\"line\"></span><br><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (instance) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>似乎解决了之前提到的问题,将synchronized关键字加在了内部,也就是说当调用的时候是不需要加锁的,只有在instance为null,并创建对象的时候才需要加锁,性能有一定的提升。但是,这样的情况,还是有可能有问题的,看下面的情况：在Java指令中创建对象和赋值操作是分开进行的,也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序,也就是说有可能JVM会为新的Singleton实例分配空间,然后直接赋值给instance成员,然后再去初始化这个Singleton实例。这样就可能出错了,我们以A、B两个线程为例：a&gt;A、B线程同时进入了第一个if判断b&gt;A首先进入synchronized块,由于instance为null,所以它执行instance = newSingleton();c&gt;由于JVM内部的优化机制,JVM先画出了一些分配给Singleton实例的空白内存,并赋值给instance成员（注意此时JVM没有开始初始化这个实例）,然后A离开了synchronized块。d&gt;B进入synchronized块,由于instance此时不是null,因此它马上离开了synchronized块并将结果返回给调用该方法的程序。e&gt;此时B线程打算使用Singleton实例,却发现它没有被初始化,于是错误发生了。所以程序还是有可能发生错误,其实程序在运行过程是很复杂的,从这点我们就可以看出,尤其是在写多线程环境下的程序更有难度,有挑战性。我们对该程序做进一步优化：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFactory</span></span>&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();           </span><br><span class=\"line\">    &#125;           </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFactory.instance;           </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>实际情况是,单例模式使用内部类来维护单例的实现,JVM内部的机制能够保证当一个类被加载的时候,这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候,JVM能够帮我们保证instance只被创建一次,并且会保证把赋值给instance的内存初始化完毕,这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制,这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 私有构造方法,防止被实例化 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 此处使用一个内部类来维护单例 */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFactory</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取实例 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFactory.instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> getInstance();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实说它完美,也不一定,如果在构造函数中抛出异常,实例将永远得不到创建,也会出错。所以<br>说,十分完美的东西是没有的,我们只能根据实际情况,选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步,所以只要将创建和getInstance()分开,单独为创建加synchronized关键字,也是可以的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTest instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTest</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncInit</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTest <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            syncInit();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>考虑性能的话,整个程序只需创建一次实例,所以性能也不会有什么影响。<font color=\"red\">补充：采用”影子实例”的办法为单例对象的属性同步更新</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTest instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector properties = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Vector <span class=\"title\">getProperties</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTest</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncInit</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTest <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            syncInit();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateProperties</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        SingletonTest shadow = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        properties = shadow.getProperties();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过单例模式的学习告诉我们：</p>\n<ol>\n<li>单例模式理解起来简单,但是具体实现起来还是有一定的难度。</li>\n<li>synchronized关键字锁定的是对象,在用的时候,一定要在恰当的地方使用（注意需要使用锁<br>的对象和过程,可能有的时候并不是整个对象及整个过程都需要锁）。</li>\n</ol>\n<p>到这儿,单例模式基本已经讲完了,结尾处,笔者突然想到另一个问题,就是采用类的静态方法,实现单例模式的效果,也是可行的,此处二者有什么不同？首先,静态类不能实现接口。（从类的角度说是可以的,但是那样就破坏了静态了。因为接口中不允许有static修饰的方法,所以即使实现了也是非静态的）其次,单例可以被延迟初始化,静态类一般在第一次加载是初始化。之所以延迟加载,是因为有些类比较庞大,所以延迟加载有助于提升性能。再次,单例类可以被继承,他的方法可以被覆写。但是静态类内部方法都是static,无法被覆写。最后一点,单例类比较灵活,毕竟从实现上只是一个普通的Java类,只要满足单例的基本需求,你可以在里面随心所欲的实现一些其它功能,但是静态类不行。从上面这些概括中,基本可以看出二者的区别,但是,从另一方面讲,我们上面最后实现的那个单例模式,内部就是用一个静态类来实现的,所以,二者有很大的关联,只是我们考虑问题的层面不同罢了。两种思想的结合,才能造就出完美的解决方案,就像HashMap采用数组+链表来实现一样,其实生活中很多事情都是这样,单用不同的方法来处理问题,总是有优点也有缺点,最完美的方法是,结合各个方法的优点,才能最好的解决问题！</p>\n<h2 id=\"4-建造者模式-Builder\"><a href=\"#4-建造者模式-Builder\" class=\"headerlink\" title=\"4. 建造者模式(Builder)\"></a>4. 建造者模式(Builder)</h2><p>工厂类模式提供的是创建单个类的模式,而建造者模式则是将各种产品集中起来进行管理,用来创建复合对象,所谓复合对象就是指某个类具有不同的属性,其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：<br>还和前面一样,一个Sender接口,两个实现类MailSender和SmsSender。最后,建造者类如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Sender&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Sender&gt;();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceMailSender</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++)&#123;  </span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> MailSender());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceSmsSender</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++)&#123;  </span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> SmsSender());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Builder builder = <span class=\"keyword\">new</span> Builder();  </span><br><span class=\"line\">        builder.produceMailSender(<span class=\"number\">10</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这点看出,建造者模式将很多功能集成到一个类里,这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品,而建造者模式则关注创建符合对象,多个部分。因此,是选择工厂模式还是建造者模式,依实际情况而定。</p>\n<h2 id=\"5-原型模式-Prototype\"><a href=\"#5-原型模式-Prototype\" class=\"headerlink\" title=\"5. 原型模式(Prototype)\"></a>5. 原型模式(Prototype)</h2><p>  原型模式虽然是创建型的模式,但是与工程模式没有关系,从名字即可看出,该模式的思想就是将一个对象作为原型,对其进行复制、克隆,产生一个和原对象类似的新对象。本小结会通过对象的复制,进行讲解。在Java中,复制对象是通过clone()实现的,先创建一个原型类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class=\"line\">        Prototype proto = (Prototype) <span class=\"keyword\">super</span>.clone();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> proto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单,一个原型类,只需要实现Cloneable接口,覆写clone方法,此处clone方法可以改成任意的名称,因为Cloneable接口是个空接口,你可以任意定义实现类的方法名,如cloneA或者cloneB,因为此处的重点是 super.clone()这句话,super.clone()调用的是 Object 的 clone() 方法,而在Object类中,clone()是native的,具体怎么实现,我会在另一篇文章中,关于解读Java中本地方法的调用,此处不再深究。在这儿,我将结合对象的浅复制和深复制来说一下,首先需要了解对象深、浅复制的概念：</p>\n<ul>\n<li>浅复制：将一个对象复制后,基本数据类型的变量都会重新创建,而引用类型,指向的还是原对<br>象所指向的。</li>\n<li>深复制：将一个对象复制后,不论是基本数据类型还有引用类型,都是重新创建的。简单来说,<br>就是深复制进行了完全彻底的复制,而浅复制不彻底。此处,写一个深浅复制的例子：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SerializableObject obj;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 浅复制 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class=\"line\">        Prototype proto = (Prototype) <span class=\"keyword\">super</span>.clone();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> proto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 深复制 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deepClone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 写入当前对象的二进制流 */</span>  </span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();  </span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);  </span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 读出二进制流产生的新对象 */</span>  </span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span></span><br><span class=\"line\">\t\t\t\tByteArrayInputStream(bos.toByteArray());  </span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bis);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ois.readObject();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getString</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setString</span><span class=\"params\">(String string)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerializableObject <span class=\"title\">getObj</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObj</span><span class=\"params\">(SerializableObject obj)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerializableObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要实现深复制,需要采用流的形式读入当前对象的二进制输入,再写出二进制数据对应的对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转自:<a href=\"http://blog.csdn.net/zhangerqing\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhangerqing</a></p>\n</blockquote>\n<h1 id=\"设计模式（Design-Patterns）\"><a href=\"#设计模式（Design-Patterns）\" class=\"headerlink\" title=\"设计模式（Design Patterns）\"></a>设计模式（Design Patterns）</h1><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问,设计模式于己于他人于系统都是多赢的,设计模式使代码编制真正工程化,设计模式是软件工程的基石,如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题,每种模式在现在中都有相应的原理来与之对应,每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的核心解决方案,这也是它能被广泛应用的原因</p>\n<h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">创建型模式5种</th>\n<th style=\"text-align:center\">结构型模式7种</th>\n<th style=\"text-align:center\">行为型模式11种</th>\n<th style=\"text-align:center\">其他(2种)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">工厂方法模式</td>\n<td style=\"text-align:center\">适配器模式</td>\n<td style=\"text-align:center\">策略模式</td>\n<td style=\"text-align:center\">并发型模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">抽象工厂模式</td>\n<td style=\"text-align:center\">装饰器模式</td>\n<td style=\"text-align:center\">策略模式</td>\n<td style=\"text-align:center\">线程池模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">单例模式</td>\n<td style=\"text-align:center\">代理模式</td>\n<td style=\"text-align:center\">模板方法模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">建造者模式</td>\n<td style=\"text-align:center\">桥接模式</td>\n<td style=\"text-align:center\">观察者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">原型模式</td>\n<td style=\"text-align:center\">组合模式</td>\n<td style=\"text-align:center\">迭代子模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">享元模式</td>\n<td style=\"text-align:center\">责任链模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">命令模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">备忘录模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">状态模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">访问者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">中介者模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">解释器模式</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>用一个图片来整体描述一下：<br><img src=\"/images/post_images/20171223_Design_Patterns_1.jpg\" alt=\"\"></p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><ol>\n<li>开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放,对修改关闭。在程序需要进行拓展的时候,不能去修改原有的代码,实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好,易于维护和升级。想要达到这样的效果,我们需要使用接口和抽象类,后面的具体设计中我们会提到这点。</li>\n<li>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说,任何基类可以出现的地方,子类一定可以出现。 LSP是继承复用的基石,只有当衍生类可以替换掉基类,软件单位的功能不受到影响时,基类才能真正被复用,而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。<br>而基类与子类的继承关系就是抽象化的具体实现,所以里氏代换原则是对实现抽象化的具体步骤的规<br>范。—— From Baidu 百科</li>\n<li>依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础,具体内容：真对接口编程,依赖于抽象而不依赖于具体。</li>\n<li>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口,比使用单个接口要好。还是一个降低类之间的耦合度的意思,从这儿我们看出,其实设计模式就是一个软件的设计思想,从大型软件架构出发,为了升级和维护方便。所以上文中多次出现：降低依赖,降低耦合。</li>\n<li>迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则,就是说：一个实体应当尽量少的与其他实体之间发生相互作用,使得系统功<br>能模块相对独立。</li>\n<li>合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式,而不是使用继承。</li>\n</ol>\n<h1 id=\"Java的23中设计模式\"><a href=\"#Java的23中设计模式\" class=\"headerlink\" title=\"Java的23中设计模式\"></a>Java的23中设计模式</h1><p>从这一块开始,我们详细介绍Java中23种设计模式的概念,应用场景等情况,并结合他们的特点及设计模式的原则进行分析。</p>\n<h2 id=\"1-工厂方法模式-Factory-Method\"><a href=\"#1-工厂方法模式-Factory-Method\" class=\"headerlink\" title=\"1. 工厂方法模式(Factory Method)\"></a>1. 工厂方法模式(Factory Method)</h2><p>就是建立一个工厂类,对实现了同一接口的一些类进行实例的创建。首先看下关系图：<br><img src=\"/images/post_images/20171223FactoryMethod.jpg\" alt=\"\"></p>\n<p>举例如下：（我们举一个发送邮件和短信的例子）<br>首先,创建二者的共同接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其次,创建实现类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is mailsender!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is sms sender!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后,建工厂类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">(String type)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"mail\"</span>.equals(type)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"sms\"</span>.equals(type)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请输入正确的类型!\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来测试下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        SendFactory factory = <span class=\"keyword\">new</span> SendFactory();  </span><br><span class=\"line\">        Sender sender = factory.produce(<span class=\"string\">\"sms\"</span>);  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出: <code>this is sms sender!</code></p>\n<h3 id=\"2-多个工厂方法模式\"><a href=\"#2-多个工厂方法模式\" class=\"headerlink\" title=\"2. 多个工厂方法模式\"></a>2. 多个工厂方法模式</h3><p>  是对普通工厂方法模式的改进,在普通工厂方法模式中,如果传递的字符串出错,则不能正确创建对象,而多个工厂方法模式是提供多个工厂方法,分别创建对象。关系图：<br><img src=\"/images/post_images/20171224_Factory.png\" alt=\"\"></p>\n<p>将上面的代码做下修改,改动下SendFactory类就行,如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produceMail</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produceSms</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        SendFactory factory = <span class=\"keyword\">new</span> SendFactory();  </span><br><span class=\"line\">        Sender sender = factory.produceMail();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<code>this is mailsender!</code></p>\n<h3 id=\"3-静态工厂方法模式\"><a href=\"#3-静态工厂方法模式\" class=\"headerlink\" title=\"3. 静态工厂方法模式\"></a>3. 静态工厂方法模式</h3><p>  将上面的多个工厂方法模式里的方法置为静态的,不需要创建实例,直接调用即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendFactory</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sender <span class=\"title\">produceMail</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Sender <span class=\"title\">produceSms</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;      </span><br><span class=\"line\">        Sender sender = SendFactory.produceMail();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<code>this is mailsender!</code></p>\n<p>总体来说,工厂模式适合：凡是出现了大量的产品需要创建,并且具有共同的接口时,可以通过工厂方法模式进行创建。在以上的三种模式中,第一种如果传入的字符串有误,不能正确创建对象,第三种相对于第二种,不需要实例化工厂类,所以,大多数情况下,我们会选用第三种——静态工厂方法模式。</p>\n<h2 id=\"2-抽象工厂模式（Abstract-Factory）\"><a href=\"#2-抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"2. 抽象工厂模式（Abstract Factory）\"></a>2. 抽象工厂模式（Abstract Factory）</h2><p>  工厂方法模式有一个问题就是,类的创建依赖工厂类,也就是说,如果想要拓展程序,必须对工厂类进行修改,这违背了闭包原则,所以,从设计角度考虑,有一定的问题,如何解决？就用到抽象工厂模式,创建多个工厂类,这样一旦需要增加新的功能,直接增加新的工厂类就可以了,不需要修改之前的代码。因为抽象工厂不太好理解,我们先看看图,然后就和代码,就比较容易理解。<br><img src=\"/images/post_images/20171224_Factory2.png\" alt=\"\"></p>\n<p>请看例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个实现类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sender</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is mailsender!\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个工厂类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendMailFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendSmsFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span></span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SmsSender();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在提供一个接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Provider</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sender <span class=\"title\">produce</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Provider provider = <span class=\"keyword\">new</span> SendMailFactory();  </span><br><span class=\"line\">        Sender sender = provider.produce();  </span><br><span class=\"line\">        sender.Send();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实这个模式的好处就是,如果你现在想增加一个功能：发及时信息,则只需做一个实现类,实现Sender接口,同时做一个工厂类,实现Provider接口,就OK了,无需去改动现成的代码。这样做,拓展性较好！</p>\n<h2 id=\"3-单例模式（Singleton）\"><a href=\"#3-单例模式（Singleton）\" class=\"headerlink\" title=\"3. 单例模式（Singleton）\"></a>3. 单例模式（Singleton）</h2><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中,单例对象能保证在一个JVM中,该对象只有一个实例存在。这样的模式有几个好处：</p>\n<ol>\n<li>某些类创建比较频繁,对于一些大型的对象,这是一笔很大的系统开销。</li>\n<li>省去了new操作符,降低了系统内存的使用频率,减轻GC压力。</li>\n<li>有些类如交易所的核心交易引擎,控制着交易流程,如果该类可以创建多个的话,系统完全乱了。（比如一个军队出现了多个司令员同时指挥,肯定会乱成一团）,所以只有使用单例模式,才能保证核心交易服务器独立控制整个流程。</li>\n</ol>\n<p>首先我们写一个简单的单例类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 持有私有静态实例,防止被引用,此处赋值为null,目的是实现延迟加载 */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 私有构造方法,防止被实例化 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 静态工程方法,创建实例 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个类可以满足基本要求,但是,像这样毫无线程安全保护的类,如果我们把它放入多线程的环境下,肯定就会出现问题了,如何解决？我们首先会想到对getInstance方法加synchronized关键字,如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">但是,<span class=\"keyword\">synchronized</span>关键字锁住的是这个对象,这样的用法,在性能上会有所下降,因为每次调用getInstance(),都要对对象上锁,事实上,只有在第一次创建对象的时候需要加锁,之后就不需要了,所以,这个地方需要改进。我们改成下面这个：</span><br><span class=\"line\"></span><br><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (instance) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>似乎解决了之前提到的问题,将synchronized关键字加在了内部,也就是说当调用的时候是不需要加锁的,只有在instance为null,并创建对象的时候才需要加锁,性能有一定的提升。但是,这样的情况,还是有可能有问题的,看下面的情况：在Java指令中创建对象和赋值操作是分开进行的,也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序,也就是说有可能JVM会为新的Singleton实例分配空间,然后直接赋值给instance成员,然后再去初始化这个Singleton实例。这样就可能出错了,我们以A、B两个线程为例：a&gt;A、B线程同时进入了第一个if判断b&gt;A首先进入synchronized块,由于instance为null,所以它执行instance = newSingleton();c&gt;由于JVM内部的优化机制,JVM先画出了一些分配给Singleton实例的空白内存,并赋值给instance成员（注意此时JVM没有开始初始化这个实例）,然后A离开了synchronized块。d&gt;B进入synchronized块,由于instance此时不是null,因此它马上离开了synchronized块并将结果返回给调用该方法的程序。e&gt;此时B线程打算使用Singleton实例,却发现它没有被初始化,于是错误发生了。所以程序还是有可能发生错误,其实程序在运行过程是很复杂的,从这点我们就可以看出,尤其是在写多线程环境下的程序更有难度,有挑战性。我们对该程序做进一步优化：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFactory</span></span>&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();           </span><br><span class=\"line\">    &#125;           </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFactory.instance;           </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>实际情况是,单例模式使用内部类来维护单例的实现,JVM内部的机制能够保证当一个类被加载的时候,这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候,JVM能够帮我们保证instance只被创建一次,并且会保证把赋值给instance的内存初始化完毕,这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制,这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 私有构造方法,防止被实例化 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 此处使用一个内部类来维护单例 */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFactory</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取实例 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFactory.instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果该对象被用于序列化,可以保证对象在序列化前后保持一致 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> getInstance();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实说它完美,也不一定,如果在构造函数中抛出异常,实例将永远得不到创建,也会出错。所以<br>说,十分完美的东西是没有的,我们只能根据实际情况,选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步,所以只要将创建和getInstance()分开,单独为创建加synchronized关键字,也是可以的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTest instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTest</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncInit</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTest <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            syncInit();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>考虑性能的话,整个程序只需创建一次实例,所以性能也不会有什么影响。<font color=\"red\">补充：采用”影子实例”的办法为单例对象的属性同步更新</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTest instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector properties = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Vector <span class=\"title\">getProperties</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> properties;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTest</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncInit</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTest <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            syncInit();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateProperties</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        SingletonTest shadow = <span class=\"keyword\">new</span> SingletonTest();  </span><br><span class=\"line\">        properties = shadow.getProperties();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过单例模式的学习告诉我们：</p>\n<ol>\n<li>单例模式理解起来简单,但是具体实现起来还是有一定的难度。</li>\n<li>synchronized关键字锁定的是对象,在用的时候,一定要在恰当的地方使用（注意需要使用锁<br>的对象和过程,可能有的时候并不是整个对象及整个过程都需要锁）。</li>\n</ol>\n<p>到这儿,单例模式基本已经讲完了,结尾处,笔者突然想到另一个问题,就是采用类的静态方法,实现单例模式的效果,也是可行的,此处二者有什么不同？首先,静态类不能实现接口。（从类的角度说是可以的,但是那样就破坏了静态了。因为接口中不允许有static修饰的方法,所以即使实现了也是非静态的）其次,单例可以被延迟初始化,静态类一般在第一次加载是初始化。之所以延迟加载,是因为有些类比较庞大,所以延迟加载有助于提升性能。再次,单例类可以被继承,他的方法可以被覆写。但是静态类内部方法都是static,无法被覆写。最后一点,单例类比较灵活,毕竟从实现上只是一个普通的Java类,只要满足单例的基本需求,你可以在里面随心所欲的实现一些其它功能,但是静态类不行。从上面这些概括中,基本可以看出二者的区别,但是,从另一方面讲,我们上面最后实现的那个单例模式,内部就是用一个静态类来实现的,所以,二者有很大的关联,只是我们考虑问题的层面不同罢了。两种思想的结合,才能造就出完美的解决方案,就像HashMap采用数组+链表来实现一样,其实生活中很多事情都是这样,单用不同的方法来处理问题,总是有优点也有缺点,最完美的方法是,结合各个方法的优点,才能最好的解决问题！</p>\n<h2 id=\"4-建造者模式-Builder\"><a href=\"#4-建造者模式-Builder\" class=\"headerlink\" title=\"4. 建造者模式(Builder)\"></a>4. 建造者模式(Builder)</h2><p>工厂类模式提供的是创建单个类的模式,而建造者模式则是将各种产品集中起来进行管理,用来创建复合对象,所谓复合对象就是指某个类具有不同的属性,其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：<br>还和前面一样,一个Sender接口,两个实现类MailSender和SmsSender。最后,建造者类如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Sender&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Sender&gt;();  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceMailSender</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++)&#123;  </span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> MailSender());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">produceSmsSender</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++)&#123;  </span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> SmsSender());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        Builder builder = <span class=\"keyword\">new</span> Builder();  </span><br><span class=\"line\">        builder.produceMailSender(<span class=\"number\">10</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这点看出,建造者模式将很多功能集成到一个类里,这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品,而建造者模式则关注创建符合对象,多个部分。因此,是选择工厂模式还是建造者模式,依实际情况而定。</p>\n<h2 id=\"5-原型模式-Prototype\"><a href=\"#5-原型模式-Prototype\" class=\"headerlink\" title=\"5. 原型模式(Prototype)\"></a>5. 原型模式(Prototype)</h2><p>  原型模式虽然是创建型的模式,但是与工程模式没有关系,从名字即可看出,该模式的思想就是将一个对象作为原型,对其进行复制、克隆,产生一个和原对象类似的新对象。本小结会通过对象的复制,进行讲解。在Java中,复制对象是通过clone()实现的,先创建一个原型类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class=\"line\">        Prototype proto = (Prototype) <span class=\"keyword\">super</span>.clone();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> proto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单,一个原型类,只需要实现Cloneable接口,覆写clone方法,此处clone方法可以改成任意的名称,因为Cloneable接口是个空接口,你可以任意定义实现类的方法名,如cloneA或者cloneB,因为此处的重点是 super.clone()这句话,super.clone()调用的是 Object 的 clone() 方法,而在Object类中,clone()是native的,具体怎么实现,我会在另一篇文章中,关于解读Java中本地方法的调用,此处不再深究。在这儿,我将结合对象的浅复制和深复制来说一下,首先需要了解对象深、浅复制的概念：</p>\n<ul>\n<li>浅复制：将一个对象复制后,基本数据类型的变量都会重新创建,而引用类型,指向的还是原对<br>象所指向的。</li>\n<li>深复制：将一个对象复制后,不论是基本数据类型还有引用类型,都是重新创建的。简单来说,<br>就是深复制进行了完全彻底的复制,而浅复制不彻底。此处,写一个深浅复制的例子：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SerializableObject obj;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 浅复制 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class=\"line\">        Prototype proto = (Prototype) <span class=\"keyword\">super</span>.clone();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> proto;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 深复制 */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deepClone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 写入当前对象的二进制流 */</span>  </span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();  </span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);  </span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 读出二进制流产生的新对象 */</span>  </span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span></span><br><span class=\"line\">\t\t\t\tByteArrayInputStream(bos.toByteArray());  </span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bis);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ois.readObject();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getString</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> string;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setString</span><span class=\"params\">(String string)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerializableObject <span class=\"title\">getObj</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObj</span><span class=\"params\">(SerializableObject obj)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerializableObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要实现深复制,需要采用流的形式读入当前对象的二进制输入,再写出二进制数据对应的对象。</p>\n"},{"title":"Result Maps collection already contains value for xxx.xxx.Mapper.BaseResultMap异常解决","date":"2017-12-29T12:02:29.000Z","type":["Exception"],"_content":"\n突然项目启动时报出以下错误:\n百度上的所有答案没能解决, 最终索性重新把mapper文件重新生成了一遍, 结果令人感到意外, 竟然不报错了, 至于原因好像是运行过一个mybatis-gen\n```exception\nException sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userServiceImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.bobo.mapper.UserMapper com.bobo.service.impl.UserServiceImpl.userMapper; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.bobo.mapper.UserMapper] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'avisMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'avisMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error\n```\n","source":"_posts/Result Maps collection already contains value for xxx.xxx.Mapper.BaseResultMap.md","raw":"---\ntitle: Result Maps collection already contains value for xxx.xxx.Mapper.BaseResultMap异常解决\ndate: 2017-12-29 20:02:29\ntags:\n  - Exception\n\ncategories:\n  - Exception\n\ntype:\n  - Exception  \n\n---\n\n突然项目启动时报出以下错误:\n百度上的所有答案没能解决, 最终索性重新把mapper文件重新生成了一遍, 结果令人感到意外, 竟然不报错了, 至于原因好像是运行过一个mybatis-gen\n```exception\nException sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userServiceImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.bobo.mapper.UserMapper com.bobo.service.impl.UserServiceImpl.userMapper; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.bobo.mapper.UserMapper] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'avisMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'avisMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userMapper' defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap\nRelated cause: org.springframework.beans.factory.BeanCreationException: Error\n```\n","slug":"Result Maps collection already contains value for xxx.xxx.Mapper.BaseResultMap","published":1,"updated":"2018-01-03T03:54:40.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m06g001jq8kx7i3lavw7","content":"<p>突然项目启动时报出以下错误:<br>百度上的所有答案没能解决, 最终索性重新把mapper文件重新生成了一遍, 结果令人感到意外, 竟然不报错了, 至于原因好像是运行过一个mybatis-gen<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener</span><br><span class=\"line\">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userServiceImpl&apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.bobo.mapper.UserMapper com.bobo.service.impl.UserServiceImpl.userMapper; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.bobo.mapper.UserMapper] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Autowired(required=true)&#125;</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;avisMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;avisMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>突然项目启动时报出以下错误:<br>百度上的所有答案没能解决, 最终索性重新把mapper文件重新生成了一遍, 结果令人感到意外, 竟然不报错了, 至于原因好像是运行过一个mybatis-gen<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener</span><br><span class=\"line\">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userServiceImpl&apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.bobo.mapper.UserMapper com.bobo.service.impl.UserServiceImpl.userMapper; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.bobo.mapper.UserMapper] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Autowired(required=true)&#125;</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;avisMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;avisMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\AvisMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.AvisMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userMapper&apos; defined in file [F:\\Work\\IDEA\\bobo\\target\\classes\\com\\bobo\\mapper\\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Result Maps collection already contains value for com.bobo.mapper.UserMapper.BaseResultMap</span><br><span class=\"line\">Related cause: org.springframework.beans.factory.BeanCreationException: Error</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Struts2 - 1","date":"2018-01-06T06:59:00.000Z","_content":"","source":"_posts/Struts2-1.md","raw":"---\ntitle: Struts2 - 1\ndate: 2018-01-06 14:59:00\ntags:\n---\n","slug":"Struts2-1","published":1,"updated":"2018-01-06T06:59:00.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m06l001oq8kx5j1kdrng","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","date":"2017-11-17T05:11:03.000Z","type":["default"],"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-11-17 13:11:03\ntags:\n    - Welcome\ntype:\n    - default\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-01-22T10:13:23.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m06n001rq8kxjajokf4v","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"maven管理SSM时xml和properties文件丢失异常","date":"2017-12-28T10:52:23.000Z","type":["Exception"],"_content":"\n# classpath resource [com/qinkangdeid/mapping/] cannot be resolved to URL because it does not exist 和 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常解决\n\n项目结构如图所示: ![](/images/post_images/20171228ResourceException.jpg)\n\n```xml\n<build>\n  <resources>\n      <resource>\n        <directory>src/main/java</directory>\n          <includes>\n            <include>**/*.properties</include>\n            <include>**/*.xml</include>\n          </includes>\n          <filtering>false</filtering>\n        </resource>\n        <resource>\n          <directory>src/main/resources</directory>\n          <includes>\n            <include>**/*.properties</include>\n            <include>**/*.xml</include>\n          </includes>\n          <filtering>false</filtering>\n        </resource>\n      </resources>\n</build>\n```\n如上图所示, 将com.bobo.mapper和resource目录配置到pom文件的bulid中即可\n","source":"_posts/maven管理SSM时xml和properties文件丢失异常.md","raw":"---\ntitle: maven管理SSM时xml和properties文件丢失异常\ndate: 2017-12-28T18:52:23.000Z\ntags:\n  - Spring\n  - Exception\ncategories:\n  - Exception\ntype:\n  - Exception\n---\n\n# classpath resource [com/qinkangdeid/mapping/] cannot be resolved to URL because it does not exist 和 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常解决\n\n项目结构如图所示: ![](/images/post_images/20171228ResourceException.jpg)\n\n```xml\n<build>\n  <resources>\n      <resource>\n        <directory>src/main/java</directory>\n          <includes>\n            <include>**/*.properties</include>\n            <include>**/*.xml</include>\n          </includes>\n          <filtering>false</filtering>\n        </resource>\n        <resource>\n          <directory>src/main/resources</directory>\n          <includes>\n            <include>**/*.properties</include>\n            <include>**/*.xml</include>\n          </includes>\n          <filtering>false</filtering>\n        </resource>\n      </resources>\n</build>\n```\n如上图所示, 将com.bobo.mapper和resource目录配置到pom文件的bulid中即可\n","slug":"maven管理SSM时xml和properties文件丢失异常","published":1,"updated":"2017-12-28T11:11:42.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m06q001wq8kx70b3hup2","content":"<h1 id=\"classpath-resource-com-qinkangdeid-mapping-cannot-be-resolved-to-URL-because-it-does-not-exist-和-org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found-异常解决\"><a href=\"#classpath-resource-com-qinkangdeid-mapping-cannot-be-resolved-to-URL-because-it-does-not-exist-和-org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found-异常解决\" class=\"headerlink\" title=\"classpath resource [com/qinkangdeid/mapping/] cannot be resolved to URL because it does not exist 和 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常解决\"></a>classpath resource [com/qinkangdeid/mapping/] cannot be resolved to URL because it does not exist 和 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常解决</h1><p>项目结构如图所示: <img src=\"/images/post_images/20171228ResourceException.jpg\" alt=\"\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上图所示, 将com.bobo.mapper和resource目录配置到pom文件的bulid中即可</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"classpath-resource-com-qinkangdeid-mapping-cannot-be-resolved-to-URL-because-it-does-not-exist-和-org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found-异常解决\"><a href=\"#classpath-resource-com-qinkangdeid-mapping-cannot-be-resolved-to-URL-because-it-does-not-exist-和-org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found-异常解决\" class=\"headerlink\" title=\"classpath resource [com/qinkangdeid/mapping/] cannot be resolved to URL because it does not exist 和 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常解决\"></a>classpath resource [com/qinkangdeid/mapping/] cannot be resolved to URL because it does not exist 和 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常解决</h1><p>项目结构如图所示: <img src=\"/images/post_images/20171228ResourceException.jpg\" alt=\"\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上图所示, 将com.bobo.mapper和resource目录配置到pom文件的bulid中即可</p>\n"},{"title":"工具推荐-第一期-AutoHotKey","date":"2018-01-28T09:32:04.000Z","type":["程序人生"],"_content":"最近发现一款高(neng)大(zhuang)上(bi)的神器-------AutoHotKey, 可以自定义Windows的快捷键, 可以使你彻底脱离鼠标, 这酸爽, 谁用谁知道.\n\n下载地址: [www.autohotkey.com](https://www.autohotkey.com/)\n中文帮助文档下载: [帮助文档](/files/AutoHotkey.chm)\n最后附上ChinaUnix博主xiaogangzgg写的教程: [AutoHotkey的几个入门级应用](http://blog.chinaunix.net/uid-26811377-id-3166486.html)\n\n## 入门教程\n\n### 创建第一个AHK脚本\n1. 在桌面或您选择的文件夹中右键点击空白处.\n2. 在菜单中, 选择 新建-> 文本文档.\n3. 输入文件名, 将`.txt`后缀修改成`.ahk`. 例如：Test.ahk。\n    若没有后缀,请参见[win10文件后缀名怎么显示](https://jingyan.baidu.com/article/ff42efa920b7f3c19e220283.html)\n4. 右键点击此文件并选择 Edit Script.\n6. 在新的空行中，输入下列内容：#space::Run www.google.com。\n\n在上面的语句行中, 首个字符 \"#\" 表示 Windows 键; 所以 #space 表示按住 Windows 键然后按下空格键来激活热键. 双冒号 :: 表示每次按下此热键时会执行其后续命令, 这里是转到 Google 网站. 要试用此脚本, 请继续下列操作:\n1. 保存并关闭此文件.\n2. 双击此文件来运行. 在任务栏通知区域会出现新的图标.\n3. 按住 Windows 键并按下空格键. 在默认浏览器中会打开网页.\n4. 要退出或编辑此脚本, 则在任务栏通知区域的绿色 \"H\" 图标上点击右键.\n\n注意:\n- 多个脚本可以同时运行, 其中的每个脚本在任务栏通知区域使用自己的图标.\n- 每个脚本可以包含多个[热键]和[热字串].\n- 要让您的脚本在启动计算机时自动运行, 请在开始菜单的启动文件夹中给您的脚本创建快捷方式.\n\n<font color='red'>**[热键]和[热字串]对照表请参见文档**</font>\n\n## 以下是本人常用的一些脚本(不定期更新)\n### 1.调节音量\n虽然Windows已经有默认的音量调节按钮, 但是总觉得不爽, 特别是光线比较暗的时候,几乎找不到好吗(没有背光键盘的平民程序员), 下面附上脚本\n```\n;调节音量\n!Right::SoundSet, +1,, mute ;Alt + 右方向键 开关声音\n!Up::                       ;Alt + 上方向键 增加音量 SoundSet +1 中的 `+1`代表每次按键的精度\nSoundSet +1, MASTER\nSoundSet, +1, WAVE\nReturn\n!Down::                     ;Alt + 下方向键 降低音量\nSoundSet -1, MASTER\nSoundSet, -1,WAVE\nReturn\n```\n","source":"_posts/工具推荐-第一期-AutoHotKey.md","raw":"---\ntitle: 工具推荐-第一期-AutoHotKey\ndate: 2018-01-28 17:32:04\ntags:\n  - 工具推荐\n  - 工作效率\ncategories:\n  - 程序人生\ntype:\n  - 程序人生\n---\n最近发现一款高(neng)大(zhuang)上(bi)的神器-------AutoHotKey, 可以自定义Windows的快捷键, 可以使你彻底脱离鼠标, 这酸爽, 谁用谁知道.\n\n下载地址: [www.autohotkey.com](https://www.autohotkey.com/)\n中文帮助文档下载: [帮助文档](/files/AutoHotkey.chm)\n最后附上ChinaUnix博主xiaogangzgg写的教程: [AutoHotkey的几个入门级应用](http://blog.chinaunix.net/uid-26811377-id-3166486.html)\n\n## 入门教程\n\n### 创建第一个AHK脚本\n1. 在桌面或您选择的文件夹中右键点击空白处.\n2. 在菜单中, 选择 新建-> 文本文档.\n3. 输入文件名, 将`.txt`后缀修改成`.ahk`. 例如：Test.ahk。\n    若没有后缀,请参见[win10文件后缀名怎么显示](https://jingyan.baidu.com/article/ff42efa920b7f3c19e220283.html)\n4. 右键点击此文件并选择 Edit Script.\n6. 在新的空行中，输入下列内容：#space::Run www.google.com。\n\n在上面的语句行中, 首个字符 \"#\" 表示 Windows 键; 所以 #space 表示按住 Windows 键然后按下空格键来激活热键. 双冒号 :: 表示每次按下此热键时会执行其后续命令, 这里是转到 Google 网站. 要试用此脚本, 请继续下列操作:\n1. 保存并关闭此文件.\n2. 双击此文件来运行. 在任务栏通知区域会出现新的图标.\n3. 按住 Windows 键并按下空格键. 在默认浏览器中会打开网页.\n4. 要退出或编辑此脚本, 则在任务栏通知区域的绿色 \"H\" 图标上点击右键.\n\n注意:\n- 多个脚本可以同时运行, 其中的每个脚本在任务栏通知区域使用自己的图标.\n- 每个脚本可以包含多个[热键]和[热字串].\n- 要让您的脚本在启动计算机时自动运行, 请在开始菜单的启动文件夹中给您的脚本创建快捷方式.\n\n<font color='red'>**[热键]和[热字串]对照表请参见文档**</font>\n\n## 以下是本人常用的一些脚本(不定期更新)\n### 1.调节音量\n虽然Windows已经有默认的音量调节按钮, 但是总觉得不爽, 特别是光线比较暗的时候,几乎找不到好吗(没有背光键盘的平民程序员), 下面附上脚本\n```\n;调节音量\n!Right::SoundSet, +1,, mute ;Alt + 右方向键 开关声音\n!Up::                       ;Alt + 上方向键 增加音量 SoundSet +1 中的 `+1`代表每次按键的精度\nSoundSet +1, MASTER\nSoundSet, +1, WAVE\nReturn\n!Down::                     ;Alt + 下方向键 降低音量\nSoundSet -1, MASTER\nSoundSet, -1,WAVE\nReturn\n```\n","slug":"工具推荐-第一期-AutoHotKey","published":1,"updated":"2018-01-28T10:25:06.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m06s001zq8kxc8nmgzq4","content":"<p>最近发现一款高(neng)大(zhuang)上(bi)的神器——-AutoHotKey, 可以自定义Windows的快捷键, 可以使你彻底脱离鼠标, 这酸爽, 谁用谁知道.</p>\n<p>下载地址: <a href=\"https://www.autohotkey.com/\" target=\"_blank\" rel=\"noopener\">www.autohotkey.com</a><br>中文帮助文档下载: <a href=\"/files/AutoHotkey.chm\">帮助文档</a><br>最后附上ChinaUnix博主xiaogangzgg写的教程: <a href=\"http://blog.chinaunix.net/uid-26811377-id-3166486.html\" target=\"_blank\" rel=\"noopener\">AutoHotkey的几个入门级应用</a></p>\n<h2 id=\"入门教程\"><a href=\"#入门教程\" class=\"headerlink\" title=\"入门教程\"></a>入门教程</h2><h3 id=\"创建第一个AHK脚本\"><a href=\"#创建第一个AHK脚本\" class=\"headerlink\" title=\"创建第一个AHK脚本\"></a>创建第一个AHK脚本</h3><ol>\n<li>在桌面或您选择的文件夹中右键点击空白处.</li>\n<li>在菜单中, 选择 新建-&gt; 文本文档.</li>\n<li>输入文件名, 将<code>.txt</code>后缀修改成<code>.ahk</code>. 例如：Test.ahk。<br> 若没有后缀,请参见<a href=\"https://jingyan.baidu.com/article/ff42efa920b7f3c19e220283.html\" target=\"_blank\" rel=\"noopener\">win10文件后缀名怎么显示</a></li>\n<li>右键点击此文件并选择 Edit Script.</li>\n<li>在新的空行中，输入下列内容：#space::Run www.google.com。</li>\n</ol>\n<p>在上面的语句行中, 首个字符 “#” 表示 Windows 键; 所以 #space 表示按住 Windows 键然后按下空格键来激活热键. 双冒号 :: 表示每次按下此热键时会执行其后续命令, 这里是转到 Google 网站. 要试用此脚本, 请继续下列操作:</p>\n<ol>\n<li>保存并关闭此文件.</li>\n<li>双击此文件来运行. 在任务栏通知区域会出现新的图标.</li>\n<li>按住 Windows 键并按下空格键. 在默认浏览器中会打开网页.</li>\n<li>要退出或编辑此脚本, 则在任务栏通知区域的绿色 “H” 图标上点击右键.</li>\n</ol>\n<p>注意:</p>\n<ul>\n<li>多个脚本可以同时运行, 其中的每个脚本在任务栏通知区域使用自己的图标.</li>\n<li>每个脚本可以包含多个[热键]和[热字串].</li>\n<li>要让您的脚本在启动计算机时自动运行, 请在开始菜单的启动文件夹中给您的脚本创建快捷方式.</li>\n</ul>\n<font color=\"red\"><strong>[热键]和[热字串]对照表请参见文档</strong></font>\n\n<h2 id=\"以下是本人常用的一些脚本-不定期更新\"><a href=\"#以下是本人常用的一些脚本-不定期更新\" class=\"headerlink\" title=\"以下是本人常用的一些脚本(不定期更新)\"></a>以下是本人常用的一些脚本(不定期更新)</h2><h3 id=\"1-调节音量\"><a href=\"#1-调节音量\" class=\"headerlink\" title=\"1.调节音量\"></a>1.调节音量</h3><p>虽然Windows已经有默认的音量调节按钮, 但是总觉得不爽, 特别是光线比较暗的时候,几乎找不到好吗(没有背光键盘的平民程序员), 下面附上脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;调节音量</span><br><span class=\"line\">!Right::SoundSet, +1,, mute ;Alt + 右方向键 开关声音</span><br><span class=\"line\">!Up::                       ;Alt + 上方向键 增加音量 SoundSet +1 中的 `+1`代表每次按键的精度</span><br><span class=\"line\">SoundSet +1, MASTER</span><br><span class=\"line\">SoundSet, +1, WAVE</span><br><span class=\"line\">Return</span><br><span class=\"line\">!Down::                     ;Alt + 下方向键 降低音量</span><br><span class=\"line\">SoundSet -1, MASTER</span><br><span class=\"line\">SoundSet, -1,WAVE</span><br><span class=\"line\">Return</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近发现一款高(neng)大(zhuang)上(bi)的神器——-AutoHotKey, 可以自定义Windows的快捷键, 可以使你彻底脱离鼠标, 这酸爽, 谁用谁知道.</p>\n<p>下载地址: <a href=\"https://www.autohotkey.com/\" target=\"_blank\" rel=\"noopener\">www.autohotkey.com</a><br>中文帮助文档下载: <a href=\"/files/AutoHotkey.chm\">帮助文档</a><br>最后附上ChinaUnix博主xiaogangzgg写的教程: <a href=\"http://blog.chinaunix.net/uid-26811377-id-3166486.html\" target=\"_blank\" rel=\"noopener\">AutoHotkey的几个入门级应用</a></p>\n<h2 id=\"入门教程\"><a href=\"#入门教程\" class=\"headerlink\" title=\"入门教程\"></a>入门教程</h2><h3 id=\"创建第一个AHK脚本\"><a href=\"#创建第一个AHK脚本\" class=\"headerlink\" title=\"创建第一个AHK脚本\"></a>创建第一个AHK脚本</h3><ol>\n<li>在桌面或您选择的文件夹中右键点击空白处.</li>\n<li>在菜单中, 选择 新建-&gt; 文本文档.</li>\n<li>输入文件名, 将<code>.txt</code>后缀修改成<code>.ahk</code>. 例如：Test.ahk。<br> 若没有后缀,请参见<a href=\"https://jingyan.baidu.com/article/ff42efa920b7f3c19e220283.html\" target=\"_blank\" rel=\"noopener\">win10文件后缀名怎么显示</a></li>\n<li>右键点击此文件并选择 Edit Script.</li>\n<li>在新的空行中，输入下列内容：#space::Run www.google.com。</li>\n</ol>\n<p>在上面的语句行中, 首个字符 “#” 表示 Windows 键; 所以 #space 表示按住 Windows 键然后按下空格键来激活热键. 双冒号 :: 表示每次按下此热键时会执行其后续命令, 这里是转到 Google 网站. 要试用此脚本, 请继续下列操作:</p>\n<ol>\n<li>保存并关闭此文件.</li>\n<li>双击此文件来运行. 在任务栏通知区域会出现新的图标.</li>\n<li>按住 Windows 键并按下空格键. 在默认浏览器中会打开网页.</li>\n<li>要退出或编辑此脚本, 则在任务栏通知区域的绿色 “H” 图标上点击右键.</li>\n</ol>\n<p>注意:</p>\n<ul>\n<li>多个脚本可以同时运行, 其中的每个脚本在任务栏通知区域使用自己的图标.</li>\n<li>每个脚本可以包含多个[热键]和[热字串].</li>\n<li>要让您的脚本在启动计算机时自动运行, 请在开始菜单的启动文件夹中给您的脚本创建快捷方式.</li>\n</ul>\n<font color=\"red\"><strong>[热键]和[热字串]对照表请参见文档</strong></font>\n\n<h2 id=\"以下是本人常用的一些脚本-不定期更新\"><a href=\"#以下是本人常用的一些脚本-不定期更新\" class=\"headerlink\" title=\"以下是本人常用的一些脚本(不定期更新)\"></a>以下是本人常用的一些脚本(不定期更新)</h2><h3 id=\"1-调节音量\"><a href=\"#1-调节音量\" class=\"headerlink\" title=\"1.调节音量\"></a>1.调节音量</h3><p>虽然Windows已经有默认的音量调节按钮, 但是总觉得不爽, 特别是光线比较暗的时候,几乎找不到好吗(没有背光键盘的平民程序员), 下面附上脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;调节音量</span><br><span class=\"line\">!Right::SoundSet, +1,, mute ;Alt + 右方向键 开关声音</span><br><span class=\"line\">!Up::                       ;Alt + 上方向键 增加音量 SoundSet +1 中的 `+1`代表每次按键的精度</span><br><span class=\"line\">SoundSet +1, MASTER</span><br><span class=\"line\">SoundSet, +1, WAVE</span><br><span class=\"line\">Return</span><br><span class=\"line\">!Down::                     ;Alt + 下方向键 降低音量</span><br><span class=\"line\">SoundSet -1, MASTER</span><br><span class=\"line\">SoundSet, -1,WAVE</span><br><span class=\"line\">Return</span><br></pre></td></tr></table></figure></p>\n"},{"title":"微信跳一跳高分攻(外)略(挂)","date":"2018-01-02T05:39:35.000Z","type":["Python"],"_content":"\n最近看微信的跳一跳特别火, 作为一名程序员, 感觉有必要运用一下自己的专(找)业(挂)知(能)识(力), 搞一个高分外挂.\n具体流程请参考[传送门](https://github.com/wavejoker/wechat_jump_game), 本文只介绍环境搭建过程;\n## Python\n笔者只用过 3.6 其他版本, 推荐使用\n","source":"_posts/微信跳一跳高分攻-外-略-挂.md","raw":"---\ntitle: 微信跳一跳高分攻(外)略(挂)\ndate: 2018-01-02 13:39:35\ntags:\n  - Android\n  - Python\ncategories:\n  - Python\n  - 外挂\ntype:\n  - Python\n---\n\n最近看微信的跳一跳特别火, 作为一名程序员, 感觉有必要运用一下自己的专(找)业(挂)知(能)识(力), 搞一个高分外挂.\n具体流程请参考[传送门](https://github.com/wavejoker/wechat_jump_game), 本文只介绍环境搭建过程;\n## Python\n笔者只用过 3.6 其他版本, 推荐使用\n","slug":"微信跳一跳高分攻-外-略-挂","published":1,"updated":"2018-01-02T05:58:26.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m0dy002xq8kxciikilxy","content":"<p>最近看微信的跳一跳特别火, 作为一名程序员, 感觉有必要运用一下自己的专(找)业(挂)知(能)识(力), 搞一个高分外挂.<br>具体流程请参考<a href=\"https://github.com/wavejoker/wechat_jump_game\" target=\"_blank\" rel=\"noopener\">传送门</a>, 本文只介绍环境搭建过程;</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>笔者只用过 3.6 其他版本, 推荐使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近看微信的跳一跳特别火, 作为一名程序员, 感觉有必要运用一下自己的专(找)业(挂)知(能)识(力), 搞一个高分外挂.<br>具体流程请参考<a href=\"https://github.com/wavejoker/wechat_jump_game\" target=\"_blank\" rel=\"noopener\">传送门</a>, 本文只介绍环境搭建过程;</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>笔者只用过 3.6 其他版本, 推荐使用</p>\n"},{"title":"记一次Redis连接用尽异常解决","date":"2017-12-01T03:04:30.000Z","type":["Redis","Jedis"],"_content":"\n> 不知怎么突然jedis出现 \"Could not get a resource from the pool\" 错误,错误原因是连接池中的链接用尽\n\n## 解决方法:\n\n```\nredis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  \n    at redis.clients.util.Pool.getResource(Pool.java:22)  \n    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  \n    at java.lang.Thread.run(Thread.java:662)  \nCaused by: java.util.NoSuchElementException: Timeout waiting for idle object  \n    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  \n    at redis.clients.util.Pool.getResource(Pool.java:20)  \n    ... 2 more\n```\n<!--more-->\n### 增加 Jedis 的活动连接数:\n\n\n```\n<bean id=\"jedisPoolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n\t\t<!-- 最大连接数 -->\n\t\t<property name=\"maxTotal\" value=\"300\" />\n\t\t<!-- 最大空闲连接数 -->\n\t\t<property name=\"maxIdle\" value=\"50\" />\n\t\t<!-- 每次释放连接的最大数目 -->\n\t\t<property name=\"numTestsPerEvictionRun\" value=\"1024\" />\n\t\t<!-- 释放连接的扫描间隔（毫秒） -->\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"30000\" />\n\t\t<!-- 连接最小空闲时间 -->\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"1800000\" />\n\t\t<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->\n\t\t<property name=\"softMinEvictableIdleTimeMillis\" value=\"10000\" />\n\t\t<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->\n\t\t<property name=\"maxWaitMillis\" value=\"1500\" />\n\t\t<!-- 在获取连接的时候检查有效性, 默认false -->\n\t\t<property name=\"testOnBorrow\" value=\"true\" />\n\t\t<!-- 在空闲时检查有效性, 默认false -->\n\t\t<property name=\"testWhileIdle\" value=\"true\" />\n\t\t<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->\n\t\t<property name=\"blockWhenExhausted\" value=\"false\" />\n\t</bean>\n```\n### 将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.\n\n- 使用 **jedis.close();** 释放资源后问题解决, 修改前的代码:\n```\npublic String get(String key) {\n     Jedis jedis = jedisPool.getResource();\n     String get = jedis.get(key);\n     return get;\n }\n```\n修改后的代码:\n```\npublic String get(String key) {\n     Jedis jedis = jedisPool.getResource();\n     String get = jedis.get(key);\n     jedis.close();\n     return get;\n }\n```\n","source":"_posts/记一次Redis连接用尽异常解决.md","raw":"---\ntitle: 记一次Redis连接用尽异常解决\ndate: 2017-12-01 11:04:30\ntags:\n  - Redis\n  - Java\n  - Jedis\ncategories:\n  - Exception\n\ntype:\n  - Redis\n  - Jedis\n---\n\n> 不知怎么突然jedis出现 \"Could not get a resource from the pool\" 错误,错误原因是连接池中的链接用尽\n\n## 解决方法:\n\n```\nredis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  \n    at redis.clients.util.Pool.getResource(Pool.java:22)  \n    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  \n    at java.lang.Thread.run(Thread.java:662)  \nCaused by: java.util.NoSuchElementException: Timeout waiting for idle object  \n    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  \n    at redis.clients.util.Pool.getResource(Pool.java:20)  \n    ... 2 more\n```\n<!--more-->\n### 增加 Jedis 的活动连接数:\n\n\n```\n<bean id=\"jedisPoolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n\t\t<!-- 最大连接数 -->\n\t\t<property name=\"maxTotal\" value=\"300\" />\n\t\t<!-- 最大空闲连接数 -->\n\t\t<property name=\"maxIdle\" value=\"50\" />\n\t\t<!-- 每次释放连接的最大数目 -->\n\t\t<property name=\"numTestsPerEvictionRun\" value=\"1024\" />\n\t\t<!-- 释放连接的扫描间隔（毫秒） -->\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"30000\" />\n\t\t<!-- 连接最小空闲时间 -->\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"1800000\" />\n\t\t<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->\n\t\t<property name=\"softMinEvictableIdleTimeMillis\" value=\"10000\" />\n\t\t<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->\n\t\t<property name=\"maxWaitMillis\" value=\"1500\" />\n\t\t<!-- 在获取连接的时候检查有效性, 默认false -->\n\t\t<property name=\"testOnBorrow\" value=\"true\" />\n\t\t<!-- 在空闲时检查有效性, 默认false -->\n\t\t<property name=\"testWhileIdle\" value=\"true\" />\n\t\t<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->\n\t\t<property name=\"blockWhenExhausted\" value=\"false\" />\n\t</bean>\n```\n### 将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.\n\n- 使用 **jedis.close();** 释放资源后问题解决, 修改前的代码:\n```\npublic String get(String key) {\n     Jedis jedis = jedisPool.getResource();\n     String get = jedis.get(key);\n     return get;\n }\n```\n修改后的代码:\n```\npublic String get(String key) {\n     Jedis jedis = jedisPool.getResource();\n     String get = jedis.get(key);\n     jedis.close();\n     return get;\n }\n```\n","slug":"记一次Redis连接用尽异常解决","published":1,"updated":"2018-01-22T09:45:56.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd15m0e3002zq8kxyuq228tp","content":"<blockquote>\n<p>不知怎么突然jedis出现 “Could not get a resource from the pool” 错误,错误原因是连接池中的链接用尽</p>\n</blockquote>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  </span><br><span class=\"line\">    at redis.clients.util.Pool.getResource(Pool.java:22)  </span><br><span class=\"line\">    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  </span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:662)  </span><br><span class=\"line\">Caused by: java.util.NoSuchElementException: Timeout waiting for idle object  </span><br><span class=\"line\">    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  </span><br><span class=\"line\">    at redis.clients.util.Pool.getResource(Pool.java:20)  </span><br><span class=\"line\">    ... 2 more</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"增加-Jedis-的活动连接数\"><a href=\"#增加-Jedis-的活动连接数\" class=\"headerlink\" title=\"增加 Jedis 的活动连接数:\"></a>增加 Jedis 的活动连接数:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;jedisPoolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 最大连接数 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxTotal&quot; value=&quot;300&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 最大空闲连接数 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxIdle&quot; value=&quot;50&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 每次释放连接的最大数目 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;1024&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;30000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接最小空闲时间 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;1800000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;softMinEvictableIdleTimeMillis&quot; value=&quot;10000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxWaitMillis&quot; value=&quot;1500&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testOnBorrow&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;blockWhenExhausted&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放\"><a href=\"#将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放\" class=\"headerlink\" title=\"将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.\"></a>将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.</h3><ul>\n<li>使用 <strong>jedis.close();</strong> 释放资源后问题解决, 修改前的代码:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String get(String key) &#123;</span><br><span class=\"line\">     Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">     String get = jedis.get(key);</span><br><span class=\"line\">     return get;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改后的代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String get(String key) &#123;</span><br><span class=\"line\">     Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">     String get = jedis.get(key);</span><br><span class=\"line\">     jedis.close();</span><br><span class=\"line\">     return get;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>不知怎么突然jedis出现 “Could not get a resource from the pool” 错误,错误原因是连接池中的链接用尽</p>\n</blockquote>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  </span><br><span class=\"line\">    at redis.clients.util.Pool.getResource(Pool.java:22)  </span><br><span class=\"line\">    at com.derbysoft.jredis.longkeytest.BorrowObject.run(BorrowObject.java:22)  </span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:662)  </span><br><span class=\"line\">Caused by: java.util.NoSuchElementException: Timeout waiting for idle object  </span><br><span class=\"line\">    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1134)  </span><br><span class=\"line\">    at redis.clients.util.Pool.getResource(Pool.java:20)  </span><br><span class=\"line\">    ... 2 more</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"增加-Jedis-的活动连接数\"><a href=\"#增加-Jedis-的活动连接数\" class=\"headerlink\" title=\"增加 Jedis 的活动连接数:\"></a>增加 Jedis 的活动连接数:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;jedisPoolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 最大连接数 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxTotal&quot; value=&quot;300&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 最大空闲连接数 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxIdle&quot; value=&quot;50&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 每次释放连接的最大数目 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;1024&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;30000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接最小空闲时间 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;1800000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;softMinEvictableIdleTimeMillis&quot; value=&quot;10000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxWaitMillis&quot; value=&quot;1500&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testOnBorrow&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;blockWhenExhausted&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放\"><a href=\"#将最大连接数增加到-300-但是错误仍然出现-检查代码发现-连接用完后并没有释放\" class=\"headerlink\" title=\"将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.\"></a>将最大连接数增加到 300, 但是错误仍然出现, 检查代码发现, 连接用完后并没有释放.</h3><ul>\n<li>使用 <strong>jedis.close();</strong> 释放资源后问题解决, 修改前的代码:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String get(String key) &#123;</span><br><span class=\"line\">     Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">     String get = jedis.get(key);</span><br><span class=\"line\">     return get;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改后的代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String get(String key) &#123;</span><br><span class=\"line\">     Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">     String get = jedis.get(key);</span><br><span class=\"line\">     jedis.close();</span><br><span class=\"line\">     return get;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjd15m04s0000q8kxyt8enpw5","category_id":"cjd15m0520002q8kx0f2h7qij","_id":"cjd15m05j000cq8kx1p8unyg1"},{"post_id":"cjd15m05e000aq8kxhb77fhkp","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m05r000jq8kx4ei1g560"},{"post_id":"cjd15m04z0001q8kxfsaxsdsk","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m05v000oq8kxf1gpvkvg"},{"post_id":"cjd15m05h000bq8kxdt2tcodf","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m05x000rq8kx36q68az9"},{"post_id":"cjd15m05m000gq8kxj4veifuz","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m061000wq8kx8w1p74m8"},{"post_id":"cjd15m0550004q8kxjj37u5yy","category_id":"cjd15m05j000dq8kxwt9rdf43","_id":"cjd15m063000zq8kxnci8hq2k"},{"post_id":"cjd15m05o000iq8kx7to5y6py","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m0660013q8kxc3qcjxqn"},{"post_id":"cjd15m05t000nq8kx3b3wg6bf","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m0690016q8kx88uoqenz"},{"post_id":"cjd15m0590005q8kx6j17jr77","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m06b0019q8kx8z5yfx3o"},{"post_id":"cjd15m05w000qq8kxg798ys67","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m06e001eq8kxi8mh3pwp"},{"post_id":"cjd15m05z000vq8kxcwts8v1k","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m06g001hq8kxtupa25b8"},{"post_id":"cjd15m05b0006q8kxymzpf3vl","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m06i001mq8kxpoe4bynx"},{"post_id":"cjd15m062000yq8kxwo5e1bk9","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m06m001pq8kx4sgilqzd"},{"post_id":"cjd15m0650012q8kxjgtfw822","category_id":"cjd15m05d0007q8kxg6ykoxix","_id":"cjd15m06p001uq8kxrx2b4gjb"},{"post_id":"cjd15m06g001jq8kx7i3lavw7","category_id":"cjd15m05j000dq8kxwt9rdf43","_id":"cjd15m06r001xq8kxa2tfb7kr"},{"post_id":"cjd15m06q001wq8kx70b3hup2","category_id":"cjd15m05j000dq8kxwt9rdf43","_id":"cjd15m06v0024q8kxgpl5ycvm"},{"post_id":"cjd15m06e001gq8kxlriqbfgs","category_id":"cjd15m06c001aq8kxa48i29dj","_id":"cjd15m06y002aq8kx9duyhmot"},{"post_id":"cjd15m06e001gq8kxlriqbfgs","category_id":"cjd15m06t0020q8kx28p4e39u","_id":"cjd15m070002dq8kxioznmbry"},{"post_id":"cjd15m0680015q8kxv1slu0md","category_id":"cjd15m06c001aq8kxa48i29dj","_id":"cjd15m072002gq8kx9asens9m"},{"post_id":"cjd15m0680015q8kxv1slu0md","category_id":"cjd15m06t0020q8kx28p4e39u","_id":"cjd15m074002jq8kxe6e92aqi"},{"post_id":"cjd15m06a0018q8kxenzsvybw","category_id":"cjd15m06c001aq8kxa48i29dj","_id":"cjd15m075002mq8kx9o0qsgzk"},{"post_id":"cjd15m06a0018q8kxenzsvybw","category_id":"cjd15m06t0020q8kx28p4e39u","_id":"cjd15m076002oq8kxvoa0ui6j"},{"post_id":"cjd15m06d001dq8kxqmkr060w","category_id":"cjd15m06c001aq8kxa48i29dj","_id":"cjd15m076002qq8kxcsyzdat2"},{"post_id":"cjd15m06d001dq8kxqmkr060w","category_id":"cjd15m06t0020q8kx28p4e39u","_id":"cjd15m077002tq8kx1ic9rwxu"},{"post_id":"cjd15m06s001zq8kxc8nmgzq4","category_id":"cjd15m074002lq8kxnkqm6yo1","_id":"cjd15m078002uq8kx9owbn2yh"},{"post_id":"cjd15m0e3002zq8kxyuq228tp","category_id":"cjd15m05j000dq8kxwt9rdf43","_id":"cjd15m0ec0035q8kxunlr91yh"},{"post_id":"cjd15m0dy002xq8kxciikilxy","category_id":"cjd15m0e70031q8kx8ote7l4r","_id":"cjd15m0ei003dq8kx72sk8xdk"},{"post_id":"cjd15m0dy002xq8kxciikilxy","category_id":"cjd15m0ee0038q8kxi7sjyajg","_id":"cjd15m0ei003eq8kx3uzo6tl0"}],"PostTag":[{"post_id":"cjd15m04s0000q8kxyt8enpw5","tag_id":"cjd15m0540003q8kxq36avim2","_id":"cjd15m05e0009q8kxvnpzxkr8"},{"post_id":"cjd15m05e000aq8kxhb77fhkp","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m05l000fq8kxnwh4mxhv"},{"post_id":"cjd15m04z0001q8kxfsaxsdsk","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m05o000hq8kxdiyqc78z"},{"post_id":"cjd15m05h000bq8kxdt2tcodf","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m05s000mq8kxy2x37xu2"},{"post_id":"cjd15m05m000gq8kxj4veifuz","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m05v000pq8kxeyud3ozo"},{"post_id":"cjd15m05o000iq8kx7to5y6py","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m05y000uq8kxwqun3pie"},{"post_id":"cjd15m05t000nq8kx3b3wg6bf","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m061000xq8kxg8jkbuia"},{"post_id":"cjd15m0550004q8kxjj37u5yy","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m0640011q8kx203t2v7b"},{"post_id":"cjd15m0550004q8kxjj37u5yy","tag_id":"cjd15m05r000kq8kx1baiti4v","_id":"cjd15m0670014q8kxm1q58y0j"},{"post_id":"cjd15m05w000qq8kxg798ys67","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m06a0017q8kxlga9i33p"},{"post_id":"cjd15m05z000vq8kxcwts8v1k","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m06c001cq8kx6splpxll"},{"post_id":"cjd15m0590005q8kx6j17jr77","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m06e001fq8kxxhzgxt11"},{"post_id":"cjd15m062000yq8kxwo5e1bk9","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m06g001iq8kxcjic8gh4"},{"post_id":"cjd15m0650012q8kxjgtfw822","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m06k001nq8kxfz68v2bz"},{"post_id":"cjd15m05b0006q8kxymzpf3vl","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m06n001qq8kxrr873x66"},{"post_id":"cjd15m06e001gq8kxlriqbfgs","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m06q001vq8kxp4osggn5"},{"post_id":"cjd15m06e001gq8kxlriqbfgs","tag_id":"cjd15m06c001bq8kx901lkqsx","_id":"cjd15m06s001yq8kxor3mvf8z"},{"post_id":"cjd15m0680015q8kxv1slu0md","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m06v0022q8kxngf86tln"},{"post_id":"cjd15m0680015q8kxv1slu0md","tag_id":"cjd15m06c001bq8kx901lkqsx","_id":"cjd15m06v0023q8kxjfs3thpq"},{"post_id":"cjd15m06a0018q8kxenzsvybw","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m06x0027q8kxm39hacqm"},{"post_id":"cjd15m06a0018q8kxenzsvybw","tag_id":"cjd15m06c001bq8kx901lkqsx","_id":"cjd15m06x0028q8kx2isa6uj1"},{"post_id":"cjd15m06d001dq8kxqmkr060w","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m070002cq8kxkwdu9bb4"},{"post_id":"cjd15m06d001dq8kxqmkr060w","tag_id":"cjd15m06c001bq8kx901lkqsx","_id":"cjd15m071002eq8kxru15goi3"},{"post_id":"cjd15m06g001jq8kx7i3lavw7","tag_id":"cjd15m06u0021q8kxova1zcef","_id":"cjd15m072002iq8kxyp6sorfi"},{"post_id":"cjd15m06n001rq8kxjajokf4v","tag_id":"cjd15m06w0026q8kxcsks04sj","_id":"cjd15m074002kq8kx5xtpugy8"},{"post_id":"cjd15m06q001wq8kx70b3hup2","tag_id":"cjd15m06y002bq8kx89tc1p0q","_id":"cjd15m076002pq8kxsetl9h3r"},{"post_id":"cjd15m06q001wq8kx70b3hup2","tag_id":"cjd15m06u0021q8kxova1zcef","_id":"cjd15m077002rq8kx9hkl755i"},{"post_id":"cjd15m06s001zq8kxc8nmgzq4","tag_id":"cjd15m075002nq8kx0s75y7cm","_id":"cjd15m079002vq8kx8hagzdeq"},{"post_id":"cjd15m06s001zq8kxc8nmgzq4","tag_id":"cjd15m077002sq8kx4tqc94mw","_id":"cjd15m079002wq8kx38ihzip8"},{"post_id":"cjd15m0dy002xq8kxciikilxy","tag_id":"cjd15m0e80032q8kxx5va2ugv","_id":"cjd15m0eg003aq8kx9wh9dp2v"},{"post_id":"cjd15m0dy002xq8kxciikilxy","tag_id":"cjd15m0ec0036q8kx6zseapuv","_id":"cjd15m0eh003bq8kxis0y0kaf"},{"post_id":"cjd15m0e3002zq8kxyuq228tp","tag_id":"cjd15m0ef0039q8kxvtqf42ol","_id":"cjd15m0ej003fq8kxcslawbn3"},{"post_id":"cjd15m0e3002zq8kxyuq228tp","tag_id":"cjd15m05d0008q8kxjyc0ps5p","_id":"cjd15m0ej003gq8kxlb4uptxm"},{"post_id":"cjd15m0e3002zq8kxyuq228tp","tag_id":"cjd15m0eh003cq8kxtgejsyjq","_id":"cjd15m0ej003hq8kxu29le7pn"}],"Tag":[{"name":"Blog","_id":"cjd15m0540003q8kxq36avim2"},{"name":"Java","_id":"cjd15m05d0008q8kxjyc0ps5p"},{"name":"FTP","_id":"cjd15m05r000kq8kx1baiti4v"},{"name":"设计模式","_id":"cjd15m06c001bq8kx901lkqsx"},{"name":"Exception","_id":"cjd15m06u0021q8kxova1zcef"},{"name":"Welcome","_id":"cjd15m06w0026q8kxcsks04sj"},{"name":"Spring","_id":"cjd15m06y002bq8kx89tc1p0q"},{"name":"工具推荐","_id":"cjd15m075002nq8kx0s75y7cm"},{"name":"工作效率","_id":"cjd15m077002sq8kx4tqc94mw"},{"name":"Android","_id":"cjd15m0e80032q8kxx5va2ugv"},{"name":"Python","_id":"cjd15m0ec0036q8kx6zseapuv"},{"name":"Redis","_id":"cjd15m0ef0039q8kxvtqf42ol"},{"name":"Jedis","_id":"cjd15m0eh003cq8kxtgejsyjq"}]}}